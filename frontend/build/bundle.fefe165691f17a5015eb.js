!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:r})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=176)}([function(n,t,e){var r=e(3),o=e(29),i=e(17),a=e(18),l=e(25),u=function(n,t,e){var c,s,f,p,d=n&u.F,m=n&u.G,h=n&u.S,b=n&u.P,g=n&u.B,v=m?r:h?r[t]||(r[t]={}):(r[t]||{}).prototype,y=m?o:o[t]||(o[t]={}),x=y.prototype||(y.prototype={});for(c in m&&(e=t),e)f=((s=!d&&v&&void 0!==v[c])?v:e)[c],p=g&&s?l(f,r):b&&"function"==typeof f?l(Function.call,f):f,v&&a(v,c,f,n&u.U),y[c]!=f&&i(y,c,p),b&&x[c]!=f&&(x[c]=f)};r.core=o,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,n.exports=u},function(n,t,e){"use strict";n.exports=e(380)},function(n,t,e){var r=e(5);n.exports=function(n){if(!r(n))throw TypeError(n+" is not an object!");return n}},function(n,t){var e=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(n,t){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,t){n.exports=function(n){return"object"==typeof n?null!==n:"function"==typeof n}},function(n,t,e){var r=e(67)("wks"),o=e(44),i=e(3).Symbol,a="function"==typeof i;(n.exports=function(n){return r[n]||(r[n]=a&&i[n]||(a?i:o)("Symbol."+n))}).store=r},function(n,t,e){n.exports=!e(4)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(n,t,e){var r=e(2),o=e(121),i=e(30),a=Object.defineProperty;t.f=e(7)?Object.defineProperty:function(n,t,e){if(r(n),t=i(t,!0),r(e),o)try{return a(n,t,e)}catch(n){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(n[t]=e.value),n}},function(n,t,e){var r=e(32),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,t,e){n.exports=e(395)()},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),e.d(t,"propTypes",function(){return M}),e.d(t,"PropTypes",function(){return M}),e.d(t,"onError",function(){return an}),e.d(t,"observer",function(){return Q}),e.d(t,"Observer",function(){return Z}),e.d(t,"renderReporter",function(){return V}),e.d(t,"componentByNodeRegistery",function(){return B}),e.d(t,"trackComponents",function(){return $}),e.d(t,"useStaticRendering",function(){return q}),e.d(t,"Provider",function(){return on}),e.d(t,"inject",function(){return U});var r=e(35),o=e(1),i=e.n(o),a=e(113),l=(e.n(a),"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n}),u=(function(){function n(n){this.value=n}function t(t){var e,r;function o(e,r){try{var a=t[e](r),l=a.value;l instanceof n?Promise.resolve(l.value).then(function(n){o("next",n)},function(n){o("throw",n)}):i(a.done?"return":"normal",a.value)}catch(n){i("throw",n)}}function i(n,t){switch(n){case"return":e.resolve({value:t,done:!0});break;case"throw":e.reject(t);break;default:e.resolve({value:t,done:!1})}(e=e.next)?o(e.key,e.arg):r=null}this._invoke=function(n,t){return new Promise(function(i,a){var l={key:n,arg:t,resolve:i,reject:a,next:null};r?r=r.next=l:(e=r=l,o(n,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(n){return this._invoke("next",n)},t.prototype.throw=function(n){return this._invoke("throw",n)},t.prototype.return=function(n){return this._invoke("return",n)}}(),function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}),c=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),s=function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)},f=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t},p=function(){function n(){u(this,n),this.listeners=[]}return c(n,[{key:"on",value:function(n){var t=this;return this.listeners.push(n),function(){var e=t.listeners.indexOf(n);-1!==e&&t.listeners.splice(e,1)}}},{key:"emit",value:function(n){this.listeners.forEach(function(t){return t(n)})}}]),n}(),d={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},m={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},h=Object.defineProperty,b=Object.getOwnPropertyNames,g=Object.getOwnPropertySymbols,v=Object.getOwnPropertyDescriptor,y=Object.getPrototypeOf,x=y&&y(Object),w=function n(t,e,r){if("string"!=typeof e){if(x){var o=y(e);o&&o!==x&&n(t,o,r)}var i=b(e);g&&(i=i.concat(g(e)));for(var a=0;a<i.length;++a){var l=i[a];if(!(d[l]||m[l]||r&&r[l])){var u=v(e,l);try{h(t,l,u)}catch(n){}}}return t}return t};function k(n){function t(t,e,o,i,a,l){for(var u=arguments.length,c=Array(u>6?u-6:0),s=6;s<u;s++)c[s-6]=arguments[s];return Object(r.untracked)(function(){if(i=i||"<<anonymous>>",l=l||o,null==e[o]){if(t){var r=null===e[o]?"null":"undefined";return new Error("The "+a+" `"+l+"` is marked as required in `"+i+"`, but its value is `"+r+"`.")}return null}return n.apply(void 0,[e,o,i,a,l].concat(c))})}var e=t.bind(null,!1);return e.isRequired=t.bind(null,!0),e}function _(n){var t=void 0===n?"undefined":l(n);return Array.isArray(n)?"array":n instanceof RegExp?"object":function(n,t){return"symbol"===n||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,n)?"symbol":t}function O(n,t){return k(function(e,o,i,a,l){return Object(r.untracked)(function(){if(n&&_(e[o])===t.toLowerCase())return null;var a=void 0;switch(t){case"Array":a=r.isObservableArray;break;case"Object":a=r.isObservableObject;break;case"Map":a=r.isObservableMap;break;default:throw new Error("Unexpected mobxType: "+t)}var u=e[o];if(!a(u)){var c=function(n){var t=_(n);if("object"===t){if(n instanceof Date)return"date";if(n instanceof RegExp)return"regexp"}return t}(u),s=n?" or javascript `"+t.toLowerCase()+"`":"";return new Error("Invalid prop `"+l+"` of type `"+c+"` supplied to `"+i+"`, expected `mobx.Observable"+t+"`"+s+".")}return null})})}function E(n,t){return k(function(e,o,i,a,l){for(var u=arguments.length,c=Array(u>5?u-5:0),s=5;s<u;s++)c[s-5]=arguments[s];return Object(r.untracked)(function(){if("function"!=typeof t)return new Error("Property `"+l+"` of component `"+i+"` has invalid PropType notation.");var r=O(n,"Array")(e,o,i);if(r instanceof Error)return r;for(var u=e[o],s=0;s<u.length;s++)if((r=t.apply(void 0,[u,s,i,a,l+"["+s+"]"].concat(c)))instanceof Error)return r;return null})})}var S=O(!1,"Array"),j=E.bind(null,!1),P=O(!1,"Map"),C=O(!1,"Object"),T=O(!0,"Array"),I=E.bind(null,!0),R=O(!0,"Object"),M=Object.freeze({observableArray:S,observableArrayOf:j,observableMap:P,observableObject:C,arrayOrObservableArray:T,arrayOrObservableArrayOf:I,objectOrObservableObject:R});var A={mobxStores:R};Object.seal(A);var L={contextTypes:{get:function(){return A},set:function(n){console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`")},configurable:!0,enumerable:!1},isMobxInjector:{value:!0,writable:!0,configurable:!0,enumerable:!0}};function N(n,t,e){var r,i,a="inject-"+(t.displayName||t.name||t.constructor&&t.constructor.name||"Unknown");e&&(a+="-with-"+e);var l=(i=r=function(e){function r(){var n,t,e;u(this,r);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return t=e=f(this,(n=r.__proto__||Object.getPrototypeOf(r)).call.apply(n,[this].concat(i))),e.storeRef=function(n){e.wrappedInstance=n},f(e,t)}return s(r,e),c(r,[{key:"render",value:function(){var e={};for(var r in this.props)this.props.hasOwnProperty(r)&&(e[r]=this.props[r]);var i=n(this.context.mobxStores||{},e,this.context)||{};for(var a in i)e[a]=i[a];return function(n){return!(n.prototype&&n.prototype.render)}(t)||(e.ref=this.storeRef),Object(o.createElement)(t,e)}}]),r}(o.Component),r.displayName=a,i);return w(l,t),l.wrappedComponent=t,Object.defineProperties(l,L),l}function U(){var n=void 0;if("function"==typeof arguments[0])return n=arguments[0],function(t){var e=N(n,t);return e.isMobxInjector=!1,(e=Q(e)).isMobxInjector=!0,e};for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n=function(n){return function(t,e){return n.forEach(function(n){if(!(n in e)){if(!(n in t))throw new Error("MobX injector: Store '"+n+"' is not available! Make sure it is provided by some Provider");e[n]=t[n]}}),e}}(t),function(e){return N(n,e,t.join("-"))}}var D=!1,z=!1,F=!1,B="undefined"!=typeof WeakMap?new WeakMap:void 0,V=new p;function H(n){if(a.findDOMNode)try{return Object(a.findDOMNode)(n)}catch(n){return null}return null}function W(n){var t=H(n);t&&B&&B.set(t,n),V.emit({event:"render",renderTime:n.__$mobRenderEnd-n.__$mobRenderStart,totalTime:Date.now()-n.__$mobRenderStart,component:n,node:t})}function $(){if("undefined"==typeof WeakMap)throw new Error("[mobx-react] tracking components is not supported in this browser.");D||(D=!0)}function q(n){z=n}var K=new p;function G(n,t){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=n[t],o=J[t],i=r?!0===e?function(){o.apply(this,arguments),r.apply(this,arguments)}:function(){r.apply(this,arguments),o.apply(this,arguments)}:o;n[t]=i}function Y(n,t){if(X(n,t))return!0;if("object"!==(void 0===n?"undefined":l(n))||null===n||"object"!==(void 0===t?"undefined":l(t))||null===t)return!1;var e=Object.keys(n),r=Object.keys(t);if(e.length!==r.length)return!1;for(var o=0;o<e.length;o++)if(!hasOwnProperty.call(t,e[o])||!X(n[e[o]],t[e[o]]))return!1;return!0}function X(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}var J={componentWillMount:function(){var n=this;if(!0!==z){var t=this.displayName||this.name||this.constructor&&(this.constructor.displayName||this.constructor.name)||"<component>",e=this._reactInternalInstance&&this._reactInternalInstance._rootNodeID||this._reactInternalFiber&&this._reactInternalFiber._debugID,i=!1,a=!1;f.call(this,"props"),f.call(this,"state");var l=this.render.bind(this),u=null,c=!1,s=function(){c=!1;var t=void 0,e=void 0;if(u.track(function(){D&&(n.__$mobRenderStart=Date.now());try{e=Object(r._allowStateChanges)(!1,l)}catch(n){t=n}D&&(n.__$mobRenderEnd=Date.now())}),t)throw K.emit(t),t;return e};this.render=function(){return(u=new r.Reaction(t+"#"+e+".render()",function(){if(!c&&(c=!0,"function"==typeof n.componentWillReact&&n.componentWillReact(),!0!==n.__$mobxIsUnmounted)){var t=!0;try{a=!0,i||o.Component.prototype.forceUpdate.call(n),t=!1}finally{a=!1,t&&u.dispose()}}})).reactComponent=n,s.$mobx=u,n.render=s,s()}}function f(n){var t=this[n],e=Object(r.createAtom)("reactive "+n);Object.defineProperty(this,n,{configurable:!0,enumerable:!0,get:function(){return e.reportObserved(),t},set:function(n){a||Y(t,n)?t=n:(t=n,i=!0,e.reportChanged(),i=!1)}})}},componentWillUnmount:function(){if(!0!==z&&(this.render.$mobx&&this.render.$mobx.dispose(),this.__$mobxIsUnmounted=!0,D)){var n=H(this);n&&B&&B.delete(n),V.emit({event:"destroy",component:this,node:n})}},componentDidMount:function(){D&&W(this)},componentDidUpdate:function(){D&&W(this)},shouldComponentUpdate:function(n,t){return z&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!Y(this.props,n)}};function Q(n,t){if("string"==typeof n)throw new Error("Store names should be provided as array");if(Array.isArray(n))return F||(F=!0,console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`')),t?U.apply(null,n)(Q(t)):function(t){return Q(n,t)};var e,r,i=n;if(!0===i.isMobxInjector&&console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),!("function"!=typeof i||i.prototype&&i.prototype.render||i.isReactClass||o.Component.isPrototypeOf(i)))return Q((r=e=function(n){function t(){return u(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,n),c(t,[{key:"render",value:function(){return i.call(this,this.props,this.context)}}]),t}(o.Component),e.displayName=i.displayName||i.name,e.contextTypes=i.contextTypes,e.propTypes=i.propTypes,e.defaultProps=i.defaultProps,r));if(!i)throw new Error("Please pass a valid component to 'observer'");return function(n){G(n,"componentWillMount",!0),["componentDidMount","componentWillUnmount","componentDidUpdate"].forEach(function(t){G(n,t)}),n.shouldComponentUpdate||(n.shouldComponentUpdate=J.shouldComponentUpdate)}(i.prototype||i),i.isMobXReactObserver=!0,i}var Z=Q(function(n){var t=n.children,e=n.inject,r=n.render,o=t||r;if(void 0===o)return null;if(!e)return o();var a=U(e)(o);return i.a.createElement(a,null)});Z.displayName="Observer";var nn,tn,en=function(n,t,e,r,o){var i="children"===t?"render":"children";return"function"==typeof n[t]&&"function"==typeof n[i]?new Error("Invalid prop,do not use children and render in the same time in`"+e):"function"!=typeof n[t]&&"function"!=typeof n[i]?new Error("Invalid prop `"+o+"` of type `"+l(n[t])+"` supplied to `"+e+"`, expected `function`."):void 0};Z.propTypes={render:en,children:en};var rn={children:!0,key:!0,ref:!0},on=(tn=nn=function(n){function t(){return u(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,n),c(t,[{key:"render",value:function(){return o.Children.only(this.props.children)}},{key:"getChildContext",value:function(){var n={},t=this.context.mobxStores;if(t)for(var e in t)n[e]=t[e];for(var r in this.props)rn[r]||"suppressChangedStoreWarning"===r||(n[r]=this.props[r]);return{mobxStores:n}}},{key:"componentWillReceiveProps",value:function(n){if(Object.keys(n).length!==Object.keys(this.props).length&&console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children"),!n.suppressChangedStoreWarning)for(var t in n)rn[t]||this.props[t]===n[t]||console.warn("MobX Provider: Provided store '"+t+"' has changed. Please avoid replacing stores as the change might not propagate to all children")}}]),t}(o.Component),nn.contextTypes={mobxStores:R},nn.childContextTypes={mobxStores:R.isRequired},tn);if(!o.Component)throw new Error("mobx-react requires React to be available");if(!r.spy)throw new Error("mobx-react requires mobx to be available");"function"==typeof a.unstable_batchedUpdates&&Object(r.configure)({reactionScheduler:a.unstable_batchedUpdates});var an=function(n){return K.on(n)};if("object"===("undefined"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__?"undefined":l(__MOBX_DEVTOOLS_GLOBAL_HOOK__))){var ln={spy:r.spy,extras:{getDebugName:r.getDebugName}},un={renderReporter:V,componentByNodeRegistery:B,trackComponents:$};__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(un,ln)}},function(n,t,e){var r=e(31);n.exports=function(n){return Object(r(n))}},function(n,t,e){"use strict";var r=function(){};n.exports=r},function(n,t){n.exports=function(n){if("function"!=typeof n)throw TypeError(n+" is not a function!");return n}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=e(394);e.d(t,"BrowserRouter",function(){return r.a});var o=e(399);e.d(t,"HashRouter",function(){return o.a});var i=e(159);e.d(t,"Link",function(){return i.a});var a=e(401);e.d(t,"MemoryRouter",function(){return a.a});var l=e(404);e.d(t,"NavLink",function(){return l.a});var u=e(407);e.d(t,"Prompt",function(){return u.a});var c=e(409);e.d(t,"Redirect",function(){return c.a});var s=e(160);e.d(t,"Route",function(){return s.a});var f=e(116);e.d(t,"Router",function(){return f.a});var p=e(415);e.d(t,"StaticRouter",function(){return p.a});var d=e(417);e.d(t,"Switch",function(){return d.a});var m=e(419);e.d(t,"matchPath",function(){return m.a});var h=e(420);e.d(t,"withRouter",function(){return h.a})},function(n,t){var e={}.hasOwnProperty;n.exports=function(n,t){return e.call(n,t)}},function(n,t,e){var r=e(8),o=e(43);n.exports=e(7)?function(n,t,e){return r.f(n,t,o(1,e))}:function(n,t,e){return n[t]=e,n}},function(n,t,e){var r=e(3),o=e(17),i=e(16),a=e(44)("src"),l=Function.toString,u=(""+l).split("toString");e(29).inspectSource=function(n){return l.call(n)},(n.exports=function(n,t,e,l){var c="function"==typeof e;c&&(i(e,"name")||o(e,"name",t)),n[t]!==e&&(c&&(i(e,a)||o(e,a,n[t]?""+n[t]:u.join(String(t)))),n===r?n[t]=e:l?n[t]?n[t]=e:o(n,t,e):(delete n[t],o(n,t,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||l.call(this)})},function(n,t,e){var r=e(0),o=e(4),i=e(31),a=/"/g,l=function(n,t,e,r){var o=String(i(n)),l="<"+t;return""!==e&&(l+=" "+e+'="'+String(r).replace(a,"&quot;")+'"'),l+">"+o+"</"+t+">"};n.exports=function(n,t){var e={};e[n]=t(l),r(r.P+r.F*o(function(){var t=""[n]('"');return t!==t.toLowerCase()||t.split('"').length>3}),"String",e)}},function(n,t,e){var r=e(59),o=e(31);n.exports=function(n){return r(o(n))}},function(n,t,e){var r=e(60),o=e(43),i=e(20),a=e(30),l=e(16),u=e(121),c=Object.getOwnPropertyDescriptor;t.f=e(7)?c:function(n,t){if(n=i(n),t=a(t,!0),u)try{return c(n,t)}catch(n){}if(l(n,t))return o(!r.f.call(n,t),n[t])}},function(n,t,e){var r=e(16),o=e(12),i=e(88)("IE_PROTO"),a=Object.prototype;n.exports=Object.getPrototypeOf||function(n){return n=o(n),r(n,i)?n[i]:"function"==typeof n.constructor&&n instanceof n.constructor?n.constructor.prototype:n instanceof Object?a:null}},function(n,t,e){(function(n,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,a=200,l="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",c="__lodash_hash_undefined__",s=500,f="__lodash_placeholder__",p=1,d=2,m=4,h=1,b=2,g=1,v=2,y=4,x=8,w=16,k=32,_=64,O=128,E=256,S=512,j=30,P="...",C=800,T=16,I=1,R=2,M=1/0,A=9007199254740991,L=1.7976931348623157e308,N=NaN,U=4294967295,D=U-1,z=U>>>1,F=[["ary",O],["bind",g],["bindKey",v],["curry",x],["curryRight",w],["flip",S],["partial",k],["partialRight",_],["rearg",E]],B="[object Arguments]",V="[object Array]",H="[object AsyncFunction]",W="[object Boolean]",$="[object Date]",q="[object DOMException]",K="[object Error]",G="[object Function]",Y="[object GeneratorFunction]",X="[object Map]",J="[object Number]",Q="[object Null]",Z="[object Object]",nn="[object Proxy]",tn="[object RegExp]",en="[object Set]",rn="[object String]",on="[object Symbol]",an="[object Undefined]",ln="[object WeakMap]",un="[object WeakSet]",cn="[object ArrayBuffer]",sn="[object DataView]",fn="[object Float32Array]",pn="[object Float64Array]",dn="[object Int8Array]",mn="[object Int16Array]",hn="[object Int32Array]",bn="[object Uint8Array]",gn="[object Uint8ClampedArray]",vn="[object Uint16Array]",yn="[object Uint32Array]",xn=/\b__p \+= '';/g,wn=/\b(__p \+=) '' \+/g,kn=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_n=/&(?:amp|lt|gt|quot|#39);/g,On=/[&<>"']/g,En=RegExp(_n.source),Sn=RegExp(On.source),jn=/<%-([\s\S]+?)%>/g,Pn=/<%([\s\S]+?)%>/g,Cn=/<%=([\s\S]+?)%>/g,Tn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,In=/^\w*$/,Rn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Mn=/[\\^$.*+?()[\]{}|]/g,An=RegExp(Mn.source),Ln=/^\s+|\s+$/g,Nn=/^\s+/,Un=/\s+$/,Dn=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,zn=/\{\n\/\* \[wrapped with (.+)\] \*/,Fn=/,? & /,Bn=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Vn=/\\(\\)?/g,Hn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Wn=/\w*$/,$n=/^[-+]0x[0-9a-f]+$/i,qn=/^0b[01]+$/i,Kn=/^\[object .+?Constructor\]$/,Gn=/^0o[0-7]+$/i,Yn=/^(?:0|[1-9]\d*)$/,Xn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Jn=/($^)/,Qn=/['\n\r\u2028\u2029\\]/g,Zn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",nt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tt="[\\ud800-\\udfff]",et="["+nt+"]",rt="["+Zn+"]",ot="\\d+",it="[\\u2700-\\u27bf]",at="[a-z\\xdf-\\xf6\\xf8-\\xff]",lt="[^\\ud800-\\udfff"+nt+ot+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ut="\\ud83c[\\udffb-\\udfff]",ct="[^\\ud800-\\udfff]",st="(?:\\ud83c[\\udde6-\\uddff]){2}",ft="[\\ud800-\\udbff][\\udc00-\\udfff]",pt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",dt="(?:"+at+"|"+lt+")",mt="(?:"+pt+"|"+lt+")",ht="(?:"+rt+"|"+ut+")"+"?",bt="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[ct,st,ft].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),gt="(?:"+[it,st,ft].join("|")+")"+bt,vt="(?:"+[ct+rt+"?",rt,st,ft,tt].join("|")+")",yt=RegExp("['’]","g"),xt=RegExp(rt,"g"),wt=RegExp(ut+"(?="+ut+")|"+vt+bt,"g"),kt=RegExp([pt+"?"+at+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[et,pt,"$"].join("|")+")",mt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[et,pt+dt,"$"].join("|")+")",pt+"?"+dt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",pt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ot,gt].join("|"),"g"),_t=RegExp("[\\u200d\\ud800-\\udfff"+Zn+"\\ufe0e\\ufe0f]"),Ot=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Et=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],St=-1,jt={};jt[fn]=jt[pn]=jt[dn]=jt[mn]=jt[hn]=jt[bn]=jt[gn]=jt[vn]=jt[yn]=!0,jt[B]=jt[V]=jt[cn]=jt[W]=jt[sn]=jt[$]=jt[K]=jt[G]=jt[X]=jt[J]=jt[Z]=jt[tn]=jt[en]=jt[rn]=jt[ln]=!1;var Pt={};Pt[B]=Pt[V]=Pt[cn]=Pt[sn]=Pt[W]=Pt[$]=Pt[fn]=Pt[pn]=Pt[dn]=Pt[mn]=Pt[hn]=Pt[X]=Pt[J]=Pt[Z]=Pt[tn]=Pt[en]=Pt[rn]=Pt[on]=Pt[bn]=Pt[gn]=Pt[vn]=Pt[yn]=!0,Pt[K]=Pt[G]=Pt[ln]=!1;var Ct={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Tt=parseFloat,It=parseInt,Rt="object"==typeof n&&n&&n.Object===Object&&n,Mt="object"==typeof self&&self&&self.Object===Object&&self,At=Rt||Mt||Function("return this")(),Lt="object"==typeof t&&t&&!t.nodeType&&t,Nt=Lt&&"object"==typeof r&&r&&!r.nodeType&&r,Ut=Nt&&Nt.exports===Lt,Dt=Ut&&Rt.process,zt=function(){try{return Dt&&Dt.binding&&Dt.binding("util")}catch(n){}}(),Ft=zt&&zt.isArrayBuffer,Bt=zt&&zt.isDate,Vt=zt&&zt.isMap,Ht=zt&&zt.isRegExp,Wt=zt&&zt.isSet,$t=zt&&zt.isTypedArray;function qt(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function Kt(n,t,e,r){for(var o=-1,i=null==n?0:n.length;++o<i;){var a=n[o];t(r,a,e(a),n)}return r}function Gt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function Yt(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function Xt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function Jt(n,t){for(var e=-1,r=null==n?0:n.length,o=0,i=[];++e<r;){var a=n[e];t(a,e,n)&&(i[o++]=a)}return i}function Qt(n,t){return!!(null==n?0:n.length)&&ue(n,t,0)>-1}function Zt(n,t,e){for(var r=-1,o=null==n?0:n.length;++r<o;)if(e(t,n[r]))return!0;return!1}function ne(n,t){for(var e=-1,r=null==n?0:n.length,o=Array(r);++e<r;)o[e]=t(n[e],e,n);return o}function te(n,t){for(var e=-1,r=t.length,o=n.length;++e<r;)n[o+e]=t[e];return n}function ee(n,t,e,r){var o=-1,i=null==n?0:n.length;for(r&&i&&(e=n[++o]);++o<i;)e=t(e,n[o],o,n);return e}function re(n,t,e,r){var o=null==n?0:n.length;for(r&&o&&(e=n[--o]);o--;)e=t(e,n[o],o,n);return e}function oe(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var ie=pe("length");function ae(n,t,e){var r;return e(n,function(n,e,o){if(t(n,e,o))return r=e,!1}),r}function le(n,t,e,r){for(var o=n.length,i=e+(r?1:-1);r?i--:++i<o;)if(t(n[i],i,n))return i;return-1}function ue(n,t,e){return t==t?function(n,t,e){var r=e-1,o=n.length;for(;++r<o;)if(n[r]===t)return r;return-1}(n,t,e):le(n,se,e)}function ce(n,t,e,r){for(var o=e-1,i=n.length;++o<i;)if(r(n[o],t))return o;return-1}function se(n){return n!=n}function fe(n,t){var e=null==n?0:n.length;return e?he(n,t)/e:N}function pe(n){return function(t){return null==t?i:t[n]}}function de(n){return function(t){return null==n?i:n[t]}}function me(n,t,e,r,o){return o(n,function(n,o,i){e=r?(r=!1,n):t(e,n,o,i)}),e}function he(n,t){for(var e,r=-1,o=n.length;++r<o;){var a=t(n[r]);a!==i&&(e=e===i?a:e+a)}return e}function be(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function ge(n){return function(t){return n(t)}}function ve(n,t){return ne(t,function(t){return n[t]})}function ye(n,t){return n.has(t)}function xe(n,t){for(var e=-1,r=n.length;++e<r&&ue(t,n[e],0)>-1;);return e}function we(n,t){for(var e=n.length;e--&&ue(t,n[e],0)>-1;);return e}var ke=de({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),_e=de({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Oe(n){return"\\"+Ct[n]}function Ee(n){return _t.test(n)}function Se(n){var t=-1,e=Array(n.size);return n.forEach(function(n,r){e[++t]=[r,n]}),e}function je(n,t){return function(e){return n(t(e))}}function Pe(n,t){for(var e=-1,r=n.length,o=0,i=[];++e<r;){var a=n[e];a!==t&&a!==f||(n[e]=f,i[o++]=e)}return i}function Ce(n,t){return"__proto__"==t?i:n[t]}function Te(n){var t=-1,e=Array(n.size);return n.forEach(function(n){e[++t]=n}),e}function Ie(n){var t=-1,e=Array(n.size);return n.forEach(function(n){e[++t]=[n,n]}),e}function Re(n){return Ee(n)?function(n){var t=wt.lastIndex=0;for(;wt.test(n);)++t;return t}(n):ie(n)}function Me(n){return Ee(n)?function(n){return n.match(wt)||[]}(n):function(n){return n.split("")}(n)}var Ae=de({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Le=function n(t){var e,r=(t=null==t?At:Le.defaults(At.Object(),t,Le.pick(At,Et))).Array,o=t.Date,Zn=t.Error,nt=t.Function,tt=t.Math,et=t.Object,rt=t.RegExp,ot=t.String,it=t.TypeError,at=r.prototype,lt=nt.prototype,ut=et.prototype,ct=t["__core-js_shared__"],st=lt.toString,ft=ut.hasOwnProperty,pt=0,dt=(e=/[^.]+$/.exec(ct&&ct.keys&&ct.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",mt=ut.toString,ht=st.call(et),bt=At._,gt=rt("^"+st.call(ft).replace(Mn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),vt=Ut?t.Buffer:i,wt=t.Symbol,_t=t.Uint8Array,Ct=vt?vt.allocUnsafe:i,Rt=je(et.getPrototypeOf,et),Mt=et.create,Lt=ut.propertyIsEnumerable,Nt=at.splice,Dt=wt?wt.isConcatSpreadable:i,zt=wt?wt.iterator:i,ie=wt?wt.toStringTag:i,de=function(){try{var n=Fi(et,"defineProperty");return n({},"",{}),n}catch(n){}}(),Ne=t.clearTimeout!==At.clearTimeout&&t.clearTimeout,Ue=o&&o.now!==At.Date.now&&o.now,De=t.setTimeout!==At.setTimeout&&t.setTimeout,ze=tt.ceil,Fe=tt.floor,Be=et.getOwnPropertySymbols,Ve=vt?vt.isBuffer:i,He=t.isFinite,We=at.join,$e=je(et.keys,et),qe=tt.max,Ke=tt.min,Ge=o.now,Ye=t.parseInt,Xe=tt.random,Je=at.reverse,Qe=Fi(t,"DataView"),Ze=Fi(t,"Map"),nr=Fi(t,"Promise"),tr=Fi(t,"Set"),er=Fi(t,"WeakMap"),rr=Fi(et,"create"),or=er&&new er,ir={},ar=fa(Qe),lr=fa(Ze),ur=fa(nr),cr=fa(tr),sr=fa(er),fr=wt?wt.prototype:i,pr=fr?fr.valueOf:i,dr=fr?fr.toString:i;function mr(n){if(Pl(n)&&!gl(n)&&!(n instanceof vr)){if(n instanceof gr)return n;if(ft.call(n,"__wrapped__"))return pa(n)}return new gr(n)}var hr=function(){function n(){}return function(t){if(!jl(t))return{};if(Mt)return Mt(t);n.prototype=t;var e=new n;return n.prototype=i,e}}();function br(){}function gr(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function vr(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=U,this.__views__=[]}function yr(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function xr(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function wr(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function kr(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new wr;++t<e;)this.add(n[t])}function _r(n){var t=this.__data__=new xr(n);this.size=t.size}function Or(n,t){var e=gl(n),r=!e&&bl(n),o=!e&&!r&&wl(n),i=!e&&!r&&!o&&Nl(n),a=e||r||o||i,l=a?be(n.length,ot):[],u=l.length;for(var c in n)!t&&!ft.call(n,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ki(c,u))||l.push(c);return l}function Er(n){var t=n.length;return t?n[_o(0,t-1)]:i}function Sr(n,t){return ua(oi(n),Lr(t,0,n.length))}function jr(n){return ua(oi(n))}function Pr(n,t,e){(e===i||dl(n[t],e))&&(e!==i||t in n)||Mr(n,t,e)}function Cr(n,t,e){var r=n[t];ft.call(n,t)&&dl(r,e)&&(e!==i||t in n)||Mr(n,t,e)}function Tr(n,t){for(var e=n.length;e--;)if(dl(n[e][0],t))return e;return-1}function Ir(n,t,e,r){return Fr(n,function(n,o,i){t(r,n,e(n),i)}),r}function Rr(n,t){return n&&ii(t,ou(t),n)}function Mr(n,t,e){"__proto__"==t&&de?de(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function Ar(n,t){for(var e=-1,o=t.length,a=r(o),l=null==n;++e<o;)a[e]=l?i:Zl(n,t[e]);return a}function Lr(n,t,e){return n==n&&(e!==i&&(n=n<=e?n:e),t!==i&&(n=n>=t?n:t)),n}function Nr(n,t,e,r,o,a){var l,u=t&p,c=t&d,s=t&m;if(e&&(l=o?e(n,r,o,a):e(n)),l!==i)return l;if(!jl(n))return n;var f=gl(n);if(f){if(l=function(n){var t=n.length,e=new n.constructor(t);return t&&"string"==typeof n[0]&&ft.call(n,"index")&&(e.index=n.index,e.input=n.input),e}(n),!u)return oi(n,l)}else{var h=Hi(n),b=h==G||h==Y;if(wl(n))return Qo(n,u);if(h==Z||h==B||b&&!o){if(l=c||b?{}:$i(n),!u)return c?function(n,t){return ii(n,Vi(n),t)}(n,function(n,t){return n&&ii(t,iu(t),n)}(l,n)):function(n,t){return ii(n,Bi(n),t)}(n,Rr(l,n))}else{if(!Pt[h])return o?n:{};l=function(n,t,e){var r,o,i,a=n.constructor;switch(t){case cn:return Zo(n);case W:case $:return new a(+n);case sn:return function(n,t){var e=t?Zo(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case fn:case pn:case dn:case mn:case hn:case bn:case gn:case vn:case yn:return ni(n,e);case X:return new a;case J:case rn:return new a(n);case tn:return(i=new(o=n).constructor(o.source,Wn.exec(o))).lastIndex=o.lastIndex,i;case en:return new a;case on:return r=n,pr?et(pr.call(r)):{}}}(n,h,u)}}a||(a=new _r);var g=a.get(n);if(g)return g;if(a.set(n,l),Ml(n))return n.forEach(function(r){l.add(Nr(r,t,e,r,n,a))}),l;if(Cl(n))return n.forEach(function(r,o){l.set(o,Nr(r,t,e,o,n,a))}),l;var v=f?i:(s?c?Mi:Ri:c?iu:ou)(n);return Gt(v||n,function(r,o){v&&(r=n[o=r]),Cr(l,o,Nr(r,t,e,o,n,a))}),l}function Ur(n,t,e){var r=e.length;if(null==n)return!r;for(n=et(n);r--;){var o=e[r],a=t[o],l=n[o];if(l===i&&!(o in n)||!a(l))return!1}return!0}function Dr(n,t,e){if("function"!=typeof n)throw new it(u);return oa(function(){n.apply(i,e)},t)}function zr(n,t,e,r){var o=-1,i=Qt,l=!0,u=n.length,c=[],s=t.length;if(!u)return c;e&&(t=ne(t,ge(e))),r?(i=Zt,l=!1):t.length>=a&&(i=ye,l=!1,t=new kr(t));n:for(;++o<u;){var f=n[o],p=null==e?f:e(f);if(f=r||0!==f?f:0,l&&p==p){for(var d=s;d--;)if(t[d]===p)continue n;c.push(f)}else i(t,p,r)||c.push(f)}return c}mr.templateSettings={escape:jn,evaluate:Pn,interpolate:Cn,variable:"",imports:{_:mr}},mr.prototype=br.prototype,mr.prototype.constructor=mr,gr.prototype=hr(br.prototype),gr.prototype.constructor=gr,vr.prototype=hr(br.prototype),vr.prototype.constructor=vr,yr.prototype.clear=function(){this.__data__=rr?rr(null):{},this.size=0},yr.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},yr.prototype.get=function(n){var t=this.__data__;if(rr){var e=t[n];return e===c?i:e}return ft.call(t,n)?t[n]:i},yr.prototype.has=function(n){var t=this.__data__;return rr?t[n]!==i:ft.call(t,n)},yr.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=rr&&t===i?c:t,this},xr.prototype.clear=function(){this.__data__=[],this.size=0},xr.prototype.delete=function(n){var t=this.__data__,e=Tr(t,n);return!(e<0||(e==t.length-1?t.pop():Nt.call(t,e,1),--this.size,0))},xr.prototype.get=function(n){var t=this.__data__,e=Tr(t,n);return e<0?i:t[e][1]},xr.prototype.has=function(n){return Tr(this.__data__,n)>-1},xr.prototype.set=function(n,t){var e=this.__data__,r=Tr(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},wr.prototype.clear=function(){this.size=0,this.__data__={hash:new yr,map:new(Ze||xr),string:new yr}},wr.prototype.delete=function(n){var t=Di(this,n).delete(n);return this.size-=t?1:0,t},wr.prototype.get=function(n){return Di(this,n).get(n)},wr.prototype.has=function(n){return Di(this,n).has(n)},wr.prototype.set=function(n,t){var e=Di(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},kr.prototype.add=kr.prototype.push=function(n){return this.__data__.set(n,c),this},kr.prototype.has=function(n){return this.__data__.has(n)},_r.prototype.clear=function(){this.__data__=new xr,this.size=0},_r.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},_r.prototype.get=function(n){return this.__data__.get(n)},_r.prototype.has=function(n){return this.__data__.has(n)},_r.prototype.set=function(n,t){var e=this.__data__;if(e instanceof xr){var r=e.__data__;if(!Ze||r.length<a-1)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new wr(r)}return e.set(n,t),this.size=e.size,this};var Fr=ui(Gr),Br=ui(Yr,!0);function Vr(n,t){var e=!0;return Fr(n,function(n,r,o){return e=!!t(n,r,o)}),e}function Hr(n,t,e){for(var r=-1,o=n.length;++r<o;){var a=n[r],l=t(a);if(null!=l&&(u===i?l==l&&!Ll(l):e(l,u)))var u=l,c=a}return c}function Wr(n,t){var e=[];return Fr(n,function(n,r,o){t(n,r,o)&&e.push(n)}),e}function $r(n,t,e,r,o){var i=-1,a=n.length;for(e||(e=qi),o||(o=[]);++i<a;){var l=n[i];t>0&&e(l)?t>1?$r(l,t-1,e,r,o):te(o,l):r||(o[o.length]=l)}return o}var qr=ci(),Kr=ci(!0);function Gr(n,t){return n&&qr(n,t,ou)}function Yr(n,t){return n&&Kr(n,t,ou)}function Xr(n,t){return Jt(t,function(t){return Ol(n[t])})}function Jr(n,t){for(var e=0,r=(t=Go(t,n)).length;null!=n&&e<r;)n=n[sa(t[e++])];return e&&e==r?n:i}function Qr(n,t,e){var r=t(n);return gl(n)?r:te(r,e(n))}function Zr(n){return null==n?n===i?an:Q:ie&&ie in et(n)?function(n){var t=ft.call(n,ie),e=n[ie];try{n[ie]=i;var r=!0}catch(n){}var o=mt.call(n);return r&&(t?n[ie]=e:delete n[ie]),o}(n):function(n){return mt.call(n)}(n)}function no(n,t){return n>t}function to(n,t){return null!=n&&ft.call(n,t)}function eo(n,t){return null!=n&&t in et(n)}function ro(n,t,e){for(var o=e?Zt:Qt,a=n[0].length,l=n.length,u=l,c=r(l),s=1/0,f=[];u--;){var p=n[u];u&&t&&(p=ne(p,ge(t))),s=Ke(p.length,s),c[u]=!e&&(t||a>=120&&p.length>=120)?new kr(u&&p):i}p=n[0];var d=-1,m=c[0];n:for(;++d<a&&f.length<s;){var h=p[d],b=t?t(h):h;if(h=e||0!==h?h:0,!(m?ye(m,b):o(f,b,e))){for(u=l;--u;){var g=c[u];if(!(g?ye(g,b):o(n[u],b,e)))continue n}m&&m.push(b),f.push(h)}}return f}function oo(n,t,e){var r=null==(n=ea(n,t=Go(t,n)))?n:n[sa(_a(t))];return null==r?i:qt(r,n,e)}function io(n){return Pl(n)&&Zr(n)==B}function ao(n,t,e,r,o){return n===t||(null==n||null==t||!Pl(n)&&!Pl(t)?n!=n&&t!=t:function(n,t,e,r,o,a){var l=gl(n),u=gl(t),c=l?V:Hi(n),s=u?V:Hi(t),f=(c=c==B?Z:c)==Z,p=(s=s==B?Z:s)==Z,d=c==s;if(d&&wl(n)){if(!wl(t))return!1;l=!0,f=!1}if(d&&!f)return a||(a=new _r),l||Nl(n)?Ti(n,t,e,r,o,a):function(n,t,e,r,o,i,a){switch(e){case sn:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case cn:return!(n.byteLength!=t.byteLength||!i(new _t(n),new _t(t)));case W:case $:case J:return dl(+n,+t);case K:return n.name==t.name&&n.message==t.message;case tn:case rn:return n==t+"";case X:var l=Se;case en:var u=r&h;if(l||(l=Te),n.size!=t.size&&!u)return!1;var c=a.get(n);if(c)return c==t;r|=b,a.set(n,t);var s=Ti(l(n),l(t),r,o,i,a);return a.delete(n),s;case on:if(pr)return pr.call(n)==pr.call(t)}return!1}(n,t,c,e,r,o,a);if(!(e&h)){var m=f&&ft.call(n,"__wrapped__"),g=p&&ft.call(t,"__wrapped__");if(m||g){var v=m?n.value():n,y=g?t.value():t;return a||(a=new _r),o(v,y,e,r,a)}}return!!d&&(a||(a=new _r),function(n,t,e,r,o,a){var l=e&h,u=Ri(n),c=u.length,s=Ri(t).length;if(c!=s&&!l)return!1;for(var f=c;f--;){var p=u[f];if(!(l?p in t:ft.call(t,p)))return!1}var d=a.get(n);if(d&&a.get(t))return d==t;var m=!0;a.set(n,t),a.set(t,n);for(var b=l;++f<c;){p=u[f];var g=n[p],v=t[p];if(r)var y=l?r(v,g,p,t,n,a):r(g,v,p,n,t,a);if(!(y===i?g===v||o(g,v,e,r,a):y)){m=!1;break}b||(b="constructor"==p)}if(m&&!b){var x=n.constructor,w=t.constructor;x!=w&&"constructor"in n&&"constructor"in t&&!("function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w)&&(m=!1)}return a.delete(n),a.delete(t),m}(n,t,e,r,o,a))}(n,t,e,r,ao,o))}function lo(n,t,e,r){var o=e.length,a=o,l=!r;if(null==n)return!a;for(n=et(n);o--;){var u=e[o];if(l&&u[2]?u[1]!==n[u[0]]:!(u[0]in n))return!1}for(;++o<a;){var c=(u=e[o])[0],s=n[c],f=u[1];if(l&&u[2]){if(s===i&&!(c in n))return!1}else{var p=new _r;if(r)var d=r(s,f,c,n,t,p);if(!(d===i?ao(f,s,h|b,r,p):d))return!1}}return!0}function uo(n){return!(!jl(n)||dt&&dt in n)&&(Ol(n)?gt:Kn).test(fa(n))}function co(n){return"function"==typeof n?n:null==n?Tu:"object"==typeof n?gl(n)?bo(n[0],n[1]):ho(n):zu(n)}function so(n){if(!Qi(n))return $e(n);var t=[];for(var e in et(n))ft.call(n,e)&&"constructor"!=e&&t.push(e);return t}function fo(n){if(!jl(n))return function(n){var t=[];if(null!=n)for(var e in et(n))t.push(e);return t}(n);var t=Qi(n),e=[];for(var r in n)("constructor"!=r||!t&&ft.call(n,r))&&e.push(r);return e}function po(n,t){return n<t}function mo(n,t){var e=-1,o=yl(n)?r(n.length):[];return Fr(n,function(n,r,i){o[++e]=t(n,r,i)}),o}function ho(n){var t=zi(n);return 1==t.length&&t[0][2]?na(t[0][0],t[0][1]):function(e){return e===n||lo(e,n,t)}}function bo(n,t){return Yi(n)&&Zi(t)?na(sa(n),t):function(e){var r=Zl(e,n);return r===i&&r===t?nu(e,n):ao(t,r,h|b)}}function go(n,t,e,r,o){n!==t&&qr(t,function(a,l){if(jl(a))o||(o=new _r),function(n,t,e,r,o,a,l){var u=Ce(n,e),c=Ce(t,e),s=l.get(c);if(s)Pr(n,e,s);else{var f=a?a(u,c,e+"",n,t,l):i,p=f===i;if(p){var d=gl(c),m=!d&&wl(c),h=!d&&!m&&Nl(c);f=c,d||m||h?gl(u)?f=u:xl(u)?f=oi(u):m?(p=!1,f=Qo(c,!0)):h?(p=!1,f=ni(c,!0)):f=[]:Il(c)||bl(c)?(f=u,bl(u)?f=Wl(u):(!jl(u)||r&&Ol(u))&&(f=$i(c))):p=!1}p&&(l.set(c,f),o(f,c,r,a,l),l.delete(c)),Pr(n,e,f)}}(n,t,l,e,go,r,o);else{var u=r?r(Ce(n,l),a,l+"",n,t,o):i;u===i&&(u=a),Pr(n,l,u)}},iu)}function vo(n,t){var e=n.length;if(e)return Ki(t+=t<0?e:0,e)?n[t]:i}function yo(n,t,e){var r=-1;return t=ne(t.length?t:[Tu],ge(Ui())),function(n,t){var e=n.length;for(n.sort(t);e--;)n[e]=n[e].value;return n}(mo(n,function(n,e,o){return{criteria:ne(t,function(t){return t(n)}),index:++r,value:n}}),function(n,t){return function(n,t,e){for(var r=-1,o=n.criteria,i=t.criteria,a=o.length,l=e.length;++r<a;){var u=ti(o[r],i[r]);if(u){if(r>=l)return u;var c=e[r];return u*("desc"==c?-1:1)}}return n.index-t.index}(n,t,e)})}function xo(n,t,e){for(var r=-1,o=t.length,i={};++r<o;){var a=t[r],l=Jr(n,a);e(l,a)&&Po(i,Go(a,n),l)}return i}function wo(n,t,e,r){var o=r?ce:ue,i=-1,a=t.length,l=n;for(n===t&&(t=oi(t)),e&&(l=ne(n,ge(e)));++i<a;)for(var u=0,c=t[i],s=e?e(c):c;(u=o(l,s,u,r))>-1;)l!==n&&Nt.call(l,u,1),Nt.call(n,u,1);return n}function ko(n,t){for(var e=n?t.length:0,r=e-1;e--;){var o=t[e];if(e==r||o!==i){var i=o;Ki(o)?Nt.call(n,o,1):Fo(n,o)}}return n}function _o(n,t){return n+Fe(Xe()*(t-n+1))}function Oo(n,t){var e="";if(!n||t<1||t>A)return e;do{t%2&&(e+=n),(t=Fe(t/2))&&(n+=n)}while(t);return e}function Eo(n,t){return ia(ta(n,t,Tu),n+"")}function So(n){return Er(du(n))}function jo(n,t){var e=du(n);return ua(e,Lr(t,0,e.length))}function Po(n,t,e,r){if(!jl(n))return n;for(var o=-1,a=(t=Go(t,n)).length,l=a-1,u=n;null!=u&&++o<a;){var c=sa(t[o]),s=e;if(o!=l){var f=u[c];(s=r?r(f,c,u):i)===i&&(s=jl(f)?f:Ki(t[o+1])?[]:{})}Cr(u,c,s),u=u[c]}return n}var Co=or?function(n,t){return or.set(n,t),n}:Tu,To=de?function(n,t){return de(n,"toString",{configurable:!0,enumerable:!1,value:ju(t),writable:!0})}:Tu;function Io(n){return ua(du(n))}function Ro(n,t,e){var o=-1,i=n.length;t<0&&(t=-t>i?0:i+t),(e=e>i?i:e)<0&&(e+=i),i=t>e?0:e-t>>>0,t>>>=0;for(var a=r(i);++o<i;)a[o]=n[o+t];return a}function Mo(n,t){var e;return Fr(n,function(n,r,o){return!(e=t(n,r,o))}),!!e}function Ao(n,t,e){var r=0,o=null==n?r:n.length;if("number"==typeof t&&t==t&&o<=z){for(;r<o;){var i=r+o>>>1,a=n[i];null!==a&&!Ll(a)&&(e?a<=t:a<t)?r=i+1:o=i}return o}return Lo(n,t,Tu,e)}function Lo(n,t,e,r){t=e(t);for(var o=0,a=null==n?0:n.length,l=t!=t,u=null===t,c=Ll(t),s=t===i;o<a;){var f=Fe((o+a)/2),p=e(n[f]),d=p!==i,m=null===p,h=p==p,b=Ll(p);if(l)var g=r||h;else g=s?h&&(r||d):u?h&&d&&(r||!m):c?h&&d&&!m&&(r||!b):!m&&!b&&(r?p<=t:p<t);g?o=f+1:a=f}return Ke(a,D)}function No(n,t){for(var e=-1,r=n.length,o=0,i=[];++e<r;){var a=n[e],l=t?t(a):a;if(!e||!dl(l,u)){var u=l;i[o++]=0===a?0:a}}return i}function Uo(n){return"number"==typeof n?n:Ll(n)?N:+n}function Do(n){if("string"==typeof n)return n;if(gl(n))return ne(n,Do)+"";if(Ll(n))return dr?dr.call(n):"";var t=n+"";return"0"==t&&1/n==-M?"-0":t}function zo(n,t,e){var r=-1,o=Qt,i=n.length,l=!0,u=[],c=u;if(e)l=!1,o=Zt;else if(i>=a){var s=t?null:Oi(n);if(s)return Te(s);l=!1,o=ye,c=new kr}else c=t?[]:u;n:for(;++r<i;){var f=n[r],p=t?t(f):f;if(f=e||0!==f?f:0,l&&p==p){for(var d=c.length;d--;)if(c[d]===p)continue n;t&&c.push(p),u.push(f)}else o(c,p,e)||(c!==u&&c.push(p),u.push(f))}return u}function Fo(n,t){return null==(n=ea(n,t=Go(t,n)))||delete n[sa(_a(t))]}function Bo(n,t,e,r){return Po(n,t,e(Jr(n,t)),r)}function Vo(n,t,e,r){for(var o=n.length,i=r?o:-1;(r?i--:++i<o)&&t(n[i],i,n););return e?Ro(n,r?0:i,r?i+1:o):Ro(n,r?i+1:0,r?o:i)}function Ho(n,t){var e=n;return e instanceof vr&&(e=e.value()),ee(t,function(n,t){return t.func.apply(t.thisArg,te([n],t.args))},e)}function Wo(n,t,e){var o=n.length;if(o<2)return o?zo(n[0]):[];for(var i=-1,a=r(o);++i<o;)for(var l=n[i],u=-1;++u<o;)u!=i&&(a[i]=zr(a[i]||l,n[u],t,e));return zo($r(a,1),t,e)}function $o(n,t,e){for(var r=-1,o=n.length,a=t.length,l={};++r<o;){var u=r<a?t[r]:i;e(l,n[r],u)}return l}function qo(n){return xl(n)?n:[]}function Ko(n){return"function"==typeof n?n:Tu}function Go(n,t){return gl(n)?n:Yi(n,t)?[n]:ca($l(n))}var Yo=Eo;function Xo(n,t,e){var r=n.length;return e=e===i?r:e,!t&&e>=r?n:Ro(n,t,e)}var Jo=Ne||function(n){return At.clearTimeout(n)};function Qo(n,t){if(t)return n.slice();var e=n.length,r=Ct?Ct(e):new n.constructor(e);return n.copy(r),r}function Zo(n){var t=new n.constructor(n.byteLength);return new _t(t).set(new _t(n)),t}function ni(n,t){var e=t?Zo(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function ti(n,t){if(n!==t){var e=n!==i,r=null===n,o=n==n,a=Ll(n),l=t!==i,u=null===t,c=t==t,s=Ll(t);if(!u&&!s&&!a&&n>t||a&&l&&c&&!u&&!s||r&&l&&c||!e&&c||!o)return 1;if(!r&&!a&&!s&&n<t||s&&e&&o&&!r&&!a||u&&e&&o||!l&&o||!c)return-1}return 0}function ei(n,t,e,o){for(var i=-1,a=n.length,l=e.length,u=-1,c=t.length,s=qe(a-l,0),f=r(c+s),p=!o;++u<c;)f[u]=t[u];for(;++i<l;)(p||i<a)&&(f[e[i]]=n[i]);for(;s--;)f[u++]=n[i++];return f}function ri(n,t,e,o){for(var i=-1,a=n.length,l=-1,u=e.length,c=-1,s=t.length,f=qe(a-u,0),p=r(f+s),d=!o;++i<f;)p[i]=n[i];for(var m=i;++c<s;)p[m+c]=t[c];for(;++l<u;)(d||i<a)&&(p[m+e[l]]=n[i++]);return p}function oi(n,t){var e=-1,o=n.length;for(t||(t=r(o));++e<o;)t[e]=n[e];return t}function ii(n,t,e,r){var o=!e;e||(e={});for(var a=-1,l=t.length;++a<l;){var u=t[a],c=r?r(e[u],n[u],u,e,n):i;c===i&&(c=n[u]),o?Mr(e,u,c):Cr(e,u,c)}return e}function ai(n,t){return function(e,r){var o=gl(e)?Kt:Ir,i=t?t():{};return o(e,n,Ui(r,2),i)}}function li(n){return Eo(function(t,e){var r=-1,o=e.length,a=o>1?e[o-1]:i,l=o>2?e[2]:i;for(a=n.length>3&&"function"==typeof a?(o--,a):i,l&&Gi(e[0],e[1],l)&&(a=o<3?i:a,o=1),t=et(t);++r<o;){var u=e[r];u&&n(t,u,r,a)}return t})}function ui(n,t){return function(e,r){if(null==e)return e;if(!yl(e))return n(e,r);for(var o=e.length,i=t?o:-1,a=et(e);(t?i--:++i<o)&&!1!==r(a[i],i,a););return e}}function ci(n){return function(t,e,r){for(var o=-1,i=et(t),a=r(t),l=a.length;l--;){var u=a[n?l:++o];if(!1===e(i[u],u,i))break}return t}}function si(n){return function(t){var e=Ee(t=$l(t))?Me(t):i,r=e?e[0]:t.charAt(0),o=e?Xo(e,1).join(""):t.slice(1);return r[n]()+o}}function fi(n){return function(t){return ee(Ou(bu(t).replace(yt,"")),n,"")}}function pi(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=hr(n.prototype),r=n.apply(e,t);return jl(r)?r:e}}function di(n){return function(t,e,r){var o=et(t);if(!yl(t)){var a=Ui(e,3);t=ou(t),e=function(n){return a(o[n],n,o)}}var l=n(t,e,r);return l>-1?o[a?t[l]:l]:i}}function mi(n){return Ii(function(t){var e=t.length,r=e,o=gr.prototype.thru;for(n&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new it(u);if(o&&!l&&"wrapper"==Li(a))var l=new gr([],!0)}for(r=l?r:e;++r<e;){var c=Li(a=t[r]),s="wrapper"==c?Ai(a):i;l=s&&Xi(s[0])&&s[1]==(O|x|k|E)&&!s[4].length&&1==s[9]?l[Li(s[0])].apply(l,s[3]):1==a.length&&Xi(a)?l[c]():l.thru(a)}return function(){var n=arguments,r=n[0];if(l&&1==n.length&&gl(r))return l.plant(r).value();for(var o=0,i=e?t[o].apply(this,n):r;++o<e;)i=t[o].call(this,i);return i}})}function hi(n,t,e,o,a,l,u,c,s,f){var p=t&O,d=t&g,m=t&v,h=t&(x|w),b=t&S,y=m?i:pi(n);return function g(){for(var v=arguments.length,x=r(v),w=v;w--;)x[w]=arguments[w];if(h)var k=Ni(g),_=function(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}(x,k);if(o&&(x=ei(x,o,a,h)),l&&(x=ri(x,l,u,h)),v-=_,h&&v<f){var O=Pe(x,k);return ki(n,t,hi,g.placeholder,e,x,O,c,s,f-v)}var E=d?e:this,S=m?E[n]:n;return v=x.length,c?x=function(n,t){for(var e=n.length,r=Ke(t.length,e),o=oi(n);r--;){var a=t[r];n[r]=Ki(a,e)?o[a]:i}return n}(x,c):b&&v>1&&x.reverse(),p&&s<v&&(x.length=s),this&&this!==At&&this instanceof g&&(S=y||pi(S)),S.apply(E,x)}}function bi(n,t){return function(e,r){return function(n,t,e,r){return Gr(n,function(n,o,i){t(r,e(n),o,i)}),r}(e,n,t(r),{})}}function gi(n,t){return function(e,r){var o;if(e===i&&r===i)return t;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=Do(e),r=Do(r)):(e=Uo(e),r=Uo(r)),o=n(e,r)}return o}}function vi(n){return Ii(function(t){return t=ne(t,ge(Ui())),Eo(function(e){var r=this;return n(t,function(n){return qt(n,r,e)})})})}function yi(n,t){var e=(t=t===i?" ":Do(t)).length;if(e<2)return e?Oo(t,n):t;var r=Oo(t,ze(n/Re(t)));return Ee(t)?Xo(Me(r),0,n).join(""):r.slice(0,n)}function xi(n){return function(t,e,o){return o&&"number"!=typeof o&&Gi(t,e,o)&&(e=o=i),t=Fl(t),e===i?(e=t,t=0):e=Fl(e),function(n,t,e,o){for(var i=-1,a=qe(ze((t-n)/(e||1)),0),l=r(a);a--;)l[o?a:++i]=n,n+=e;return l}(t,e,o=o===i?t<e?1:-1:Fl(o),n)}}function wi(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=Hl(t),e=Hl(e)),n(t,e)}}function ki(n,t,e,r,o,a,l,u,c,s){var f=t&x;t|=f?k:_,(t&=~(f?_:k))&y||(t&=~(g|v));var p=[n,t,o,f?a:i,f?l:i,f?i:a,f?i:l,u,c,s],d=e.apply(i,p);return Xi(n)&&ra(d,p),d.placeholder=r,aa(d,n,t)}function _i(n){var t=tt[n];return function(n,e){if(n=Hl(n),e=null==e?0:Ke(Bl(e),292)){var r=($l(n)+"e").split("e");return+((r=($l(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var Oi=tr&&1/Te(new tr([,-0]))[1]==M?function(n){return new tr(n)}:Lu;function Ei(n){return function(t){var e=Hi(t);return e==X?Se(t):e==en?Ie(t):function(n,t){return ne(t,function(t){return[t,n[t]]})}(t,n(t))}}function Si(n,t,e,o,a,l,c,s){var p=t&v;if(!p&&"function"!=typeof n)throw new it(u);var d=o?o.length:0;if(d||(t&=~(k|_),o=a=i),c=c===i?c:qe(Bl(c),0),s=s===i?s:Bl(s),d-=a?a.length:0,t&_){var m=o,h=a;o=a=i}var b=p?i:Ai(n),S=[n,t,e,o,a,m,h,l,c,s];if(b&&function(n,t){var e=n[1],r=t[1],o=e|r,i=o<(g|v|O),a=r==O&&e==x||r==O&&e==E&&n[7].length<=t[8]||r==(O|E)&&t[7].length<=t[8]&&e==x;if(!i&&!a)return n;r&g&&(n[2]=t[2],o|=e&g?0:y);var l=t[3];if(l){var u=n[3];n[3]=u?ei(u,l,t[4]):l,n[4]=u?Pe(n[3],f):t[4]}(l=t[5])&&(u=n[5],n[5]=u?ri(u,l,t[6]):l,n[6]=u?Pe(n[5],f):t[6]),(l=t[7])&&(n[7]=l),r&O&&(n[8]=null==n[8]?t[8]:Ke(n[8],t[8])),null==n[9]&&(n[9]=t[9]),n[0]=t[0],n[1]=o}(S,b),n=S[0],t=S[1],e=S[2],o=S[3],a=S[4],!(s=S[9]=S[9]===i?p?0:n.length:qe(S[9]-d,0))&&t&(x|w)&&(t&=~(x|w)),t&&t!=g)j=t==x||t==w?function(n,t,e){var o=pi(n);return function a(){for(var l=arguments.length,u=r(l),c=l,s=Ni(a);c--;)u[c]=arguments[c];var f=l<3&&u[0]!==s&&u[l-1]!==s?[]:Pe(u,s);return(l-=f.length)<e?ki(n,t,hi,a.placeholder,i,u,f,i,i,e-l):qt(this&&this!==At&&this instanceof a?o:n,this,u)}}(n,t,s):t!=k&&t!=(g|k)||a.length?hi.apply(i,S):function(n,t,e,o){var i=t&g,a=pi(n);return function t(){for(var l=-1,u=arguments.length,c=-1,s=o.length,f=r(s+u),p=this&&this!==At&&this instanceof t?a:n;++c<s;)f[c]=o[c];for(;u--;)f[c++]=arguments[++l];return qt(p,i?e:this,f)}}(n,t,e,o);else var j=function(n,t,e){var r=t&g,o=pi(n);return function t(){return(this&&this!==At&&this instanceof t?o:n).apply(r?e:this,arguments)}}(n,t,e);return aa((b?Co:ra)(j,S),n,t)}function ji(n,t,e,r){return n===i||dl(n,ut[e])&&!ft.call(r,e)?t:n}function Pi(n,t,e,r,o,a){return jl(n)&&jl(t)&&(a.set(t,n),go(n,t,i,Pi,a),a.delete(t)),n}function Ci(n){return Il(n)?i:n}function Ti(n,t,e,r,o,a){var l=e&h,u=n.length,c=t.length;if(u!=c&&!(l&&c>u))return!1;var s=a.get(n);if(s&&a.get(t))return s==t;var f=-1,p=!0,d=e&b?new kr:i;for(a.set(n,t),a.set(t,n);++f<u;){var m=n[f],g=t[f];if(r)var v=l?r(g,m,f,t,n,a):r(m,g,f,n,t,a);if(v!==i){if(v)continue;p=!1;break}if(d){if(!oe(t,function(n,t){if(!ye(d,t)&&(m===n||o(m,n,e,r,a)))return d.push(t)})){p=!1;break}}else if(m!==g&&!o(m,g,e,r,a)){p=!1;break}}return a.delete(n),a.delete(t),p}function Ii(n){return ia(ta(n,i,va),n+"")}function Ri(n){return Qr(n,ou,Bi)}function Mi(n){return Qr(n,iu,Vi)}var Ai=or?function(n){return or.get(n)}:Lu;function Li(n){for(var t=n.name+"",e=ir[t],r=ft.call(ir,t)?e.length:0;r--;){var o=e[r],i=o.func;if(null==i||i==n)return o.name}return t}function Ni(n){return(ft.call(mr,"placeholder")?mr:n).placeholder}function Ui(){var n=mr.iteratee||Iu;return n=n===Iu?co:n,arguments.length?n(arguments[0],arguments[1]):n}function Di(n,t){var e,r,o=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?o["string"==typeof t?"string":"hash"]:o.map}function zi(n){for(var t=ou(n),e=t.length;e--;){var r=t[e],o=n[r];t[e]=[r,o,Zi(o)]}return t}function Fi(n,t){var e=function(n,t){return null==n?i:n[t]}(n,t);return uo(e)?e:i}var Bi=Be?function(n){return null==n?[]:(n=et(n),Jt(Be(n),function(t){return Lt.call(n,t)}))}:Vu,Vi=Be?function(n){for(var t=[];n;)te(t,Bi(n)),n=Rt(n);return t}:Vu,Hi=Zr;function Wi(n,t,e){for(var r=-1,o=(t=Go(t,n)).length,i=!1;++r<o;){var a=sa(t[r]);if(!(i=null!=n&&e(n,a)))break;n=n[a]}return i||++r!=o?i:!!(o=null==n?0:n.length)&&Sl(o)&&Ki(a,o)&&(gl(n)||bl(n))}function $i(n){return"function"!=typeof n.constructor||Qi(n)?{}:hr(Rt(n))}function qi(n){return gl(n)||bl(n)||!!(Dt&&n&&n[Dt])}function Ki(n,t){var e=typeof n;return!!(t=null==t?A:t)&&("number"==e||"symbol"!=e&&Yn.test(n))&&n>-1&&n%1==0&&n<t}function Gi(n,t,e){if(!jl(e))return!1;var r=typeof t;return!!("number"==r?yl(e)&&Ki(t,e.length):"string"==r&&t in e)&&dl(e[t],n)}function Yi(n,t){if(gl(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!Ll(n))||In.test(n)||!Tn.test(n)||null!=t&&n in et(t)}function Xi(n){var t=Li(n),e=mr[t];if("function"!=typeof e||!(t in vr.prototype))return!1;if(n===e)return!0;var r=Ai(e);return!!r&&n===r[0]}(Qe&&Hi(new Qe(new ArrayBuffer(1)))!=sn||Ze&&Hi(new Ze)!=X||nr&&"[object Promise]"!=Hi(nr.resolve())||tr&&Hi(new tr)!=en||er&&Hi(new er)!=ln)&&(Hi=function(n){var t=Zr(n),e=t==Z?n.constructor:i,r=e?fa(e):"";if(r)switch(r){case ar:return sn;case lr:return X;case ur:return"[object Promise]";case cr:return en;case sr:return ln}return t});var Ji=ct?Ol:Hu;function Qi(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||ut)}function Zi(n){return n==n&&!jl(n)}function na(n,t){return function(e){return null!=e&&e[n]===t&&(t!==i||n in et(e))}}function ta(n,t,e){return t=qe(t===i?n.length-1:t,0),function(){for(var o=arguments,i=-1,a=qe(o.length-t,0),l=r(a);++i<a;)l[i]=o[t+i];i=-1;for(var u=r(t+1);++i<t;)u[i]=o[i];return u[t]=e(l),qt(n,this,u)}}function ea(n,t){return t.length<2?n:Jr(n,Ro(t,0,-1))}var ra=la(Co),oa=De||function(n,t){return At.setTimeout(n,t)},ia=la(To);function aa(n,t,e){var r=t+"";return ia(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(Dn,"{\n/* [wrapped with "+t+"] */\n")}(r,function(n,t){return Gt(F,function(e){var r="_."+e[0];t&e[1]&&!Qt(n,r)&&n.push(r)}),n.sort()}(function(n){var t=n.match(zn);return t?t[1].split(Fn):[]}(r),e)))}function la(n){var t=0,e=0;return function(){var r=Ge(),o=T-(r-e);if(e=r,o>0){if(++t>=C)return arguments[0]}else t=0;return n.apply(i,arguments)}}function ua(n,t){var e=-1,r=n.length,o=r-1;for(t=t===i?r:t;++e<t;){var a=_o(e,o),l=n[a];n[a]=n[e],n[e]=l}return n.length=t,n}var ca=function(n){var t=ll(n,function(n){return e.size===s&&e.clear(),n}),e=t.cache;return t}(function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(Rn,function(n,e,r,o){t.push(r?o.replace(Vn,"$1"):e||n)}),t});function sa(n){if("string"==typeof n||Ll(n))return n;var t=n+"";return"0"==t&&1/n==-M?"-0":t}function fa(n){if(null!=n){try{return st.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function pa(n){if(n instanceof vr)return n.clone();var t=new gr(n.__wrapped__,n.__chain__);return t.__actions__=oi(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var da=Eo(function(n,t){return xl(n)?zr(n,$r(t,1,xl,!0)):[]}),ma=Eo(function(n,t){var e=_a(t);return xl(e)&&(e=i),xl(n)?zr(n,$r(t,1,xl,!0),Ui(e,2)):[]}),ha=Eo(function(n,t){var e=_a(t);return xl(e)&&(e=i),xl(n)?zr(n,$r(t,1,xl,!0),i,e):[]});function ba(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=null==e?0:Bl(e);return o<0&&(o=qe(r+o,0)),le(n,Ui(t,3),o)}function ga(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r-1;return e!==i&&(o=Bl(e),o=e<0?qe(r+o,0):Ke(o,r-1)),le(n,Ui(t,3),o,!0)}function va(n){return null!=n&&n.length?$r(n,1):[]}function ya(n){return n&&n.length?n[0]:i}var xa=Eo(function(n){var t=ne(n,qo);return t.length&&t[0]===n[0]?ro(t):[]}),wa=Eo(function(n){var t=_a(n),e=ne(n,qo);return t===_a(e)?t=i:e.pop(),e.length&&e[0]===n[0]?ro(e,Ui(t,2)):[]}),ka=Eo(function(n){var t=_a(n),e=ne(n,qo);return(t="function"==typeof t?t:i)&&e.pop(),e.length&&e[0]===n[0]?ro(e,i,t):[]});function _a(n){var t=null==n?0:n.length;return t?n[t-1]:i}var Oa=Eo(Ea);function Ea(n,t){return n&&n.length&&t&&t.length?wo(n,t):n}var Sa=Ii(function(n,t){var e=null==n?0:n.length,r=Ar(n,t);return ko(n,ne(t,function(n){return Ki(n,e)?+n:n}).sort(ti)),r});function ja(n){return null==n?n:Je.call(n)}var Pa=Eo(function(n){return zo($r(n,1,xl,!0))}),Ca=Eo(function(n){var t=_a(n);return xl(t)&&(t=i),zo($r(n,1,xl,!0),Ui(t,2))}),Ta=Eo(function(n){var t=_a(n);return t="function"==typeof t?t:i,zo($r(n,1,xl,!0),i,t)});function Ia(n){if(!n||!n.length)return[];var t=0;return n=Jt(n,function(n){if(xl(n))return t=qe(n.length,t),!0}),be(t,function(t){return ne(n,pe(t))})}function Ra(n,t){if(!n||!n.length)return[];var e=Ia(n);return null==t?e:ne(e,function(n){return qt(t,i,n)})}var Ma=Eo(function(n,t){return xl(n)?zr(n,t):[]}),Aa=Eo(function(n){return Wo(Jt(n,xl))}),La=Eo(function(n){var t=_a(n);return xl(t)&&(t=i),Wo(Jt(n,xl),Ui(t,2))}),Na=Eo(function(n){var t=_a(n);return t="function"==typeof t?t:i,Wo(Jt(n,xl),i,t)}),Ua=Eo(Ia);var Da=Eo(function(n){var t=n.length,e=t>1?n[t-1]:i;return Ra(n,e="function"==typeof e?(n.pop(),e):i)});function za(n){var t=mr(n);return t.__chain__=!0,t}function Fa(n,t){return t(n)}var Ba=Ii(function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,o=function(t){return Ar(t,n)};return!(t>1||this.__actions__.length)&&r instanceof vr&&Ki(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:Fa,args:[o],thisArg:i}),new gr(r,this.__chain__).thru(function(n){return t&&!n.length&&n.push(i),n})):this.thru(o)});var Va=ai(function(n,t,e){ft.call(n,e)?++n[e]:Mr(n,e,1)});var Ha=di(ba),Wa=di(ga);function $a(n,t){return(gl(n)?Gt:Fr)(n,Ui(t,3))}function qa(n,t){return(gl(n)?Yt:Br)(n,Ui(t,3))}var Ka=ai(function(n,t,e){ft.call(n,e)?n[e].push(t):Mr(n,e,[t])});var Ga=Eo(function(n,t,e){var o=-1,i="function"==typeof t,a=yl(n)?r(n.length):[];return Fr(n,function(n){a[++o]=i?qt(t,n,e):oo(n,t,e)}),a}),Ya=ai(function(n,t,e){Mr(n,e,t)});function Xa(n,t){return(gl(n)?ne:mo)(n,Ui(t,3))}var Ja=ai(function(n,t,e){n[e?0:1].push(t)},function(){return[[],[]]});var Qa=Eo(function(n,t){if(null==n)return[];var e=t.length;return e>1&&Gi(n,t[0],t[1])?t=[]:e>2&&Gi(t[0],t[1],t[2])&&(t=[t[0]]),yo(n,$r(t,1),[])}),Za=Ue||function(){return At.Date.now()};function nl(n,t,e){return t=e?i:t,t=n&&null==t?n.length:t,Si(n,O,i,i,i,i,t)}function tl(n,t){var e;if("function"!=typeof t)throw new it(u);return n=Bl(n),function(){return--n>0&&(e=t.apply(this,arguments)),n<=1&&(t=i),e}}var el=Eo(function(n,t,e){var r=g;if(e.length){var o=Pe(e,Ni(el));r|=k}return Si(n,r,t,e,o)}),rl=Eo(function(n,t,e){var r=g|v;if(e.length){var o=Pe(e,Ni(rl));r|=k}return Si(t,r,n,e,o)});function ol(n,t,e){var r,o,a,l,c,s,f=0,p=!1,d=!1,m=!0;if("function"!=typeof n)throw new it(u);function h(t){var e=r,a=o;return r=o=i,f=t,l=n.apply(a,e)}function b(n){var e=n-s;return s===i||e>=t||e<0||d&&n-f>=a}function g(){var n=Za();if(b(n))return v(n);c=oa(g,function(n){var e=t-(n-s);return d?Ke(e,a-(n-f)):e}(n))}function v(n){return c=i,m&&r?h(n):(r=o=i,l)}function y(){var n=Za(),e=b(n);if(r=arguments,o=this,s=n,e){if(c===i)return function(n){return f=n,c=oa(g,t),p?h(n):l}(s);if(d)return c=oa(g,t),h(s)}return c===i&&(c=oa(g,t)),l}return t=Hl(t)||0,jl(e)&&(p=!!e.leading,a=(d="maxWait"in e)?qe(Hl(e.maxWait)||0,t):a,m="trailing"in e?!!e.trailing:m),y.cancel=function(){c!==i&&Jo(c),f=0,r=s=o=c=i},y.flush=function(){return c===i?l:v(Za())},y}var il=Eo(function(n,t){return Dr(n,1,t)}),al=Eo(function(n,t,e){return Dr(n,Hl(t)||0,e)});function ll(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new it(u);var e=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=e.cache;if(i.has(o))return i.get(o);var a=n.apply(this,r);return e.cache=i.set(o,a)||i,a};return e.cache=new(ll.Cache||wr),e}function ul(n){if("function"!=typeof n)throw new it(u);return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2])}return!n.apply(this,t)}}ll.Cache=wr;var cl=Yo(function(n,t){var e=(t=1==t.length&&gl(t[0])?ne(t[0],ge(Ui())):ne($r(t,1),ge(Ui()))).length;return Eo(function(r){for(var o=-1,i=Ke(r.length,e);++o<i;)r[o]=t[o].call(this,r[o]);return qt(n,this,r)})}),sl=Eo(function(n,t){var e=Pe(t,Ni(sl));return Si(n,k,i,t,e)}),fl=Eo(function(n,t){var e=Pe(t,Ni(fl));return Si(n,_,i,t,e)}),pl=Ii(function(n,t){return Si(n,E,i,i,i,t)});function dl(n,t){return n===t||n!=n&&t!=t}var ml=wi(no),hl=wi(function(n,t){return n>=t}),bl=io(function(){return arguments}())?io:function(n){return Pl(n)&&ft.call(n,"callee")&&!Lt.call(n,"callee")},gl=r.isArray,vl=Ft?ge(Ft):function(n){return Pl(n)&&Zr(n)==cn};function yl(n){return null!=n&&Sl(n.length)&&!Ol(n)}function xl(n){return Pl(n)&&yl(n)}var wl=Ve||Hu,kl=Bt?ge(Bt):function(n){return Pl(n)&&Zr(n)==$};function _l(n){if(!Pl(n))return!1;var t=Zr(n);return t==K||t==q||"string"==typeof n.message&&"string"==typeof n.name&&!Il(n)}function Ol(n){if(!jl(n))return!1;var t=Zr(n);return t==G||t==Y||t==H||t==nn}function El(n){return"number"==typeof n&&n==Bl(n)}function Sl(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=A}function jl(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function Pl(n){return null!=n&&"object"==typeof n}var Cl=Vt?ge(Vt):function(n){return Pl(n)&&Hi(n)==X};function Tl(n){return"number"==typeof n||Pl(n)&&Zr(n)==J}function Il(n){if(!Pl(n)||Zr(n)!=Z)return!1;var t=Rt(n);if(null===t)return!0;var e=ft.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&st.call(e)==ht}var Rl=Ht?ge(Ht):function(n){return Pl(n)&&Zr(n)==tn};var Ml=Wt?ge(Wt):function(n){return Pl(n)&&Hi(n)==en};function Al(n){return"string"==typeof n||!gl(n)&&Pl(n)&&Zr(n)==rn}function Ll(n){return"symbol"==typeof n||Pl(n)&&Zr(n)==on}var Nl=$t?ge($t):function(n){return Pl(n)&&Sl(n.length)&&!!jt[Zr(n)]};var Ul=wi(po),Dl=wi(function(n,t){return n<=t});function zl(n){if(!n)return[];if(yl(n))return Al(n)?Me(n):oi(n);if(zt&&n[zt])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[zt]());var t=Hi(n);return(t==X?Se:t==en?Te:du)(n)}function Fl(n){return n?(n=Hl(n))===M||n===-M?(n<0?-1:1)*L:n==n?n:0:0===n?n:0}function Bl(n){var t=Fl(n),e=t%1;return t==t?e?t-e:t:0}function Vl(n){return n?Lr(Bl(n),0,U):0}function Hl(n){if("number"==typeof n)return n;if(Ll(n))return N;if(jl(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=jl(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(Ln,"");var e=qn.test(n);return e||Gn.test(n)?It(n.slice(2),e?2:8):$n.test(n)?N:+n}function Wl(n){return ii(n,iu(n))}function $l(n){return null==n?"":Do(n)}var ql=li(function(n,t){if(Qi(t)||yl(t))ii(t,ou(t),n);else for(var e in t)ft.call(t,e)&&Cr(n,e,t[e])}),Kl=li(function(n,t){ii(t,iu(t),n)}),Gl=li(function(n,t,e,r){ii(t,iu(t),n,r)}),Yl=li(function(n,t,e,r){ii(t,ou(t),n,r)}),Xl=Ii(Ar);var Jl=Eo(function(n,t){n=et(n);var e=-1,r=t.length,o=r>2?t[2]:i;for(o&&Gi(t[0],t[1],o)&&(r=1);++e<r;)for(var a=t[e],l=iu(a),u=-1,c=l.length;++u<c;){var s=l[u],f=n[s];(f===i||dl(f,ut[s])&&!ft.call(n,s))&&(n[s]=a[s])}return n}),Ql=Eo(function(n){return n.push(i,Pi),qt(lu,i,n)});function Zl(n,t,e){var r=null==n?i:Jr(n,t);return r===i?e:r}function nu(n,t){return null!=n&&Wi(n,t,eo)}var tu=bi(function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=mt.call(t)),n[t]=e},ju(Tu)),eu=bi(function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=mt.call(t)),ft.call(n,t)?n[t].push(e):n[t]=[e]},Ui),ru=Eo(oo);function ou(n){return yl(n)?Or(n):so(n)}function iu(n){return yl(n)?Or(n,!0):fo(n)}var au=li(function(n,t,e){go(n,t,e)}),lu=li(function(n,t,e,r){go(n,t,e,r)}),uu=Ii(function(n,t){var e={};if(null==n)return e;var r=!1;t=ne(t,function(t){return t=Go(t,n),r||(r=t.length>1),t}),ii(n,Mi(n),e),r&&(e=Nr(e,p|d|m,Ci));for(var o=t.length;o--;)Fo(e,t[o]);return e});var cu=Ii(function(n,t){return null==n?{}:function(n,t){return xo(n,t,function(t,e){return nu(n,e)})}(n,t)});function su(n,t){if(null==n)return{};var e=ne(Mi(n),function(n){return[n]});return t=Ui(t),xo(n,e,function(n,e){return t(n,e[0])})}var fu=Ei(ou),pu=Ei(iu);function du(n){return null==n?[]:ve(n,ou(n))}var mu=fi(function(n,t,e){return t=t.toLowerCase(),n+(e?hu(t):t)});function hu(n){return _u($l(n).toLowerCase())}function bu(n){return(n=$l(n))&&n.replace(Xn,ke).replace(xt,"")}var gu=fi(function(n,t,e){return n+(e?"-":"")+t.toLowerCase()}),vu=fi(function(n,t,e){return n+(e?" ":"")+t.toLowerCase()}),yu=si("toLowerCase");var xu=fi(function(n,t,e){return n+(e?"_":"")+t.toLowerCase()});var wu=fi(function(n,t,e){return n+(e?" ":"")+_u(t)});var ku=fi(function(n,t,e){return n+(e?" ":"")+t.toUpperCase()}),_u=si("toUpperCase");function Ou(n,t,e){return n=$l(n),(t=e?i:t)===i?function(n){return Ot.test(n)}(n)?function(n){return n.match(kt)||[]}(n):function(n){return n.match(Bn)||[]}(n):n.match(t)||[]}var Eu=Eo(function(n,t){try{return qt(n,i,t)}catch(n){return _l(n)?n:new Zn(n)}}),Su=Ii(function(n,t){return Gt(t,function(t){t=sa(t),Mr(n,t,el(n[t],n))}),n});function ju(n){return function(){return n}}var Pu=mi(),Cu=mi(!0);function Tu(n){return n}function Iu(n){return co("function"==typeof n?n:Nr(n,p))}var Ru=Eo(function(n,t){return function(e){return oo(e,n,t)}}),Mu=Eo(function(n,t){return function(e){return oo(n,e,t)}});function Au(n,t,e){var r=ou(t),o=Xr(t,r);null!=e||jl(t)&&(o.length||!r.length)||(e=t,t=n,n=this,o=Xr(t,ou(t)));var i=!(jl(e)&&"chain"in e&&!e.chain),a=Ol(n);return Gt(o,function(e){var r=t[e];n[e]=r,a&&(n.prototype[e]=function(){var t=this.__chain__;if(i||t){var e=n(this.__wrapped__);return(e.__actions__=oi(this.__actions__)).push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,te([this.value()],arguments))})}),n}function Lu(){}var Nu=vi(ne),Uu=vi(Xt),Du=vi(oe);function zu(n){return Yi(n)?pe(sa(n)):function(n){return function(t){return Jr(t,n)}}(n)}var Fu=xi(),Bu=xi(!0);function Vu(){return[]}function Hu(){return!1}var Wu=gi(function(n,t){return n+t},0),$u=_i("ceil"),qu=gi(function(n,t){return n/t},1),Ku=_i("floor");var Gu,Yu=gi(function(n,t){return n*t},1),Xu=_i("round"),Ju=gi(function(n,t){return n-t},0);return mr.after=function(n,t){if("function"!=typeof t)throw new it(u);return n=Bl(n),function(){if(--n<1)return t.apply(this,arguments)}},mr.ary=nl,mr.assign=ql,mr.assignIn=Kl,mr.assignInWith=Gl,mr.assignWith=Yl,mr.at=Xl,mr.before=tl,mr.bind=el,mr.bindAll=Su,mr.bindKey=rl,mr.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return gl(n)?n:[n]},mr.chain=za,mr.chunk=function(n,t,e){t=(e?Gi(n,t,e):t===i)?1:qe(Bl(t),0);var o=null==n?0:n.length;if(!o||t<1)return[];for(var a=0,l=0,u=r(ze(o/t));a<o;)u[l++]=Ro(n,a,a+=t);return u},mr.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,o=[];++t<e;){var i=n[t];i&&(o[r++]=i)}return o},mr.concat=function(){var n=arguments.length;if(!n)return[];for(var t=r(n-1),e=arguments[0],o=n;o--;)t[o-1]=arguments[o];return te(gl(e)?oi(e):[e],$r(t,1))},mr.cond=function(n){var t=null==n?0:n.length,e=Ui();return n=t?ne(n,function(n){if("function"!=typeof n[1])throw new it(u);return[e(n[0]),n[1]]}):[],Eo(function(e){for(var r=-1;++r<t;){var o=n[r];if(qt(o[0],this,e))return qt(o[1],this,e)}})},mr.conforms=function(n){return function(n){var t=ou(n);return function(e){return Ur(e,n,t)}}(Nr(n,p))},mr.constant=ju,mr.countBy=Va,mr.create=function(n,t){var e=hr(n);return null==t?e:Rr(e,t)},mr.curry=function n(t,e,r){var o=Si(t,x,i,i,i,i,i,e=r?i:e);return o.placeholder=n.placeholder,o},mr.curryRight=function n(t,e,r){var o=Si(t,w,i,i,i,i,i,e=r?i:e);return o.placeholder=n.placeholder,o},mr.debounce=ol,mr.defaults=Jl,mr.defaultsDeep=Ql,mr.defer=il,mr.delay=al,mr.difference=da,mr.differenceBy=ma,mr.differenceWith=ha,mr.drop=function(n,t,e){var r=null==n?0:n.length;return r?Ro(n,(t=e||t===i?1:Bl(t))<0?0:t,r):[]},mr.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?Ro(n,0,(t=r-(t=e||t===i?1:Bl(t)))<0?0:t):[]},mr.dropRightWhile=function(n,t){return n&&n.length?Vo(n,Ui(t,3),!0,!0):[]},mr.dropWhile=function(n,t){return n&&n.length?Vo(n,Ui(t,3),!0):[]},mr.fill=function(n,t,e,r){var o=null==n?0:n.length;return o?(e&&"number"!=typeof e&&Gi(n,t,e)&&(e=0,r=o),function(n,t,e,r){var o=n.length;for((e=Bl(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:Bl(r))<0&&(r+=o),r=e>r?0:Vl(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},mr.filter=function(n,t){return(gl(n)?Jt:Wr)(n,Ui(t,3))},mr.flatMap=function(n,t){return $r(Xa(n,t),1)},mr.flatMapDeep=function(n,t){return $r(Xa(n,t),M)},mr.flatMapDepth=function(n,t,e){return e=e===i?1:Bl(e),$r(Xa(n,t),e)},mr.flatten=va,mr.flattenDeep=function(n){return null!=n&&n.length?$r(n,M):[]},mr.flattenDepth=function(n,t){return null!=n&&n.length?$r(n,t=t===i?1:Bl(t)):[]},mr.flip=function(n){return Si(n,S)},mr.flow=Pu,mr.flowRight=Cu,mr.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var o=n[t];r[o[0]]=o[1]}return r},mr.functions=function(n){return null==n?[]:Xr(n,ou(n))},mr.functionsIn=function(n){return null==n?[]:Xr(n,iu(n))},mr.groupBy=Ka,mr.initial=function(n){return null!=n&&n.length?Ro(n,0,-1):[]},mr.intersection=xa,mr.intersectionBy=wa,mr.intersectionWith=ka,mr.invert=tu,mr.invertBy=eu,mr.invokeMap=Ga,mr.iteratee=Iu,mr.keyBy=Ya,mr.keys=ou,mr.keysIn=iu,mr.map=Xa,mr.mapKeys=function(n,t){var e={};return t=Ui(t,3),Gr(n,function(n,r,o){Mr(e,t(n,r,o),n)}),e},mr.mapValues=function(n,t){var e={};return t=Ui(t,3),Gr(n,function(n,r,o){Mr(e,r,t(n,r,o))}),e},mr.matches=function(n){return ho(Nr(n,p))},mr.matchesProperty=function(n,t){return bo(n,Nr(t,p))},mr.memoize=ll,mr.merge=au,mr.mergeWith=lu,mr.method=Ru,mr.methodOf=Mu,mr.mixin=Au,mr.negate=ul,mr.nthArg=function(n){return n=Bl(n),Eo(function(t){return vo(t,n)})},mr.omit=uu,mr.omitBy=function(n,t){return su(n,ul(Ui(t)))},mr.once=function(n){return tl(2,n)},mr.orderBy=function(n,t,e,r){return null==n?[]:(gl(t)||(t=null==t?[]:[t]),gl(e=r?i:e)||(e=null==e?[]:[e]),yo(n,t,e))},mr.over=Nu,mr.overArgs=cl,mr.overEvery=Uu,mr.overSome=Du,mr.partial=sl,mr.partialRight=fl,mr.partition=Ja,mr.pick=cu,mr.pickBy=su,mr.property=zu,mr.propertyOf=function(n){return function(t){return null==n?i:Jr(n,t)}},mr.pull=Oa,mr.pullAll=Ea,mr.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?wo(n,t,Ui(e,2)):n},mr.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?wo(n,t,i,e):n},mr.pullAt=Sa,mr.range=Fu,mr.rangeRight=Bu,mr.rearg=pl,mr.reject=function(n,t){return(gl(n)?Jt:Wr)(n,ul(Ui(t,3)))},mr.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,o=[],i=n.length;for(t=Ui(t,3);++r<i;){var a=n[r];t(a,r,n)&&(e.push(a),o.push(r))}return ko(n,o),e},mr.rest=function(n,t){if("function"!=typeof n)throw new it(u);return Eo(n,t=t===i?t:Bl(t))},mr.reverse=ja,mr.sampleSize=function(n,t,e){return t=(e?Gi(n,t,e):t===i)?1:Bl(t),(gl(n)?Sr:jo)(n,t)},mr.set=function(n,t,e){return null==n?n:Po(n,t,e)},mr.setWith=function(n,t,e,r){return r="function"==typeof r?r:i,null==n?n:Po(n,t,e,r)},mr.shuffle=function(n){return(gl(n)?jr:Io)(n)},mr.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&Gi(n,t,e)?(t=0,e=r):(t=null==t?0:Bl(t),e=e===i?r:Bl(e)),Ro(n,t,e)):[]},mr.sortBy=Qa,mr.sortedUniq=function(n){return n&&n.length?No(n):[]},mr.sortedUniqBy=function(n,t){return n&&n.length?No(n,Ui(t,2)):[]},mr.split=function(n,t,e){return e&&"number"!=typeof e&&Gi(n,t,e)&&(t=e=i),(e=e===i?U:e>>>0)?(n=$l(n))&&("string"==typeof t||null!=t&&!Rl(t))&&!(t=Do(t))&&Ee(n)?Xo(Me(n),0,e):n.split(t,e):[]},mr.spread=function(n,t){if("function"!=typeof n)throw new it(u);return t=null==t?0:qe(Bl(t),0),Eo(function(e){var r=e[t],o=Xo(e,0,t);return r&&te(o,r),qt(n,this,o)})},mr.tail=function(n){var t=null==n?0:n.length;return t?Ro(n,1,t):[]},mr.take=function(n,t,e){return n&&n.length?Ro(n,0,(t=e||t===i?1:Bl(t))<0?0:t):[]},mr.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?Ro(n,(t=r-(t=e||t===i?1:Bl(t)))<0?0:t,r):[]},mr.takeRightWhile=function(n,t){return n&&n.length?Vo(n,Ui(t,3),!1,!0):[]},mr.takeWhile=function(n,t){return n&&n.length?Vo(n,Ui(t,3)):[]},mr.tap=function(n,t){return t(n),n},mr.throttle=function(n,t,e){var r=!0,o=!0;if("function"!=typeof n)throw new it(u);return jl(e)&&(r="leading"in e?!!e.leading:r,o="trailing"in e?!!e.trailing:o),ol(n,t,{leading:r,maxWait:t,trailing:o})},mr.thru=Fa,mr.toArray=zl,mr.toPairs=fu,mr.toPairsIn=pu,mr.toPath=function(n){return gl(n)?ne(n,sa):Ll(n)?[n]:oi(ca($l(n)))},mr.toPlainObject=Wl,mr.transform=function(n,t,e){var r=gl(n),o=r||wl(n)||Nl(n);if(t=Ui(t,4),null==e){var i=n&&n.constructor;e=o?r?new i:[]:jl(n)&&Ol(i)?hr(Rt(n)):{}}return(o?Gt:Gr)(n,function(n,r,o){return t(e,n,r,o)}),e},mr.unary=function(n){return nl(n,1)},mr.union=Pa,mr.unionBy=Ca,mr.unionWith=Ta,mr.uniq=function(n){return n&&n.length?zo(n):[]},mr.uniqBy=function(n,t){return n&&n.length?zo(n,Ui(t,2)):[]},mr.uniqWith=function(n,t){return t="function"==typeof t?t:i,n&&n.length?zo(n,i,t):[]},mr.unset=function(n,t){return null==n||Fo(n,t)},mr.unzip=Ia,mr.unzipWith=Ra,mr.update=function(n,t,e){return null==n?n:Bo(n,t,Ko(e))},mr.updateWith=function(n,t,e,r){return r="function"==typeof r?r:i,null==n?n:Bo(n,t,Ko(e),r)},mr.values=du,mr.valuesIn=function(n){return null==n?[]:ve(n,iu(n))},mr.without=Ma,mr.words=Ou,mr.wrap=function(n,t){return sl(Ko(t),n)},mr.xor=Aa,mr.xorBy=La,mr.xorWith=Na,mr.zip=Ua,mr.zipObject=function(n,t){return $o(n||[],t||[],Cr)},mr.zipObjectDeep=function(n,t){return $o(n||[],t||[],Po)},mr.zipWith=Da,mr.entries=fu,mr.entriesIn=pu,mr.extend=Kl,mr.extendWith=Gl,Au(mr,mr),mr.add=Wu,mr.attempt=Eu,mr.camelCase=mu,mr.capitalize=hu,mr.ceil=$u,mr.clamp=function(n,t,e){return e===i&&(e=t,t=i),e!==i&&(e=(e=Hl(e))==e?e:0),t!==i&&(t=(t=Hl(t))==t?t:0),Lr(Hl(n),t,e)},mr.clone=function(n){return Nr(n,m)},mr.cloneDeep=function(n){return Nr(n,p|m)},mr.cloneDeepWith=function(n,t){return Nr(n,p|m,t="function"==typeof t?t:i)},mr.cloneWith=function(n,t){return Nr(n,m,t="function"==typeof t?t:i)},mr.conformsTo=function(n,t){return null==t||Ur(n,t,ou(t))},mr.deburr=bu,mr.defaultTo=function(n,t){return null==n||n!=n?t:n},mr.divide=qu,mr.endsWith=function(n,t,e){n=$l(n),t=Do(t);var r=n.length,o=e=e===i?r:Lr(Bl(e),0,r);return(e-=t.length)>=0&&n.slice(e,o)==t},mr.eq=dl,mr.escape=function(n){return(n=$l(n))&&Sn.test(n)?n.replace(On,_e):n},mr.escapeRegExp=function(n){return(n=$l(n))&&An.test(n)?n.replace(Mn,"\\$&"):n},mr.every=function(n,t,e){var r=gl(n)?Xt:Vr;return e&&Gi(n,t,e)&&(t=i),r(n,Ui(t,3))},mr.find=Ha,mr.findIndex=ba,mr.findKey=function(n,t){return ae(n,Ui(t,3),Gr)},mr.findLast=Wa,mr.findLastIndex=ga,mr.findLastKey=function(n,t){return ae(n,Ui(t,3),Yr)},mr.floor=Ku,mr.forEach=$a,mr.forEachRight=qa,mr.forIn=function(n,t){return null==n?n:qr(n,Ui(t,3),iu)},mr.forInRight=function(n,t){return null==n?n:Kr(n,Ui(t,3),iu)},mr.forOwn=function(n,t){return n&&Gr(n,Ui(t,3))},mr.forOwnRight=function(n,t){return n&&Yr(n,Ui(t,3))},mr.get=Zl,mr.gt=ml,mr.gte=hl,mr.has=function(n,t){return null!=n&&Wi(n,t,to)},mr.hasIn=nu,mr.head=ya,mr.identity=Tu,mr.includes=function(n,t,e,r){n=yl(n)?n:du(n),e=e&&!r?Bl(e):0;var o=n.length;return e<0&&(e=qe(o+e,0)),Al(n)?e<=o&&n.indexOf(t,e)>-1:!!o&&ue(n,t,e)>-1},mr.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=null==e?0:Bl(e);return o<0&&(o=qe(r+o,0)),ue(n,t,o)},mr.inRange=function(n,t,e){return t=Fl(t),e===i?(e=t,t=0):e=Fl(e),function(n,t,e){return n>=Ke(t,e)&&n<qe(t,e)}(n=Hl(n),t,e)},mr.invoke=ru,mr.isArguments=bl,mr.isArray=gl,mr.isArrayBuffer=vl,mr.isArrayLike=yl,mr.isArrayLikeObject=xl,mr.isBoolean=function(n){return!0===n||!1===n||Pl(n)&&Zr(n)==W},mr.isBuffer=wl,mr.isDate=kl,mr.isElement=function(n){return Pl(n)&&1===n.nodeType&&!Il(n)},mr.isEmpty=function(n){if(null==n)return!0;if(yl(n)&&(gl(n)||"string"==typeof n||"function"==typeof n.splice||wl(n)||Nl(n)||bl(n)))return!n.length;var t=Hi(n);if(t==X||t==en)return!n.size;if(Qi(n))return!so(n).length;for(var e in n)if(ft.call(n,e))return!1;return!0},mr.isEqual=function(n,t){return ao(n,t)},mr.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:i)?e(n,t):i;return r===i?ao(n,t,i,e):!!r},mr.isError=_l,mr.isFinite=function(n){return"number"==typeof n&&He(n)},mr.isFunction=Ol,mr.isInteger=El,mr.isLength=Sl,mr.isMap=Cl,mr.isMatch=function(n,t){return n===t||lo(n,t,zi(t))},mr.isMatchWith=function(n,t,e){return e="function"==typeof e?e:i,lo(n,t,zi(t),e)},mr.isNaN=function(n){return Tl(n)&&n!=+n},mr.isNative=function(n){if(Ji(n))throw new Zn(l);return uo(n)},mr.isNil=function(n){return null==n},mr.isNull=function(n){return null===n},mr.isNumber=Tl,mr.isObject=jl,mr.isObjectLike=Pl,mr.isPlainObject=Il,mr.isRegExp=Rl,mr.isSafeInteger=function(n){return El(n)&&n>=-A&&n<=A},mr.isSet=Ml,mr.isString=Al,mr.isSymbol=Ll,mr.isTypedArray=Nl,mr.isUndefined=function(n){return n===i},mr.isWeakMap=function(n){return Pl(n)&&Hi(n)==ln},mr.isWeakSet=function(n){return Pl(n)&&Zr(n)==un},mr.join=function(n,t){return null==n?"":We.call(n,t)},mr.kebabCase=gu,mr.last=_a,mr.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=Bl(e))<0?qe(r+o,0):Ke(o,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,o):le(n,se,o,!0)},mr.lowerCase=vu,mr.lowerFirst=yu,mr.lt=Ul,mr.lte=Dl,mr.max=function(n){return n&&n.length?Hr(n,Tu,no):i},mr.maxBy=function(n,t){return n&&n.length?Hr(n,Ui(t,2),no):i},mr.mean=function(n){return fe(n,Tu)},mr.meanBy=function(n,t){return fe(n,Ui(t,2))},mr.min=function(n){return n&&n.length?Hr(n,Tu,po):i},mr.minBy=function(n,t){return n&&n.length?Hr(n,Ui(t,2),po):i},mr.stubArray=Vu,mr.stubFalse=Hu,mr.stubObject=function(){return{}},mr.stubString=function(){return""},mr.stubTrue=function(){return!0},mr.multiply=Yu,mr.nth=function(n,t){return n&&n.length?vo(n,Bl(t)):i},mr.noConflict=function(){return At._===this&&(At._=bt),this},mr.noop=Lu,mr.now=Za,mr.pad=function(n,t,e){n=$l(n);var r=(t=Bl(t))?Re(n):0;if(!t||r>=t)return n;var o=(t-r)/2;return yi(Fe(o),e)+n+yi(ze(o),e)},mr.padEnd=function(n,t,e){n=$l(n);var r=(t=Bl(t))?Re(n):0;return t&&r<t?n+yi(t-r,e):n},mr.padStart=function(n,t,e){n=$l(n);var r=(t=Bl(t))?Re(n):0;return t&&r<t?yi(t-r,e)+n:n},mr.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),Ye($l(n).replace(Nn,""),t||0)},mr.random=function(n,t,e){if(e&&"boolean"!=typeof e&&Gi(n,t,e)&&(t=e=i),e===i&&("boolean"==typeof t?(e=t,t=i):"boolean"==typeof n&&(e=n,n=i)),n===i&&t===i?(n=0,t=1):(n=Fl(n),t===i?(t=n,n=0):t=Fl(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var o=Xe();return Ke(n+o*(t-n+Tt("1e-"+((o+"").length-1))),t)}return _o(n,t)},mr.reduce=function(n,t,e){var r=gl(n)?ee:me,o=arguments.length<3;return r(n,Ui(t,4),e,o,Fr)},mr.reduceRight=function(n,t,e){var r=gl(n)?re:me,o=arguments.length<3;return r(n,Ui(t,4),e,o,Br)},mr.repeat=function(n,t,e){return t=(e?Gi(n,t,e):t===i)?1:Bl(t),Oo($l(n),t)},mr.replace=function(){var n=arguments,t=$l(n[0]);return n.length<3?t:t.replace(n[1],n[2])},mr.result=function(n,t,e){var r=-1,o=(t=Go(t,n)).length;for(o||(o=1,n=i);++r<o;){var a=null==n?i:n[sa(t[r])];a===i&&(r=o,a=e),n=Ol(a)?a.call(n):a}return n},mr.round=Xu,mr.runInContext=n,mr.sample=function(n){return(gl(n)?Er:So)(n)},mr.size=function(n){if(null==n)return 0;if(yl(n))return Al(n)?Re(n):n.length;var t=Hi(n);return t==X||t==en?n.size:so(n).length},mr.snakeCase=xu,mr.some=function(n,t,e){var r=gl(n)?oe:Mo;return e&&Gi(n,t,e)&&(t=i),r(n,Ui(t,3))},mr.sortedIndex=function(n,t){return Ao(n,t)},mr.sortedIndexBy=function(n,t,e){return Lo(n,t,Ui(e,2))},mr.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=Ao(n,t);if(r<e&&dl(n[r],t))return r}return-1},mr.sortedLastIndex=function(n,t){return Ao(n,t,!0)},mr.sortedLastIndexBy=function(n,t,e){return Lo(n,t,Ui(e,2),!0)},mr.sortedLastIndexOf=function(n,t){if(null!=n&&n.length){var e=Ao(n,t,!0)-1;if(dl(n[e],t))return e}return-1},mr.startCase=wu,mr.startsWith=function(n,t,e){return n=$l(n),e=null==e?0:Lr(Bl(e),0,n.length),t=Do(t),n.slice(e,e+t.length)==t},mr.subtract=Ju,mr.sum=function(n){return n&&n.length?he(n,Tu):0},mr.sumBy=function(n,t){return n&&n.length?he(n,Ui(t,2)):0},mr.template=function(n,t,e){var r=mr.templateSettings;e&&Gi(n,t,e)&&(t=i),n=$l(n),t=Gl({},t,r,ji);var o,a,l=Gl({},t.imports,r.imports,ji),u=ou(l),c=ve(l,u),s=0,f=t.interpolate||Jn,p="__p += '",d=rt((t.escape||Jn).source+"|"+f.source+"|"+(f===Cn?Hn:Jn).source+"|"+(t.evaluate||Jn).source+"|$","g"),m="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++St+"]")+"\n";n.replace(d,function(t,e,r,i,l,u){return r||(r=i),p+=n.slice(s,u).replace(Qn,Oe),e&&(o=!0,p+="' +\n__e("+e+") +\n'"),l&&(a=!0,p+="';\n"+l+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=u+t.length,t}),p+="';\n";var h=t.variable;h||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(xn,""):p).replace(wn,"$1").replace(kn,"$1;"),p="function("+(h||"obj")+") {\n"+(h?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var b=Eu(function(){return nt(u,m+"return "+p).apply(i,c)});if(b.source=p,_l(b))throw b;return b},mr.times=function(n,t){if((n=Bl(n))<1||n>A)return[];var e=U,r=Ke(n,U);t=Ui(t),n-=U;for(var o=be(r,t);++e<n;)t(e);return o},mr.toFinite=Fl,mr.toInteger=Bl,mr.toLength=Vl,mr.toLower=function(n){return $l(n).toLowerCase()},mr.toNumber=Hl,mr.toSafeInteger=function(n){return n?Lr(Bl(n),-A,A):0===n?n:0},mr.toString=$l,mr.toUpper=function(n){return $l(n).toUpperCase()},mr.trim=function(n,t,e){if((n=$l(n))&&(e||t===i))return n.replace(Ln,"");if(!n||!(t=Do(t)))return n;var r=Me(n),o=Me(t);return Xo(r,xe(r,o),we(r,o)+1).join("")},mr.trimEnd=function(n,t,e){if((n=$l(n))&&(e||t===i))return n.replace(Un,"");if(!n||!(t=Do(t)))return n;var r=Me(n);return Xo(r,0,we(r,Me(t))+1).join("")},mr.trimStart=function(n,t,e){if((n=$l(n))&&(e||t===i))return n.replace(Nn,"");if(!n||!(t=Do(t)))return n;var r=Me(n);return Xo(r,xe(r,Me(t))).join("")},mr.truncate=function(n,t){var e=j,r=P;if(jl(t)){var o="separator"in t?t.separator:o;e="length"in t?Bl(t.length):e,r="omission"in t?Do(t.omission):r}var a=(n=$l(n)).length;if(Ee(n)){var l=Me(n);a=l.length}if(e>=a)return n;var u=e-Re(r);if(u<1)return r;var c=l?Xo(l,0,u).join(""):n.slice(0,u);if(o===i)return c+r;if(l&&(u+=c.length-u),Rl(o)){if(n.slice(u).search(o)){var s,f=c;for(o.global||(o=rt(o.source,$l(Wn.exec(o))+"g")),o.lastIndex=0;s=o.exec(f);)var p=s.index;c=c.slice(0,p===i?u:p)}}else if(n.indexOf(Do(o),u)!=u){var d=c.lastIndexOf(o);d>-1&&(c=c.slice(0,d))}return c+r},mr.unescape=function(n){return(n=$l(n))&&En.test(n)?n.replace(_n,Ae):n},mr.uniqueId=function(n){var t=++pt;return $l(n)+t},mr.upperCase=ku,mr.upperFirst=_u,mr.each=$a,mr.eachRight=qa,mr.first=ya,Au(mr,(Gu={},Gr(mr,function(n,t){ft.call(mr.prototype,t)||(Gu[t]=n)}),Gu),{chain:!1}),mr.VERSION="4.17.5",Gt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(n){mr[n].placeholder=mr}),Gt(["drop","take"],function(n,t){vr.prototype[n]=function(e){e=e===i?1:qe(Bl(e),0);var r=this.__filtered__&&!t?new vr(this):this.clone();return r.__filtered__?r.__takeCount__=Ke(e,r.__takeCount__):r.__views__.push({size:Ke(e,U),type:n+(r.__dir__<0?"Right":"")}),r},vr.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}}),Gt(["filter","map","takeWhile"],function(n,t){var e=t+1,r=e==I||3==e;vr.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:Ui(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}}),Gt(["head","last"],function(n,t){var e="take"+(t?"Right":"");vr.prototype[n]=function(){return this[e](1).value()[0]}}),Gt(["initial","tail"],function(n,t){var e="drop"+(t?"":"Right");vr.prototype[n]=function(){return this.__filtered__?new vr(this):this[e](1)}}),vr.prototype.compact=function(){return this.filter(Tu)},vr.prototype.find=function(n){return this.filter(n).head()},vr.prototype.findLast=function(n){return this.reverse().find(n)},vr.prototype.invokeMap=Eo(function(n,t){return"function"==typeof n?new vr(this):this.map(function(e){return oo(e,n,t)})}),vr.prototype.reject=function(n){return this.filter(ul(Ui(n)))},vr.prototype.slice=function(n,t){n=Bl(n);var e=this;return e.__filtered__&&(n>0||t<0)?new vr(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),t!==i&&(e=(t=Bl(t))<0?e.dropRight(-t):e.take(t-n)),e)},vr.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},vr.prototype.toArray=function(){return this.take(U)},Gr(vr.prototype,function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=mr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(mr.prototype[t]=function(){var t=this.__wrapped__,l=r?[1]:arguments,u=t instanceof vr,c=l[0],s=u||gl(t),f=function(n){var t=o.apply(mr,te([n],l));return r&&p?t[0]:t};s&&e&&"function"==typeof c&&1!=c.length&&(u=s=!1);var p=this.__chain__,d=!!this.__actions__.length,m=a&&!p,h=u&&!d;if(!a&&s){t=h?t:new vr(this);var b=n.apply(t,l);return b.__actions__.push({func:Fa,args:[f],thisArg:i}),new gr(b,p)}return m&&h?n.apply(this,l):(b=this.thru(f),m?r?b.value()[0]:b.value():b)})}),Gt(["pop","push","shift","sort","splice","unshift"],function(n){var t=at[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);mr.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(gl(o)?o:[],n)}return this[e](function(e){return t.apply(gl(e)?e:[],n)})}}),Gr(vr.prototype,function(n,t){var e=mr[t];if(e){var r=e.name+"";(ir[r]||(ir[r]=[])).push({name:t,func:e})}}),ir[hi(i,v).name]=[{name:"wrapper",func:i}],vr.prototype.clone=function(){var n=new vr(this.__wrapped__);return n.__actions__=oi(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=oi(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=oi(this.__views__),n},vr.prototype.reverse=function(){if(this.__filtered__){var n=new vr(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},vr.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=gl(n),r=t<0,o=e?n.length:0,i=function(n,t,e){for(var r=-1,o=e.length;++r<o;){var i=e[r],a=i.size;switch(i.type){case"drop":n+=a;break;case"dropRight":t-=a;break;case"take":t=Ke(t,n+a);break;case"takeRight":n=qe(n,t-a)}}return{start:n,end:t}}(0,o,this.__views__),a=i.start,l=i.end,u=l-a,c=r?l:a-1,s=this.__iteratees__,f=s.length,p=0,d=Ke(u,this.__takeCount__);if(!e||!r&&o==u&&d==u)return Ho(n,this.__actions__);var m=[];n:for(;u--&&p<d;){for(var h=-1,b=n[c+=t];++h<f;){var g=s[h],v=g.iteratee,y=g.type,x=v(b);if(y==R)b=x;else if(!x){if(y==I)continue n;break n}}m[p++]=b}return m},mr.prototype.at=Ba,mr.prototype.chain=function(){return za(this)},mr.prototype.commit=function(){return new gr(this.value(),this.__chain__)},mr.prototype.next=function(){this.__values__===i&&(this.__values__=zl(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?i:this.__values__[this.__index__++]}},mr.prototype.plant=function(n){for(var t,e=this;e instanceof br;){var r=pa(e);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;e=e.__wrapped__}return o.__wrapped__=n,t},mr.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof vr){var t=n;return this.__actions__.length&&(t=new vr(this)),(t=t.reverse()).__actions__.push({func:Fa,args:[ja],thisArg:i}),new gr(t,this.__chain__)}return this.thru(ja)},mr.prototype.toJSON=mr.prototype.valueOf=mr.prototype.value=function(){return Ho(this.__wrapped__,this.__actions__)},mr.prototype.first=mr.prototype.head,zt&&(mr.prototype[zt]=function(){return this}),mr}();At._=Le,(o=function(){return Le}.call(t,e,t,r))===i||(r.exports=o)}).call(this)}).call(t,e(66),e(424)(n))},function(n,t,e){"use strict";var r=e(164),o=e(440),i=Object.prototype.toString;function a(n){return"[object Array]"===i.call(n)}function l(n){return null!==n&&"object"==typeof n}function u(n){return"[object Function]"===i.call(n)}function c(n,t){if(null!==n&&void 0!==n)if("object"!=typeof n&&(n=[n]),a(n))for(var e=0,r=n.length;e<r;e++)t.call(null,n[e],e,n);else for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&t.call(null,n[o],o,n)}n.exports={isArray:a,isArrayBuffer:function(n){return"[object ArrayBuffer]"===i.call(n)},isBuffer:o,isFormData:function(n){return"undefined"!=typeof FormData&&n instanceof FormData},isArrayBufferView:function(n){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(n):n&&n.buffer&&n.buffer instanceof ArrayBuffer},isString:function(n){return"string"==typeof n},isNumber:function(n){return"number"==typeof n},isObject:l,isUndefined:function(n){return void 0===n},isDate:function(n){return"[object Date]"===i.call(n)},isFile:function(n){return"[object File]"===i.call(n)},isBlob:function(n){return"[object Blob]"===i.call(n)},isFunction:u,isStream:function(n){return l(n)&&u(n.pipe)},isURLSearchParams:function(n){return"undefined"!=typeof URLSearchParams&&n instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function n(){var t={};function e(e,r){"object"==typeof t[r]&&"object"==typeof e?t[r]=n(t[r],e):t[r]=e}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],e);return t},extend:function(n,t,e){return c(t,function(t,o){n[o]=e&&"function"==typeof t?r(t,e):t}),n},trim:function(n){return n.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(n,t,e){var r=e(14);n.exports=function(n,t,e){if(r(n),void 0===t)return n;switch(e){case 1:return function(e){return n.call(t,e)};case 2:return function(e,r){return n.call(t,e,r)};case 3:return function(e,r,o){return n.call(t,e,r,o)}}return function(){return n.apply(t,arguments)}}},function(n,t){var e={}.toString;n.exports=function(n){return e.call(n).slice(8,-1)}},function(n,t,e){"use strict";var r=e(4);n.exports=function(n,t){return!!n&&r(function(){t?n.call(null,function(){},1):n.call(null)})}},function(n,t,e){"use strict";n.exports=function(n,t,e,r,o,i,a,l){if(!n){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[e,r,o,i,a,l],s=0;(u=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(n,t){var e=n.exports={version:"2.5.3"};"number"==typeof __e&&(__e=e)},function(n,t,e){var r=e(5);n.exports=function(n,t){if(!r(n))return n;var e,o;if(t&&"function"==typeof(e=n.toString)&&!r(o=e.call(n)))return o;if("function"==typeof(e=n.valueOf)&&!r(o=e.call(n)))return o;if(!t&&"function"==typeof(e=n.toString)&&!r(o=e.call(n)))return o;throw TypeError("Can't convert object to primitive value")}},function(n,t){n.exports=function(n){if(void 0==n)throw TypeError("Can't call method on  "+n);return n}},function(n,t){var e=Math.ceil,r=Math.floor;n.exports=function(n){return isNaN(n=+n)?0:(n>0?r:e)(n)}},function(n,t,e){var r=e(0),o=e(29),i=e(4);n.exports=function(n,t){var e=(o.Object||{})[n]||Object[n],a={};a[n]=t(e),r(r.S+r.F*i(function(){e(1)}),"Object",a)}},function(n,t,e){var r=e(25),o=e(59),i=e(12),a=e(9),l=e(105);n.exports=function(n,t){var e=1==n,u=2==n,c=3==n,s=4==n,f=6==n,p=5==n||f,d=t||l;return function(t,l,m){for(var h,b,g=i(t),v=o(g),y=r(l,m,3),x=a(v.length),w=0,k=e?d(t,x):u?d(t,0):void 0;x>w;w++)if((p||w in v)&&(b=y(h=v[w],w,g),n))if(e)k[w]=b;else if(b)switch(n){case 3:return!0;case 5:return h;case 6:return w;case 2:k.push(h)}else if(s)return!1;return f?-1:c||s?s:k}}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(n,r){e.d(t,"Reaction",function(){return ce}),e.d(t,"untracked",function(){return oe}),e.d(t,"IDerivationState",function(){return It}),e.d(t,"createAtom",function(){return Yn}),e.d(t,"spy",function(){return v}),e.d(t,"comparer",function(){return N}),e.d(t,"isObservableObject",function(){return ln}),e.d(t,"isBoxedObservable",function(){return J}),e.d(t,"isObservableArray",function(){return st}),e.d(t,"ObservableMap",function(){return zn}),e.d(t,"isObservableMap",function(){return Vn}),e.d(t,"transaction",function(){return Un}),e.d(t,"observable",function(){return Cn}),e.d(t,"computed",function(){return gn}),e.d(t,"isObservable",function(){return sn}),e.d(t,"isObservableProp",function(){return fn}),e.d(t,"isComputed",function(){return dn}),e.d(t,"isComputedProp",function(){return mn}),e.d(t,"extendObservable",function(){return yn}),e.d(t,"extendShallowObservable",function(){return vn}),e.d(t,"observe",function(){return be}),e.d(t,"intercept",function(){return ge}),e.d(t,"autorun",function(){return U}),e.d(t,"reaction",function(){return F}),e.d(t,"when",function(){return ve}),e.d(t,"action",function(){return S}),e.d(t,"isAction",function(){return P}),e.d(t,"runInAction",function(){return j}),e.d(t,"keys",function(){return xe}),e.d(t,"values",function(){return we}),e.d(t,"set",function(){return ke}),e.d(t,"remove",function(){return _e}),e.d(t,"has",function(){return Oe}),e.d(t,"get",function(){return Ee}),e.d(t,"decorate",function(){return Se}),e.d(t,"configure",function(){return je}),e.d(t,"onBecomeObserved",function(){return qn}),e.d(t,"onBecomeUnobserved",function(){return Kn}),e.d(t,"flow",function(){return Ce}),e.d(t,"toJS",function(){return Re}),e.d(t,"trace",function(){return ue}),e.d(t,"getDependencyTree",function(){return Ft}),e.d(t,"getObserverTree",function(){return Vt}),e.d(t,"_resetGlobalState",function(){return zt}),e.d(t,"_getGlobalState",function(){return Dt}),e.d(t,"getDebugName",function(){return $n}),e.d(t,"getAtom",function(){return Hn}),e.d(t,"_getAdministration",function(){return Wn}),e.d(t,"_allowStateChanges",function(){return w}),e.d(t,"isArrayLike",function(){return St}),e.d(t,"_isComputingDerivation",function(){return ne}),e.d(t,"onReactionError",function(){return se}),e.d(t,"_interceptReads",function(){return Me});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])};function i(n,t){function e(){this.constructor=n}o(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}var a=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n};function l(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,i=e.call(n),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return a}function u(){for(var n=[],t=0;t<arguments.length;t++)n=n.concat(l(arguments[t]));return n}var c={},s={};function f(n){if(!0!==n.__mobxDidRunLazyInitializers){var t=n.__mobxDecorators;if(t)for(var e in _t(n,"__mobxDidRunLazyInitializers",!0),t){var r=t[e];r.propertyCreator(n,r.prop,r.descriptor,r.decoratorTarget,r.decoratorArguments)}}}function p(n,t){return function(){var e,r,o=function(r,o,i,l){if(!0===l)return t(r,o,i,r,e),null;if(!Object.prototype.hasOwnProperty.call(r,"__mobxDecorators")){var u=r.__mobxDecorators;_t(r,"__mobxDecorators",a({},u))}return r.__mobxDecorators[o]={prop:o,propertyCreator:t,descriptor:i,decoratorTarget:r,decoratorArguments:e},function(n,t){var e=t?c:s;return e[n]||(e[n]={configurable:!0,enumerable:t,get:function(){return f(this),this[n]},set:function(t){f(this),this[n]=t}})}(o,n)};return(2===(r=arguments).length||3===r.length)&&"string"==typeof r[1]||4===r.length&&!0===r[3]?(e=pt,o.apply(null,arguments)):(e=Array.prototype.slice.call(arguments),o)}}function d(){return!!Lt.spyListeners.length}function m(n){if(Lt.spyListeners.length)for(var t=Lt.spyListeners,e=0,r=t.length;e<r;e++)t[e](n)}function h(n){m(a({},n,{spyReportStart:!0}))}var b={spyReportEnd:!0};function g(n){m(n?a({},n,{spyReportEnd:!0}):b)}function v(n){return Lt.spyListeners.push(n),yt(function(){var t=Lt.spyListeners.indexOf(n);-1!==t&&Lt.spyListeners.splice(t,1)})}function y(n,t){var e=function(){return x(n,t,this,arguments)};return e.isMobxAction=!0,e}function x(n,t,e,r){var o=function(n,t,e,r){var o=d()&&!!n,i=0;if(o){i=Date.now();var a=r&&r.length||0,l=new Array(a);if(a>0)for(var u=0;u<a;u++)l[u]=r[u];h({type:"action",name:n,object:e,arguments:l})}var c=ie();Kt();var s=k(!0);return{prevDerivation:c,prevAllowStateChanges:s,notifySpy:o,startTime:i}}(n,0,e,r);try{return t.apply(e,r)}finally{!function(n){_(n.prevAllowStateChanges),Gt(),ae(n.prevDerivation),n.notifySpy&&g({time:Date.now()-n.startTime})}(o)}}function w(n,t){var e,r=k(n);try{e=t()}finally{_(r)}return e}function k(n){var t=Lt.allowStateChanges;return Lt.allowStateChanges=n,t}function _(n){Lt.allowStateChanges=n}function O(){bt(!1)}function E(n){return function(t,e,r){if(r){if(r.value)return{value:y(n,r.value),enumerable:!1,configurable:!1,writable:!0};var o=r.initializer;return{enumerable:!1,configurable:!1,writable:!1,initializer:function(){return y(n,o.call(this))}}}return function(n){return function(t,e,r){Object.defineProperty(t,e,{configurable:!0,enumerable:!1,get:function(){},set:function(t){Ot(this,e,S(n,t))}})}}(n).apply(this,arguments)}}var S=function(n,t,e,r){return 1===arguments.length&&"function"==typeof n?y(n.name||"<unnamed action>",n):2===arguments.length&&"function"==typeof t?y(n,t):1===arguments.length&&"string"==typeof n?E(n):!0!==r?E(t).apply(null,arguments):void(n[t]=y(n.name||t,e.value))};function j(n,t){var e="string"==typeof n?n:n.name||"<unnamed action>",r="function"==typeof n?n:t;return x(e,r,this,void 0)}function P(n){return"function"==typeof n&&!0===n.isMobxAction}function C(n,t,e){_t(n,t,y(t,e.bind(n)))}S.bound=function(n,t,e,r){return!0===r?(C(n,t,e.value),null):e?{configurable:!0,enumerable:!1,get:function(){return C(this,t,e.value||e.initializer.call(this)),this[t]},set:O}:{enumerable:!1,configurable:!0,set:function(n){C(this,t,n)},get:function(){}}};var T=Object.prototype.toString;function I(n,t){return R(n,t)}function R(n,t,e,r){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return!1;if(n!=n)return t!=t;var o=typeof n;return("function"===o||"object"===o||"object"==typeof t)&&function(n,t,e,r){n=M(n),t=M(t);var o=T.call(n);if(o!==T.call(t))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!=+n?+t!=+t:0==+n?1/+n==1/t:+n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(n)===Symbol.valueOf.call(t)}var i="[object Array]"===o;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var a=n.constructor,l=t.constructor;if(a!==l&&!("function"==typeof a&&a instanceof a&&"function"==typeof l&&l instanceof l)&&"constructor"in n&&"constructor"in t)return!1}e=e||[],r=r||[];var u=e.length;for(;u--;)if(e[u]===n)return r[u]===t;if(e.push(n),r.push(t),i){if((u=n.length)!==t.length)return!1;for(;u--;)if(!R(n[u],t[u],e,r))return!1}else{var c,s=Object.keys(n);if(u=s.length,Object.keys(t).length!==u)return!1;for(;u--;)if(c=s[u],!A(t,c)||!R(n[c],t[c],e,r))return!1}return e.pop(),r.pop(),!0}(n,t,e,r)}function M(n){return st(n)?n.peek():jt(n)||Vn(n)?Pt(n.entries()):n}function A(n,t){return Object.prototype.hasOwnProperty.call(n,t)}function L(n,t){return n===t}var N={identity:L,structural:function(n,t){return I(n,t)},default:function(n,t){return function(n,t){return"number"==typeof n&&"number"==typeof t&&isNaN(n)&&isNaN(t)}(n,t)||L(n,t)}};function U(n,t){void 0===t&&(t=dt);var e,r=t&&t.name||n.name||"Autorun@"+ht();if(!t.scheduler&&!t.delay)e=new ce(r,function(){this.track(a)},t.onError);else{var o=z(t),i=!1;e=new ce(r,function(){i||(i=!0,o(function(){i=!1,e.isDisposed||e.track(a)}))},t.onError)}function a(){n(e)}return e.schedule(),e.getDisposer()}var D=function(n){return n()};function z(n){return n.scheduler?n.scheduler:n.delay?function(t){return setTimeout(t,n.delay)}:D}function F(n,t,e){void 0===e&&(e=dt),"boolean"==typeof e&&(e={fireImmediately:e},vt("Using fireImmediately as argument is deprecated. Use '{ fireImmediately: true }' instead"));var r,o,i,a=e.name||"Reaction@"+ht(),l=S(a,e.onError?(r=e.onError,o=t,function(){try{return o.apply(this,arguments)}catch(n){r.call(this,n)}}):t),u=!e.scheduler&&!e.delay,c=z(e),s=!0,f=!1,p=e.compareStructural?N.structural:e.equals||N.default,d=new ce(a,function(){s||u?m():f||(f=!0,c(m))},e.onError);function m(){if(f=!1,!d.isDisposed){var t=!1;d.track(function(){var e=n(d);t=s||!p(i,e),i=e}),s&&e.fireImmediately&&l(i,d),s||!0!==t||l(i,d),s&&(s=!1)}}return d.schedule(),d.getDisposer()}var B=function(){function n(n){var t=this;if(this.dependenciesState=It.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isBeingObserved=!1,this.isPendingUnobservation=!1,this.observers=[],this.observersIndexes={},this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=It.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+ht(),this.value=new Jt(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=Rt.NONE,!n.get)return bt("missing option for computed: get");this.derivation=n.get,this.name=n.name||"ComputedValue@"+ht(),n.set&&(this.setter=y(this.name+"-setter",n.set)),this.equals=n.equals||(n.compareStructural||n.struct?N.structural:N.default),this.scope=n.context,this.requiresReaction=!!n.requiresReaction,!0===n.keepAlive&&U(function(){return t.get()})}return n.prototype.onBecomeStale=function(){!function(n){if(n.lowestObserverState!==It.UP_TO_DATE)return;n.lowestObserverState=It.POSSIBLY_STALE;var t=n.observers,e=t.length;for(;e--;){var r=t[e];r.dependenciesState===It.UP_TO_DATE&&(r.dependenciesState=It.POSSIBLY_STALE,r.isTracing!==Rt.NONE&&Xt(r,n),r.onBecomeStale())}}(this)},n.prototype.onBecomeUnobserved=function(){},n.prototype.onBecomeObserved=function(){},n.prototype.get=function(){this.isComputing&&bt("Cycle detected in computation "+this.name+": "+this.derivation),0===Lt.inBatch?Zt(this)&&(this.warnAboutUntrackedRead(),Kt(),this.value=this.computeValue(!1),Gt()):(Yt(this),Zt(this)&&this.trackAndCompute()&&function(n){if(n.lowestObserverState===It.STALE)return;n.lowestObserverState=It.STALE;var t=n.observers,e=t.length;for(;e--;){var r=t[e];r.dependenciesState===It.POSSIBLY_STALE?r.dependenciesState=It.STALE:r.dependenciesState===It.UP_TO_DATE&&(n.lowestObserverState=It.UP_TO_DATE)}}(this));var n=this.value;if(Qt(n))throw n.cause;return n},n.prototype.peek=function(){var n=this.computeValue(!1);if(Qt(n))throw n.cause;return n},n.prototype.set=function(n){if(this.setter){gt(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,n)}finally{this.isRunningSetter=!1}}else gt(!1,!1)},n.prototype.trackAndCompute=function(){d()&&m({object:this.scope,type:"compute",name:this.name});var n=this.value,t=this.dependenciesState===It.NOT_TRACKING,e=this.value=this.computeValue(!0);return t||Qt(n)||Qt(e)||!this.equals(n,e)},n.prototype.computeValue=function(n){var t;if(this.isComputing=!0,Lt.computationDepth++,n)t=ee(this,this.derivation,this.scope);else if(!0===Lt.disableErrorBoundaries)t=this.derivation.call(this.scope);else try{t=this.derivation.call(this.scope)}catch(n){t=new Jt(n)}return Lt.computationDepth--,this.isComputing=!1,t},n.prototype.suspend=function(){re(this),this.value=void 0},n.prototype.observe=function(n,t){var e=this,r=!0,o=void 0;return U(function(){var i=e.get();if(!r||t){var a=ie();n({type:"update",object:e,newValue:i,oldValue:o}),ae(a)}r=!1,o=i})},n.prototype.warnAboutUntrackedRead=function(){},n.prototype.toJSON=function(){return this.get()},n.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},n.prototype.valueOf=function(){return Tt(this.get())},n}();B.prototype[Ct()]=B.prototype.valueOf;var V=Et("ComputedValue",B);function H(n){return void 0!==n.interceptors&&n.interceptors.length>0}function W(n,t){var e=n.interceptors||(n.interceptors=[]);return e.push(t),yt(function(){var n=e.indexOf(t);-1!==n&&e.splice(n,1)})}function $(n,t){var e=ie();try{var r=n.interceptors;if(r)for(var o=0,i=r.length;o<i&&(gt(!(t=r[o](t))||t.type,"Intercept handlers should return nothing or a change object"),t);o++);return t}finally{ae(e)}}function q(n){return void 0!==n.changeListeners&&n.changeListeners.length>0}function K(n,t){var e=n.changeListeners||(n.changeListeners=[]);return e.push(t),yt(function(){var n=e.indexOf(t);-1!==n&&e.splice(n,1)})}function G(n,t){var e=ie(),r=n.changeListeners;if(r){for(var o=0,i=(r=r.slice()).length;o<i;o++)r[o](t);ae(e)}}var Y={};!function(){if(Fn)return;Fn=function(){function n(n){void 0===n&&(n="Atom@"+ht()),this.name=n,this.isPendingUnobservation=!1,this.isBeingObserved=!1,this.observers=[],this.observersIndexes={},this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=It.NOT_TRACKING}return n.prototype.onBecomeUnobserved=function(){},n.prototype.onBecomeObserved=function(){},n.prototype.reportObserved=function(){return Yt(this)},n.prototype.reportChanged=function(){Kt(),function(n){if(n.lowestObserverState===It.STALE)return;n.lowestObserverState=It.STALE;var t=n.observers,e=t.length;for(;e--;){var r=t[e];r.dependenciesState===It.UP_TO_DATE&&(r.isTracing!==Rt.NONE&&Xt(r,n),r.onBecomeStale()),r.dependenciesState=It.STALE}}(this),Gt()},n.prototype.toString=function(){return this.name},n}(),Bn=Et("Atom",Fn)}();var X=function(n){function t(t,e,r,o){void 0===r&&(r="ObservableValue@"+ht()),void 0===o&&(o=!0);var i=n.call(this,r)||this;return i.enhancer=e,i.hasUnreportedChange=!1,i.value=e(t,void 0,r),o&&d()&&m({type:"create",name:i.name,newValue:""+i.value}),i}return i(t,n),t.prototype.dehanceValue=function(n){return void 0!==this.dehancer?this.dehancer(n):n},t.prototype.set=function(n){var t=this.value;if((n=this.prepareNewValue(n))!==Y){var e=d();e&&h({type:"update",name:this.name,newValue:n,oldValue:t}),this.setNewValue(n),e&&g()}},t.prototype.prepareNewValue=function(n){if(te(this),H(this)){var t=$(this,{object:this,type:"update",newValue:n});if(!t)return Y;n=t.newValue}return n=this.enhancer(n,this.value,this.name),this.value!==n?n:Y},t.prototype.setNewValue=function(n){var t=this.value;this.value=n,this.reportChanged(),q(this)&&G(this,{type:"update",object:this,newValue:n,oldValue:t})},t.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},t.prototype.intercept=function(n){return W(this,n)},t.prototype.observe=function(n,t){return t&&n({object:this,type:"update",newValue:this.value,oldValue:void 0}),K(this,n)},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.value+"]"},t.prototype.valueOf=function(){return Tt(this.get())},t}(Fn);X.prototype[Ct()]=X.prototype.valueOf;var J=Et("ObservableValue",X),Q=function(){function n(n,t,e){this.target=n,this.name=t,this.defaultEnhancer=e,this.values={}}return n.prototype.read=function(n,t){if(this.target===n)return this.values[t].get();this.illegalAccess(n,t)},n.prototype.write=function(n,t,e){var r=this.target;if(r===n){var o=this.values[t];if(o instanceof B)o.set(e);else{if(H(this)){if(!(u=$(this,{type:"update",object:r,name:t,newValue:e})))return;e=u.newValue}if((e=o.prepareNewValue(e))!==Y){var i=q(this),l=d(),u=i||l?{type:"update",object:r,oldValue:o.value,name:t,newValue:e}:null;l&&h(a({},u,{name:this.name,key:t})),o.setNewValue(e),i&&G(this,u),l&&g()}}}else this.illegalAccess(n,t)},n.prototype.remove=function(n){if(this.values[n]){var t=this.target;if(H(this))if(!(i=$(this,{object:t,name:n,type:"remove"})))return;try{Kt();var e=q(this),r=d(),o=this.values[n].get();this.keys&&this.keys.remove(n),delete this.values[n],delete this.target[n];var i=e||r?{type:"remove",object:t,oldValue:o,name:n}:null;r&&h(a({},i,{name:this.name,key:n})),e&&G(this,i),r&&g()}finally{Gt()}}},n.prototype.illegalAccess=function(n,t){return bt("Property '"+t+"' of '"+n+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")},n.prototype.observe=function(n,t){return K(this,n)},n.prototype.intercept=function(n){return W(this,n)},n.prototype.getKeys=function(){var n=this;return void 0===this.keys&&(this.keys=new ot(Object.keys(this.values).filter(function(t){return n.values[t]instanceof X}),Rn,"keys("+this.name+")",!0)),this.keys.slice()},n}();function Z(n,t,e){void 0===t&&(t=""),void 0===e&&(e=In);var r=n.$mobx;return r||(kt(n)||(t=(n.constructor.name||"ObservableObject")+"@"+ht()),t||(t="ObservableObject@"+ht()),Ot(n,"$mobx",r=new Q(n,t,e)),r)}function nn(n,t,e,r){var o=Z(n);if(H(o)){var i=$(o,{object:n,name:t,type:"add",newValue:e});if(!i)return;e=i.newValue}e=(o.values[t]=new X(e,r,o.name+"."+t,!1)).value,Object.defineProperty(n,t,function(n){return en[n]||(en[n]={configurable:!0,enumerable:!0,get:function(){return this.$mobx.read(this,n)},set:function(t){this.$mobx.write(this,n,t)}})}(t)),o.keys&&o.keys.push(t),function(n,t,e,r){var o=q(n),i=d(),l=o||i?{type:"add",object:t,name:e,newValue:r}:null;i&&h(a({},l,{name:n.name,key:e}));o&&G(n,l);i&&g()}(o,n,t,e)}function tn(n,t,e){var r=Z(n);e.name=r.name+"."+t,e.context=n,r.values[t]=new B(e),Object.defineProperty(n,t,function(n){return rn[n]||(rn[n]={configurable:!0,enumerable:!1,get:function(){return on(this).read(this,n)},set:function(t){on(this).write(this,n,t)}})}(t))}var en={},rn={};function on(n){var t=n.$mobx;return t||(f(n),n.$mobx)}var an=Et("ObservableObjectAdministration",Q);function ln(n){return!!wt(n)&&(f(n),an(n.$mobx))}function un(t){var e=p(!0,function(n,e,r,o,i){nn(n,e,r?r.initializer?r.initializer.call(n):r.value:void 0,t)}),r=(void 0!==n&&Object({NODE_ENV:"production"}),e);return r.enhancer=t,r}function cn(n,t){if(null===n||void 0===n)return!1;if(void 0!==t){if(ln(n)){var e=n.$mobx;return e.values&&!!e.values[t]}return!1}return ln(n)||!!n.$mobx||Bn(n)||he(n)||V(n)}function sn(n){return 1!==arguments.length&&bt(!1),cn(n)}function fn(n,t){return"string"!=typeof t?bt(!1):cn(n,t)}function pn(n,t){if(null===n||void 0===n)return!1;if(void 0!==t){if(!1===ln(n))return!1;if(!n.$mobx.values[t])return!1;var e=Hn(n,t);return V(e)}return V(n)}function dn(n){return arguments.length>1?bt(!1):pn(n)}function mn(n,t){return"string"!=typeof t?bt(!1):pn(n,t)}var hn=p(!1,function(n,t,e,r,o){var i=e.get,l=e.set,u=o[0]||{};tn(n,t,a({},u,{get:i,set:l}))}),bn=hn({equals:N.structural}),gn=function(n,t,e){if("string"==typeof t)return hn.apply(null,arguments);if(null!==n&&"object"==typeof n&&1===arguments.length)return hn.apply(null,arguments);var r="object"==typeof t?t:{};return r.get=n,r.set="function"==typeof t?t:r.set,r.name=r.name||n.name||"",new B(r)};function vn(n,t,e){return vt("'extendShallowObservable' is deprecated, use 'extendObservable(target, props, { deep: false })' instead"),yn(n,t,e,wn)}function yn(n,t,e,r){var o=(r=kn(r)).defaultDecorator||(!1===r.deep?Sn:On);Z(n,r.name,o.enhancer),Kt();try{for(var i in t){var a=Object.getOwnPropertyDescriptor(t,i);0;var l=e&&i in e?e[i]:a.get?hn:o;0;var u=l(n,i,a,!0);u&&Object.defineProperty(n,i,u)}}finally{Gt()}return n}gn.struct=bn;var xn={deep:!0,name:void 0,defaultDecorator:void 0},wn={deep:!1,name:void 0,defaultDecorator:void 0};function kn(n){return null===n||void 0===n?xn:"string"==typeof n?{name:n,deep:!0}:n}function _n(n){return n.defaultDecorator?n.defaultDecorator.enhancer:!1===n.deep?Rn:In}Object.freeze(xn),Object.freeze(wn);var On=un(In),En=un(function(n,t,e){return void 0===n||null===n?n:ln(n)||st(n)||Vn(n)?n:Array.isArray(n)?Cn.array(n,{name:e,deep:!1}):kt(n)?Cn.object(n,void 0,{name:e,deep:!1}):jt(n)?Cn.map(n,{name:e,deep:!1}):bt(!1)}),Sn=un(Rn),jn=un(function(n,t,e){0;return I(n,t)?t:n});var Pn={box:function(n,t){arguments.length>2&&Tn("box");var e=kn(t);return new X(n,_n(e),e.name)},shallowBox:function(n,t){return arguments.length>2&&Tn("shallowBox"),vt("observable.shallowBox","observable.box(value, { deep: false })"),Cn.box(n,{name:t,deep:!1})},array:function(n,t){arguments.length>2&&Tn("array");var e=kn(t);return new ot(n,_n(e),e.name)},shallowArray:function(n,t){return arguments.length>2&&Tn("shallowArray"),vt("observable.shallowArray","observable.array(values, { deep: false })"),Cn.array(n,{name:t,deep:!1})},map:function(n,t){arguments.length>2&&Tn("map");var e=kn(t);return new zn(n,_n(e),e.name)},shallowMap:function(n,t){return arguments.length>2&&Tn("shallowMap"),vt("observable.shallowMap","observable.map(values, { deep: false })"),Cn.map(n,{name:t,deep:!1})},object:function(n,t,e){return"string"==typeof arguments[1]&&Tn("object"),yn({},n,t,kn(e))},shallowObject:function(n,t){return"string"==typeof arguments[1]&&Tn("shallowObject"),vt("observable.shallowObject","observable.object(values, {}, { deep: false })"),Cn.object(n,{},{name:t,deep:!1})},ref:Sn,shallow:En,deep:On,struct:jn},Cn=function(n,t,e){if("string"==typeof arguments[1])return On.apply(null,arguments);if(sn(n))return n;var r=kt(n)?Cn.object(n,t,e):Array.isArray(n)?Cn.array(n,t):jt(n)?Cn.map(n,t):n;if(r!==n)return r;bt(!1)};function Tn(n){bt("Expected one or two arguments to observable."+n+". Did you accidentally try to use observable."+n+" as decorator?")}function In(n,t,e){return sn(n)?n:Array.isArray(n)?Cn.array(n,{name:e}):kt(n)?Cn.object(n,void 0,{name:e}):jt(n)?Cn.map(n,{name:e}):n}function Rn(n){return n}function Mn(){return"function"==typeof Symbol&&Symbol.iterator||"@@iterator"}function An(n,t){Ot(n,Mn(),t)}function Ln(n){return n[Mn()]=Nn,n}function Nn(){return this}function Un(n,t){void 0===t&&(t=void 0),Kt();try{return n.apply(t)}finally{Gt()}}Object.keys(Pn).forEach(function(n){return Cn[n]=Pn[n]});var Dn={},zn=function(){function n(n,t,e){if(void 0===t&&(t=In),void 0===e&&(e="ObservableMap@"+ht()),this.enhancer=t,this.name=e,this.$mobx=Dn,this._keys=new ot(void 0,Rn,this.name+".keys()",!0),"function"!=typeof Map)throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");this._data=new Map,this._hasMap=new Map,this.merge(n)}return n.prototype._has=function(n){return this._data.has(n)},n.prototype.has=function(n){return this._hasMap.has(n)?this._hasMap.get(n).get():this._updateHasMapEntry(n,!1).get()},n.prototype.set=function(n,t){var e=this._has(n);if(H(this)){var r=$(this,{type:e?"update":"add",object:this,newValue:t,name:n});if(!r)return this;t=r.newValue}return e?this._updateValue(n,t):this._addValue(n,t),this},n.prototype.delete=function(n){var t=this;if(H(this)&&!(o=$(this,{type:"delete",object:this,name:n})))return!1;if(this._has(n)){var e=d(),r=q(this),o=r||e?{type:"delete",object:this,oldValue:this._data.get(n).value,name:n}:null;return e&&h(a({},o,{name:this.name,key:n})),Un(function(){t._keys.remove(n),t._updateHasMapEntry(n,!1),t._data.get(n).setNewValue(void 0),t._data.delete(n)}),r&&G(this,o),e&&g(),!0}return!1},n.prototype._updateHasMapEntry=function(n,t){var e=this._hasMap.get(n);return e?e.setNewValue(t):(e=new X(t,Rn,this.name+"."+n+"?",!1),this._hasMap.set(n,e)),e},n.prototype._updateValue=function(n,t){var e=this._data.get(n);if((t=e.prepareNewValue(t))!==Y){var r=d(),o=q(this),i=o||r?{type:"update",object:this,oldValue:e.value,name:n,newValue:t}:null;r&&h(a({},i,{name:this.name,key:n})),e.setNewValue(t),o&&G(this,i),r&&g()}},n.prototype._addValue=function(n,t){var e=this;Un(function(){var r=new X(t,e.enhancer,e.name+"."+n,!1);e._data.set(n,r),t=r.value,e._updateHasMapEntry(n,!0),e._keys.push(n)});var r=d(),o=q(this),i=o||r?{type:"add",object:this,name:n,newValue:t}:null;r&&h(a({},i,{name:this.name,key:n})),o&&G(this,i),r&&g()},n.prototype.get=function(n){return this.has(n)?this.dehanceValue(this._data.get(n).get()):this.dehanceValue(void 0)},n.prototype.dehanceValue=function(n){return void 0!==this.dehancer?this.dehancer(n):n},n.prototype.keys=function(){return this._keys[Mn()]()},n.prototype.values=function(){var n=this,t=0;return Ln({next:function(){return t<n._keys.length?{value:n.get(n._keys[t++]),done:!1}:{value:void 0,done:!0}}})},n.prototype.entries=function(){var n=this,t=0;return Ln({next:function(){if(t<n._keys.length){var e=n._keys[t++];return{value:[e,n.get(e)],done:!1}}return{done:!0}}})},n.prototype.forEach=function(n,t){var e=this;this._keys.forEach(function(r){return n.call(t,e.get(r),r,e)})},n.prototype.merge=function(n){var t=this;return Vn(n)&&(n=n.toJS()),Un(function(){kt(n)?Object.keys(n).forEach(function(e){return t.set(e,n[e])}):Array.isArray(n)?n.forEach(function(n){var e=l(n,2),r=e[0],o=e[1];return t.set(r,o)}):jt(n)?n.forEach(function(n,e){return t.set(e,n)}):null!==n&&void 0!==n&&bt("Cannot initialize map from "+n)}),this},n.prototype.clear=function(){var n=this;Un(function(){oe(function(){n._keys.slice().forEach(function(t){return n.delete(t)})})})},n.prototype.replace=function(n){var t=this;return Un(function(){var e,r=kt(e=n)?Object.keys(e):Array.isArray(e)?e.map(function(n){return l(n,1)[0]}):jt(e)||Vn(e)?Pt(e.keys()):bt("Cannot get keys from '"+e+"'");t._keys.filter(function(n){return-1===r.indexOf(n)}).forEach(function(n){return t.delete(n)}),t.merge(n)}),this},Object.defineProperty(n.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),n.prototype.toPOJO=function(){var n=this,t={};return this._keys.forEach(function(e){return t[""+e]=n.get(e)}),t},n.prototype.toJS=function(){var n=this,t=new Map;return this._keys.forEach(function(e){return t.set(e,n.get(e))}),t},n.prototype.toJSON=function(){return this.toPOJO()},n.prototype.toString=function(){var n=this;return this.name+"[{ "+this._keys.map(function(t){return t+": "+n.get(t)}).join(", ")+" }]"},n.prototype.observe=function(n,t){return K(this,n)},n.prototype.intercept=function(n){return W(this,n)},n}();An(zn.prototype,function(){return this.entries()}),Ot(zn.prototype,"undefined"!=typeof Symbol?Symbol.toStringTag:"@@toStringTag","Map");var Fn,Bn,Vn=Et("ObservableMap",zn);function Hn(n,t){if("object"==typeof n&&null!==n){if(st(n))return void 0!==t&&bt(!1),n.$mobx.atom;if(Vn(n)){var e=n;return void 0===t?Hn(e._keys):((r=e._data.get(t)||e._hasMap.get(t))||bt(!1),r)}var r;if(f(n),t&&!n.$mobx&&n[t],ln(n))return t?((r=n.$mobx.values[t])||bt(!1),r):bt(!1);if(Bn(n)||V(n)||he(n))return n}else if("function"==typeof n&&he(n.$mobx))return n.$mobx;return bt(!1)}function Wn(n,t){return n||bt("Expecting some object"),void 0!==t?Wn(Hn(n,t)):Bn(n)||V(n)||he(n)?n:Vn(n)?n:(f(n),n.$mobx?n.$mobx:void bt(!1))}function $n(n,t){return(void 0!==t?Hn(n,t):ln(n)||Vn(n)?Wn(n):Hn(n)).name}function qn(n,t,e){return Gn("onBecomeObserved",n,t,e)}function Kn(n,t,e){return Gn("onBecomeUnobserved",n,t,e)}function Gn(n,t,e,r){var o="string"==typeof e?Hn(t,e):Hn(t),i="string"==typeof e?r:e,a=o[n];return"function"!=typeof a?bt(!1):(o[n]=function(){a.call(this),i.call(this)},function(){o[n]=a})}function Yn(n,t,e){void 0===t&&(t=xt),void 0===e&&(e=xt);var r=new Fn(n);return qn(r,t),Kn(r,e),r}var Xn,Jn,Qn,Zn,nt=(Xn=!1,Jn={},Object.defineProperty(Jn,"0",{set:function(){Xn=!0}}),Object.create(Jn)[0]=1,!1===Xn),tt=0,et=function(){return function(){}}();Qn=et,Zn=Array.prototype,void 0!==Object.setPrototypeOf?Object.setPrototypeOf(Qn.prototype,Zn):void 0!==Qn.prototype.__proto__?Qn.prototype.__proto__=Zn:Qn.prototype=Zn,Object.isFrozen(Array)&&["constructor","push","shift","concat","pop","unshift","replace","find","findIndex","splice","reverse","sort"].forEach(function(n){Object.defineProperty(et.prototype,n,{configurable:!0,writable:!0,value:Array.prototype[n]})});var rt=function(){function n(n,t,e,r){this.array=e,this.owned=r,this.values=[],this.lastKnownLength=0,this.atom=new Fn(n||"ObservableArray@"+ht()),this.enhancer=function(e,r){return t(e,r,n+"[..]")}}return n.prototype.dehanceValue=function(n){return void 0!==this.dehancer?this.dehancer(n):n},n.prototype.dehanceValues=function(n){return void 0!==this.dehancer&&this.values.length>0?n.map(this.dehancer):n},n.prototype.intercept=function(n){return W(this,n)},n.prototype.observe=function(n,t){return void 0===t&&(t=!1),t&&n({object:this.array,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),K(this,n)},n.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},n.prototype.setArrayLength=function(n){if("number"!=typeof n||n<0)throw new Error("[mobx.array] Out of range: "+n);var t=this.values.length;if(n!==t)if(n>t){for(var e=new Array(n-t),r=0;r<n-t;r++)e[r]=void 0;this.spliceWithArray(t,0,e)}else this.spliceWithArray(n,t-n)},n.prototype.updateArrayLength=function(n,t){if(n!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");this.lastKnownLength+=t,t>0&&n+t+1>tt&&ut(n+t+1)},n.prototype.spliceWithArray=function(n,t,e){var r=this;te(this.atom);var o=this.values.length;if(void 0===n?n=0:n>o?n=o:n<0&&(n=Math.max(0,o+n)),t=1===arguments.length?o-n:void 0===t||null===t?0:Math.max(0,Math.min(t,o-n)),void 0===e&&(e=pt),H(this)){var i=$(this,{object:this.array,type:"splice",index:n,removedCount:t,added:e});if(!i)return pt;t=i.removedCount,e=i.added}var a=(e=0===e.length?e:e.map(function(n){return r.enhancer(n,void 0)})).length-t;this.updateArrayLength(o,a);var l=this.spliceItemsIntoValues(n,t,e);return 0===t&&0===e.length||this.notifyArraySplice(n,e,l),this.dehanceValues(l)},n.prototype.spliceItemsIntoValues=function(n,t,e){if(e.length<1e4)return(r=this.values).splice.apply(r,u([n,t],e));var r,o=this.values.slice(n,n+t);return this.values=this.values.slice(0,n).concat(e,this.values.slice(n+t)),o},n.prototype.notifyArrayChildUpdate=function(n,t,e){var r=!this.owned&&d(),o=q(this),i=o||r?{object:this.array,type:"update",index:n,newValue:t,oldValue:e}:null;r&&h(a({},i,{name:this.atom.name})),this.atom.reportChanged(),o&&G(this,i),r&&g()},n.prototype.notifyArraySplice=function(n,t,e){var r=!this.owned&&d(),o=q(this),i=o||r?{object:this.array,type:"splice",index:n,removed:e,added:t,removedCount:e.length,addedCount:t.length}:null;r&&h(a({},i,{name:this.atom.name})),this.atom.reportChanged(),o&&G(this,i),r&&g()},n}(),ot=function(n){function t(t,e,r,o){void 0===r&&(r="ObservableArray@"+ht()),void 0===o&&(o=!1);var i=n.call(this)||this,a=new rt(r,e,i,o);return Ot(i,"$mobx",a),t&&t.length&&i.spliceWithArray(0,0,t),nt&&Object.defineProperty(a.array,"0",it),i}return i(t,n),t.prototype.intercept=function(n){return this.$mobx.intercept(n)},t.prototype.observe=function(n,t){return void 0===t&&(t=!1),this.$mobx.observe(n,t)},t.prototype.clear=function(){return this.splice(0)},t.prototype.concat=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return this.$mobx.atom.reportObserved(),Array.prototype.concat.apply(this.peek(),n.map(function(n){return st(n)?n.peek():n}))},t.prototype.replace=function(n){return this.$mobx.spliceWithArray(0,this.$mobx.values.length,n)},t.prototype.toJS=function(){return this.slice()},t.prototype.toJSON=function(){return this.toJS()},t.prototype.peek=function(){return this.$mobx.atom.reportObserved(),this.$mobx.dehanceValues(this.$mobx.values)},t.prototype.find=function(n,t,e){void 0===e&&(e=0),3===arguments.length&&vt("The array.find fromIndex argument to find will not be supported anymore in the next major");var r=this.findIndex.apply(this,arguments);return-1===r?void 0:this.get(r)},t.prototype.findIndex=function(n,t,e){void 0===e&&(e=0),3===arguments.length&&vt("The array.findIndex fromIndex argument to find will not be supported anymore in the next major");for(var r=this.peek(),o=r.length,i=e;i<o;i++)if(n.call(t,r[i],i,this))return i;return-1},t.prototype.splice=function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];switch(arguments.length){case 0:return[];case 1:return this.$mobx.spliceWithArray(n);case 2:return this.$mobx.spliceWithArray(n,t)}return this.$mobx.spliceWithArray(n,t,e)},t.prototype.spliceWithArray=function(n,t,e){return this.$mobx.spliceWithArray(n,t,e)},t.prototype.push=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=this.$mobx;return e.spliceWithArray(e.values.length,0,n),e.values.length},t.prototype.pop=function(){return this.splice(Math.max(this.$mobx.values.length-1,0),1)[0]},t.prototype.shift=function(){return this.splice(0,1)[0]},t.prototype.unshift=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=this.$mobx;return e.spliceWithArray(0,0,n),e.values.length},t.prototype.reverse=function(){var n=this.slice();return n.reverse.apply(n,arguments)},t.prototype.sort=function(n){var t=this.slice();return t.sort.apply(t,arguments)},t.prototype.remove=function(n){var t=this.$mobx.dehanceValues(this.$mobx.values).indexOf(n);return t>-1&&(this.splice(t,1),!0)},t.prototype.move=function(n,t){function e(n){if(n<0)throw new Error("[mobx.array] Index out of bounds: "+n+" is negative");var t=this.$mobx.values.length;if(n>=t)throw new Error("[mobx.array] Index out of bounds: "+n+" is not smaller than "+t)}if(vt("observableArray.move is deprecated, use .slice() & .replace() instead"),e.call(this,n),e.call(this,t),n!==t){var r,o=this.$mobx.values;r=n<t?u(o.slice(0,n),o.slice(n+1,t+1),[o[n]],o.slice(t+1)):u(o.slice(0,t),[o[n]],o.slice(t,n),o.slice(n+1)),this.replace(r)}},t.prototype.get=function(n){var t=this.$mobx;if(t){if(n<t.values.length)return t.atom.reportObserved(),t.dehanceValue(t.values[n]);console.warn("[mobx.array] Attempt to read an array index ("+n+") that is out of bounds ("+t.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},t.prototype.set=function(n,t){var e=this.$mobx,r=e.values;if(n<r.length){te(e.atom);var o=r[n];if(H(e)){var i=$(e,{type:"update",object:this,index:n,newValue:t});if(!i)return;t=i.newValue}(t=e.enhancer(t,o))!==o&&(r[n]=t,e.notifyArrayChildUpdate(n,t,o))}else{if(n!==r.length)throw new Error("[mobx.array] Index out of bounds, "+n+" is larger than "+r.length);e.spliceWithArray(n,0,[t])}},t}(et);An(ot.prototype,function(){this.$mobx.atom.reportObserved();var n=this,t=0;return Ln({next:function(){return t<n.length?{value:n[t++],done:!1}:{done:!0,value:void 0}}})}),Object.defineProperty(ot.prototype,"length",{enumerable:!1,configurable:!0,get:function(){return this.$mobx.getArrayLength()},set:function(n){this.$mobx.setArrayLength(n)}}),["every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach(function(n){var t=Array.prototype[n];gt("function"==typeof t,"Base function not defined on Array prototype: '"+n+"'"),_t(ot.prototype,n,function(){return t.apply(this.peek(),arguments)})}),function(n,t){for(var e=0;e<t.length;e++)_t(n,t[e],n[t[e]])}(ot.prototype,["constructor","intercept","observe","clear","concat","get","replace","toJS","toJSON","peek","find","findIndex","splice","spliceWithArray","push","pop","set","shift","unshift","reverse","sort","remove","move","toString","toLocaleString"]);var it=at(0);function at(n){return{enumerable:!1,configurable:!1,get:function(){return this.get(n)},set:function(t){this.set(n,t)}}}function lt(n){Object.defineProperty(ot.prototype,""+n,at(n))}function ut(n){for(var t=tt;t<n;t++)lt(t);tt=n}ut(1e3);var ct=Et("ObservableArrayAdministration",rt);function st(n){return wt(n)&&ct(n.$mobx)}var ft="An invariant failed, however the error is obfuscated because this is an production build.",pt=[];Object.freeze(pt);var dt={};function mt(){return"undefined"!=typeof window?window:r}function ht(){return++Lt.mobxGuid}function bt(n){throw gt(!1,n),"X"}function gt(n,t){if(!n)throw new Error("[mobx] "+(t||ft))}Object.freeze(dt);function vt(n,t){return!1}function yt(n){var t=!1;return function(){if(!t)return t=!0,n.apply(this,arguments)}}var xt=function(){};function wt(n){return null!==n&&"object"==typeof n}function kt(n){if(null===n||"object"!=typeof n)return!1;var t=Object.getPrototypeOf(n);return t===Object.prototype||null===t}function _t(n,t,e){Object.defineProperty(n,t,{enumerable:!1,writable:!0,configurable:!0,value:e})}function Ot(n,t,e){Object.defineProperty(n,t,{enumerable:!1,writable:!1,configurable:!0,value:e})}function Et(n,t){var e="isMobX"+n;return t.prototype[e]=!0,function(n){return wt(n)&&!0===n[e]}}function St(n){return Array.isArray(n)||st(n)}function jt(n){return void 0!==mt().Map&&n instanceof mt().Map}function Pt(n){for(var t=[];;){var e=n.next();if(e.done)break;t.push(e.value)}return t}function Ct(){return"function"==typeof Symbol&&Symbol.toPrimitive||"@@toPrimitive"}function Tt(n){return null===n?null:"object"==typeof n?""+n:n}var It,Rt,Mt=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","disableErrorBoundaries","runId"],At=function(){return function(){this.version=5,this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.enforceActions=!1,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.disableErrorBoundaries=!1}}(),Lt=new At,Nt=!1,Ut=mt();function Dt(){return Lt}function zt(){var n=new At;for(var t in n)-1===Mt.indexOf(t)&&(Lt[t]=n[t]);Lt.allowStateChanges=!Lt.enforceActions}function Ft(n,t){return Bt(Hn(n,t))}function Bt(n){var t,e,r={name:n.name};return n.observing&&n.observing.length>0&&(r.dependencies=(t=n.observing,e=[],t.forEach(function(n){-1===e.indexOf(n)&&e.push(n)}),e).map(Bt)),r}function Vt(n,t){return Ht(Hn(n,t))}function Ht(n){var t,e={name:n.name};return(t=n).observers&&t.observers.length>0&&(e.observers=function(n){return n.observers}(n).map(Ht)),e}function Wt(n,t){var e=n.observers.length;e&&(n.observersIndexes[t.__mapid]=e),n.observers[e]=t,n.lowestObserverState>t.dependenciesState&&(n.lowestObserverState=t.dependenciesState)}function $t(n,t){if(1===n.observers.length)n.observers.length=0,qt(n);else{var e=n.observers,r=n.observersIndexes,o=e.pop();if(o!==t){var i=r[t.__mapid]||0;i?r[o.__mapid]=i:delete r[o.__mapid],e[i]=o}delete r[t.__mapid]}}function qt(n){!1===n.isPendingUnobservation&&(n.isPendingUnobservation=!0,Lt.pendingUnobservations.push(n))}function Kt(){Lt.inBatch++}function Gt(){if(0==--Lt.inBatch){de();for(var n=Lt.pendingUnobservations,t=0;t<n.length;t++){var e=n[t];e.isPendingUnobservation=!1,0===e.observers.length&&(e.isBeingObserved&&(e.isBeingObserved=!1,e.onBecomeUnobserved()),e instanceof B&&e.suspend())}Lt.pendingUnobservations=[]}}function Yt(n){var t=Lt.trackingDerivation;return null!==t?(t.runId!==n.lastAccessedBy&&(n.lastAccessedBy=t.runId,t.newObserving[t.unboundDepsCount++]=n,n.isBeingObserved||(n.isBeingObserved=!0,n.onBecomeObserved())),!0):(0===n.observers.length&&Lt.inBatch>0&&qt(n),!1)}function Xt(n,t){if(console.log("[mobx.trace] '"+n.name+"' is invalidated due to a change in: '"+t.name+"'"),n.isTracing===Rt.BREAK){var e=[];!function n(t,e,r){if(e.length>=1e3)return void e.push("(and many more)");e.push(""+new Array(r).join("\t")+t.name);t.dependencies&&t.dependencies.forEach(function(t){return n(t,e,r+1)})}(Ft(n),e,1),new Function("debugger;\n/*\nTracing '"+n.name+"'\n\nYou are entering this break point because derivation '"+n.name+"' is being traced and '"+t.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(n instanceof B?n.derivation.toString():"")+"\n\nThe dependencies for this derivation are:\n\n"+e.join("\n")+"\n*/\n    ")()}}Ut.__mobxInstanceCount?(Ut.__mobxInstanceCount++,setTimeout(function(){Nt||bt(!1)},1)):Ut.__mobxInstanceCount=1,function(n){n[n.NOT_TRACKING=-1]="NOT_TRACKING",n[n.UP_TO_DATE=0]="UP_TO_DATE",n[n.POSSIBLY_STALE=1]="POSSIBLY_STALE",n[n.STALE=2]="STALE"}(It||(It={})),function(n){n[n.NONE=0]="NONE",n[n.LOG=1]="LOG",n[n.BREAK=2]="BREAK"}(Rt||(Rt={}));var Jt=function(){return function(n){this.cause=n}}();function Qt(n){return n instanceof Jt}function Zt(n){switch(n.dependenciesState){case It.UP_TO_DATE:return!1;case It.NOT_TRACKING:case It.STALE:return!0;case It.POSSIBLY_STALE:for(var t=ie(),e=n.observing,r=e.length,o=0;o<r;o++){var i=e[o];if(V(i)){if(Lt.disableErrorBoundaries)i.get();else try{i.get()}catch(n){return ae(t),!0}if(n.dependenciesState===It.STALE)return ae(t),!0}}return le(n),ae(t),!1}}function ne(){return null!==Lt.trackingDerivation}function te(n){var t=n.observers.length>0;Lt.computationDepth>0&&t&&bt(!1),!Lt.allowStateChanges&&t&&bt(!1)}function ee(n,t,e){le(n),n.newObserving=new Array(n.observing.length+100),n.unboundDepsCount=0,n.runId=++Lt.runId;var r,o=Lt.trackingDerivation;if(Lt.trackingDerivation=n,!0===Lt.disableErrorBoundaries)r=t.call(e);else try{r=t.call(e)}catch(n){r=new Jt(n)}return Lt.trackingDerivation=o,function(n){for(var t=n.observing,e=n.observing=n.newObserving,r=It.UP_TO_DATE,o=0,i=n.unboundDepsCount,a=0;a<i;a++){var l=e[a];0===l.diffValue&&(l.diffValue=1,o!==a&&(e[o]=l),o++),l.dependenciesState>r&&(r=l.dependenciesState)}e.length=o,n.newObserving=null,i=t.length;for(;i--;){var l=t[i];0===l.diffValue&&$t(l,n),l.diffValue=0}for(;o--;){var l=e[o];1===l.diffValue&&(l.diffValue=0,Wt(l,n))}r!==It.UP_TO_DATE&&(n.dependenciesState=r,n.onBecomeStale())}(n),r}function re(n){var t=n.observing;n.observing=[];for(var e=t.length;e--;)$t(t[e],n);n.dependenciesState=It.NOT_TRACKING}function oe(n){var t=ie(),e=n();return ae(t),e}function ie(){var n=Lt.trackingDerivation;return Lt.trackingDerivation=null,n}function ae(n){Lt.trackingDerivation=n}function le(n){if(n.dependenciesState!==It.UP_TO_DATE){n.dependenciesState=It.UP_TO_DATE;for(var t=n.observing,e=t.length;e--;)t[e].lowestObserverState=It.UP_TO_DATE}}function ue(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=!1;"boolean"==typeof n[n.length-1]&&(e=n.pop());var r=function(n){switch(n.length){case 0:return Lt.trackingDerivation;case 1:return Hn(n[0]);case 2:return Hn(n[0],n[1])}}(n);if(!r)return bt(!1);r.isTracing===Rt.NONE&&console.log("[mobx.trace] '"+r.name+"' tracing enabled"),r.isTracing=e?Rt.BREAK:Rt.LOG}var ce=function(){function n(n,t,e){void 0===n&&(n="Reaction@"+ht()),this.name=n,this.onInvalidate=t,this.errorHandler=e,this.observing=[],this.newObserving=[],this.dependenciesState=It.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+ht(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=Rt.NONE}return n.prototype.onBecomeStale=function(){this.schedule()},n.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,Lt.pendingReactions.push(this),de())},n.prototype.isScheduled=function(){return this._isScheduled},n.prototype.runReaction=function(){this.isDisposed||(Kt(),this._isScheduled=!1,Zt(this)&&(this._isTrackPending=!0,this.onInvalidate(),this._isTrackPending&&d()&&m({name:this.name,type:"scheduled-reaction"})),Gt())},n.prototype.track=function(n){Kt();var t,e=d();e&&(t=Date.now(),h({name:this.name,type:"reaction"})),this._isRunning=!0;var r=ee(this,n,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&re(this),Qt(r)&&this.reportExceptionInDerivation(r.cause),e&&g({time:Date.now()-t}),Gt()},n.prototype.reportExceptionInDerivation=function(n){var t=this;if(this.errorHandler)this.errorHandler(n,this);else{var e="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this;console.error(e,n),d()&&m({type:"error",name:this.name,message:e,error:""+n}),Lt.globalReactionErrorHandlers.forEach(function(e){return e(n,t)})}},n.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(Kt(),re(this),Gt()))},n.prototype.getDisposer=function(){var n=this.dispose.bind(this);return n.$mobx=this,n},n.prototype.toString=function(){return"Reaction["+this.name+"]"},n.prototype.trace=function(n){void 0===n&&(n=!1),ue(this,n)},n}();function se(n){return Lt.globalReactionErrorHandlers.push(n),function(){var t=Lt.globalReactionErrorHandlers.indexOf(n);t>=0&&Lt.globalReactionErrorHandlers.splice(t,1)}}var fe=100,pe=function(n){return n()};function de(){Lt.inBatch>0||Lt.isRunningReactions||pe(me)}function me(){Lt.isRunningReactions=!0;for(var n=Lt.pendingReactions,t=0;n.length>0;){++t===fe&&(console.error("Reaction doesn't converge to a stable state after "+fe+" iterations. Probably there is a cycle in the reactive function: "+n[0]),n.splice(0));for(var e=n.splice(0),r=0,o=e.length;r<o;r++)e[r].runReaction()}Lt.isRunningReactions=!1}var he=Et("Reaction",ce);function be(n,t,e,r){return"function"==typeof e?function(n,t,e,r){return Wn(n,t).observe(e,r)}(n,t,e,r):function(n,t,e){return Wn(n).observe(t,e)}(n,t,e)}function ge(n,t,e){return"function"==typeof e?function(n,t,e){return Wn(n,t).intercept(e)}(n,t,e):function(n,t){return Wn(n).intercept(t)}(n,t)}function ve(n,t,e){return 1===arguments.length||t&&"object"==typeof t?function(n,t){0;var e,r=new Promise(function(r,o){var i=ye(n,r,a({},t,{onError:o}));e=function(){i(),o("WHEN_CANCELLED")}});return r.cancel=e,r}(n,t):ye(n,t,e||{})}function ye(n,t,e){var r;"number"==typeof e.timeout&&(r=setTimeout(function(){if(!i.$mobx.isDisposed){i();var n=new Error("WHEN_TIMEOUT");if(!e.onError)throw n;e.onError(n)}},e.timeout)),e.name=e.name||"When@"+ht();var o=y(e.name+"-effect",t),i=U(function(t){n()&&(t.dispose(),r&&clearTimeout(r),o())},e);return i}function xe(n){return ln(n)?n.$mobx.getKeys():Vn(n)?n._keys.slice():bt(!1)}function we(n){return ln(n)?xe(n).map(function(t){return n[t]}):Vn(n)?xe(n).map(function(t){return n.get(t)}):st(n)?n.slice():bt(!1)}function ke(n,t,e){if(2!==arguments.length)if(ln(n)){var r=n.$mobx,o=r.values[t];o?o.set(e):nn(n,t,e,r.defaultEnhancer)}else if(Vn(n))n.set(t,e);else{if(!st(n))return bt(!1);"number"!=typeof t&&(t=parseInt(t,10)),gt(t>=0,"Not a valid index: '"+t+"'"),Kt(),t>=n.length&&(n.length=t+1),n[t]=e,Gt()}else{Kt();var i=t;try{for(var a in i)ke(n,a,i[a])}finally{Gt()}}}function _e(n,t){if(ln(n))n.$mobx.remove(t);else if(Vn(n))n.delete(t);else{if(!st(n))return bt(!1);"number"!=typeof t&&(t=parseInt(t,10)),gt(t>=0,"Not a valid index: '"+t+"'"),n.splice(t,1)}}function Oe(n,t){if(ln(n)){var e=Wn(n);return e.getKeys(),e.values[t]instanceof X}return Vn(n)?n.has(t):st(n)?t>=0&&t<n.length:bt(!1)}function Ee(n,t){if(Oe(n,t))return ln(n)?n[t]:Vn(n)?n.get(t):st(n)?n[t]:bt(!1)}function Se(n,t){var e="function"==typeof n?n.prototype:n;for(var r in t){var o=t[r],i=o(e,r,Object.getOwnPropertyDescriptor(e,r));i&&Object.defineProperty(e,r,i)}return n}function je(n){var t,e;void 0!==n.enforceActions&&(Lt.enforceActions=!!n.enforceActions,Lt.allowStateChanges=!n.enforceActions),void 0!==n.computedRequiresReaction&&(Lt.computedRequiresReaction=!!n.computedRequiresReaction),!0===n.isolateGlobalState&&(Nt=!0,mt().__mobxInstanceCount--),void 0!==n.disableErrorBoundaries&&(!0===n.disableErrorBoundaries&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors if this is on."),Lt.disableErrorBoundaries=!!n.disableErrorBoundaries),"number"==typeof n.arrayBuffer&&ut(n.arrayBuffer),n.reactionScheduler&&(t=n.reactionScheduler,e=pe,pe=function(n){return t(function(){return e(n)})})}var Pe=0;function Ce(n){1!==arguments.length&&fail("Flow expects one 1 argument and cannot be used as decorator");var t=n.name||"<unnamed flow>";return function(){var e,r=arguments,o=++Pe,i=S(t+" - runid: "+o+" - init",n).apply(this,r),a=void 0,l=new Promise(function(n,r){var l=0;function u(n){var e;a=void 0;try{e=S(t+" - runid: "+o+" - yield "+l++,i.next).call(i,n)}catch(n){return r(n)}s(e)}function c(n){var e;a=void 0;try{e=S(t+" - runid: "+o+" - yield "+l++,i.throw).call(i,n)}catch(n){return r(n)}s(e)}function s(t){if(!t||"function"!=typeof t.then)return t.done?n(t.value):(a=Promise.resolve(t.value)).then(u,c);t.then(s,r)}e=r,u(void 0)});return l.cancel=S(t+" - runid: "+o+" - cancel",function(){try{a&&Te(a);var n=i.return(),t=Promise.resolve(n.value);t.then(xt,xt),Te(t),e(new Error("FLOW_CANCELLED"))}catch(n){e(n)}}),l}}function Te(n){"function"==typeof n.cancel&&n.cancel()}var Ie={detectCycles:!0,exportMapsAsObjects:!0};function Re(n,t,e){void 0===e&&(e=[]),"boolean"==typeof t&&(t={detectCycles:t}),t||(t=Ie);var r=!0===t.detectCycles;function o(t){return r&&e.push([n,t]),t}if(sn(n)){if(r&&null===e&&(e=[]),r&&null!==n&&"object"==typeof n)for(var i=0,a=e.length;i<a;i++)if(e[i][0]===n)return e[i][1];if(st(n)){var l=o([]),u=n.map(function(n){return Re(n,t,e)});l.length=u.length;for(i=0,a=u.length;i<a;i++)l[i]=u[i];return l}if(ln(n)){l=o({});for(var c in xe(n),n)l[c]=Re(n[c],t,e);return l}if(Vn(n)){if(!1===t.exportMapsAsObjects){var s=o(new Map);return n.forEach(function(n,r){s.set(r,Re(n,t,e))}),s}var f=o({});return n.forEach(function(n,r){f[r]=Re(n,t,e)}),f}if(J(n))return Re(n.get(),t,e)}return n}function Me(n,t,e){var r;if(Vn(n)||st(n)||J(n))r=Wn(n);else{if(!ln(n))return bt(!1);if("string"!=typeof t)return bt(!1);r=Wn(n,t)}return void 0!==r.dehancer?bt(!1):(r.dehancer="function"==typeof t?t:e,function(){r.dehancer=void 0})}"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:v,extras:{getDebugName:$n}})}.call(t,e(163),e(66))},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateMovieURI=t.generateUserURI=t.setXAccessToken=t.getXAccessTokenFromCookie=void 0;var r=i(e(431)),o=i(e(23));i(e(435));function i(n){return n&&n.__esModule?n:{default:n}}var a=new r.default;t.getXAccessTokenFromCookie=function(){return a.get("x-access-token")},t.setXAccessToken=function(n){o.default.isNil(n)?a.remove("x-access-token"):a.set("x-access-token",n),function(n){e(39).axios.defaults.headers["x-access-token"]=n}(n)},t.generateUserURI=function(n,t){return o.default.replace(t,":userId",n)},t.generateMovieURI=function(n,t){return o.default.replace(t,":movieId",n)}},function(n,t,e){"use strict";if(e(7)){var r=e(45),o=e(3),i=e(4),a=e(0),l=e(77),u=e(111),c=e(25),s=e(51),f=e(43),p=e(17),d=e(53),m=e(32),h=e(9),b=e(147),g=e(47),v=e(30),y=e(16),x=e(61),w=e(5),k=e(12),_=e(102),O=e(48),E=e(22),S=e(49).f,j=e(104),P=e(44),C=e(6),T=e(34),I=e(68),R=e(75),M=e(107),A=e(57),L=e(72),N=e(50),U=e(106),D=e(137),z=e(8),F=e(21),B=z.f,V=F.f,H=o.RangeError,W=o.TypeError,$=o.Uint8Array,q=Array.prototype,K=u.ArrayBuffer,G=u.DataView,Y=T(0),X=T(2),J=T(3),Q=T(4),Z=T(5),nn=T(6),tn=I(!0),en=I(!1),rn=M.values,on=M.keys,an=M.entries,ln=q.lastIndexOf,un=q.reduce,cn=q.reduceRight,sn=q.join,fn=q.sort,pn=q.slice,dn=q.toString,mn=q.toLocaleString,hn=C("iterator"),bn=C("toStringTag"),gn=P("typed_constructor"),vn=P("def_constructor"),yn=l.CONSTR,xn=l.TYPED,wn=l.VIEW,kn=T(1,function(n,t){return jn(R(n,n[vn]),t)}),_n=i(function(){return 1===new $(new Uint16Array([1]).buffer)[0]}),On=!!$&&!!$.prototype.set&&i(function(){new $(1).set({})}),En=function(n,t){var e=m(n);if(e<0||e%t)throw H("Wrong offset!");return e},Sn=function(n){if(w(n)&&xn in n)return n;throw W(n+" is not a typed array!")},jn=function(n,t){if(!(w(n)&&gn in n))throw W("It is not a typed array constructor!");return new n(t)},Pn=function(n,t){return Cn(R(n,n[vn]),t)},Cn=function(n,t){for(var e=0,r=t.length,o=jn(n,r);r>e;)o[e]=t[e++];return o},Tn=function(n,t,e){B(n,t,{get:function(){return this._d[e]}})},In=function(n){var t,e,r,o,i,a,l=k(n),u=arguments.length,s=u>1?arguments[1]:void 0,f=void 0!==s,p=j(l);if(void 0!=p&&!_(p)){for(a=p.call(l),r=[],t=0;!(i=a.next()).done;t++)r.push(i.value);l=r}for(f&&u>2&&(s=c(s,arguments[2],2)),t=0,e=h(l.length),o=jn(this,e);e>t;t++)o[t]=f?s(l[t],t):l[t];return o},Rn=function(){for(var n=0,t=arguments.length,e=jn(this,t);t>n;)e[n]=arguments[n++];return e},Mn=!!$&&i(function(){mn.call(new $(1))}),An=function(){return mn.apply(Mn?pn.call(Sn(this)):Sn(this),arguments)},Ln={copyWithin:function(n,t){return D.call(Sn(this),n,t,arguments.length>2?arguments[2]:void 0)},every:function(n){return Q(Sn(this),n,arguments.length>1?arguments[1]:void 0)},fill:function(n){return U.apply(Sn(this),arguments)},filter:function(n){return Pn(this,X(Sn(this),n,arguments.length>1?arguments[1]:void 0))},find:function(n){return Z(Sn(this),n,arguments.length>1?arguments[1]:void 0)},findIndex:function(n){return nn(Sn(this),n,arguments.length>1?arguments[1]:void 0)},forEach:function(n){Y(Sn(this),n,arguments.length>1?arguments[1]:void 0)},indexOf:function(n){return en(Sn(this),n,arguments.length>1?arguments[1]:void 0)},includes:function(n){return tn(Sn(this),n,arguments.length>1?arguments[1]:void 0)},join:function(n){return sn.apply(Sn(this),arguments)},lastIndexOf:function(n){return ln.apply(Sn(this),arguments)},map:function(n){return kn(Sn(this),n,arguments.length>1?arguments[1]:void 0)},reduce:function(n){return un.apply(Sn(this),arguments)},reduceRight:function(n){return cn.apply(Sn(this),arguments)},reverse:function(){for(var n,t=Sn(this).length,e=Math.floor(t/2),r=0;r<e;)n=this[r],this[r++]=this[--t],this[t]=n;return this},some:function(n){return J(Sn(this),n,arguments.length>1?arguments[1]:void 0)},sort:function(n){return fn.call(Sn(this),n)},subarray:function(n,t){var e=Sn(this),r=e.length,o=g(n,r);return new(R(e,e[vn]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,h((void 0===t?r:g(t,r))-o))}},Nn=function(n,t){return Pn(this,pn.call(Sn(this),n,t))},Un=function(n){Sn(this);var t=En(arguments[1],1),e=this.length,r=k(n),o=h(r.length),i=0;if(o+t>e)throw H("Wrong length!");for(;i<o;)this[t+i]=r[i++]},Dn={entries:function(){return an.call(Sn(this))},keys:function(){return on.call(Sn(this))},values:function(){return rn.call(Sn(this))}},zn=function(n,t){return w(n)&&n[xn]&&"symbol"!=typeof t&&t in n&&String(+t)==String(t)},Fn=function(n,t){return zn(n,t=v(t,!0))?f(2,n[t]):V(n,t)},Bn=function(n,t,e){return!(zn(n,t=v(t,!0))&&w(e)&&y(e,"value"))||y(e,"get")||y(e,"set")||e.configurable||y(e,"writable")&&!e.writable||y(e,"enumerable")&&!e.enumerable?B(n,t,e):(n[t]=e.value,n)};yn||(F.f=Fn,z.f=Bn),a(a.S+a.F*!yn,"Object",{getOwnPropertyDescriptor:Fn,defineProperty:Bn}),i(function(){dn.call({})})&&(dn=mn=function(){return sn.call(this)});var Vn=d({},Ln);d(Vn,Dn),p(Vn,hn,Dn.values),d(Vn,{slice:Nn,set:Un,constructor:function(){},toString:dn,toLocaleString:An}),Tn(Vn,"buffer","b"),Tn(Vn,"byteOffset","o"),Tn(Vn,"byteLength","l"),Tn(Vn,"length","e"),B(Vn,bn,{get:function(){return this[xn]}}),n.exports=function(n,t,e,u){var c=n+((u=!!u)?"Clamped":"")+"Array",f="get"+n,d="set"+n,m=o[c],g=m||{},v=m&&E(m),y=!m||!l.ABV,k={},_=m&&m.prototype,j=function(n,e){B(n,e,{get:function(){return function(n,e){var r=n._d;return r.v[f](e*t+r.o,_n)}(this,e)},set:function(n){return function(n,e,r){var o=n._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[d](e*t+o.o,r,_n)}(this,e,n)},enumerable:!0})};y?(m=e(function(n,e,r,o){s(n,m,c,"_d");var i,a,l,u,f=0,d=0;if(w(e)){if(!(e instanceof K||"ArrayBuffer"==(u=x(e))||"SharedArrayBuffer"==u))return xn in e?Cn(m,e):In.call(m,e);i=e,d=En(r,t);var g=e.byteLength;if(void 0===o){if(g%t)throw H("Wrong length!");if((a=g-d)<0)throw H("Wrong length!")}else if((a=h(o)*t)+d>g)throw H("Wrong length!");l=a/t}else l=b(e),i=new K(a=l*t);for(p(n,"_d",{b:i,o:d,l:a,e:l,v:new G(i)});f<l;)j(n,f++)}),_=m.prototype=O(Vn),p(_,"constructor",m)):i(function(){m(1)})&&i(function(){new m(-1)})&&L(function(n){new m,new m(null),new m(1.5),new m(n)},!0)||(m=e(function(n,e,r,o){var i;return s(n,m,c),w(e)?e instanceof K||"ArrayBuffer"==(i=x(e))||"SharedArrayBuffer"==i?void 0!==o?new g(e,En(r,t),o):void 0!==r?new g(e,En(r,t)):new g(e):xn in e?Cn(m,e):In.call(m,e):new g(b(e))}),Y(v!==Function.prototype?S(g).concat(S(v)):S(g),function(n){n in m||p(m,n,g[n])}),m.prototype=_,r||(_.constructor=m));var P=_[hn],C=!!P&&("values"==P.name||void 0==P.name),T=Dn.values;p(m,gn,!0),p(_,xn,c),p(_,wn,!0),p(_,vn,m),(u?new m(1)[bn]==c:bn in _)||B(_,bn,{get:function(){return c}}),k[c]=m,a(a.G+a.W+a.F*(m!=g),k),a(a.S,c,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*i(function(){g.of.call(m,1)}),c,{from:In,of:Rn}),"BYTES_PER_ELEMENT"in _||p(_,"BYTES_PER_ELEMENT",t),a(a.P,c,Ln),N(c),a(a.P+a.F*On,c,{set:Un}),a(a.P+a.F*!C,c,Dn),r||_.toString==dn||(_.toString=dn),a(a.P+a.F*i(function(){new m(1).slice()}),c,{slice:Nn}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new m([1,2]).toLocaleString()})||!i(function(){_.toLocaleString.call([1,2])})),c,{toLocaleString:An}),A[c]=C?P:T,r||C||p(_,hn,T)}}else n.exports=function(){}},function(n,t,e){var r=e(142),o=e(0),i=e(67)("metadata"),a=i.store||(i.store=new(e(145))),l=function(n,t,e){var o=a.get(n);if(!o){if(!e)return;a.set(n,o=new r)}var i=o.get(t);if(!i){if(!e)return;o.set(t,i=new r)}return i};n.exports={store:a,map:l,has:function(n,t,e){var r=l(t,e,!1);return void 0!==r&&r.has(n)},get:function(n,t,e){var r=l(t,e,!1);return void 0===r?void 0:r.get(n)},set:function(n,t,e,r){l(e,r,!0).set(n,t)},keys:function(n,t){var e=l(n,t,!1),r=[];return e&&e.forEach(function(n,t){r.push(t)}),r},key:function(n){return void 0===n||"symbol"==typeof n?n:String(n)},exp:function(n){o(o.S,"Reflect",n)}}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.omdb_axios=t.axios=void 0;var r=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(438)),o=e(169),i=e(36);t.axios=r.create({baseURL:o.API_ENDPOINT,headers:{"x-access-token":(0,i.getXAccessTokenFromCookie)()}}),t.omdb_axios=r.create({baseURL:o.OMDB_API})},function(n,t,e){var r=e(44)("meta"),o=e(5),i=e(16),a=e(8).f,l=0,u=Object.isExtensible||function(){return!0},c=!e(4)(function(){return u(Object.preventExtensions({}))}),s=function(n){a(n,r,{value:{i:"O"+ ++l,w:{}}})},f=n.exports={KEY:r,NEED:!1,fastKey:function(n,t){if(!o(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!i(n,r)){if(!u(n))return"F";if(!t)return"E";s(n)}return n[r].i},getWeak:function(n,t){if(!i(n,r)){if(!u(n))return!0;if(!t)return!1;s(n)}return n[r].w},onFreeze:function(n){return c&&f.NEED&&u(n)&&!i(n,r)&&s(n),n}}},function(n,t,e){var r=e(6)("unscopables"),o=Array.prototype;void 0==o[r]&&e(17)(o,r,{}),n.exports=function(n){o[r][n]=!0}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SIGNUP_API="/api/users/register",t.SIGNIN_API="/api/users/login",t.SEARCH_USER_API="/api/users/search",t.PROFILE_ME_API="/api/profiles/me",t.POST_MOVIE_API="/api/movies/",t.MOVIE_LIST_API="/api/movies/",t.LIKE_MOVIE_API="/api/likes/like",t.UNLIKE_MOVIE_API="/api/likes/unlike",t.CURRENT_USER_LIKED_MOVIES_API="/api/likes/movies/my",t.MOVIES_LIKED_BY_USERID_API="/api/likes/movies/:userId",t.USERS_LIKE_MOVIEID_API="/api/likes/users/:movieId",t.USERS_LENGTH_LIKE_MOVIEID_API="/api/likes/users/:movieId/length",t.PROFILE_USER_INFO="/api/profiles/:userId"},function(n,t){n.exports=function(n,t){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:t}}},function(n,t){var e=0,r=Math.random();n.exports=function(n){return"Symbol(".concat(void 0===n?"":n,")_",(++e+r).toString(36))}},function(n,t){n.exports=!1},function(n,t,e){var r=e(123),o=e(89);n.exports=Object.keys||function(n){return r(n,o)}},function(n,t,e){var r=e(32),o=Math.max,i=Math.min;n.exports=function(n,t){return(n=r(n))<0?o(n+t,0):i(n,t)}},function(n,t,e){var r=e(2),o=e(124),i=e(89),a=e(88)("IE_PROTO"),l=function(){},u=function(){var n,t=e(86)("iframe"),r=i.length;for(t.style.display="none",e(90).appendChild(t),t.src="javascript:",(n=t.contentWindow.document).open(),n.write("<script>document.F=Object<\/script>"),n.close(),u=n.F;r--;)delete u.prototype[i[r]];return u()};n.exports=Object.create||function(n,t){var e;return null!==n?(l.prototype=r(n),e=new l,l.prototype=null,e[a]=n):e=u(),void 0===t?e:o(e,t)}},function(n,t,e){var r=e(123),o=e(89).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,t,e){"use strict";var r=e(3),o=e(8),i=e(7),a=e(6)("species");n.exports=function(n){var t=r[n];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(n,t){n.exports=function(n,t,e,r){if(!(n instanceof t)||void 0!==r&&r in n)throw TypeError(e+": incorrect invocation!");return n}},function(n,t,e){var r=e(25),o=e(135),i=e(102),a=e(2),l=e(9),u=e(104),c={},s={};(t=n.exports=function(n,t,e,f,p){var d,m,h,b,g=p?function(){return n}:u(n),v=r(e,f,t?2:1),y=0;if("function"!=typeof g)throw TypeError(n+" is not iterable!");if(i(g)){for(d=l(n.length);d>y;y++)if((b=t?v(a(m=n[y])[0],m[1]):v(n[y]))===c||b===s)return b}else for(h=g.call(n);!(m=h.next()).done;)if((b=o(h,v,m.value,t))===c||b===s)return b}).BREAK=c,t.RETURN=s},function(n,t,e){var r=e(18);n.exports=function(n,t,e){for(var o in t)r(n,o,t[o],e);return n}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SEARCH_RESULT_URI="/search",t.SIGN_UP_URI="/account/signUp",t.SIGN_IN_URI="/account/signIn";var r=t.MOVIE_URI="/movie",o=(t.MOVIE_LIST_URI=r+"/list",t.MOVIE_DETAIL_URI=r+"/:movieId/detail",t.MOVIE_LIKED_BY_URI=r+"/:movieId/likedBy",t.USER_URI="/user/:userId");t.USER_LIKES_URI=o+"/likes",t.USER_PROFILE_URI=o+"/profiles"},function(n,t,e){var r=e(8).f,o=e(16),i=e(6)("toStringTag");n.exports=function(n,t,e){n&&!o(n=e?n:n.prototype,i)&&r(n,i,{configurable:!0,value:t})}},function(n,t,e){var r=e(0),o=e(31),i=e(4),a=e(92),l="["+a+"]",u=RegExp("^"+l+l+"*"),c=RegExp(l+l+"*$"),s=function(n,t,e){var o={},l=i(function(){return!!a[n]()||"​"!="​"[n]()}),u=o[n]=l?t(f):a[n];e&&(o[e]=u),r(r.P+r.F*l,"String",o)},f=s.trim=function(n,t){return n=String(o(n)),1&t&&(n=n.replace(u,"")),2&t&&(n=n.replace(c,"")),n};n.exports=s},function(n,t){n.exports={}},function(n,t,e){var r=e(5);n.exports=function(n,t){if(!r(n)||n._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return n}},function(n,t,e){var r=e(26);n.exports=Object("z").propertyIsEnumerable(0)?Object:function(n){return"String"==r(n)?n.split(""):Object(n)}},function(n,t){t.f={}.propertyIsEnumerable},function(n,t,e){var r=e(26),o=e(6)("toStringTag"),i="Arguments"==r(function(){return arguments}());n.exports=function(n){var t,e,a;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(e=function(n,t){try{return n[t]}catch(n){}}(t=Object(n),o))?e:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(n,t){n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",r=n[3];if(!r)return e;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[e].concat(i).concat([o]).join("\n")}var a;return[e].join("\n")}(t,n);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),t.push(a))}},t}},function(n,t,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(n){var t={};return function(n){if("function"==typeof n)return n();if(void 0===t[n]){var e=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}}(),u=null,c=0,s=[],f=e(392);function p(n,t){for(var e=0;e<n.length;e++){var r=n[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function d(n,t){for(var e=[],r={},o=0;o<n.length;o++){var i=n[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):e.push(r[a]={id:a,parts:[l]})}return e}function m(n,t){var e=l(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===n.insertAt)r?r.nextSibling?e.insertBefore(t,r.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild),s.push(t);else if("bottom"===n.insertAt)e.appendChild(t);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(n.insertInto+" "+n.insertAt.before);e.insertBefore(t,o)}}function h(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var t=s.indexOf(n);t>=0&&s.splice(t,1)}function b(n){var t=document.createElement("style");return n.attrs.type="text/css",g(t,n.attrs),m(n,t),t}function g(n,t){Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])})}function v(n,t){var e,r,o,i;if(t.transform&&n.css){if(!(i=t.transform(n.css)))return function(){};n.css=i}if(t.singleton){var a=c++;e=u||(u=b(t)),r=w.bind(null,e,a,!1),o=w.bind(null,e,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(n){var t=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",g(t,n.attrs),m(n,t),t}(t),r=function(n,t,e){var r=e.css,o=e.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=n.href;n.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,e,t),o=function(){h(e),e.href&&URL.revokeObjectURL(e.href)}):(e=b(t),r=function(n,t){var e=t.css,r=t.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){h(e)});return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var e=d(n,t);return p(e,t),function(n){for(var r=[],o=0;o<e.length;o++){var a=e[o];(l=i[a.id]).refs--,r.push(l)}n&&p(d(n,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var y,x=(y=[],function(n,t){return y[n]=t,y.filter(Boolean).join("\n")});function w(n,t,e,r){var o=e?"":r.css;if(n.styleSheet)n.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=n.childNodes;a[t]&&n.removeChild(a[t]),a.length?n.insertBefore(i,a[t]):n.appendChild(i)}}},function(n,t,e){"use strict";t.__esModule=!0;t.addLeadingSlash=function(n){return"/"===n.charAt(0)?n:"/"+n},t.stripLeadingSlash=function(n){return"/"===n.charAt(0)?n.substr(1):n};var r=t.hasBasename=function(n,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(n)};t.stripBasename=function(n,t){return r(n,t)?n.substr(t.length):n},t.stripTrailingSlash=function(n){return"/"===n.charAt(n.length-1)?n.slice(0,-1):n},t.parsePath=function(n){var t=n||"/",e="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(e=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===e?"":e,hash:"#"===r?"":r}},t.createPath=function(n){var t=n.pathname,e=n.search,r=n.hash,o=t||"/";return e&&"?"!==e&&(o+="?"===e.charAt(0)?e:"?"+e),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(n,t,e){"use strict";e.d(t,"a",function(){return r}),e.d(t,"f",function(){return o}),e.d(t,"c",function(){return i}),e.d(t,"e",function(){return a}),e.d(t,"g",function(){return l}),e.d(t,"d",function(){return u}),e.d(t,"b",function(){return c});var r=function(n){return"/"===n.charAt(0)?n:"/"+n},o=function(n){return"/"===n.charAt(0)?n.substr(1):n},i=function(n,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(n)},a=function(n,t){return i(n,t)?n.substr(t.length):n},l=function(n){return"/"===n.charAt(n.length-1)?n.slice(0,-1):n},u=function(n){var t=n||"/",e="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(e=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===e?"":e,hash:"#"===r?"":r}},c=function(n){var t=n.pathname,e=n.search,r=n.hash,o=t||"/";return e&&"?"!==e&&(o+="?"===e.charAt(0)?e:"?"+e),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(n,t){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(n){"object"==typeof window&&(e=window)}n.exports=e},function(n,t,e){var r=e(3),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});n.exports=function(n){return o[n]||(o[n]={})}},function(n,t,e){var r=e(20),o=e(9),i=e(47);n.exports=function(n){return function(t,e,a){var l,u=r(t),c=o(u.length),s=i(a,c);if(n&&e!=e){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((n||s in u)&&u[s]===e)return n||s||0;return!n&&-1}}},function(n,t){t.f=Object.getOwnPropertySymbols},function(n,t,e){var r=e(26);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,t,e){var r=e(5),o=e(26),i=e(6)("match");n.exports=function(n){var t;return r(n)&&(void 0!==(t=n[i])?!!t:"RegExp"==o(n))}},function(n,t,e){var r=e(6)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(n){}n.exports=function(n,t){if(!t&&!o)return!1;var e=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:e=!0}},i[r]=function(){return a},n(i)}catch(n){}return e}},function(n,t,e){"use strict";var r=e(2);n.exports=function(){var n=r(this),t="";return n.global&&(t+="g"),n.ignoreCase&&(t+="i"),n.multiline&&(t+="m"),n.unicode&&(t+="u"),n.sticky&&(t+="y"),t}},function(n,t,e){"use strict";var r=e(17),o=e(18),i=e(4),a=e(31),l=e(6);n.exports=function(n,t,e){var u=l(n),c=e(a,u,""[n]),s=c[0],f=c[1];i(function(){var t={};return t[u]=function(){return 7},7!=""[n](t)})&&(o(String.prototype,n,s),r(RegExp.prototype,u,2==t?function(n,t){return f.call(n,this,t)}:function(n){return f.call(n,this)}))}},function(n,t,e){var r=e(2),o=e(14),i=e(6)("species");n.exports=function(n,t){var e,a=r(n).constructor;return void 0===a||void 0==(e=r(a)[i])?t:o(e)}},function(n,t,e){"use strict";var r=e(3),o=e(0),i=e(18),a=e(53),l=e(40),u=e(52),c=e(51),s=e(5),f=e(4),p=e(72),d=e(55),m=e(93);n.exports=function(n,t,e,h,b,g){var v=r[n],y=v,x=b?"set":"add",w=y&&y.prototype,k={},_=function(n){var t=w[n];i(w,n,"delete"==n?function(n){return!(g&&!s(n))&&t.call(this,0===n?0:n)}:"has"==n?function(n){return!(g&&!s(n))&&t.call(this,0===n?0:n)}:"get"==n?function(n){return g&&!s(n)?void 0:t.call(this,0===n?0:n)}:"add"==n?function(n){return t.call(this,0===n?0:n),this}:function(n,e){return t.call(this,0===n?0:n,e),this})};if("function"==typeof y&&(g||w.forEach&&!f(function(){(new y).entries().next()}))){var O=new y,E=O[x](g?{}:-0,1)!=O,S=f(function(){O.has(1)}),j=p(function(n){new y(n)}),P=!g&&f(function(){for(var n=new y,t=5;t--;)n[x](t,t);return!n.has(-0)});j||((y=t(function(t,e){c(t,y,n);var r=m(new v,t,y);return void 0!=e&&u(e,b,r[x],r),r})).prototype=w,w.constructor=y),(S||P)&&(_("delete"),_("has"),b&&_("get")),(P||E)&&_(x),g&&w.clear&&delete w.clear}else y=h.getConstructor(t,n,b,x),a(y.prototype,e),l.NEED=!0;return d(y,n),k[n]=y,o(o.G+o.W+o.F*(y!=v),k),g||h.setStrong(y,n,b),y}},function(n,t,e){for(var r,o=e(3),i=e(17),a=e(44),l=a("typed_array"),u=a("view"),c=!(!o.ArrayBuffer||!o.DataView),s=c,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,l,!0),i(r.prototype,u,!0)):s=!1;n.exports={ABV:c,CONSTR:s,TYPED:l,VIEW:u}},function(n,t,e){"use strict";n.exports=e(45)||!e(4)(function(){var n=Math.random();__defineSetter__.call(null,n,function(){}),delete e(3)[n]})},function(n,t,e){"use strict";var r=e(0);n.exports=function(n){r(r.S,n,{of:function(){for(var n=arguments.length,t=new Array(n);n--;)t[n]=arguments[n];return new this(t)}})}},function(n,t,e){"use strict";var r=e(0),o=e(14),i=e(25),a=e(52);n.exports=function(n){r(r.S,n,{from:function(n){var t,e,r,l,u=arguments[1];return o(this),(t=void 0!==u)&&o(u),void 0==n?new this:(e=[],t?(r=0,l=i(u,arguments[2],2),a(n,!1,function(n){e.push(l(n,r++))})):a(n,!1,e.push,e),new this(e))}})}},function(n,t,e){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;n.exports=function(){try{if(!Object.assign)return!1;var n=new String("abc");if(n[5]="de","5"===Object.getOwnPropertyNames(n)[0])return!1;for(var t={},e=0;e<10;e++)t["_"+String.fromCharCode(e)]=e;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(n){return t[n]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(n){r[n]=n}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(n){return!1}}()?Object.assign:function(n,t){for(var e,a,l=function(n){if(null===n||void 0===n)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(n)}(n),u=1;u<arguments.length;u++){for(var c in e=Object(arguments[u]))o.call(e,c)&&(l[c]=e[c]);if(r){a=r(e);for(var s=0;s<a.length;s++)i.call(e,a[s])&&(l[a[s]]=e[a[s]])}}return l}},function(n,t,e){"use strict";function r(n){return function(){return n}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(n){return n},n.exports=o},function(n,t,e){"use strict";e.d(t,"a",function(){return l}),e.d(t,"b",function(){return u});var r=e(156),o=e(157),i=e(65),a=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},l=function(n,t,e,o){var l=void 0;"string"==typeof n?(l=Object(i.d)(n)).state=t:(void 0===(l=a({},n)).pathname&&(l.pathname=""),l.search?"?"!==l.search.charAt(0)&&(l.search="?"+l.search):l.search="",l.hash?"#"!==l.hash.charAt(0)&&(l.hash="#"+l.hash):l.hash="",void 0!==t&&void 0===l.state&&(l.state=t));try{l.pathname=decodeURI(l.pathname)}catch(n){throw n instanceof URIError?new URIError('Pathname "'+l.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):n}return e&&(l.key=e),o?l.pathname?"/"!==l.pathname.charAt(0)&&(l.pathname=Object(r.default)(l.pathname,o.pathname)):l.pathname=o.pathname:l.pathname||(l.pathname="/"),l},u=function(n,t){return n.pathname===t.pathname&&n.search===t.search&&n.hash===t.hash&&n.key===t.key&&Object(o.default)(n.state,t.state)}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(1),a=m(i),l=e(11),u=e(15),c=m(e(10)),s=e(54),f=m(e(427));e(428);var p=m(e(430)),d=e(36);function m(n){return n&&n.__esModule?n:{default:n}}var h=(0,l.inject)(function(n){return{getMovieById:n.omdb.getMovieById}})(r=(0,l.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.getMovie=e.getMovie.bind(e),e.state={loading:!0,result:null,error:null},e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"componentWillMount",value:function(){this.getMovie()}},{key:"getMovie",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(){var t,e,r,o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,t=this.props,e=t.getMovieById,r=t.imdbID,n.next=4,e(r);case 4:o=n.sent,this.setState({result:o,loading:!1}),n.next=11;break;case 8:n.prev=8,n.t0=n.catch(0),this.setState({error:n.t0,loading:!1});case 11:case"end":return n.stop()}},n,this,[[0,8]])}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(){return t.apply(this,arguments)}}()},{key:"render",value:function(){var n=this.state,t=n.result,e=n.loading,r=n.error;return e?a.default.createElement("div",null):r?a.default.createElement("div",null):a.default.createElement("div",{className:"row Card"},a.default.createElement("div",{className:"col-sm-4"},a.default.createElement("img",{className:"img-fluid",alt:"Responsive image",src:t.Poster})),a.default.createElement("div",{className:"col-sm-8 card-right card-title"},a.default.createElement("div",null,a.default.createElement("div",{className:"movieButtons"},a.default.createElement(f.default,{imdbID:t.imdbID}),a.default.createElement(p.default,{imdbID:t.imdbID})),a.default.createElement("h5",null,a.default.createElement(u.Link,{to:(0,d.generateMovieURI)(t.imdbID,s.MOVIE_DETAIL_URI)},"Title: ",t.Title))),a.default.createElement("p",null,"Year: ",t.Year),a.default.createElement("p",null,t.Plot),a.default.createElement("div",null,t.Ratings.map(function(n,t){return a.default.createElement("div",{key:t}," ",n.Source,": ",n.Value," ")})),a.default.createElement("ul",null,a.default.createElement("li",null,"Genre: ",t.Genre),a.default.createElement("li",null,"Directed By: ",t.Director),a.default.createElement("li",null,"Written By: ",t.Writer),a.default.createElement("li",null,"Released: ",t.Released),a.default.createElement("li",null,"Box Office: ",t.BoxOffice),a.default.createElement("li",null,"Runtime: ",t.Runtime),a.default.createElement("li",null,"Production: ",t.Production))))}}]),t}())||r)||r;h.propTypes={imdbID:c.default.string.isRequired},t.default=h},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),a=e(35),l=e(39),u=e(42),c=e(36);function s(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var f=new(r=function(){function n(){var t,e,r,i;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e="userInfo",i=this,(r=o)&&Object.defineProperty(t,e,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0}),this.getUserInfo()}return i(n,[{key:"logout",value:function(){(0,c.setXAccessToken)(null),f.userInfo=null}},{key:"getUserInfo",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(){var t;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,l.axios.get(u.PROFILE_ME_API);case 3:t=n.sent,f.userInfo=t.data,n.next=10;break;case 7:n.prev=7,n.t0=n.catch(0),(0,c.setXAccessToken)(null);case 10:case"end":return n.stop()}},n,this,[[0,7]])}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(){return t.apply(this,arguments)}}()}]),n}(),o=s(r.prototype,"userInfo",[a.observable],{enumerable:!0,initializer:function(){return null}}),s(r.prototype,"logout",[a.action],Object.getOwnPropertyDescriptor(r.prototype,"logout"),r.prototype),s(r.prototype,"getUserInfo",[a.action],Object.getOwnPropertyDescriptor(r.prototype,"getUserInfo"),r.prototype),r);t.default=f},function(n,t,e){var r=e(5),o=e(3).document,i=r(o)&&r(o.createElement);n.exports=function(n){return i?o.createElement(n):{}}},function(n,t,e){var r=e(3),o=e(29),i=e(45),a=e(122),l=e(8).f;n.exports=function(n){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==n.charAt(0)||n in t||l(t,n,{value:a.f(n)})}},function(n,t,e){var r=e(67)("keys"),o=e(44);n.exports=function(n){return r[n]||(r[n]=o(n))}},function(n,t){n.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(n,t,e){var r=e(3).document;n.exports=r&&r.documentElement},function(n,t,e){var r=e(5),o=e(2),i=function(n,t){if(o(n),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};n.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(n,t,r){try{(r=e(25)(Function.call,e(21).f(Object.prototype,"__proto__").set,2))(n,[]),t=!(n instanceof Array)}catch(n){t=!0}return function(n,e){return i(n,e),t?n.__proto__=e:r(n,e),n}}({},!1):void 0),check:i}},function(n,t){n.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(n,t,e){var r=e(5),o=e(91).set;n.exports=function(n,t,e){var i,a=t.constructor;return a!==e&&"function"==typeof a&&(i=a.prototype)!==e.prototype&&r(i)&&o&&o(n,i),n}},function(n,t,e){"use strict";var r=e(32),o=e(31);n.exports=function(n){var t=String(o(this)),e="",i=r(n);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(e+=t);return e}},function(n,t){n.exports=Math.sign||function(n){return 0==(n=+n)||n!=n?n:n<0?-1:1}},function(n,t){var e=Math.expm1;n.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(n){return 0==(n=+n)?n:n>-1e-6&&n<1e-6?n+n*n/2:Math.exp(n)-1}:e},function(n,t,e){var r=e(32),o=e(31);n.exports=function(n){return function(t,e){var i,a,l=String(o(t)),u=r(e),c=l.length;return u<0||u>=c?n?"":void 0:(i=l.charCodeAt(u))<55296||i>56319||u+1===c||(a=l.charCodeAt(u+1))<56320||a>57343?n?l.charAt(u):i:n?l.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},function(n,t,e){"use strict";var r=e(45),o=e(0),i=e(18),a=e(17),l=e(16),u=e(57),c=e(99),s=e(55),f=e(22),p=e(6)("iterator"),d=!([].keys&&"next"in[].keys()),m=function(){return this};n.exports=function(n,t,e,h,b,g,v){c(e,t,h);var y,x,w,k=function(n){if(!d&&n in S)return S[n];switch(n){case"keys":case"values":return function(){return new e(this,n)}}return function(){return new e(this,n)}},_=t+" Iterator",O="values"==b,E=!1,S=n.prototype,j=S[p]||S["@@iterator"]||b&&S[b],P=!d&&j||k(b),C=b?O?k("entries"):P:void 0,T="Array"==t&&S.entries||j;if(T&&(w=f(T.call(new n)))!==Object.prototype&&w.next&&(s(w,_,!0),r||l(w,p)||a(w,p,m)),O&&j&&"values"!==j.name&&(E=!0,P=function(){return j.call(this)}),r&&!v||!d&&!E&&S[p]||a(S,p,P),u[t]=P,u[_]=m,b)if(y={values:O?P:k("values"),keys:g?P:k("keys"),entries:C},v)for(x in y)x in S||i(S,x,y[x]);else o(o.P+o.F*(d||E),t,y);return y}},function(n,t,e){"use strict";var r=e(48),o=e(43),i=e(55),a={};e(17)(a,e(6)("iterator"),function(){return this}),n.exports=function(n,t,e){n.prototype=r(a,{next:o(1,e)}),i(n,t+" Iterator")}},function(n,t,e){var r=e(71),o=e(31);n.exports=function(n,t,e){if(r(t))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(n))}},function(n,t,e){var r=e(6)("match");n.exports=function(n){var t=/./;try{"/./"[n](t)}catch(e){try{return t[r]=!1,!"/./"[n](t)}catch(n){}}return!0}},function(n,t,e){var r=e(57),o=e(6)("iterator"),i=Array.prototype;n.exports=function(n){return void 0!==n&&(r.Array===n||i[o]===n)}},function(n,t,e){"use strict";var r=e(8),o=e(43);n.exports=function(n,t,e){t in n?r.f(n,t,o(0,e)):n[t]=e}},function(n,t,e){var r=e(61),o=e(6)("iterator"),i=e(57);n.exports=e(29).getIteratorMethod=function(n){if(void 0!=n)return n[o]||n["@@iterator"]||i[r(n)]}},function(n,t,e){var r=e(269);n.exports=function(n,t){return new(r(n))(t)}},function(n,t,e){"use strict";var r=e(12),o=e(47),i=e(9);n.exports=function(n){for(var t=r(this),e=i(t.length),a=arguments.length,l=o(a>1?arguments[1]:void 0,e),u=a>2?arguments[2]:void 0,c=void 0===u?e:o(u,e);c>l;)t[l++]=n;return t}},function(n,t,e){"use strict";var r=e(41),o=e(138),i=e(57),a=e(20);n.exports=e(98)(Array,"Array",function(n,t){this._t=a(n),this._i=0,this._k=t},function(){var n=this._t,t=this._k,e=this._i++;return!n||e>=n.length?(this._t=void 0,o(1)):o(0,"keys"==t?e:"values"==t?n[e]:[e,n[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(n,t,e){var r,o,i,a=e(25),l=e(128),u=e(90),c=e(86),s=e(3),f=s.process,p=s.setImmediate,d=s.clearImmediate,m=s.MessageChannel,h=s.Dispatch,b=0,g={},v=function(){var n=+this;if(g.hasOwnProperty(n)){var t=g[n];delete g[n],t()}},y=function(n){v.call(n.data)};p&&d||(p=function(n){for(var t=[],e=1;arguments.length>e;)t.push(arguments[e++]);return g[++b]=function(){l("function"==typeof n?n:Function(n),t)},r(b),b},d=function(n){delete g[n]},"process"==e(26)(f)?r=function(n){f.nextTick(a(v,n,1))}:h&&h.now?r=function(n){h.now(a(v,n,1))}:m?(i=(o=new m).port2,o.port1.onmessage=y,r=a(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(n){s.postMessage(n+"","*")},s.addEventListener("message",y,!1)):r="onreadystatechange"in c("script")?function(n){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),v.call(n)}}:function(n){setTimeout(a(v,n,1),0)}),n.exports={set:p,clear:d}},function(n,t,e){var r=e(3),o=e(108).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,l=r.Promise,u="process"==e(26)(a);n.exports=function(){var n,t,e,c=function(){var r,o;for(u&&(r=a.domain)&&r.exit();n;){o=n.fn,n=n.next;try{o()}catch(r){throw n?e():t=void 0,r}}t=void 0,r&&r.enter()};if(u)e=function(){a.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(l&&l.resolve){var s=l.resolve();e=function(){s.then(c)}}else e=function(){o.call(r,c)};else{var f=!0,p=document.createTextNode("");new i(c).observe(p,{characterData:!0}),e=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),n||(n=o,e()),t=o}}},function(n,t,e){"use strict";var r=e(14);n.exports.f=function(n){return new function(n){var t,e;this.promise=new n(function(n,r){if(void 0!==t||void 0!==e)throw TypeError("Bad Promise constructor");t=n,e=r}),this.resolve=r(t),this.reject=r(e)}(n)}},function(n,t,e){"use strict";var r=e(3),o=e(7),i=e(45),a=e(77),l=e(17),u=e(53),c=e(4),s=e(51),f=e(32),p=e(9),d=e(147),m=e(49).f,h=e(8).f,b=e(106),g=e(55),v="prototype",y="Wrong index!",x=r.ArrayBuffer,w=r.DataView,k=r.Math,_=r.RangeError,O=r.Infinity,E=x,S=k.abs,j=k.pow,P=k.floor,C=k.log,T=k.LN2,I=o?"_b":"buffer",R=o?"_l":"byteLength",M=o?"_o":"byteOffset";function A(n,t,e){var r,o,i,a=new Array(e),l=8*e-t-1,u=(1<<l)-1,c=u>>1,s=23===t?j(2,-24)-j(2,-77):0,f=0,p=n<0||0===n&&1/n<0?1:0;for((n=S(n))!=n||n===O?(o=n!=n?1:0,r=u):(r=P(C(n)/T),n*(i=j(2,-r))<1&&(r--,i*=2),(n+=r+c>=1?s/i:s*j(2,1-c))*i>=2&&(r++,i/=2),r+c>=u?(o=0,r=u):r+c>=1?(o=(n*i-1)*j(2,t),r+=c):(o=n*j(2,c-1)*j(2,t),r=0));t>=8;a[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,l+=t;l>0;a[f++]=255&r,r/=256,l-=8);return a[--f]|=128*p,a}function L(n,t,e){var r,o=8*e-t-1,i=(1<<o)-1,a=i>>1,l=o-7,u=e-1,c=n[u--],s=127&c;for(c>>=7;l>0;s=256*s+n[u],u--,l-=8);for(r=s&(1<<-l)-1,s>>=-l,l+=t;l>0;r=256*r+n[u],u--,l-=8);if(0===s)s=1-a;else{if(s===i)return r?NaN:c?-O:O;r+=j(2,t),s-=a}return(c?-1:1)*r*j(2,s-t)}function N(n){return n[3]<<24|n[2]<<16|n[1]<<8|n[0]}function U(n){return[255&n]}function D(n){return[255&n,n>>8&255]}function z(n){return[255&n,n>>8&255,n>>16&255,n>>24&255]}function F(n){return A(n,52,8)}function B(n){return A(n,23,4)}function V(n,t,e){h(n[v],t,{get:function(){return this[e]}})}function H(n,t,e,r){var o=d(+e);if(o+t>n[R])throw _(y);var i=n[I]._b,a=o+n[M],l=i.slice(a,a+t);return r?l:l.reverse()}function W(n,t,e,r,o,i){var a=d(+e);if(a+t>n[R])throw _(y);for(var l=n[I]._b,u=a+n[M],c=r(+o),s=0;s<t;s++)l[u+s]=c[i?s:t-s-1]}if(a.ABV){if(!c(function(){x(1)})||!c(function(){new x(-1)})||c(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){for(var $,q=(x=function(n){return s(this,x),new E(d(n))})[v]=E[v],K=m(E),G=0;K.length>G;)($=K[G++])in x||l(x,$,E[$]);i||(q.constructor=x)}var Y=new w(new x(2)),X=w[v].setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||u(w[v],{setInt8:function(n,t){X.call(this,n,t<<24>>24)},setUint8:function(n,t){X.call(this,n,t<<24>>24)}},!0)}else x=function(n){s(this,x,"ArrayBuffer");var t=d(n);this._b=b.call(new Array(t),0),this[R]=t},w=function(n,t,e){s(this,w,"DataView"),s(n,x,"DataView");var r=n[R],o=f(t);if(o<0||o>r)throw _("Wrong offset!");if(o+(e=void 0===e?r-o:p(e))>r)throw _("Wrong length!");this[I]=n,this[M]=o,this[R]=e},o&&(V(x,"byteLength","_l"),V(w,"buffer","_b"),V(w,"byteLength","_l"),V(w,"byteOffset","_o")),u(w[v],{getInt8:function(n){return H(this,1,n)[0]<<24>>24},getUint8:function(n){return H(this,1,n)[0]},getInt16:function(n){var t=H(this,2,n,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(n){var t=H(this,2,n,arguments[1]);return t[1]<<8|t[0]},getInt32:function(n){return N(H(this,4,n,arguments[1]))},getUint32:function(n){return N(H(this,4,n,arguments[1]))>>>0},getFloat32:function(n){return L(H(this,4,n,arguments[1]),23,4)},getFloat64:function(n){return L(H(this,8,n,arguments[1]),52,8)},setInt8:function(n,t){W(this,1,n,U,t)},setUint8:function(n,t){W(this,1,n,U,t)},setInt16:function(n,t){W(this,2,n,D,t,arguments[2])},setUint16:function(n,t){W(this,2,n,D,t,arguments[2])},setInt32:function(n,t){W(this,4,n,z,t,arguments[2])},setUint32:function(n,t){W(this,4,n,z,t,arguments[2])},setFloat32:function(n,t){W(this,4,n,B,t,arguments[2])},setFloat64:function(n,t){W(this,8,n,F,t,arguments[2])}});g(x,"ArrayBuffer"),g(w,"DataView"),l(w[v],a.VIEW,!0),t.ArrayBuffer=x,t.DataView=w},function(n,t,e){var r=e(3).navigator;n.exports=r&&r.userAgent||""},function(n,t,e){"use strict";!function n(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(n)}catch(n){console.error(n)}}(),n.exports=e(381)},function(n,t,e){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},o=l(e(156)),i=l(e(157)),a=e(64);function l(n){return n&&n.__esModule?n:{default:n}}t.createLocation=function(n,t,e,i){var l=void 0;"string"==typeof n?(l=(0,a.parsePath)(n)).state=t:(void 0===(l=r({},n)).pathname&&(l.pathname=""),l.search?"?"!==l.search.charAt(0)&&(l.search="?"+l.search):l.search="",l.hash?"#"!==l.hash.charAt(0)&&(l.hash="#"+l.hash):l.hash="",void 0!==t&&void 0===l.state&&(l.state=t));try{l.pathname=decodeURI(l.pathname)}catch(n){throw n instanceof URIError?new URIError('Pathname "'+l.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):n}return e&&(l.key=e),i?l.pathname?"/"!==l.pathname.charAt(0)&&(l.pathname=(0,o.default)(l.pathname,i.pathname)):l.pathname=i.pathname:l.pathname||(l.pathname="/"),l},t.locationsAreEqual=function(n,t){return n.pathname===t.pathname&&n.search===t.search&&n.hash===t.hash&&n.key===t.key&&(0,i.default)(n.state,t.state)}},function(n,t,e){"use strict";t.__esModule=!0;var r,o=e(13),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var n=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==n,"A history supports only one prompt at a time"),n=t,function(){n===t&&(n=null)}},confirmTransitionTo:function(t,e,r,o){if(null!=n){var a="function"==typeof n?n(t,e):n;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(n){var e=!0,r=function(){e&&n.apply(void 0,arguments)};return t.push(r),function(){e=!1,t=t.filter(function(n){return n!==r})}},notifyListeners:function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];t.forEach(function(n){return n.apply(void 0,e)})}}}},function(n,t,e){"use strict";var r=e(117);t.a=r.a},function(n,t,e){"use strict";var r=e(13),o=e.n(r),i=e(28),a=e.n(i),l=e(1),u=e.n(l),c=e(10),s=e.n(c),f=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n};function p(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}var d=function(n){function t(){var e,r;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=p(this,n.call.apply(n,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},p(r,e)}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.getChildContext=function(){return{router:f({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(n){return{path:"/",url:"/",params:{},isExact:"/"===n}},t.prototype.componentWillMount=function(){var n=this,t=this.props,e=t.children,r=t.history;a()(null==e||1===u.a.Children.count(e),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){n.setState({match:n.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(n){o()(this.props.history===n.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var n=this.props.children;return n?u.a.Children.only(n):null},t}(u.a.Component);d.propTypes={history:s.a.object.isRequired,children:s.a.node},d.contextTypes={router:s.a.object},d.childContextTypes={router:s.a.object.isRequired},t.a=d},function(n,t,e){"use strict";var r=e(405),o=e.n(r),i={},a=0;t.a=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var e=t,r=e.path,l=void 0===r?"/":r,u=e.exact,c=void 0!==u&&u,s=e.strict,f=void 0!==s&&s,p=e.sensitive,d=function(n,t){var e=""+t.end+t.strict+t.sensitive,r=i[e]||(i[e]={});if(r[n])return r[n];var l=[],u={re:o()(n,l,t),keys:l};return a<1e4&&(r[n]=u,a++),u}(l,{end:c,strict:f,sensitive:void 0!==p&&p}),m=d.re,h=d.keys,b=m.exec(n);if(!b)return null;var g=b[0],v=b.slice(1),y=n===g;return c&&!y?null:{path:l,url:"/"===l&&""===g?"/":g,isExact:y,params:h.reduce(function(n,t,e){return n[t.name]=v[e],n},{})}}},function(n,t,e){"use strict";var r=e(13),o=e.n(r);t.a=function(){var n=null,t=[];return{setPrompt:function(t){return o()(null==n,"A history supports only one prompt at a time"),n=t,function(){n===t&&(n=null)}},confirmTransitionTo:function(t,e,r,i){if(null!=n){var a="function"==typeof n?n(t,e):n;"string"==typeof a?"function"==typeof r?r(a,i):(o()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(n){var e=!0,r=function(){e&&n.apply(void 0,arguments)};return t.push(r),function(){e=!1,t=t.filter(function(n){return n!==r})}},notifyListeners:function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];t.forEach(function(n){return n.apply(void 0,e)})}}}},function(n,t,e){"use strict";(function(t){var r=e(24),o=e(442),i={"Content-Type":"application/x-www-form-urlencoded"};function a(n,t){!r.isUndefined(n)&&r.isUndefined(n["Content-Type"])&&(n["Content-Type"]=t)}var l,u={adapter:("undefined"!=typeof XMLHttpRequest?l=e(165):void 0!==t&&(l=e(165)),l),transformRequest:[function(n,t){return o(t,"Content-Type"),r.isFormData(n)||r.isArrayBuffer(n)||r.isBuffer(n)||r.isStream(n)||r.isFile(n)||r.isBlob(n)?n:r.isArrayBufferView(n)?n.buffer:r.isURLSearchParams(n)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),n.toString()):r.isObject(n)?(a(t,"application/json;charset=utf-8"),JSON.stringify(n)):n}],transformResponse:[function(n){if("string"==typeof n)try{n=JSON.parse(n)}catch(n){}return n}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(n){return n>=200&&n<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(n){u.headers[n]={}}),r.forEach(["post","put","patch"],function(n){u.headers[n]=r.merge(i)}),n.exports=u}).call(t,e(163))},function(n,t,e){n.exports=!e(7)&&!e(4)(function(){return 7!=Object.defineProperty(e(86)("div"),"a",{get:function(){return 7}}).a})},function(n,t,e){t.f=e(6)},function(n,t,e){var r=e(16),o=e(20),i=e(68)(!1),a=e(88)("IE_PROTO");n.exports=function(n,t){var e,l=o(n),u=0,c=[];for(e in l)e!=a&&r(l,e)&&c.push(e);for(;t.length>u;)r(l,e=t[u++])&&(~i(c,e)||c.push(e));return c}},function(n,t,e){var r=e(8),o=e(2),i=e(46);n.exports=e(7)?Object.defineProperties:function(n,t){o(n);for(var e,a=i(t),l=a.length,u=0;l>u;)r.f(n,e=a[u++],t[e]);return n}},function(n,t,e){var r=e(20),o=e(49).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return a&&"[object Window]"==i.call(n)?function(n){try{return o(n)}catch(n){return a.slice()}}(n):o(r(n))}},function(n,t,e){"use strict";var r=e(46),o=e(69),i=e(60),a=e(12),l=e(59),u=Object.assign;n.exports=!u||e(4)(function(){var n={},t={},e=Symbol(),r="abcdefghijklmnopqrst";return n[e]=7,r.split("").forEach(function(n){t[n]=n}),7!=u({},n)[e]||Object.keys(u({},t)).join("")!=r})?function(n,t){for(var e=a(n),u=arguments.length,c=1,s=o.f,f=i.f;u>c;)for(var p,d=l(arguments[c++]),m=s?r(d).concat(s(d)):r(d),h=m.length,b=0;h>b;)f.call(d,p=m[b++])&&(e[p]=d[p]);return e}:u},function(n,t,e){"use strict";var r=e(14),o=e(5),i=e(128),a=[].slice,l={};n.exports=Function.bind||function(n){var t=r(this),e=a.call(arguments,1),u=function(){var r=e.concat(a.call(arguments));return this instanceof u?function(n,t,e){if(!(t in l)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";l[t]=Function("F,a","return new F("+r.join(",")+")")}return l[t](n,e)}(t,r.length,r):i(t,r,n)};return o(t.prototype)&&(u.prototype=t.prototype),u}},function(n,t){n.exports=function(n,t,e){var r=void 0===e;switch(t.length){case 0:return r?n():n.call(e);case 1:return r?n(t[0]):n.call(e,t[0]);case 2:return r?n(t[0],t[1]):n.call(e,t[0],t[1]);case 3:return r?n(t[0],t[1],t[2]):n.call(e,t[0],t[1],t[2]);case 4:return r?n(t[0],t[1],t[2],t[3]):n.call(e,t[0],t[1],t[2],t[3])}return n.apply(e,t)}},function(n,t,e){var r=e(3).parseInt,o=e(56).trim,i=e(92),a=/^[-+]?0[xX]/;n.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(n,t){var e=o(String(n),3);return r(e,t>>>0||(a.test(e)?16:10))}:r},function(n,t,e){var r=e(3).parseFloat,o=e(56).trim;n.exports=1/r(e(92)+"-0")!=-1/0?function(n){var t=o(String(n),3),e=r(t);return 0===e&&"-"==t.charAt(0)?-0:e}:r},function(n,t,e){var r=e(26);n.exports=function(n,t){if("number"!=typeof n&&"Number"!=r(n))throw TypeError(t);return+n}},function(n,t,e){var r=e(5),o=Math.floor;n.exports=function(n){return!r(n)&&isFinite(n)&&o(n)===n}},function(n,t){n.exports=Math.log1p||function(n){return(n=+n)>-1e-8&&n<1e-8?n-n*n/2:Math.log(1+n)}},function(n,t,e){var r=e(95),o=Math.pow,i=o(2,-52),a=o(2,-23),l=o(2,127)*(2-a),u=o(2,-126);n.exports=Math.fround||function(n){var t,e,o=Math.abs(n),c=r(n);return o<u?c*(o/u/a+1/i-1/i)*u*a:(e=(t=(1+a/i)*o)-(t-o))>l||e!=e?c*(1/0):c*e}},function(n,t,e){var r=e(2);n.exports=function(n,t,e,o){try{return o?t(r(e)[0],e[1]):t(e)}catch(t){var i=n.return;throw void 0!==i&&r(i.call(n)),t}}},function(n,t,e){var r=e(14),o=e(12),i=e(59),a=e(9);n.exports=function(n,t,e,l,u){r(t);var c=o(n),s=i(c),f=a(c.length),p=u?f-1:0,d=u?-1:1;if(e<2)for(;;){if(p in s){l=s[p],p+=d;break}if(p+=d,u?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;u?p>=0:f>p;p+=d)p in s&&(l=t(l,s[p],p,c));return l}},function(n,t,e){"use strict";var r=e(12),o=e(47),i=e(9);n.exports=[].copyWithin||function(n,t){var e=r(this),a=i(e.length),l=o(n,a),u=o(t,a),c=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===c?a:o(c,a))-u,a-l),f=1;for(u<l&&l<u+s&&(f=-1,u+=s-1,l+=s-1);s-- >0;)u in e?e[l]=e[u]:delete e[l],l+=f,u+=f;return e}},function(n,t){n.exports=function(n,t){return{value:t,done:!!n}}},function(n,t,e){e(7)&&"g"!=/./g.flags&&e(8).f(RegExp.prototype,"flags",{configurable:!0,get:e(73)})},function(n,t){n.exports=function(n){try{return{e:!1,v:n()}}catch(n){return{e:!0,v:n}}}},function(n,t,e){var r=e(2),o=e(5),i=e(110);n.exports=function(n,t){if(r(n),o(t)&&t.constructor===n)return t;var e=i.f(n);return(0,e.resolve)(t),e.promise}},function(n,t,e){"use strict";var r=e(143),o=e(58);n.exports=e(76)("Map",function(n){return function(){return n(this,arguments.length>0?arguments[0]:void 0)}},{get:function(n){var t=r.getEntry(o(this,"Map"),n);return t&&t.v},set:function(n,t){return r.def(o(this,"Map"),0===n?0:n,t)}},r,!0)},function(n,t,e){"use strict";var r=e(8).f,o=e(48),i=e(53),a=e(25),l=e(51),u=e(52),c=e(98),s=e(138),f=e(50),p=e(7),d=e(40).fastKey,m=e(58),h=p?"_s":"size",b=function(n,t){var e,r=d(t);if("F"!==r)return n._i[r];for(e=n._f;e;e=e.n)if(e.k==t)return e};n.exports={getConstructor:function(n,t,e,c){var s=n(function(n,r){l(n,s,t,"_i"),n._t=t,n._i=o(null),n._f=void 0,n._l=void 0,n[h]=0,void 0!=r&&u(r,e,n[c],n)});return i(s.prototype,{clear:function(){for(var n=m(this,t),e=n._i,r=n._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];n._f=n._l=void 0,n[h]=0},delete:function(n){var e=m(this,t),r=b(e,n);if(r){var o=r.n,i=r.p;delete e._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==r&&(e._f=o),e._l==r&&(e._l=i),e[h]--}return!!r},forEach:function(n){m(this,t);for(var e,r=a(n,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(n){return!!b(m(this,t),n)}}),p&&r(s.prototype,"size",{get:function(){return m(this,t)[h]}}),s},def:function(n,t,e){var r,o,i=b(n,t);return i?i.v=e:(n._l=i={i:o=d(t,!0),k:t,v:e,p:r=n._l,n:void 0,r:!1},n._f||(n._f=i),r&&(r.n=i),n[h]++,"F"!==o&&(n._i[o]=i)),n},getEntry:b,setStrong:function(n,t,e){c(n,t,function(n,e){this._t=m(n,t),this._k=e,this._l=void 0},function(){for(var n=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?s(0,"keys"==n?t.k:"values"==n?t.v:[t.k,t.v]):(this._t=void 0,s(1))},e?"entries":"values",!e,!0),f(t)}}},function(n,t,e){"use strict";var r=e(143),o=e(58);n.exports=e(76)("Set",function(n){return function(){return n(this,arguments.length>0?arguments[0]:void 0)}},{add:function(n){return r.def(o(this,"Set"),n=0===n?0:n,n)}},r)},function(n,t,e){"use strict";var r,o=e(34)(0),i=e(18),a=e(40),l=e(126),u=e(146),c=e(5),s=e(4),f=e(58),p=a.getWeak,d=Object.isExtensible,m=u.ufstore,h={},b=function(n){return function(){return n(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(n){if(c(n)){var t=p(n);return!0===t?m(f(this,"WeakMap")).get(n):t?t[this._i]:void 0}},set:function(n,t){return u.def(f(this,"WeakMap"),n,t)}},v=n.exports=e(76)("WeakMap",b,g,u,!0,!0);s(function(){return 7!=(new v).set((Object.freeze||Object)(h),7).get(h)})&&(l((r=u.getConstructor(b,"WeakMap")).prototype,g),a.NEED=!0,o(["delete","has","get","set"],function(n){var t=v.prototype,e=t[n];i(t,n,function(t,o){if(c(t)&&!d(t)){this._f||(this._f=new r);var i=this._f[n](t,o);return"set"==n?this:i}return e.call(this,t,o)})}))},function(n,t,e){"use strict";var r=e(53),o=e(40).getWeak,i=e(2),a=e(5),l=e(51),u=e(52),c=e(34),s=e(16),f=e(58),p=c(5),d=c(6),m=0,h=function(n){return n._l||(n._l=new b)},b=function(){this.a=[]},g=function(n,t){return p(n.a,function(n){return n[0]===t})};b.prototype={get:function(n){var t=g(this,n);if(t)return t[1]},has:function(n){return!!g(this,n)},set:function(n,t){var e=g(this,n);e?e[1]=t:this.a.push([n,t])},delete:function(n){var t=d(this.a,function(t){return t[0]===n});return~t&&this.a.splice(t,1),!!~t}},n.exports={getConstructor:function(n,t,e,i){var c=n(function(n,r){l(n,c,t,"_i"),n._t=t,n._i=m++,n._l=void 0,void 0!=r&&u(r,e,n[i],n)});return r(c.prototype,{delete:function(n){if(!a(n))return!1;var e=o(n);return!0===e?h(f(this,t)).delete(n):e&&s(e,this._i)&&delete e[this._i]},has:function(n){if(!a(n))return!1;var e=o(n);return!0===e?h(f(this,t)).has(n):e&&s(e,this._i)}}),c},def:function(n,t,e){var r=o(i(t),!0);return!0===r?h(n).set(t,e):r[n._i]=e,n},ufstore:h}},function(n,t,e){var r=e(32),o=e(9);n.exports=function(n){if(void 0===n)return 0;var t=r(n),e=o(t);if(t!==e)throw RangeError("Wrong length!");return e}},function(n,t,e){var r=e(49),o=e(69),i=e(2),a=e(3).Reflect;n.exports=a&&a.ownKeys||function(n){var t=r.f(i(n)),e=o.f;return e?t.concat(e(n)):t}},function(n,t,e){"use strict";var r=e(70),o=e(5),i=e(9),a=e(25),l=e(6)("isConcatSpreadable");n.exports=function n(t,e,u,c,s,f,p,d){for(var m,h,b=s,g=0,v=!!p&&a(p,d,3);g<c;){if(g in u){if(m=v?v(u[g],g,e):u[g],h=!1,o(m)&&(h=void 0!==(h=m[l])?!!h:r(m)),h&&f>0)b=n(t,e,m,i(m.length),b,f-1)-1;else{if(b>=9007199254740991)throw TypeError();t[b]=m}b++}g++}return b}},function(n,t,e){var r=e(9),o=e(94),i=e(31);n.exports=function(n,t,e,a){var l=String(i(n)),u=l.length,c=void 0===e?" ":String(e),s=r(t);if(s<=u||""==c)return l;var f=s-u,p=o.call(c,Math.ceil(f/c.length));return p.length>f&&(p=p.slice(0,f)),a?p+l:l+p}},function(n,t,e){var r=e(46),o=e(20),i=e(60).f;n.exports=function(n){return function(t){for(var e,a=o(t),l=r(a),u=l.length,c=0,s=[];u>c;)i.call(a,e=l[c++])&&s.push(n?[e,a[e]]:a[e]);return s}}},function(n,t,e){var r=e(61),o=e(153);n.exports=function(n){return function(){if(r(this)!=n)throw TypeError(n+"#toJSON isn't generic");return o(this)}}},function(n,t,e){var r=e(52);n.exports=function(n,t){var e=[];return r(n,!1,e.push,e,t),e}},function(n,t){n.exports=Math.scale||function(n,t,e,r,o){return 0===arguments.length||n!=n||t!=t||e!=e||r!=r||o!=o?NaN:n===1/0||n===-1/0?n:(n-t)*(o-r)/(e-t)+r}},function(n,t,e){"use strict";var r={};n.exports=r},function(n,t,e){"use strict";function r(n){return"/"===n.charAt(0)}function o(n,t){for(var e=t,r=e+1,o=n.length;r<o;e+=1,r+=1)n[e]=n[r];n.pop()}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=n&&n.split("/")||[],i=t&&t.split("/")||[],a=n&&r(n),l=t&&r(t),u=a||l;if(n&&r(n)?i=e:e.length&&(i.pop(),i=i.concat(e)),!i.length)return"/";var c=void 0;if(i.length){var s=i[i.length-1];c="."===s||".."===s||""===s}else c=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!u)for(;f--;f)i.unshift("..");!u||""===i[0]||i[0]&&r(i[0])||i.unshift("");var m=i.join("/");return c&&"/"!==m.substr(-1)&&(m+="/"),m}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};t.default=function n(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(Array.isArray(t))return Array.isArray(e)&&t.length===e.length&&t.every(function(t,r){return n(t,e[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===e?"undefined":r(e)))return!1;if("object"===o){var i=t.valueOf(),a=e.valueOf();if(i!==t||a!==e)return n(i,a);var l=Object.keys(t),u=Object.keys(e);return l.length===u.length&&l.every(function(r){return n(t[r],e[r])})}return!1}},function(n,t,e){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(n,t,e){return n.addEventListener?n.addEventListener(t,e,!1):n.attachEvent("on"+t,e)},t.removeEventListener=function(n,t,e){return n.removeEventListener?n.removeEventListener(t,e,!1):n.detachEvent("on"+t,e)},t.getConfirmation=function(n,t){return t(window.confirm(n))},t.supportsHistory=function(){var n=window.navigator.userAgent;return(-1===n.indexOf("Android 2.")&&-1===n.indexOf("Android 4.0")||-1===n.indexOf("Mobile Safari")||-1!==n.indexOf("Chrome")||-1!==n.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(n){return void 0===n.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(n,t,e){"use strict";var r=e(1),o=e.n(r),i=e(10),a=e.n(i),l=e(28),u=e.n(l),c=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n};function s(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}var f=function(n){return!!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)},p=function(n){function t(){var e,r;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=s(this,n.call.apply(n,[this].concat(i))),r.handleClick=function(n){if(r.props.onClick&&r.props.onClick(n),!n.defaultPrevented&&0===n.button&&!r.props.target&&!f(n)){n.preventDefault();var t=r.context.router.history,e=r.props,o=e.replace,i=e.to;o?t.replace(i):t.push(i)}},s(r,e)}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.render=function(){var n=this.props,t=(n.replace,n.to),e=n.innerRef,r=function(n,t){var e={};for(var r in n)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}(n,["replace","to","innerRef"]);u()(this.context.router,"You should not use <Link> outside a <Router>");var i=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return o.a.createElement("a",c({},r,{onClick:this.handleClick,href:i,ref:e}))},t}(o.a.Component);p.propTypes={onClick:a.a.func,target:a.a.string,replace:a.a.bool,to:a.a.oneOfType([a.a.string,a.a.object]).isRequired,innerRef:a.a.oneOfType([a.a.string,a.a.func])},p.defaultProps={replace:!1},p.contextTypes={router:a.a.shape({history:a.a.shape({push:a.a.func.isRequired,replace:a.a.func.isRequired,createHref:a.a.func.isRequired}).isRequired}).isRequired},t.a=p},function(n,t,e){"use strict";var r=e(161);t.a=r.a},function(n,t,e){"use strict";var r=e(13),o=e.n(r),i=e(28),a=e.n(i),l=e(1),u=e.n(l),c=e(10),s=e.n(c),f=e(118),p=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n};function d(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}var m=function(n){return 0===u.a.Children.count(n)},h=function(n){function t(){var e,r;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=d(this,n.call.apply(n,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},d(r,e)}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.getChildContext=function(){return{router:p({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(n,t){var e=n.computedMatch,r=n.location,o=n.path,i=n.strict,l=n.exact,u=n.sensitive;if(e)return e;a()(t,"You should not use <Route> or withRouter() outside a <Router>");var c=t.route,s=(r||c.location).pathname;return o?Object(f.a)(s,{path:o,strict:i,exact:l,sensitive:u}):c.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!m(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!m(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(n,t){o()(!(n.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!n.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(n,t.router)})},t.prototype.render=function(){var n=this.state.match,t=this.props,e=t.children,r=t.component,o=t.render,i=this.context.router,a=i.history,l=i.route,c=i.staticContext,s={match:n,location:this.props.location||l.location,history:a,staticContext:c};return r?n?u.a.createElement(r,s):null:o?n?o(s):null:e?"function"==typeof e?e(s):m(e)?null:u.a.Children.only(e):null},t}(u.a.Component);h.propTypes={computedMatch:s.a.object,path:s.a.string,exact:s.a.bool,strict:s.a.bool,sensitive:s.a.bool,component:s.a.func,render:s.a.func,children:s.a.oneOfType([s.a.func,s.a.node]),location:s.a.object},h.contextTypes={router:s.a.shape({history:s.a.object.isRequired,route:s.a.object.isRequired,staticContext:s.a.object})},h.childContextTypes={router:s.a.object.isRequired},t.a=h},function(n,t,e){"use strict";e.d(t,"b",function(){return r}),e.d(t,"a",function(){return o}),e.d(t,"e",function(){return i}),e.d(t,"c",function(){return a}),e.d(t,"g",function(){return l}),e.d(t,"h",function(){return u}),e.d(t,"f",function(){return c}),e.d(t,"d",function(){return s});var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o=function(n,t,e){return n.addEventListener?n.addEventListener(t,e,!1):n.attachEvent("on"+t,e)},i=function(n,t,e){return n.removeEventListener?n.removeEventListener(t,e,!1):n.detachEvent("on"+t,e)},a=function(n,t){return t(window.confirm(n))},l=function(){var n=window.navigator.userAgent;return(-1===n.indexOf("Android 2.")&&-1===n.indexOf("Android 4.0")||-1===n.indexOf("Mobile Safari")||-1!==n.indexOf("Chrome")||-1!==n.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},u=function(){return-1===window.navigator.userAgent.indexOf("Trident")},c=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},s=function(n){return void 0===n.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(n,t){var e,r,o=n.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(n){if(e===setTimeout)return setTimeout(n,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(n,0);try{return e(n,0)}catch(t){try{return e.call(null,n,0)}catch(t){return e.call(this,n,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(n){e=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(n){r=a}}();var u,c=[],s=!1,f=-1;function p(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!s){var n=l(p);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(n){if(r===clearTimeout)return clearTimeout(n);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(n);try{r(n)}catch(t){try{return r.call(null,n)}catch(t){return r.call(this,n)}}}(n)}}function m(n,t){this.fun=n,this.array=t}function h(){}o.nextTick=function(n){var t=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)t[e-1]=arguments[e];c.push(new m(n,t)),1!==c.length||s||l(d)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(n){return[]},o.binding=function(n){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(n){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(n,t,e){"use strict";n.exports=function(n,t){return function(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];return n.apply(t,e)}}},function(n,t,e){"use strict";var r=e(24),o=e(443),i=e(445),a=e(446),l=e(447),u=e(166),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||e(448);n.exports=function(n){return new Promise(function(t,s){var f=n.data,p=n.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,m="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||l(n.url)||(d=new window.XDomainRequest,m="onload",h=!0,d.onprogress=function(){},d.ontimeout=function(){}),n.auth){var b=n.auth.username||"",g=n.auth.password||"";p.Authorization="Basic "+c(b+":"+g)}if(d.open(n.method.toUpperCase(),i(n.url,n.params,n.paramsSerializer),!0),d.timeout=n.timeout,d[m]=function(){if(d&&(4===d.readyState||h)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:n.responseType&&"text"!==n.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:e,config:n,request:d};o(t,s,r),d=null}},d.onerror=function(){s(u("Network Error",n,null,d)),d=null},d.ontimeout=function(){s(u("timeout of "+n.timeout+"ms exceeded",n,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=e(449),y=(n.withCredentials||l(n.url))&&n.xsrfCookieName?v.read(n.xsrfCookieName):void 0;y&&(p[n.xsrfHeaderName]=y)}if("setRequestHeader"in d&&r.forEach(p,function(n,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,n)}),n.withCredentials&&(d.withCredentials=!0),n.responseType)try{d.responseType=n.responseType}catch(t){if("json"!==n.responseType)throw t}"function"==typeof n.onDownloadProgress&&d.addEventListener("progress",n.onDownloadProgress),"function"==typeof n.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",n.onUploadProgress),n.cancelToken&&n.cancelToken.promise.then(function(n){d&&(d.abort(),s(n),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(n,t,e){"use strict";var r=e(444);n.exports=function(n,t,e,o,i){var a=new Error(n);return r(a,t,e,o,i)}},function(n,t,e){"use strict";n.exports=function(n){return!(!n||!n.__CANCEL__)}},function(n,t,e){"use strict";function r(n){this.message=n}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,n.exports=r},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=void 0;r="";t.API_ENDPOINT=r,t.OMDB_API="https://www.omdbapi.com",t.OMDB_API_KEY="/?apikey=e05e044b&s="},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e(1),a=(r=i)&&r.__esModule?r:{default:r},l=e(15);e(171);var u=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.handleSubmit=function(n){n.preventDefault();var t=n.target.elements.searchContent.value.trim();t&&e.props.history.push({pathname:"/search",search:"?query="+t})},e.handleSubmit=e.handleSubmit.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("form",{className:"searchBar",onSubmit:this.handleSubmit},a.default.createElement("input",{className:"searchText",type:"search",name:"searchContent"}),a.default.createElement("button",{className:"btn btn-primary searchButton "},"search")))}}]),t}();t.default=(0,l.withRouter)(u)},function(n,t,e){var r=e(463);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(63)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){(function(n,t,e,r){"use strict";var o="default"in e?e.default:e,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},a=(function(){function n(n){this.value=n}function t(t){var e,r;function o(e,r){try{var a=t[e](r),l=a.value;l instanceof n?Promise.resolve(l.value).then(function(n){o("next",n)},function(n){o("throw",n)}):i(a.done?"return":"normal",a.value)}catch(n){i("throw",n)}}function i(n,t){switch(n){case"return":e.resolve({value:t,done:!0});break;case"throw":e.reject(t);break;default:e.resolve({value:t,done:!1})}(e=e.next)?o(e.key,e.arg):r=null}this._invoke=function(n,t){return new Promise(function(i,a){var l={key:n,arg:t,resolve:i,reject:a,next:null};r?r=r.next=l:(e=r=l,o(n,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(n){return this._invoke("next",n)},t.prototype.throw=function(n){return this._invoke("throw",n)},t.prototype.return=function(n){return this._invoke("return",n)}}(),function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}),l=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),u=function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)},c=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t},s=function(){function n(){a(this,n),this.listeners=[]}return l(n,[{key:"on",value:function(n){var t=this;return this.listeners.push(n),function(){var e=t.listeners.indexOf(n);-1!==e&&t.listeners.splice(e,1)}}},{key:"emit",value:function(n){this.listeners.forEach(function(t){return t(n)})}}]),n}(),f={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},p={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},d=Object.defineProperty,m=Object.getOwnPropertyNames,h=Object.getOwnPropertySymbols,b=Object.getOwnPropertyDescriptor,g=Object.getPrototypeOf,v=g&&g(Object),y=function n(t,e,r){if("string"!=typeof e){if(v){var o=g(e);o&&o!==v&&n(t,o,r)}var i=m(e);h&&(i=i.concat(h(e)));for(var a=0;a<i.length;++a){var l=i[a];if(!(f[l]||p[l]||r&&r[l])){var u=b(e,l);try{d(t,l,u)}catch(n){}}}return t}return t};function x(n){function e(e,r,o,i,a,l){for(var u=arguments.length,c=Array(u>6?u-6:0),s=6;s<u;s++)c[s-6]=arguments[s];return t.untracked(function(){if(i=i||"<<anonymous>>",l=l||o,null==r[o]){if(e){var t=null===r[o]?"null":"undefined";return new Error("The "+a+" `"+l+"` is marked as required in `"+i+"`, but its value is `"+t+"`.")}return null}return n.apply(void 0,[r,o,i,a,l].concat(c))})}var r=e.bind(null,!1);return r.isRequired=e.bind(null,!0),r}function w(n){var t=void 0===n?"undefined":i(n);return Array.isArray(n)?"array":n instanceof RegExp?"object":function(n,t){return"symbol"===n||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,n)?"symbol":t}function k(n,e){return x(function(r,o,i,a,l){return t.untracked(function(){if(n&&w(r[o])===e.toLowerCase())return null;var a=void 0;switch(e){case"Array":a=t.isObservableArray;break;case"Object":a=t.isObservableObject;break;case"Map":a=t.isObservableMap;break;default:throw new Error("Unexpected mobxType: "+e)}var u=r[o];if(!a(u)){var c=function(n){var t=w(n);if("object"===t){if(n instanceof Date)return"date";if(n instanceof RegExp)return"regexp"}return t}(u),s=n?" or javascript `"+e.toLowerCase()+"`":"";return new Error("Invalid prop `"+l+"` of type `"+c+"` supplied to `"+i+"`, expected `mobx.Observable"+e+"`"+s+".")}return null})})}function _(n,e){return x(function(r,o,i,a,l){for(var u=arguments.length,c=Array(u>5?u-5:0),s=5;s<u;s++)c[s-5]=arguments[s];return t.untracked(function(){if("function"!=typeof e)return new Error("Property `"+l+"` of component `"+i+"` has invalid PropType notation.");var t=k(n,"Array")(r,o,i);if(t instanceof Error)return t;for(var u=r[o],s=0;s<u.length;s++)if((t=e.apply(void 0,[u,s,i,a,l+"["+s+"]"].concat(c)))instanceof Error)return t;return null})})}var O=k(!1,"Array"),E=_.bind(null,!1),S=k(!1,"Map"),j=k(!1,"Object"),P=k(!0,"Array"),C=_.bind(null,!0),T=k(!0,"Object"),I=Object.freeze({observableArray:O,observableArrayOf:E,observableMap:S,observableObject:j,arrayOrObservableArray:P,arrayOrObservableArrayOf:C,objectOrObservableObject:T});var R={mobxStores:T};Object.seal(R);var M={contextTypes:{get:function(){return R},set:function(n){console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`")},configurable:!0,enumerable:!1},isMobxInjector:{value:!0,writable:!0,configurable:!0,enumerable:!0}};function A(n,t,r){var o,i,s="inject-"+(t.displayName||t.name||t.constructor&&t.constructor.name||"Unknown");r&&(s+="-with-"+r);var f=(i=o=function(r){function o(){var n,t,e;a(this,o);for(var r=arguments.length,i=Array(r),l=0;l<r;l++)i[l]=arguments[l];return t=e=c(this,(n=o.__proto__||Object.getPrototypeOf(o)).call.apply(n,[this].concat(i))),e.storeRef=function(n){e.wrappedInstance=n},c(e,t)}return u(o,r),l(o,[{key:"render",value:function(){var r={};for(var o in this.props)this.props.hasOwnProperty(o)&&(r[o]=this.props[o]);var i=n(this.context.mobxStores||{},r,this.context)||{};for(var a in i)r[a]=i[a];return function(n){return!(n.prototype&&n.prototype.render)}(t)||(r.ref=this.storeRef),e.createElement(t,r)}}]),o}(e.Component),o.displayName=s,i);return y(f,t),f.wrappedComponent=t,Object.defineProperties(f,M),f}function L(){var n=void 0;if("function"==typeof arguments[0])return n=arguments[0],function(t){var e=A(n,t);return e.isMobxInjector=!1,(e=Y(e)).isMobxInjector=!0,e};for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n=function(n){return function(t,e){return n.forEach(function(n){if(!(n in e)){if(!(n in t))throw new Error("MobX injector: Store '"+n+"' is not available! Make sure it is provided by some Provider");e[n]=t[n]}}),e}}(t),function(e){return A(n,e,t.join("-"))}}var N=!1,U=!1,D=!1,z="undefined"!=typeof WeakMap?new WeakMap:void 0,F=new s;function B(n){if(r.findDOMNode)try{return r.findDOMNode(n)}catch(n){return null}return null}function V(n){var t=B(n);t&&z&&z.set(t,n),F.emit({event:"render",renderTime:n.__$mobRenderEnd-n.__$mobRenderStart,totalTime:Date.now()-n.__$mobRenderStart,component:n,node:t})}function H(){if("undefined"==typeof WeakMap)throw new Error("[mobx-react] tracking components is not supported in this browser.");N||(N=!0)}var W=new s;function $(n,t){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=n[t],o=G[t],i=r?!0===e?function(){o.apply(this,arguments),r.apply(this,arguments)}:function(){r.apply(this,arguments),o.apply(this,arguments)}:o;n[t]=i}function q(n,t){if(K(n,t))return!0;if("object"!==(void 0===n?"undefined":i(n))||null===n||"object"!==(void 0===t?"undefined":i(t))||null===t)return!1;var e=Object.keys(n),r=Object.keys(t);if(e.length!==r.length)return!1;for(var o=0;o<e.length;o++)if(!hasOwnProperty.call(t,e[o])||!K(n[e[o]],t[e[o]]))return!1;return!0}function K(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}var G={componentWillMount:function(){var n=this;if(!0!==U){var r=this.displayName||this.name||this.constructor&&(this.constructor.displayName||this.constructor.name)||"<component>",o=this._reactInternalInstance&&this._reactInternalInstance._rootNodeID||this._reactInternalFiber&&this._reactInternalFiber._debugID,i=!1,a=!1;f.call(this,"props"),f.call(this,"state");var l=this.render.bind(this),u=null,c=!1,s=function(){c=!1;var e=void 0,r=void 0;if(u.track(function(){N&&(n.__$mobRenderStart=Date.now());try{r=t._allowStateChanges(!1,l)}catch(n){e=n}N&&(n.__$mobRenderEnd=Date.now())}),e)throw W.emit(e),e;return r};this.render=function(){return(u=new t.Reaction(r+"#"+o+".render()",function(){if(!c&&(c=!0,"function"==typeof n.componentWillReact&&n.componentWillReact(),!0!==n.__$mobxIsUnmounted)){var t=!0;try{a=!0,i||e.Component.prototype.forceUpdate.call(n),t=!1}finally{a=!1,t&&u.dispose()}}})).reactComponent=n,s.$mobx=u,n.render=s,s()}}function f(n){var e=this[n],r=t.createAtom("reactive "+n);Object.defineProperty(this,n,{configurable:!0,enumerable:!0,get:function(){return r.reportObserved(),e},set:function(n){a||q(e,n)?e=n:(e=n,i=!0,r.reportChanged(),i=!1)}})}},componentWillUnmount:function(){if(!0!==U&&(this.render.$mobx&&this.render.$mobx.dispose(),this.__$mobxIsUnmounted=!0,N)){var n=B(this);n&&z&&z.delete(n),F.emit({event:"destroy",component:this,node:n})}},componentDidMount:function(){N&&V(this)},componentDidUpdate:function(){N&&V(this)},shouldComponentUpdate:function(n,t){return U&&console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==t||!q(this.props,n)}};function Y(n,t){if("string"==typeof n)throw new Error("Store names should be provided as array");if(Array.isArray(n))return D||(D=!0,console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`')),t?L.apply(null,n)(Y(t)):function(t){return Y(n,t)};var r,o,i=n;if(!0===i.isMobxInjector&&console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),!("function"!=typeof i||i.prototype&&i.prototype.render||i.isReactClass||e.Component.isPrototypeOf(i)))return Y((o=r=function(n){function t(){return a(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,n),l(t,[{key:"render",value:function(){return i.call(this,this.props,this.context)}}]),t}(e.Component),r.displayName=i.displayName||i.name,r.contextTypes=i.contextTypes,r.propTypes=i.propTypes,r.defaultProps=i.defaultProps,o));if(!i)throw new Error("Please pass a valid component to 'observer'");return function(n){$(n,"componentWillMount",!0),["componentDidMount","componentWillUnmount","componentDidUpdate"].forEach(function(t){$(n,t)}),n.shouldComponentUpdate||(n.shouldComponentUpdate=G.shouldComponentUpdate)}(i.prototype||i),i.isMobXReactObserver=!0,i}var X=Y(function(n){var t=n.children,e=n.inject,r=n.render,i=t||r;if(void 0===i)return null;if(!e)return i();var a=L(e)(i);return o.createElement(a,null)});X.displayName="Observer";var J,Q,Z=function(n,t,e,r,o){var a="children"===t?"render":"children";return"function"==typeof n[t]&&"function"==typeof n[a]?new Error("Invalid prop,do not use children and render in the same time in`"+e):"function"!=typeof n[t]&&"function"!=typeof n[a]?new Error("Invalid prop `"+o+"` of type `"+i(n[t])+"` supplied to `"+e+"`, expected `function`."):void 0};X.propTypes={render:Z,children:Z};var nn={children:!0,key:!0,ref:!0},tn=(Q=J=function(n){function t(){return a(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,n),l(t,[{key:"render",value:function(){return e.Children.only(this.props.children)}},{key:"getChildContext",value:function(){var n={},t=this.context.mobxStores;if(t)for(var e in t)n[e]=t[e];for(var r in this.props)nn[r]||"suppressChangedStoreWarning"===r||(n[r]=this.props[r]);return{mobxStores:n}}},{key:"componentWillReceiveProps",value:function(n){if(Object.keys(n).length!==Object.keys(this.props).length&&console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children"),!n.suppressChangedStoreWarning)for(var t in n)nn[t]||this.props[t]===n[t]||console.warn("MobX Provider: Provided store '"+t+"' has changed. Please avoid replacing stores as the change might not propagate to all children")}}]),t}(e.Component),J.contextTypes={mobxStores:T},J.childContextTypes={mobxStores:T.isRequired},Q);if(!e.Component)throw new Error("mobx-react requires React to be available");if(!t.spy)throw new Error("mobx-react requires mobx to be available");"function"==typeof r.unstable_batchedUpdates&&t.configure({reactionScheduler:r.unstable_batchedUpdates});if("object"===("undefined"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__?"undefined":i(__MOBX_DEVTOOLS_GLOBAL_HOOK__))){var en={spy:t.spy,extras:{getDebugName:t.getDebugName}},rn={renderReporter:F,componentByNodeRegistery:z,trackComponents:H};__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(rn,en)}n.propTypes=I,n.PropTypes=I,n.onError=function(n){return W.on(n)},n.observer=Y,n.Observer=X,n.renderReporter=F,n.componentByNodeRegistery=z,n.trackComponents=H,n.useStaticRendering=function(n){U=n},n.Provider=tn,n.inject=L,Object.defineProperty(n,"__esModule",{value:!0})})(t,e(35),e(1),e(113))},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=c(e(1)),a=e(15);e(171);var l=e(11),u=c(e(10));function c(n){return n&&n.__esModule?n:{default:n}}var s=(0,l.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.handleSignOut=function(n){n.preventDefault(),e.props.logOut()},e.handleSignOut=e.handleSignOut.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"render",value:function(){return i.default.createElement(a.Link,{className:"nav-link",to:"#",onClick:this.handleSignOut},"Logout")}}]),t}())||r;s.propTypes={logOut:u.default.func.isRequired},t.default=(0,a.withRouter)(s)},function(n,t,e){var r=e(465);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(63)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){var r=e(469);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(63)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){e(177),n.exports=e(379)},function(n,t,e){"use strict";(function(n){if(e(178),e(375),e(376),n._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");n._babelPolyfill=!0;var t="defineProperty";function r(n,e,r){n[e]||Object[t](n,e,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(n){[][n]&&r(Array,n,Function.call.bind([][n]))})}).call(t,e(66))},function(n,t,e){e(179),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(212),e(213),e(214),e(215),e(216),e(217),e(218),e(219),e(220),e(221),e(222),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(235),e(236),e(237),e(238),e(239),e(240),e(241),e(242),e(243),e(244),e(245),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(259),e(260),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(270),e(271),e(272),e(273),e(274),e(275),e(276),e(277),e(278),e(279),e(280),e(281),e(282),e(107),e(283),e(284),e(139),e(285),e(286),e(287),e(288),e(289),e(142),e(144),e(145),e(290),e(291),e(292),e(293),e(294),e(295),e(296),e(297),e(298),e(299),e(300),e(301),e(302),e(303),e(304),e(305),e(306),e(307),e(308),e(309),e(310),e(311),e(312),e(313),e(314),e(315),e(316),e(317),e(318),e(319),e(320),e(321),e(322),e(323),e(324),e(325),e(326),e(327),e(328),e(329),e(330),e(331),e(332),e(333),e(334),e(335),e(336),e(337),e(338),e(339),e(340),e(341),e(342),e(343),e(344),e(345),e(346),e(347),e(348),e(349),e(350),e(351),e(352),e(353),e(354),e(355),e(356),e(357),e(358),e(359),e(360),e(361),e(362),e(363),e(364),e(365),e(366),e(367),e(368),e(369),e(370),e(371),e(372),e(373),e(374),n.exports=e(29)},function(n,t,e){"use strict";var r=e(3),o=e(16),i=e(7),a=e(0),l=e(18),u=e(40).KEY,c=e(4),s=e(67),f=e(55),p=e(44),d=e(6),m=e(122),h=e(87),b=e(180),g=e(70),v=e(2),y=e(5),x=e(20),w=e(30),k=e(43),_=e(48),O=e(125),E=e(21),S=e(8),j=e(46),P=E.f,C=S.f,T=O.f,I=r.Symbol,R=r.JSON,M=R&&R.stringify,A=d("_hidden"),L=d("toPrimitive"),N={}.propertyIsEnumerable,U=s("symbol-registry"),D=s("symbols"),z=s("op-symbols"),F=Object.prototype,B="function"==typeof I,V=r.QObject,H=!V||!V.prototype||!V.prototype.findChild,W=i&&c(function(){return 7!=_(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a})?function(n,t,e){var r=P(F,t);r&&delete F[t],C(n,t,e),r&&n!==F&&C(F,t,r)}:C,$=function(n){var t=D[n]=_(I.prototype);return t._k=n,t},q=B&&"symbol"==typeof I.iterator?function(n){return"symbol"==typeof n}:function(n){return n instanceof I},K=function(n,t,e){return n===F&&K(z,t,e),v(n),t=w(t,!0),v(e),o(D,t)?(e.enumerable?(o(n,A)&&n[A][t]&&(n[A][t]=!1),e=_(e,{enumerable:k(0,!1)})):(o(n,A)||C(n,A,k(1,{})),n[A][t]=!0),W(n,t,e)):C(n,t,e)},G=function(n,t){v(n);for(var e,r=b(t=x(t)),o=0,i=r.length;i>o;)K(n,e=r[o++],t[e]);return n},Y=function(n){var t=N.call(this,n=w(n,!0));return!(this===F&&o(D,n)&&!o(z,n))&&(!(t||!o(this,n)||!o(D,n)||o(this,A)&&this[A][n])||t)},X=function(n,t){if(n=x(n),t=w(t,!0),n!==F||!o(D,t)||o(z,t)){var e=P(n,t);return!e||!o(D,t)||o(n,A)&&n[A][t]||(e.enumerable=!0),e}},J=function(n){for(var t,e=T(x(n)),r=[],i=0;e.length>i;)o(D,t=e[i++])||t==A||t==u||r.push(t);return r},Q=function(n){for(var t,e=n===F,r=T(e?z:x(n)),i=[],a=0;r.length>a;)!o(D,t=r[a++])||e&&!o(F,t)||i.push(D[t]);return i};B||(l((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var n=p(arguments.length>0?arguments[0]:void 0),t=function(e){this===F&&t.call(z,e),o(this,A)&&o(this[A],n)&&(this[A][n]=!1),W(this,n,k(1,e))};return i&&H&&W(F,n,{configurable:!0,set:t}),$(n)}).prototype,"toString",function(){return this._k}),E.f=X,S.f=K,e(49).f=O.f=J,e(60).f=Y,e(69).f=Q,i&&!e(45)&&l(F,"propertyIsEnumerable",Y,!0),m.f=function(n){return $(d(n))}),a(a.G+a.W+a.F*!B,{Symbol:I});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nn=0;Z.length>nn;)d(Z[nn++]);for(var tn=j(d.store),en=0;tn.length>en;)h(tn[en++]);a(a.S+a.F*!B,"Symbol",{for:function(n){return o(U,n+="")?U[n]:U[n]=I(n)},keyFor:function(n){if(!q(n))throw TypeError(n+" is not a symbol!");for(var t in U)if(U[t]===n)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!B,"Object",{create:function(n,t){return void 0===t?_(n):G(_(n),t)},defineProperty:K,defineProperties:G,getOwnPropertyDescriptor:X,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),R&&a(a.S+a.F*(!B||c(function(){var n=I();return"[null]"!=M([n])||"{}"!=M({a:n})||"{}"!=M(Object(n))})),"JSON",{stringify:function(n){for(var t,e,r=[n],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=t=r[1],(y(t)||void 0!==n)&&!q(n))return g(t)||(t=function(n,t){if("function"==typeof e&&(t=e.call(this,n,t)),!q(t))return t}),r[1]=t,M.apply(R,r)}}),I.prototype[L]||e(17)(I.prototype,L,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(n,t,e){var r=e(46),o=e(69),i=e(60);n.exports=function(n){var t=r(n),e=o.f;if(e)for(var a,l=e(n),u=i.f,c=0;l.length>c;)u.call(n,a=l[c++])&&t.push(a);return t}},function(n,t,e){var r=e(0);r(r.S,"Object",{create:e(48)})},function(n,t,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperty:e(8).f})},function(n,t,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperties:e(124)})},function(n,t,e){var r=e(20),o=e(21).f;e(33)("getOwnPropertyDescriptor",function(){return function(n,t){return o(r(n),t)}})},function(n,t,e){var r=e(12),o=e(22);e(33)("getPrototypeOf",function(){return function(n){return o(r(n))}})},function(n,t,e){var r=e(12),o=e(46);e(33)("keys",function(){return function(n){return o(r(n))}})},function(n,t,e){e(33)("getOwnPropertyNames",function(){return e(125).f})},function(n,t,e){var r=e(5),o=e(40).onFreeze;e(33)("freeze",function(n){return function(t){return n&&r(t)?n(o(t)):t}})},function(n,t,e){var r=e(5),o=e(40).onFreeze;e(33)("seal",function(n){return function(t){return n&&r(t)?n(o(t)):t}})},function(n,t,e){var r=e(5),o=e(40).onFreeze;e(33)("preventExtensions",function(n){return function(t){return n&&r(t)?n(o(t)):t}})},function(n,t,e){var r=e(5);e(33)("isFrozen",function(n){return function(t){return!r(t)||!!n&&n(t)}})},function(n,t,e){var r=e(5);e(33)("isSealed",function(n){return function(t){return!r(t)||!!n&&n(t)}})},function(n,t,e){var r=e(5);e(33)("isExtensible",function(n){return function(t){return!!r(t)&&(!n||n(t))}})},function(n,t,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(126)})},function(n,t,e){var r=e(0);r(r.S,"Object",{is:e(196)})},function(n,t){n.exports=Object.is||function(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}},function(n,t,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(91).set})},function(n,t,e){"use strict";var r=e(61),o={};o[e(6)("toStringTag")]="z",o+""!="[object z]"&&e(18)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(n,t,e){var r=e(0);r(r.P,"Function",{bind:e(127)})},function(n,t,e){var r=e(8).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e(7)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(n){return""}}})},function(n,t,e){"use strict";var r=e(5),o=e(22),i=e(6)("hasInstance"),a=Function.prototype;i in a||e(8).f(a,i,{value:function(n){if("function"!=typeof this||!r(n))return!1;if(!r(this.prototype))return n instanceof this;for(;n=o(n);)if(this.prototype===n)return!0;return!1}})},function(n,t,e){var r=e(0),o=e(129);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(n,t,e){var r=e(0),o=e(130);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(n,t,e){"use strict";var r=e(3),o=e(16),i=e(26),a=e(93),l=e(30),u=e(4),c=e(49).f,s=e(21).f,f=e(8).f,p=e(56).trim,d=r.Number,m=d,h=d.prototype,b="Number"==i(e(48)(h)),g="trim"in String.prototype,v=function(n){var t=l(n,!1);if("string"==typeof t&&t.length>2){var e,r,o,i=(t=g?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=t.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,u=t.slice(2),c=0,s=u.length;c<s;c++)if((a=u.charCodeAt(c))<48||a>o)return NaN;return parseInt(u,r)}}return+t};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(n){var t=arguments.length<1?0:n,e=this;return e instanceof d&&(b?u(function(){h.valueOf.call(e)}):"Number"!=i(e))?a(new m(v(t)),e,d):v(t)};for(var y,x=e(7)?c(m):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;x.length>w;w++)o(m,y=x[w])&&!o(d,y)&&f(d,y,s(m,y));d.prototype=h,h.constructor=d,e(18)(r,"Number",d)}},function(n,t,e){"use strict";var r=e(0),o=e(32),i=e(131),a=e(94),l=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(n,t){for(var e=-1,r=t;++e<6;)r+=n*c[e],c[e]=r%1e7,r=u(r/1e7)},p=function(n){for(var t=6,e=0;--t>=0;)e+=c[t],c[t]=u(e/n),e=e%n*1e7},d=function(){for(var n=6,t="";--n>=0;)if(""!==t||0===n||0!==c[n]){var e=String(c[n]);t=""===t?e:t+a.call("0",7-e.length)+e}return t},m=function(n,t,e){return 0===t?e:t%2==1?m(n,t-1,e*n):m(n*n,t/2,e)};r(r.P+r.F*(!!l&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(4)(function(){l.call({})})),"Number",{toFixed:function(n){var t,e,r,l,u=i(this,s),c=o(n),h="",b="0";if(c<0||c>20)throw RangeError(s);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(h="-",u=-u),u>1e-21)if(e=(t=function(n){for(var t=0,e=n;e>=4096;)t+=12,e/=4096;for(;e>=2;)t+=1,e/=2;return t}(u*m(2,69,1))-69)<0?u*m(2,-t,1):u/m(2,t,1),e*=4503599627370496,(t=52-t)>0){for(f(0,e),r=c;r>=7;)f(1e7,0),r-=7;for(f(m(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),b=d()}else f(0,e),f(1<<-t,0),b=d()+a.call("0",c);return b=c>0?h+((l=b.length)<=c?"0."+a.call("0",c-l)+b:b.slice(0,l-c)+"."+b.slice(l-c)):h+b}})},function(n,t,e){"use strict";var r=e(0),o=e(4),i=e(131),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(n){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===n?a.call(t):a.call(t,n)}})},function(n,t,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(n,t,e){var r=e(0),o=e(3).isFinite;r(r.S,"Number",{isFinite:function(n){return"number"==typeof n&&o(n)}})},function(n,t,e){var r=e(0);r(r.S,"Number",{isInteger:e(132)})},function(n,t,e){var r=e(0);r(r.S,"Number",{isNaN:function(n){return n!=n}})},function(n,t,e){var r=e(0),o=e(132),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(n){return o(n)&&i(n)<=9007199254740991}})},function(n,t,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(n,t,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(n,t,e){var r=e(0),o=e(130);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(n,t,e){var r=e(0),o=e(129);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(n,t,e){var r=e(0),o=e(133),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(n){return(n=+n)<1?NaN:n>94906265.62425156?Math.log(n)+Math.LN2:o(n-1+i(n-1)*i(n+1))}})},function(n,t,e){var r=e(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function n(t){return isFinite(t=+t)&&0!=t?t<0?-n(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(n,t,e){var r=e(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(n){return 0==(n=+n)?n:Math.log((1+n)/(1-n))/2}})},function(n,t,e){var r=e(0),o=e(95);r(r.S,"Math",{cbrt:function(n){return o(n=+n)*Math.pow(Math.abs(n),1/3)}})},function(n,t,e){var r=e(0);r(r.S,"Math",{clz32:function(n){return(n>>>=0)?31-Math.floor(Math.log(n+.5)*Math.LOG2E):32}})},function(n,t,e){var r=e(0),o=Math.exp;r(r.S,"Math",{cosh:function(n){return(o(n=+n)+o(-n))/2}})},function(n,t,e){var r=e(0),o=e(96);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(n,t,e){var r=e(0);r(r.S,"Math",{fround:e(134)})},function(n,t,e){var r=e(0),o=Math.abs;r(r.S,"Math",{hypot:function(n,t){for(var e,r,i=0,a=0,l=arguments.length,u=0;a<l;)u<(e=o(arguments[a++]))?(i=i*(r=u/e)*r+1,u=e):i+=e>0?(r=e/u)*r:e;return u===1/0?1/0:u*Math.sqrt(i)}})},function(n,t,e){var r=e(0),o=Math.imul;r(r.S+r.F*e(4)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(n,t){var e=+n,r=+t,o=65535&e,i=65535&r;return 0|o*i+((65535&e>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(n,t,e){var r=e(0);r(r.S,"Math",{log10:function(n){return Math.log(n)*Math.LOG10E}})},function(n,t,e){var r=e(0);r(r.S,"Math",{log1p:e(133)})},function(n,t,e){var r=e(0);r(r.S,"Math",{log2:function(n){return Math.log(n)/Math.LN2}})},function(n,t,e){var r=e(0);r(r.S,"Math",{sign:e(95)})},function(n,t,e){var r=e(0),o=e(96),i=Math.exp;r(r.S+r.F*e(4)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(n){return Math.abs(n=+n)<1?(o(n)-o(-n))/2:(i(n-1)-i(-n-1))*(Math.E/2)}})},function(n,t,e){var r=e(0),o=e(96),i=Math.exp;r(r.S,"Math",{tanh:function(n){var t=o(n=+n),e=o(-n);return t==1/0?1:e==1/0?-1:(t-e)/(i(n)+i(-n))}})},function(n,t,e){var r=e(0);r(r.S,"Math",{trunc:function(n){return(n>0?Math.floor:Math.ceil)(n)}})},function(n,t,e){var r=e(0),o=e(47),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(n){for(var t,e=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");e.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return e.join("")}})},function(n,t,e){var r=e(0),o=e(20),i=e(9);r(r.S,"String",{raw:function(n){for(var t=o(n.raw),e=i(t.length),r=arguments.length,a=[],l=0;e>l;)a.push(String(t[l++])),l<r&&a.push(String(arguments[l]));return a.join("")}})},function(n,t,e){"use strict";e(56)("trim",function(n){return function(){return n(this,3)}})},function(n,t,e){"use strict";var r=e(97)(!0);e(98)(String,"String",function(n){this._t=String(n),this._i=0},function(){var n,t=this._t,e=this._i;return e>=t.length?{value:void 0,done:!0}:(n=r(t,e),this._i+=n.length,{value:n,done:!1})})},function(n,t,e){"use strict";var r=e(0),o=e(97)(!1);r(r.P,"String",{codePointAt:function(n){return o(this,n)}})},function(n,t,e){"use strict";var r=e(0),o=e(9),i=e(100),a="".endsWith;r(r.P+r.F*e(101)("endsWith"),"String",{endsWith:function(n){var t=i(this,n,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=o(t.length),l=void 0===e?r:Math.min(o(e),r),u=String(n);return a?a.call(t,u,l):t.slice(l-u.length,l)===u}})},function(n,t,e){"use strict";var r=e(0),o=e(100);r(r.P+r.F*e(101)("includes"),"String",{includes:function(n){return!!~o(this,n,"includes").indexOf(n,arguments.length>1?arguments[1]:void 0)}})},function(n,t,e){var r=e(0);r(r.P,"String",{repeat:e(94)})},function(n,t,e){"use strict";var r=e(0),o=e(9),i=e(100),a="".startsWith;r(r.P+r.F*e(101)("startsWith"),"String",{startsWith:function(n){var t=i(this,n,"startsWith"),e=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(n);return a?a.call(t,r,e):t.slice(e,e+r.length)===r}})},function(n,t,e){"use strict";e(19)("anchor",function(n){return function(t){return n(this,"a","name",t)}})},function(n,t,e){"use strict";e(19)("big",function(n){return function(){return n(this,"big","","")}})},function(n,t,e){"use strict";e(19)("blink",function(n){return function(){return n(this,"blink","","")}})},function(n,t,e){"use strict";e(19)("bold",function(n){return function(){return n(this,"b","","")}})},function(n,t,e){"use strict";e(19)("fixed",function(n){return function(){return n(this,"tt","","")}})},function(n,t,e){"use strict";e(19)("fontcolor",function(n){return function(t){return n(this,"font","color",t)}})},function(n,t,e){"use strict";e(19)("fontsize",function(n){return function(t){return n(this,"font","size",t)}})},function(n,t,e){"use strict";e(19)("italics",function(n){return function(){return n(this,"i","","")}})},function(n,t,e){"use strict";e(19)("link",function(n){return function(t){return n(this,"a","href",t)}})},function(n,t,e){"use strict";e(19)("small",function(n){return function(){return n(this,"small","","")}})},function(n,t,e){"use strict";e(19)("strike",function(n){return function(){return n(this,"strike","","")}})},function(n,t,e){"use strict";e(19)("sub",function(n){return function(){return n(this,"sub","","")}})},function(n,t,e){"use strict";e(19)("sup",function(n){return function(){return n(this,"sup","","")}})},function(n,t,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(n,t,e){"use strict";var r=e(0),o=e(12),i=e(30);r(r.P+r.F*e(4)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(n){var t=o(this),e=i(t);return"number"!=typeof e||isFinite(e)?t.toISOString():null}})},function(n,t,e){var r=e(0),o=e(258);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(n,t,e){"use strict";var r=e(4),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(n){return n>9?n:"0"+n};n.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var n=this,t=n.getUTCFullYear(),e=n.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(n.getUTCMonth()+1)+"-"+a(n.getUTCDate())+"T"+a(n.getUTCHours())+":"+a(n.getUTCMinutes())+":"+a(n.getUTCSeconds())+"."+(e>99?e:"0"+a(e))+"Z"}:i},function(n,t,e){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(18)(r,"toString",function(){var n=i.call(this);return n==n?o.call(this):"Invalid Date"})},function(n,t,e){var r=e(6)("toPrimitive"),o=Date.prototype;r in o||e(17)(o,r,e(261))},function(n,t,e){"use strict";var r=e(2),o=e(30);n.exports=function(n){if("string"!==n&&"number"!==n&&"default"!==n)throw TypeError("Incorrect hint");return o(r(this),"number"!=n)}},function(n,t,e){var r=e(0);r(r.S,"Array",{isArray:e(70)})},function(n,t,e){"use strict";var r=e(25),o=e(0),i=e(12),a=e(135),l=e(102),u=e(9),c=e(103),s=e(104);o(o.S+o.F*!e(72)(function(n){Array.from(n)}),"Array",{from:function(n){var t,e,o,f,p=i(n),d="function"==typeof this?this:Array,m=arguments.length,h=m>1?arguments[1]:void 0,b=void 0!==h,g=0,v=s(p);if(b&&(h=r(h,m>2?arguments[2]:void 0,2)),void 0==v||d==Array&&l(v))for(e=new d(t=u(p.length));t>g;g++)c(e,g,b?h(p[g],g):p[g]);else for(f=v.call(p),e=new d;!(o=f.next()).done;g++)c(e,g,b?a(f,h,[o.value,g],!0):o.value);return e.length=g,e}})},function(n,t,e){"use strict";var r=e(0),o=e(103);r(r.S+r.F*e(4)(function(){function n(){}return!(Array.of.call(n)instanceof n)}),"Array",{of:function(){for(var n=0,t=arguments.length,e=new("function"==typeof this?this:Array)(t);t>n;)o(e,n,arguments[n++]);return e.length=t,e}})},function(n,t,e){"use strict";var r=e(0),o=e(20),i=[].join;r(r.P+r.F*(e(59)!=Object||!e(27)(i)),"Array",{join:function(n){return i.call(o(this),void 0===n?",":n)}})},function(n,t,e){"use strict";var r=e(0),o=e(90),i=e(26),a=e(47),l=e(9),u=[].slice;r(r.P+r.F*e(4)(function(){o&&u.call(o)}),"Array",{slice:function(n,t){var e=l(this.length),r=i(this);if(t=void 0===t?e:t,"Array"==r)return u.call(this,n,t);for(var o=a(n,e),c=a(t,e),s=l(c-o),f=new Array(s),p=0;p<s;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(n,t,e){"use strict";var r=e(0),o=e(14),i=e(12),a=e(4),l=[].sort,u=[1,2,3];r(r.P+r.F*(a(function(){u.sort(void 0)})||!a(function(){u.sort(null)})||!e(27)(l)),"Array",{sort:function(n){return void 0===n?l.call(i(this)):l.call(i(this),o(n))}})},function(n,t,e){"use strict";var r=e(0),o=e(34)(0),i=e(27)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(n){return o(this,n,arguments[1])}})},function(n,t,e){var r=e(5),o=e(70),i=e(6)("species");n.exports=function(n){var t;return o(n)&&("function"!=typeof(t=n.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(n,t,e){"use strict";var r=e(0),o=e(34)(1);r(r.P+r.F*!e(27)([].map,!0),"Array",{map:function(n){return o(this,n,arguments[1])}})},function(n,t,e){"use strict";var r=e(0),o=e(34)(2);r(r.P+r.F*!e(27)([].filter,!0),"Array",{filter:function(n){return o(this,n,arguments[1])}})},function(n,t,e){"use strict";var r=e(0),o=e(34)(3);r(r.P+r.F*!e(27)([].some,!0),"Array",{some:function(n){return o(this,n,arguments[1])}})},function(n,t,e){"use strict";var r=e(0),o=e(34)(4);r(r.P+r.F*!e(27)([].every,!0),"Array",{every:function(n){return o(this,n,arguments[1])}})},function(n,t,e){"use strict";var r=e(0),o=e(136);r(r.P+r.F*!e(27)([].reduce,!0),"Array",{reduce:function(n){return o(this,n,arguments.length,arguments[1],!1)}})},function(n,t,e){"use strict";var r=e(0),o=e(136);r(r.P+r.F*!e(27)([].reduceRight,!0),"Array",{reduceRight:function(n){return o(this,n,arguments.length,arguments[1],!0)}})},function(n,t,e){"use strict";var r=e(0),o=e(68)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!e(27)(i)),"Array",{indexOf:function(n){return a?i.apply(this,arguments)||0:o(this,n,arguments[1])}})},function(n,t,e){"use strict";var r=e(0),o=e(20),i=e(32),a=e(9),l=[].lastIndexOf,u=!!l&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!e(27)(l)),"Array",{lastIndexOf:function(n){if(u)return l.apply(this,arguments)||0;var t=o(this),e=a(t.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in t&&t[r]===n)return r||0;return-1}})},function(n,t,e){var r=e(0);r(r.P,"Array",{copyWithin:e(137)}),e(41)("copyWithin")},function(n,t,e){var r=e(0);r(r.P,"Array",{fill:e(106)}),e(41)("fill")},function(n,t,e){"use strict";var r=e(0),o=e(34)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),e(41)("find")},function(n,t,e){"use strict";var r=e(0),o=e(34)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),e(41)(i)},function(n,t,e){e(50)("Array")},function(n,t,e){var r=e(3),o=e(93),i=e(8).f,a=e(49).f,l=e(71),u=e(73),c=r.RegExp,s=c,f=c.prototype,p=/a/g,d=/a/g,m=new c(p)!==p;if(e(7)&&(!m||e(4)(function(){return d[e(6)("match")]=!1,c(p)!=p||c(d)==d||"/a/i"!=c(p,"i")}))){c=function(n,t){var e=this instanceof c,r=l(n),i=void 0===t;return!e&&r&&n.constructor===c&&i?n:o(m?new s(r&&!i?n.source:n,t):s((r=n instanceof c)?n.source:n,r&&i?u.call(n):t),e?this:f,c)};for(var h=function(n){n in c||i(c,n,{configurable:!0,get:function(){return s[n]},set:function(t){s[n]=t}})},b=a(s),g=0;b.length>g;)h(b[g++]);f.constructor=c,c.prototype=f,e(18)(r,"RegExp",c)}e(50)("RegExp")},function(n,t,e){"use strict";e(139);var r=e(2),o=e(73),i=e(7),a=/./.toString,l=function(n){e(18)(RegExp.prototype,"toString",n,!0)};e(4)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?l(function(){var n=r(this);return"/".concat(n.source,"/","flags"in n?n.flags:!i&&n instanceof RegExp?o.call(n):void 0)}):"toString"!=a.name&&l(function(){return a.call(this)})},function(n,t,e){e(74)("match",1,function(n,t,e){return[function(e){"use strict";var r=n(this),o=void 0==e?void 0:e[t];return void 0!==o?o.call(e,r):new RegExp(e)[t](String(r))},e]})},function(n,t,e){e(74)("replace",2,function(n,t,e){return[function(r,o){"use strict";var i=n(this),a=void 0==r?void 0:r[t];return void 0!==a?a.call(r,i,o):e.call(String(i),r,o)},e]})},function(n,t,e){e(74)("search",1,function(n,t,e){return[function(e){"use strict";var r=n(this),o=void 0==e?void 0:e[t];return void 0!==o?o.call(e,r):new RegExp(e)[t](String(r))},e]})},function(n,t,e){e(74)("split",2,function(n,t,r){"use strict";var o=e(71),i=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var l=void 0===/()??/.exec("")[1];r=function(n,t){var e=String(this);if(void 0===n&&0===t)return[];if(!o(n))return i.call(e,n,t);var r,u,c,s,f,p=[],d=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),m=0,h=void 0===t?4294967295:t>>>0,b=new RegExp(n.source,d+"g");for(l||(r=new RegExp("^"+b.source+"$(?!\\s)",d));(u=b.exec(e))&&!((c=u.index+u[0].length)>m&&(p.push(e.slice(m,u.index)),!l&&u.length>1&&u[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(u[f]=void 0)}),u.length>1&&u.index<e.length&&a.apply(p,u.slice(1)),s=u[0].length,m=c,p.length>=h));)b.lastIndex===u.index&&b.lastIndex++;return m===e.length?!s&&b.test("")||p.push(""):p.push(e.slice(m)),p.length>h?p.slice(0,h):p}}else"0".split(void 0,0).length&&(r=function(n,t){return void 0===n&&0===t?[]:i.call(this,n,t)});return[function(e,o){var i=n(this),a=void 0==e?void 0:e[t];return void 0!==a?a.call(e,i,o):r.call(String(i),e,o)},r]})},function(n,t,e){"use strict";var r,o,i,a,l=e(45),u=e(3),c=e(25),s=e(61),f=e(0),p=e(5),d=e(14),m=e(51),h=e(52),b=e(75),g=e(108).set,v=e(109)(),y=e(110),x=e(140),w=e(141),k=u.TypeError,_=u.process,O=u.Promise,E="process"==s(_),S=function(){},j=o=y.f,P=!!function(){try{var n=O.resolve(1),t=(n.constructor={})[e(6)("species")]=function(n){n(S,S)};return(E||"function"==typeof PromiseRejectionEvent)&&n.then(S)instanceof t}catch(n){}}(),C=function(n){var t;return!(!p(n)||"function"!=typeof(t=n.then))&&t},T=function(n,t){if(!n._n){n._n=!0;var e=n._c;v(function(){for(var r=n._v,o=1==n._s,i=0,a=function(t){var e,i,a=o?t.ok:t.fail,l=t.resolve,u=t.reject,c=t.domain;try{a?(o||(2==n._h&&M(n),n._h=1),!0===a?e=r:(c&&c.enter(),e=a(r),c&&c.exit()),e===t.promise?u(k("Promise-chain cycle")):(i=C(e))?i.call(e,l,u):l(e)):u(r)}catch(n){u(n)}};e.length>i;)a(e[i++]);n._c=[],n._n=!1,t&&!n._h&&I(n)})}},I=function(n){g.call(u,function(){var t,e,r,o=n._v,i=R(n);if(i&&(t=x(function(){E?_.emit("unhandledRejection",o,n):(e=u.onunhandledrejection)?e({promise:n,reason:o}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",o)}),n._h=E||R(n)?2:1),n._a=void 0,i&&t.e)throw t.v})},R=function(n){return 1!==n._h&&0===(n._a||n._c).length},M=function(n){g.call(u,function(){var t;E?_.emit("rejectionHandled",n):(t=u.onrejectionhandled)&&t({promise:n,reason:n._v})})},A=function(n){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=n,t._s=2,t._a||(t._a=t._c.slice()),T(t,!0))},L=function(n){var t,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===n)throw k("Promise can't be resolved itself");(t=C(n))?v(function(){var r={_w:e,_d:!1};try{t.call(n,c(L,r,1),c(A,r,1))}catch(n){A.call(r,n)}}):(e._v=n,e._s=1,T(e,!1))}catch(n){A.call({_w:e,_d:!1},n)}}};P||(O=function(n){m(this,O,"Promise","_h"),d(n),r.call(this);try{n(c(L,this,1),c(A,this,1))}catch(n){A.call(this,n)}},(r=function(n){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(53)(O.prototype,{then:function(n,t){var e=j(b(this,O));return e.ok="function"!=typeof n||n,e.fail="function"==typeof t&&t,e.domain=E?_.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&T(this,!1),e.promise},catch:function(n){return this.then(void 0,n)}}),i=function(){var n=new r;this.promise=n,this.resolve=c(L,n,1),this.reject=c(A,n,1)},y.f=j=function(n){return n===O||n===a?new i(n):o(n)}),f(f.G+f.W+f.F*!P,{Promise:O}),e(55)(O,"Promise"),e(50)("Promise"),a=e(29).Promise,f(f.S+f.F*!P,"Promise",{reject:function(n){var t=j(this);return(0,t.reject)(n),t.promise}}),f(f.S+f.F*(l||!P),"Promise",{resolve:function(n){return w(l&&this===a?O:this,n)}}),f(f.S+f.F*!(P&&e(72)(function(n){O.all(n).catch(S)})),"Promise",{all:function(n){var t=this,e=j(t),r=e.resolve,o=e.reject,i=x(function(){var e=[],i=0,a=1;h(n,!1,function(n){var l=i++,u=!1;e.push(void 0),a++,t.resolve(n).then(function(n){u||(u=!0,e[l]=n,--a||r(e))},o)}),--a||r(e)});return i.e&&o(i.v),e.promise},race:function(n){var t=this,e=j(t),r=e.reject,o=x(function(){h(n,!1,function(n){t.resolve(n).then(e.resolve,r)})});return o.e&&r(o.v),e.promise}})},function(n,t,e){"use strict";var r=e(146),o=e(58);e(76)("WeakSet",function(n){return function(){return n(this,arguments.length>0?arguments[0]:void 0)}},{add:function(n){return r.def(o(this,"WeakSet"),n,!0)}},r,!1,!0)},function(n,t,e){"use strict";var r=e(0),o=e(77),i=e(111),a=e(2),l=e(47),u=e(9),c=e(5),s=e(3).ArrayBuffer,f=e(75),p=i.ArrayBuffer,d=i.DataView,m=o.ABV&&s.isView,h=p.prototype.slice,b=o.VIEW;r(r.G+r.W+r.F*(s!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(n){return m&&m(n)||c(n)&&b in n}}),r(r.P+r.U+r.F*e(4)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(n,t){if(void 0!==h&&void 0===t)return h.call(a(this),n);for(var e=a(this).byteLength,r=l(n,e),o=l(void 0===t?e:t,e),i=new(f(this,p))(u(o-r)),c=new d(this),s=new d(i),m=0;r<o;)s.setUint8(m++,c.getUint8(r++));return i}}),e(50)("ArrayBuffer")},function(n,t,e){var r=e(0);r(r.G+r.W+r.F*!e(77).ABV,{DataView:e(111).DataView})},function(n,t,e){e(37)("Int8",1,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){e(37)("Uint8",1,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){e(37)("Uint8",1,function(n){return function(t,e,r){return n(this,t,e,r)}},!0)},function(n,t,e){e(37)("Int16",2,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){e(37)("Uint16",2,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){e(37)("Int32",4,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){e(37)("Uint32",4,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){e(37)("Float32",4,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){e(37)("Float64",8,function(n){return function(t,e,r){return n(this,t,e,r)}})},function(n,t,e){var r=e(0),o=e(14),i=e(2),a=(e(3).Reflect||{}).apply,l=Function.apply;r(r.S+r.F*!e(4)(function(){a(function(){})}),"Reflect",{apply:function(n,t,e){var r=o(n),u=i(e);return a?a(r,t,u):l.call(r,t,u)}})},function(n,t,e){var r=e(0),o=e(48),i=e(14),a=e(2),l=e(5),u=e(4),c=e(127),s=(e(3).Reflect||{}).construct,f=u(function(){function n(){}return!(s(function(){},[],n)instanceof n)}),p=!u(function(){s(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(n,t){i(n),a(t);var e=arguments.length<3?n:i(arguments[2]);if(p&&!f)return s(n,t,e);if(n==e){switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(n,r))}var u=e.prototype,d=o(l(u)?u:Object.prototype),m=Function.apply.call(n,d,t);return l(m)?m:d}})},function(n,t,e){var r=e(8),o=e(0),i=e(2),a=e(30);o(o.S+o.F*e(4)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(n,t,e){i(n),t=a(t,!0),i(e);try{return r.f(n,t,e),!0}catch(n){return!1}}})},function(n,t,e){var r=e(0),o=e(21).f,i=e(2);r(r.S,"Reflect",{deleteProperty:function(n,t){var e=o(i(n),t);return!(e&&!e.configurable)&&delete n[t]}})},function(n,t,e){"use strict";var r=e(0),o=e(2),i=function(n){this._t=o(n),this._i=0;var t,e=this._k=[];for(t in n)e.push(t)};e(99)(i,"Object",function(){var n,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((n=t[this._i++])in this._t));return{value:n,done:!1}}),r(r.S,"Reflect",{enumerate:function(n){return new i(n)}})},function(n,t,e){var r=e(21),o=e(22),i=e(16),a=e(0),l=e(5),u=e(2);a(a.S,"Reflect",{get:function n(t,e){var a,c,s=arguments.length<3?t:arguments[2];return u(t)===s?t[e]:(a=r.f(t,e))?i(a,"value")?a.value:void 0!==a.get?a.get.call(s):void 0:l(c=o(t))?n(c,e,s):void 0}})},function(n,t,e){var r=e(21),o=e(0),i=e(2);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(n,t){return r.f(i(n),t)}})},function(n,t,e){var r=e(0),o=e(22),i=e(2);r(r.S,"Reflect",{getPrototypeOf:function(n){return o(i(n))}})},function(n,t,e){var r=e(0);r(r.S,"Reflect",{has:function(n,t){return t in n}})},function(n,t,e){var r=e(0),o=e(2),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(n){return o(n),!i||i(n)}})},function(n,t,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(148)})},function(n,t,e){var r=e(0),o=e(2),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(n){o(n);try{return i&&i(n),!0}catch(n){return!1}}})},function(n,t,e){var r=e(8),o=e(21),i=e(22),a=e(16),l=e(0),u=e(43),c=e(2),s=e(5);l(l.S,"Reflect",{set:function n(t,e,l){var f,p,d=arguments.length<4?t:arguments[3],m=o.f(c(t),e);if(!m){if(s(p=i(t)))return n(p,e,l,d);m=u(0)}return a(m,"value")?!(!1===m.writable||!s(d)||((f=o.f(d,e)||u(0)).value=l,r.f(d,e,f),0)):void 0!==m.set&&(m.set.call(d,l),!0)}})},function(n,t,e){var r=e(0),o=e(91);o&&r(r.S,"Reflect",{setPrototypeOf:function(n,t){o.check(n,t);try{return o.set(n,t),!0}catch(n){return!1}}})},function(n,t,e){"use strict";var r=e(0),o=e(68)(!0);r(r.P,"Array",{includes:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),e(41)("includes")},function(n,t,e){"use strict";var r=e(0),o=e(149),i=e(12),a=e(9),l=e(14),u=e(105);r(r.P,"Array",{flatMap:function(n){var t,e,r=i(this);return l(n),t=a(r.length),e=u(r,0),o(e,r,r,t,0,1,n,arguments[1]),e}}),e(41)("flatMap")},function(n,t,e){"use strict";var r=e(0),o=e(149),i=e(12),a=e(9),l=e(32),u=e(105);r(r.P,"Array",{flatten:function(){var n=arguments[0],t=i(this),e=a(t.length),r=u(t,0);return o(r,t,t,e,0,void 0===n?1:l(n)),r}}),e(41)("flatten")},function(n,t,e){"use strict";var r=e(0),o=e(97)(!0);r(r.P,"String",{at:function(n){return o(this,n)}})},function(n,t,e){"use strict";var r=e(0),o=e(150),i=e(112);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0,!0)}})},function(n,t,e){"use strict";var r=e(0),o=e(150),i=e(112);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0,!1)}})},function(n,t,e){"use strict";e(56)("trimLeft",function(n){return function(){return n(this,1)}},"trimStart")},function(n,t,e){"use strict";e(56)("trimRight",function(n){return function(){return n(this,2)}},"trimEnd")},function(n,t,e){"use strict";var r=e(0),o=e(31),i=e(9),a=e(71),l=e(73),u=RegExp.prototype,c=function(n,t){this._r=n,this._s=t};e(99)(c,"RegExp String",function(){var n=this._r.exec(this._s);return{value:n,done:null===n}}),r(r.P,"String",{matchAll:function(n){if(o(this),!a(n))throw TypeError(n+" is not a regexp!");var t=String(this),e="flags"in u?String(n.flags):l.call(n),r=new RegExp(n.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=i(n.lastIndex),new c(r,t)}})},function(n,t,e){e(87)("asyncIterator")},function(n,t,e){e(87)("observable")},function(n,t,e){var r=e(0),o=e(148),i=e(20),a=e(21),l=e(103);r(r.S,"Object",{getOwnPropertyDescriptors:function(n){for(var t,e,r=i(n),u=a.f,c=o(r),s={},f=0;c.length>f;)void 0!==(e=u(r,t=c[f++]))&&l(s,t,e);return s}})},function(n,t,e){var r=e(0),o=e(151)(!1);r(r.S,"Object",{values:function(n){return o(n)}})},function(n,t,e){var r=e(0),o=e(151)(!0);r(r.S,"Object",{entries:function(n){return o(n)}})},function(n,t,e){"use strict";var r=e(0),o=e(12),i=e(14),a=e(8);e(7)&&r(r.P+e(78),"Object",{__defineGetter__:function(n,t){a.f(o(this),n,{get:i(t),enumerable:!0,configurable:!0})}})},function(n,t,e){"use strict";var r=e(0),o=e(12),i=e(14),a=e(8);e(7)&&r(r.P+e(78),"Object",{__defineSetter__:function(n,t){a.f(o(this),n,{set:i(t),enumerable:!0,configurable:!0})}})},function(n,t,e){"use strict";var r=e(0),o=e(12),i=e(30),a=e(22),l=e(21).f;e(7)&&r(r.P+e(78),"Object",{__lookupGetter__:function(n){var t,e=o(this),r=i(n,!0);do{if(t=l(e,r))return t.get}while(e=a(e))}})},function(n,t,e){"use strict";var r=e(0),o=e(12),i=e(30),a=e(22),l=e(21).f;e(7)&&r(r.P+e(78),"Object",{__lookupSetter__:function(n){var t,e=o(this),r=i(n,!0);do{if(t=l(e,r))return t.set}while(e=a(e))}})},function(n,t,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(152)("Map")})},function(n,t,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(152)("Set")})},function(n,t,e){e(79)("Map")},function(n,t,e){e(79)("Set")},function(n,t,e){e(79)("WeakMap")},function(n,t,e){e(79)("WeakSet")},function(n,t,e){e(80)("Map")},function(n,t,e){e(80)("Set")},function(n,t,e){e(80)("WeakMap")},function(n,t,e){e(80)("WeakSet")},function(n,t,e){var r=e(0);r(r.G,{global:e(3)})},function(n,t,e){var r=e(0);r(r.S,"System",{global:e(3)})},function(n,t,e){var r=e(0),o=e(26);r(r.S,"Error",{isError:function(n){return"Error"===o(n)}})},function(n,t,e){var r=e(0);r(r.S,"Math",{clamp:function(n,t,e){return Math.min(e,Math.max(t,n))}})},function(n,t,e){var r=e(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(n,t,e){var r=e(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(n){return n*o}})},function(n,t,e){var r=e(0),o=e(154),i=e(134);r(r.S,"Math",{fscale:function(n,t,e,r,a){return i(o(n,t,e,r,a))}})},function(n,t,e){var r=e(0);r(r.S,"Math",{iaddh:function(n,t,e,r){var o=n>>>0,i=e>>>0;return(t>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(n,t,e){var r=e(0);r(r.S,"Math",{isubh:function(n,t,e,r){var o=n>>>0,i=e>>>0;return(t>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(n,t,e){var r=e(0);r(r.S,"Math",{imulh:function(n,t){var e=+n,r=+t,o=65535&e,i=65535&r,a=e>>16,l=r>>16,u=(a*i>>>0)+(o*i>>>16);return a*l+(u>>16)+((o*l>>>0)+(65535&u)>>16)}})},function(n,t,e){var r=e(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(n,t,e){var r=e(0),o=Math.PI/180;r(r.S,"Math",{radians:function(n){return n*o}})},function(n,t,e){var r=e(0);r(r.S,"Math",{scale:e(154)})},function(n,t,e){var r=e(0);r(r.S,"Math",{umulh:function(n,t){var e=+n,r=+t,o=65535&e,i=65535&r,a=e>>>16,l=r>>>16,u=(a*i>>>0)+(o*i>>>16);return a*l+(u>>>16)+((o*l>>>0)+(65535&u)>>>16)}})},function(n,t,e){var r=e(0);r(r.S,"Math",{signbit:function(n){return(n=+n)!=n?n:0==n?1/n==1/0:n>0}})},function(n,t,e){"use strict";var r=e(0),o=e(29),i=e(3),a=e(75),l=e(141);r(r.P+r.R,"Promise",{finally:function(n){var t=a(this,o.Promise||i.Promise),e="function"==typeof n;return this.then(e?function(e){return l(t,n()).then(function(){return e})}:n,e?function(e){return l(t,n()).then(function(){throw e})}:n)}})},function(n,t,e){"use strict";var r=e(0),o=e(110),i=e(140);r(r.S,"Promise",{try:function(n){var t=o.f(this),e=i(n);return(e.e?t.reject:t.resolve)(e.v),t.promise}})},function(n,t,e){var r=e(38),o=e(2),i=r.key,a=r.set;r.exp({defineMetadata:function(n,t,e,r){a(n,t,o(e),i(r))}})},function(n,t,e){var r=e(38),o=e(2),i=r.key,a=r.map,l=r.store;r.exp({deleteMetadata:function(n,t){var e=arguments.length<3?void 0:i(arguments[2]),r=a(o(t),e,!1);if(void 0===r||!r.delete(n))return!1;if(r.size)return!0;var u=l.get(t);return u.delete(e),!!u.size||l.delete(t)}})},function(n,t,e){var r=e(38),o=e(2),i=e(22),a=r.has,l=r.get,u=r.key,c=function(n,t,e){if(a(n,t,e))return l(n,t,e);var r=i(t);return null!==r?c(n,r,e):void 0};r.exp({getMetadata:function(n,t){return c(n,o(t),arguments.length<3?void 0:u(arguments[2]))}})},function(n,t,e){var r=e(144),o=e(153),i=e(38),a=e(2),l=e(22),u=i.keys,c=i.key,s=function(n,t){var e=u(n,t),i=l(n);if(null===i)return e;var a=s(i,t);return a.length?e.length?o(new r(e.concat(a))):a:e};i.exp({getMetadataKeys:function(n){return s(a(n),arguments.length<2?void 0:c(arguments[1]))}})},function(n,t,e){var r=e(38),o=e(2),i=r.get,a=r.key;r.exp({getOwnMetadata:function(n,t){return i(n,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(n,t,e){var r=e(38),o=e(2),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(n){return i(o(n),arguments.length<2?void 0:a(arguments[1]))}})},function(n,t,e){var r=e(38),o=e(2),i=e(22),a=r.has,l=r.key,u=function(n,t,e){if(a(n,t,e))return!0;var r=i(t);return null!==r&&u(n,r,e)};r.exp({hasMetadata:function(n,t){return u(n,o(t),arguments.length<3?void 0:l(arguments[2]))}})},function(n,t,e){var r=e(38),o=e(2),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(n,t){return i(n,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(n,t,e){var r=e(38),o=e(2),i=e(14),a=r.key,l=r.set;r.exp({metadata:function(n,t){return function(e,r){l(n,t,(void 0!==r?o:i)(e),a(r))}}})},function(n,t,e){var r=e(0),o=e(109)(),i=e(3).process,a="process"==e(26)(i);r(r.G,{asap:function(n){var t=a&&i.domain;o(t?t.bind(n):n)}})},function(n,t,e){"use strict";var r=e(0),o=e(3),i=e(29),a=e(109)(),l=e(6)("observable"),u=e(14),c=e(2),s=e(51),f=e(53),p=e(17),d=e(52),m=d.RETURN,h=function(n){return null==n?void 0:u(n)},b=function(n){var t=n._c;t&&(n._c=void 0,t())},g=function(n){return void 0===n._o},v=function(n){g(n)||(n._o=void 0,b(n))},y=function(n,t){c(n),this._c=void 0,this._o=n,n=new x(this);try{var e=t(n),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:u(e),this._c=e)}catch(t){return void n.error(t)}g(this)&&b(this)};y.prototype=f({},{unsubscribe:function(){v(this)}});var x=function(n){this._s=n};x.prototype=f({},{next:function(n){var t=this._s;if(!g(t)){var e=t._o;try{var r=h(e.next);if(r)return r.call(e,n)}catch(n){try{v(t)}finally{throw n}}}},error:function(n){var t=this._s;if(g(t))throw n;var e=t._o;t._o=void 0;try{var r=h(e.error);if(!r)throw n;n=r.call(e,n)}catch(n){try{b(t)}finally{throw n}}return b(t),n},complete:function(n){var t=this._s;if(!g(t)){var e=t._o;t._o=void 0;try{var r=h(e.complete);n=r?r.call(e,n):void 0}catch(n){try{b(t)}finally{throw n}}return b(t),n}}});var w=function(n){s(this,w,"Observable","_f")._f=u(n)};f(w.prototype,{subscribe:function(n){return new y(n,this._f)},forEach:function(n){var t=this;return new(i.Promise||o.Promise)(function(e,r){u(n);var o=t.subscribe({next:function(t){try{return n(t)}catch(n){r(n),o.unsubscribe()}},error:r,complete:e})})}}),f(w,{from:function(n){var t="function"==typeof this?this:w,e=h(c(n)[l]);if(e){var r=c(e.call(n));return r.constructor===t?r:new t(function(n){return r.subscribe(n)})}return new t(function(t){var e=!1;return a(function(){if(!e){try{if(d(n,!1,function(n){if(t.next(n),e)return m})===m)return}catch(n){if(e)throw n;return void t.error(n)}t.complete()}}),function(){e=!0}})},of:function(){for(var n=0,t=arguments.length,e=new Array(t);n<t;)e[n]=arguments[n++];return new("function"==typeof this?this:w)(function(n){var t=!1;return a(function(){if(!t){for(var r=0;r<e.length;++r)if(n.next(e[r]),t)return;n.complete()}}),function(){t=!0}})}}),p(w.prototype,l,function(){return this}),r(r.G,{Observable:w}),e(50)("Observable")},function(n,t,e){var r=e(3),o=e(0),i=e(112),a=[].slice,l=/MSIE .\./.test(i),u=function(n){return function(t,e){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return n(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,e)}};o(o.G+o.B+o.F*l,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(n,t,e){var r=e(0),o=e(108);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(n,t,e){for(var r=e(107),o=e(46),i=e(18),a=e(3),l=e(17),u=e(57),c=e(6),s=c("iterator"),f=c("toStringTag"),p=u.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},m=o(d),h=0;h<m.length;h++){var b,g=m[h],v=d[g],y=a[g],x=y&&y.prototype;if(x&&(x[s]||l(x,s,p),x[f]||l(x,f,g),u[g]=p,v))for(b in r)x[b]||i(x,b,r[b],!0)}},function(n,t,e){(function(t){!function(t){"use strict";var e,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag",c="object"==typeof n,s=t.regeneratorRuntime;if(s)c&&(n.exports=s);else{(s=t.regeneratorRuntime=c?n.exports:{}).wrap=x;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",h={},b={};b[a]=function(){return this};var g=Object.getPrototypeOf,v=g&&g(g(I([])));v&&v!==r&&o.call(v,a)&&(b=v);var y=O.prototype=k.prototype=Object.create(b);_.prototype=y.constructor=O,O.constructor=_,O[u]=_.displayName="GeneratorFunction",s.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,O):(n.__proto__=O,u in n||(n[u]="GeneratorFunction")),n.prototype=Object.create(y),n},s.awrap=function(n){return{__await:n}},E(S.prototype),S.prototype[l]=function(){return this},s.AsyncIterator=S,s.async=function(n,t,e,r){var o=new S(x(n,t,e,r));return s.isGeneratorFunction(t)?o:o.next().then(function(n){return n.done?n.value:o.next()})},E(y),y[u]="Generator",y[a]=function(){return this},y.toString=function(){return"[object Generator]"},s.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},s.values=I,T.prototype={constructor:T,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!n)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=e)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function r(r,o){return l.type="throw",l.arg=n,t.next=r,o&&(t.method="next",t.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],l=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=o.call(a,"catchLoc"),c=o.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(n,t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=n,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),h},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),C(e),h}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var o=r.arg;C(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,r){return this.delegate={iterator:I(n),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=e),h}}}function x(n,t,e,r){var o=t&&t.prototype instanceof k?t:k,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=function(n,t,e){var r=f;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===m){if("throw"===o)throw i;return R()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var l=j(a,e);if(l){if(l===h)continue;return l}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===f)throw r=m,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=d;var u=w(n,t,e);if("normal"===u.type){if(r=e.done?m:p,u.arg===h)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(r=m,e.method="throw",e.arg=u.arg)}}}(n,e,a),i}function w(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}function k(){}function _(){}function O(){}function E(n){["next","throw","return"].forEach(function(t){n[t]=function(n){return this._invoke(t,n)}})}function S(n){function e(t,r,i,a){var l=w(n[t],n,r);if("throw"!==l.type){var u=l.arg,c=u.value;return c&&"object"==typeof c&&o.call(c,"__await")?Promise.resolve(c.__await).then(function(n){e("next",n,i,a)},function(n){e("throw",n,i,a)}):Promise.resolve(c).then(function(n){u.value=n,i(u)},a)}a(l.arg)}var r;"object"==typeof t.process&&t.process.domain&&(e=t.process.domain.bind(e)),this._invoke=function(n,t){function o(){return new Promise(function(r,o){e(n,t,r,o)})}return r=r?r.then(o,o):o()}}function j(n,t){var r=n.iterator[t.method];if(r===e){if(t.delegate=null,"throw"===t.method){if(n.iterator.return&&(t.method="return",t.arg=e,j(n,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=w(r,n.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var i=o.arg;return i?i.done?(t[n.resultName]=i.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=e),t.delegate=null,h):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function P(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function C(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function T(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(P,this),this.reset(!0)}function I(n){if(n){var t=n[a];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function t(){for(;++r<n.length;)if(o.call(n,r))return t.value=n[r],t.done=!1,t;return t.value=e,t.done=!0,t};return i.next=i}}return{next:R}}function R(){return{value:e,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(t,e(66))},function(n,t,e){e(377),n.exports=e(29).RegExp.escape},function(n,t,e){var r=e(0),o=e(378)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(n){return o(n)}})},function(n,t){n.exports=function(n,t){var e=t===Object(t)?function(n){return t[n]}:t;return function(t){return String(t).replace(n,e)}}},function(n,t,e){"use strict";var r=a(e(1)),o=a(e(113));e(390);var i=a(e(393));function a(n){return n&&n.__esModule?n:{default:n}}o.default.render(r.default.createElement(i.default,null),document.getElementById("react-root"))},function(n,t,e){"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=e(81),o=e(155),i=e(82),a="function"==typeof Symbol&&Symbol.for,l=a?Symbol.for("react.element"):60103,u=a?Symbol.for("react.call"):60104,c=a?Symbol.for("react.return"):60105,s=a?Symbol.for("react.portal"):60106,f=a?Symbol.for("react.fragment"):60107,p="function"==typeof Symbol&&Symbol.iterator;function d(n){for(var t=arguments.length-1,e="Minified React error #"+n+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+n,r=0;r<t;r++)e+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function h(n,t,e){this.props=n,this.context=t,this.refs=o,this.updater=e||m}function b(n,t,e){this.props=n,this.context=t,this.refs=o,this.updater=e||m}function g(){}h.prototype.isReactComponent={},h.prototype.setState=function(n,t){"object"!=typeof n&&"function"!=typeof n&&null!=n&&d("85"),this.updater.enqueueSetState(this,n,t,"setState")},h.prototype.forceUpdate=function(n){this.updater.enqueueForceUpdate(this,n,"forceUpdate")},g.prototype=h.prototype;var v=b.prototype=new g;function y(n,t,e){this.props=n,this.context=t,this.refs=o,this.updater=e||m}v.constructor=b,r(v,h.prototype),v.isPureReactComponent=!0;var x=y.prototype=new g;x.constructor=y,r(x,h.prototype),x.unstable_isAsyncReactComponent=!0,x.render=function(){return this.props.children};var w={current:null},k=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function O(n,t,e){var r,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=e;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(n&&n.defaultProps)for(r in u=n.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:n,key:i,ref:a,props:o,_owner:w.current}}function E(n){return"object"==typeof n&&null!==n&&n.$$typeof===l}var S=/\/+/g,j=[];function P(n,t,e,r){if(j.length){var o=j.pop();return o.result=n,o.keyPrefix=t,o.func=e,o.context=r,o.count=0,o}return{result:n,keyPrefix:t,func:e,context:r,count:0}}function C(n){n.result=null,n.keyPrefix=null,n.func=null,n.context=null,n.count=0,10>j.length&&j.push(n)}function T(n,t,e,r){var o=typeof n;"undefined"!==o&&"boolean"!==o||(n=null);var i=!1;if(null===n)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(n.$$typeof){case l:case u:case c:case s:i=!0}}if(i)return e(r,n,""===t?"."+I(n,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(n))for(var a=0;a<n.length;a++){var f=t+I(o=n[a],a);i+=T(o,f,e,r)}else if(null===n||void 0===n?f=null:f="function"==typeof(f=p&&n[p]||n["@@iterator"])?f:null,"function"==typeof f)for(n=f.call(n),a=0;!(o=n.next()).done;)i+=T(o=o.value,f=t+I(o,a++),e,r);else"object"===o&&d("31","[object Object]"===(e=""+n)?"object with keys {"+Object.keys(n).join(", ")+"}":e,"");return i}function I(n,t){return"object"==typeof n&&null!==n&&null!=n.key?function(n){var t={"=":"=0",":":"=2"};return"$"+(""+n).replace(/[=:]/g,function(n){return t[n]})}(n.key):t.toString(36)}function R(n,t){n.func.call(n.context,t,n.count++)}function M(n,t,e){var r=n.result,o=n.keyPrefix;n=n.func.call(n.context,t,n.count++),Array.isArray(n)?A(n,r,e,i.thatReturnsArgument):null!=n&&(E(n)&&(t=o+(!n.key||t&&t.key===n.key?"":(""+n.key).replace(S,"$&/")+"/")+e,n={$$typeof:l,type:n.type,key:t,ref:n.ref,props:n.props,_owner:n._owner}),r.push(n))}function A(n,t,e,r,o){var i="";null!=e&&(i=(""+e).replace(S,"$&/")+"/"),t=P(t,i,r,o),null==n||T(n,"",M,t),C(t)}var L={Children:{map:function(n,t,e){if(null==n)return n;var r=[];return A(n,r,null,t,e),r},forEach:function(n,t,e){if(null==n)return n;t=P(null,null,t,e),null==n||T(n,"",R,t),C(t)},count:function(n){return null==n?0:T(n,"",i.thatReturnsNull,null)},toArray:function(n){var t=[];return A(n,t,null,i.thatReturnsArgument),t},only:function(n){return E(n)||d("143"),n}},Component:h,PureComponent:b,unstable_AsyncComponent:y,Fragment:f,createElement:O,cloneElement:function(n,t,e){var o=r({},n.props),i=n.key,a=n.ref,u=n._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),n.type&&n.type.defaultProps)var c=n.type.defaultProps;for(s in t)k.call(t,s)&&!_.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=e;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:l,type:n.type,key:i,ref:a,props:o,_owner:u}},createFactory:function(n){var t=O.bind(null,n);return t.type=n,t},isValidElement:E,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},N=Object.freeze({default:L}),U=N&&L||N;n.exports=U.default?U.default:U},function(n,t,e){"use strict";
/** @license React v16.2.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=e(1),o=e(382),i=e(81),a=e(82),l=e(383),u=e(384),c=e(385),s=e(386),f=e(389),p=e(155);function d(n){for(var t=arguments.length-1,e="Minified React error #"+n+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+n,r=0;r<t;r++)e+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||d("227");var m={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0};function h(n,t){return(n&t)===t}var b={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(n){var t=b,e=n.Properties||{},r=n.DOMAttributeNamespaces||{},o=n.DOMAttributeNames||{};for(var i in n=n.DOMMutationMethods||{},e){g.hasOwnProperty(i)&&d("48",i);var a=i.toLowerCase(),l=e[i];1>=(a={attributeName:a,attributeNamespace:null,propertyName:i,mutationMethod:null,mustUseProperty:h(l,t.MUST_USE_PROPERTY),hasBooleanValue:h(l,t.HAS_BOOLEAN_VALUE),hasNumericValue:h(l,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:h(l,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:h(l,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:h(l,t.HAS_STRING_BOOLEAN_VALUE)}).hasBooleanValue+a.hasNumericValue+a.hasOverloadedBooleanValue||d("50",i),o.hasOwnProperty(i)&&(a.attributeName=o[i]),r.hasOwnProperty(i)&&(a.attributeNamespace=r[i]),n.hasOwnProperty(i)&&(a.mutationMethod=n[i]),g[i]=a}}},g={};function v(n,t){if(m.hasOwnProperty(n)||2<n.length&&("o"===n[0]||"O"===n[0])&&("n"===n[1]||"N"===n[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return m.hasOwnProperty(n)?n=!0:(t=y(n))?n=t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:n="data-"===(n=n.toLowerCase().slice(0,5))||"aria-"===n,n;case"undefined":case"number":case"string":case"object":return!0;default:return!1}}function y(n){return g.hasOwnProperty(n)?g[n]:null}var x=b,w=x.MUST_USE_PROPERTY,k=x.HAS_BOOLEAN_VALUE,_=x.HAS_NUMERIC_VALUE,O=x.HAS_POSITIVE_NUMERIC_VALUE,E=x.HAS_OVERLOADED_BOOLEAN_VALUE,S=x.HAS_STRING_BOOLEAN_VALUE,j={Properties:{allowFullScreen:k,async:k,autoFocus:k,autoPlay:k,capture:E,checked:w|k,cols:O,contentEditable:S,controls:k,default:k,defer:k,disabled:k,download:E,draggable:S,formNoValidate:k,hidden:k,loop:k,multiple:w|k,muted:w|k,noValidate:k,open:k,playsInline:k,readOnly:k,required:k,reversed:k,rows:O,rowSpan:_,scoped:k,seamless:k,selected:w|k,size:O,start:_,span:O,spellCheck:S,style:0,tabIndex:0,itemScope:k,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:S},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(n,t){if(null==t)return n.removeAttribute("value");"number"!==n.type||!1===n.hasAttribute("value")?n.setAttribute("value",""+t):n.validity&&!n.validity.badInput&&n.ownerDocument.activeElement!==n&&n.setAttribute("value",""+t)}}},P=x.HAS_STRING_BOOLEAN_VALUE,C="http://www.w3.org/1999/xlink",T="http://www.w3.org/XML/1998/namespace",I={Properties:{autoReverse:P,externalResourcesRequired:P,preserveAlpha:P},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:C,xlinkArcrole:C,xlinkHref:C,xlinkRole:C,xlinkShow:C,xlinkTitle:C,xlinkType:C,xmlBase:T,xmlLang:T,xmlSpace:T}},R=/[\-\:]([a-z])/g;function M(n){return n[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(n){var t=n.replace(R,M);I.Properties[t]=0,I.DOMAttributeNames[t]=n}),x.injectDOMPropertyConfig(j),x.injectDOMPropertyConfig(I);var A={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(n){"function"!=typeof n.invokeGuardedCallback&&d("197"),L=n.invokeGuardedCallback}},invokeGuardedCallback:function(n,t,e,r,o,i,a,l,u){L.apply(A,arguments)},invokeGuardedCallbackAndCatchFirstError:function(n,t,e,r,o,i,a,l,u){if(A.invokeGuardedCallback.apply(this,arguments),A.hasCaughtError()){var c=A.clearCaughtError();A._hasRethrowError||(A._hasRethrowError=!0,A._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(A._hasRethrowError){var n=A._rethrowError;throw A._rethrowError=null,A._hasRethrowError=!1,n}}.apply(A,arguments)},hasCaughtError:function(){return A._hasCaughtError},clearCaughtError:function(){if(A._hasCaughtError){var n=A._caughtError;return A._caughtError=null,A._hasCaughtError=!1,n}d("198")}};function L(n,t,e,r,o,i,a,l,u){A._hasCaughtError=!1,A._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(e,c)}catch(n){A._caughtError=n,A._hasCaughtError=!0}}var N=null,U={};function D(){if(N)for(var n in U){var t=U[n],e=N.indexOf(n);if(-1<e||d("96",n),!F[e])for(var r in t.extractEvents||d("97",n),F[e]=t,e=t.eventTypes){var o=void 0,i=e[r],a=t,l=r;B.hasOwnProperty(l)&&d("99",l),B[l]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&z(u[o],a,l);o=!0}else i.registrationName?(z(i.registrationName,a,l),o=!0):o=!1;o||d("98",r,n)}}}function z(n,t,e){V[n]&&d("100",n),V[n]=t,H[n]=t.eventTypes[e].dependencies}var F=[],B={},V={},H={};function W(n){N&&d("101"),N=Array.prototype.slice.call(n),D()}function $(n){var t,e=!1;for(t in n)if(n.hasOwnProperty(t)){var r=n[t];U.hasOwnProperty(t)&&U[t]===r||(U[t]&&d("102",t),U[t]=r,e=!0)}e&&D()}var q=Object.freeze({plugins:F,eventNameDispatchConfigs:B,registrationNameModules:V,registrationNameDependencies:H,possibleRegistrationNames:null,injectEventPluginOrder:W,injectEventPluginsByName:$}),K=null,G=null,Y=null;function X(n,t,e,r){t=n.type||"unknown-event",n.currentTarget=Y(r),A.invokeGuardedCallbackAndCatchFirstError(t,e,void 0,n),n.currentTarget=null}function J(n,t){return null==t&&d("30"),null==n?t:Array.isArray(n)?Array.isArray(t)?(n.push.apply(n,t),n):(n.push(t),n):Array.isArray(t)?[n].concat(t):[n,t]}function Q(n,t,e){Array.isArray(n)?n.forEach(t,e):n&&t.call(e,n)}var Z=null;function nn(n,t){if(n){var e=n._dispatchListeners,r=n._dispatchInstances;if(Array.isArray(e))for(var o=0;o<e.length&&!n.isPropagationStopped();o++)X(n,t,e[o],r[o]);else e&&X(n,t,e,r);n._dispatchListeners=null,n._dispatchInstances=null,n.isPersistent()||n.constructor.release(n)}}function tn(n){return nn(n,!0)}function en(n){return nn(n,!1)}var rn={injectEventPluginOrder:W,injectEventPluginsByName:$};function on(n,t){var e=n.stateNode;if(!e)return null;var r=K(e);if(!r)return null;e=r[t];n:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(n=n.type)||"input"===n||"select"===n||"textarea"===n)),n=!r;break n;default:n=!1}return n?null:(e&&"function"!=typeof e&&d("231",t,typeof e),e)}function an(n,t,e,r){for(var o,i=0;i<F.length;i++){var a=F[i];a&&(a=a.extractEvents(n,t,e,r))&&(o=J(o,a))}return o}function ln(n){n&&(Z=J(Z,n))}function un(n){var t=Z;Z=null,t&&(Q(t,n?tn:en),Z&&d("95"),A.rethrowCaughtError())}var cn=Object.freeze({injection:rn,getListener:on,extractEvents:an,enqueueEvents:ln,processEventQueue:un}),sn=Math.random().toString(36).slice(2),fn="__reactInternalInstance$"+sn,pn="__reactEventHandlers$"+sn;function dn(n){if(n[fn])return n[fn];for(var t=[];!n[fn];){if(t.push(n),!n.parentNode)return null;n=n.parentNode}var e=void 0,r=n[fn];if(5===r.tag||6===r.tag)return r;for(;n&&(r=n[fn]);n=t.pop())e=r;return e}function mn(n){if(5===n.tag||6===n.tag)return n.stateNode;d("33")}function hn(n){return n[pn]||null}var bn=Object.freeze({precacheFiberNode:function(n,t){t[fn]=n},getClosestInstanceFromNode:dn,getInstanceFromNode:function(n){return!(n=n[fn])||5!==n.tag&&6!==n.tag?null:n},getNodeFromInstance:mn,getFiberCurrentPropsFromNode:hn,updateFiberProps:function(n,t){n[pn]=t}});function gn(n){do{n=n.return}while(n&&5!==n.tag);return n||null}function vn(n,t,e){for(var r=[];n;)r.push(n),n=gn(n);for(n=r.length;0<n--;)t(r[n],"captured",e);for(n=0;n<r.length;n++)t(r[n],"bubbled",e)}function yn(n,t,e){(t=on(n,e.dispatchConfig.phasedRegistrationNames[t]))&&(e._dispatchListeners=J(e._dispatchListeners,t),e._dispatchInstances=J(e._dispatchInstances,n))}function xn(n){n&&n.dispatchConfig.phasedRegistrationNames&&vn(n._targetInst,yn,n)}function wn(n){if(n&&n.dispatchConfig.phasedRegistrationNames){var t=n._targetInst;vn(t=t?gn(t):null,yn,n)}}function kn(n,t,e){n&&e&&e.dispatchConfig.registrationName&&(t=on(n,e.dispatchConfig.registrationName))&&(e._dispatchListeners=J(e._dispatchListeners,t),e._dispatchInstances=J(e._dispatchInstances,n))}function _n(n){n&&n.dispatchConfig.registrationName&&kn(n._targetInst,null,n)}function On(n){Q(n,xn)}function En(n,t,e,r){if(e&&r)n:{for(var o=e,i=r,a=0,l=o;l;l=gn(l))a++;l=0;for(var u=i;u;u=gn(u))l++;for(;0<a-l;)o=gn(o),a--;for(;0<l-a;)i=gn(i),l--;for(;a--;){if(o===i||o===i.alternate)break n;o=gn(o),i=gn(i)}o=null}else o=null;for(i=o,o=[];e&&e!==i&&(null===(a=e.alternate)||a!==i);)o.push(e),e=gn(e);for(e=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)e.push(r),r=gn(r);for(r=0;r<o.length;r++)kn(o[r],"bubbled",n);for(n=e.length;0<n--;)kn(e[n],"captured",t)}var Sn=Object.freeze({accumulateTwoPhaseDispatches:On,accumulateTwoPhaseDispatchesSkipTarget:function(n){Q(n,wn)},accumulateEnterLeaveDispatches:En,accumulateDirectDispatches:function(n){Q(n,_n)}}),jn=null;function Pn(){return!jn&&o.canUseDOM&&(jn="textContent"in document.documentElement?"textContent":"innerText"),jn}var Cn={_root:null,_startText:null,_fallbackText:null};function Tn(){if(Cn._fallbackText)return Cn._fallbackText;var n,t,e=Cn._startText,r=e.length,o=In(),i=o.length;for(n=0;n<r&&e[n]===o[n];n++);var a=r-n;for(t=1;t<=a&&e[r-t]===o[i-t];t++);return Cn._fallbackText=o.slice(n,1<t?1-t:void 0),Cn._fallbackText}function In(){return"value"in Cn._root?Cn._root.value:Cn._root[Pn()]}var Rn="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Mn={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(n){return n.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function An(n,t,e,r){for(var o in this.dispatchConfig=n,this._targetInst=t,this.nativeEvent=e,n=this.constructor.Interface)n.hasOwnProperty(o)&&((t=n[o])?this[o]=t(e):"target"===o?this.target=r:this[o]=e[o]);return this.isDefaultPrevented=(null!=e.defaultPrevented?e.defaultPrevented:!1===e.returnValue)?a.thatReturnsTrue:a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}function Ln(n,t,e,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,n,t,e,r),o}return new this(n,t,e,r)}function Nn(n){n instanceof this||d("223"),n.destructor(),10>this.eventPool.length&&this.eventPool.push(n)}function Un(n){n.eventPool=[],n.getPooled=Ln,n.release=Nn}function Dn(n,t,e,r){return An.call(this,n,t,e,r)}function zn(n,t,e,r){return An.call(this,n,t,e,r)}i(An.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():"unknown"!=typeof n.returnValue&&(n.returnValue=!1),this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():"unknown"!=typeof n.cancelBubble&&(n.cancelBubble=!0),this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var n,t=this.constructor.Interface;for(n in t)this[n]=null;for(t=0;t<Rn.length;t++)this[Rn[t]]=null}}),An.Interface=Mn,An.augmentClass=function(n,t){function e(){}e.prototype=this.prototype;var r=new e;i(r,n.prototype),n.prototype=r,n.prototype.constructor=n,n.Interface=i({},this.Interface,t),n.augmentClass=this.augmentClass,Un(n)},Un(An),An.augmentClass(Dn,{data:null}),An.augmentClass(zn,{data:null});var Fn,Bn=[9,13,27,32],Vn=o.canUseDOM&&"CompositionEvent"in window,Hn=null;if(o.canUseDOM&&"documentMode"in document&&(Hn=document.documentMode),Fn=o.canUseDOM&&"TextEvent"in window&&!Hn){var Wn=window.opera;Fn=!("object"==typeof Wn&&"function"==typeof Wn.version&&12>=parseInt(Wn.version(),10))}var $n=Fn,qn=o.canUseDOM&&(!Vn||Hn&&8<Hn&&11>=Hn),Kn=String.fromCharCode(32),Gn={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Yn=!1;function Xn(n,t){switch(n){case"topKeyUp":return-1!==Bn.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Jn(n){return"object"==typeof(n=n.detail)&&"data"in n?n.data:null}var Qn=!1;var Zn={eventTypes:Gn,extractEvents:function(n,t,e,r){var o;if(Vn)n:{switch(n){case"topCompositionStart":var i=Gn.compositionStart;break n;case"topCompositionEnd":i=Gn.compositionEnd;break n;case"topCompositionUpdate":i=Gn.compositionUpdate;break n}i=void 0}else Qn?Xn(n,e)&&(i=Gn.compositionEnd):"topKeyDown"===n&&229===e.keyCode&&(i=Gn.compositionStart);return i?(qn&&(Qn||i!==Gn.compositionStart?i===Gn.compositionEnd&&Qn&&(o=Tn()):(Cn._root=r,Cn._startText=In(),Qn=!0)),i=Dn.getPooled(i,t,e,r),o?i.data=o:null!==(o=Jn(e))&&(i.data=o),On(i),o=i):o=null,(n=$n?function(n,t){switch(n){case"topCompositionEnd":return Jn(t);case"topKeyPress":return 32!==t.which?null:(Yn=!0,Kn);case"topTextInput":return(n=t.data)===Kn&&Yn?null:n;default:return null}}(n,e):function(n,t){if(Qn)return"topCompositionEnd"===n||!Vn&&Xn(n,t)?(n=Tn(),Cn._root=null,Cn._startText=null,Cn._fallbackText=null,Qn=!1,n):null;switch(n){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return qn?null:t.data;default:return null}}(n,e))?((t=zn.getPooled(Gn.beforeInput,t,e,r)).data=n,On(t)):t=null,[o,t]}},nt=null,tt=null,et=null;function rt(n){if(n=G(n)){nt&&"function"==typeof nt.restoreControlledState||d("194");var t=K(n.stateNode);nt.restoreControlledState(n.stateNode,n.type,t)}}var ot={injectFiberControlledHostComponent:function(n){nt=n}};function it(n){tt?et?et.push(n):et=[n]:tt=n}function at(){if(tt){var n=tt,t=et;if(et=tt=null,rt(n),t)for(n=0;n<t.length;n++)rt(t[n])}}var lt=Object.freeze({injection:ot,enqueueStateRestore:it,restoreStateIfNeeded:at});function ut(n,t){return n(t)}var ct=!1;function st(n,t){if(ct)return ut(n,t);ct=!0;try{return ut(n,t)}finally{ct=!1,at()}}var ft,pt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function dt(n){var t=n&&n.nodeName&&n.nodeName.toLowerCase();return"input"===t?!!pt[n.type]:"textarea"===t}function mt(n){return(n=n.target||n.srcElement||window).correspondingUseElement&&(n=n.correspondingUseElement),3===n.nodeType?n.parentNode:n}function ht(n,t){if(!o.canUseDOM||t&&!("addEventListener"in document))return!1;var e=(t="on"+n)in document;return e||((e=document.createElement("div")).setAttribute(t,"return;"),e="function"==typeof e[t]),!e&&ft&&"wheel"===n&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}function bt(n){var t=n.type;return(n=n.nodeName)&&"input"===n.toLowerCase()&&("checkbox"===t||"radio"===t)}function gt(n){n._valueTracker||(n._valueTracker=function(n){var t=bt(n)?"checked":"value",e=Object.getOwnPropertyDescriptor(n.constructor.prototype,t),r=""+n[t];if(!n.hasOwnProperty(t)&&"function"==typeof e.get&&"function"==typeof e.set)return Object.defineProperty(n,t,{enumerable:e.enumerable,configurable:!0,get:function(){return e.get.call(this)},set:function(n){r=""+n,e.set.call(this,n)}}),{getValue:function(){return r},setValue:function(n){r=""+n},stopTracking:function(){n._valueTracker=null,delete n[t]}}}(n))}function vt(n){if(!n)return!1;var t=n._valueTracker;if(!t)return!0;var e=t.getValue(),r="";return n&&(r=bt(n)?n.checked?"true":"false":n.value),(n=r)!==e&&(t.setValue(n),!0)}o.canUseDOM&&(ft=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var yt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function xt(n,t,e){return(n=An.getPooled(yt.change,n,t,e)).type="change",it(e),On(n),n}var wt=null,kt=null;function _t(n){ln(n),un(!1)}function Ot(n){if(vt(mn(n)))return n}function Et(n,t){if("topChange"===n)return t}var St=!1;function jt(){wt&&(wt.detachEvent("onpropertychange",Pt),kt=wt=null)}function Pt(n){"value"===n.propertyName&&Ot(kt)&&st(_t,n=xt(kt,n,mt(n)))}function Ct(n,t,e){"topFocus"===n?(jt(),kt=e,(wt=t).attachEvent("onpropertychange",Pt)):"topBlur"===n&&jt()}function Tt(n){if("topSelectionChange"===n||"topKeyUp"===n||"topKeyDown"===n)return Ot(kt)}function It(n,t){if("topClick"===n)return Ot(t)}function Rt(n,t){if("topInput"===n||"topChange"===n)return Ot(t)}o.canUseDOM&&(St=ht("input")&&(!document.documentMode||9<document.documentMode));var Mt={eventTypes:yt,_isInputEventSupported:St,extractEvents:function(n,t,e,r){var o=t?mn(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=Et;else if(dt(o))if(St)a=Rt;else{a=Tt;var l=Ct}else!(i=o.nodeName)||"input"!==i.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(a=It);if(a&&(a=a(n,t)))return xt(a,e,r);l&&l(n,o,t),"topBlur"===n&&null!=t&&(n=t._wrapperState||o._wrapperState)&&n.controlled&&"number"===o.type&&(n=""+o.value,o.getAttribute("value")!==n&&o.setAttribute("value",n))}};function At(n,t,e,r){return An.call(this,n,t,e,r)}An.augmentClass(At,{view:null,detail:null});var Lt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Nt(n){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(n):!!(n=Lt[n])&&!!t[n]}function Ut(){return Nt}function Dt(n,t,e,r){return An.call(this,n,t,e,r)}At.augmentClass(Dt,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ut,button:null,buttons:null,relatedTarget:function(n){return n.relatedTarget||(n.fromElement===n.srcElement?n.toElement:n.fromElement)}});var zt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Ft={eventTypes:zt,extractEvents:function(n,t,e,r){if("topMouseOver"===n&&(e.relatedTarget||e.fromElement)||"topMouseOut"!==n&&"topMouseOver"!==n)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===n?(n=t,t=(t=e.relatedTarget||e.toElement)?dn(t):null):n=null,n===t)return null;var i=null==n?o:mn(n);o=null==t?o:mn(t);var a=Dt.getPooled(zt.mouseLeave,n,e,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(e=Dt.getPooled(zt.mouseEnter,t,e,r)).type="mouseenter",e.target=o,e.relatedTarget=i,En(a,e,n,t),[a,e]}},Bt=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;function Vt(n){return"string"==typeof(n=n.type)?n:"function"==typeof n?n.displayName||n.name:null}function Ht(n){var t=n;if(n.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Wt(n){return!!(n=n._reactInternalFiber)&&2===Ht(n)}function $t(n){2!==Ht(n)&&d("188")}function qt(n){var t=n.alternate;if(!t)return 3===(t=Ht(n))&&d("188"),1===t?null:n;for(var e=n,r=t;;){var o=e.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===e)return $t(o),n;if(a===r)return $t(o),t;a=a.sibling}d("188")}if(e.return!==r.return)e=o,r=i;else{a=!1;for(var l=o.child;l;){if(l===e){a=!0,e=o,r=i;break}if(l===r){a=!0,r=o,e=i;break}l=l.sibling}if(!a){for(l=i.child;l;){if(l===e){a=!0,e=i,r=o;break}if(l===r){a=!0,r=i,e=o;break}l=l.sibling}a||d("189")}}e.alternate!==r&&d("190")}return 3!==e.tag&&d("188"),e.stateNode.current===e?n:t}var Kt=[];function Gt(n){var t=n.targetInst;do{if(!t){n.ancestors.push(t);break}var e;for(e=t;e.return;)e=e.return;if(!(e=3!==e.tag?null:e.stateNode.containerInfo))break;n.ancestors.push(t),t=dn(e)}while(t);for(e=0;e<n.ancestors.length;e++)t=n.ancestors[e],Xt(n.topLevelType,t,n.nativeEvent,mt(n.nativeEvent))}var Yt=!0,Xt=void 0;function Jt(n){Yt=!!n}function Qt(n,t,e){return e?l.listen(e,t,ne.bind(null,n)):null}function Zt(n,t,e){return e?l.capture(e,t,ne.bind(null,n)):null}function ne(n,t){if(Yt){var e=mt(t);if(null===(e=dn(e))||"number"!=typeof e.tag||2===Ht(e)||(e=null),Kt.length){var r=Kt.pop();r.topLevelType=n,r.nativeEvent=t,r.targetInst=e,n=r}else n={topLevelType:n,nativeEvent:t,targetInst:e,ancestors:[]};try{st(Gt,n)}finally{n.topLevelType=null,n.nativeEvent=null,n.targetInst=null,n.ancestors.length=0,10>Kt.length&&Kt.push(n)}}}var te=Object.freeze({get _enabled(){return Yt},get _handleTopLevel(){return Xt},setHandleTopLevel:function(n){Xt=n},setEnabled:Jt,isEnabled:function(){return Yt},trapBubbledEvent:Qt,trapCapturedEvent:Zt,dispatchEvent:ne});function ee(n,t){var e={};return e[n.toLowerCase()]=t.toLowerCase(),e["Webkit"+n]="webkit"+t,e["Moz"+n]="moz"+t,e["ms"+n]="MS"+t,e["O"+n]="o"+t.toLowerCase(),e}var re={animationend:ee("Animation","AnimationEnd"),animationiteration:ee("Animation","AnimationIteration"),animationstart:ee("Animation","AnimationStart"),transitionend:ee("Transition","TransitionEnd")},oe={},ie={};function ae(n){if(oe[n])return oe[n];if(!re[n])return n;var t,e=re[n];for(t in e)if(e.hasOwnProperty(t)&&t in ie)return oe[n]=e[t];return""}o.canUseDOM&&(ie=document.createElement("div").style,"AnimationEvent"in window||(delete re.animationend.animation,delete re.animationiteration.animation,delete re.animationstart.animation),"TransitionEvent"in window||delete re.transitionend.transition);var le={topAbort:"abort",topAnimationEnd:ae("animationend")||"animationend",topAnimationIteration:ae("animationiteration")||"animationiteration",topAnimationStart:ae("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:ae("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},ue={},ce=0,se="_reactListenersID"+(""+Math.random()).slice(2);function fe(n){return Object.prototype.hasOwnProperty.call(n,se)||(n[se]=ce++,ue[n[se]]={}),ue[n[se]]}function pe(n){for(;n&&n.firstChild;)n=n.firstChild;return n}function de(n,t){var e,r=pe(n);for(n=0;r;){if(3===r.nodeType){if(e=n+r.textContent.length,n<=t&&e>=t)return{node:r,offset:t-n};n=e}n:{for(;r;){if(r.nextSibling){r=r.nextSibling;break n}r=r.parentNode}r=void 0}r=pe(r)}}function me(n){var t=n&&n.nodeName&&n.nodeName.toLowerCase();return t&&("input"===t&&"text"===n.type||"textarea"===t||"true"===n.contentEditable)}var he=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,be={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},ge=null,ve=null,ye=null,xe=!1;function we(n,t){if(xe||null==ge||ge!==u())return null;var e=ge;return"selectionStart"in e&&me(e)?e={start:e.selectionStart,end:e.selectionEnd}:window.getSelection?e={anchorNode:(e=window.getSelection()).anchorNode,anchorOffset:e.anchorOffset,focusNode:e.focusNode,focusOffset:e.focusOffset}:e=void 0,ye&&c(ye,e)?null:(ye=e,(n=An.getPooled(be.select,ve,n,t)).type="select",n.target=ge,On(n),n)}var ke={eventTypes:be,extractEvents:function(n,t,e,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){n:{i=fe(i),o=H.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break n}}i=!0}o=!i}if(o)return null;switch(i=t?mn(t):window,n){case"topFocus":(dt(i)||"true"===i.contentEditable)&&(ge=i,ve=t,ye=null);break;case"topBlur":ye=ve=ge=null;break;case"topMouseDown":xe=!0;break;case"topContextMenu":case"topMouseUp":return xe=!1,we(e,r);case"topSelectionChange":if(he)break;case"topKeyDown":case"topKeyUp":return we(e,r)}return null}};function _e(n,t,e,r){return An.call(this,n,t,e,r)}function Oe(n,t,e,r){return An.call(this,n,t,e,r)}function Ee(n,t,e,r){return An.call(this,n,t,e,r)}function Se(n){var t=n.keyCode;return"charCode"in n?0===(n=n.charCode)&&13===t&&(n=13):n=t,32<=n||13===n?n:0}An.augmentClass(_e,{animationName:null,elapsedTime:null,pseudoElement:null}),An.augmentClass(Oe,{clipboardData:function(n){return"clipboardData"in n?n.clipboardData:window.clipboardData}}),At.augmentClass(Ee,{relatedTarget:null});var je={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Pe={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function Ce(n,t,e,r){return An.call(this,n,t,e,r)}function Te(n,t,e,r){return An.call(this,n,t,e,r)}function Ie(n,t,e,r){return An.call(this,n,t,e,r)}function Re(n,t,e,r){return An.call(this,n,t,e,r)}function Me(n,t,e,r){return An.call(this,n,t,e,r)}At.augmentClass(Ce,{key:function(n){if(n.key){var t=je[n.key]||n.key;if("Unidentified"!==t)return t}return"keypress"===n.type?13===(n=Se(n))?"Enter":String.fromCharCode(n):"keydown"===n.type||"keyup"===n.type?Pe[n.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ut,charCode:function(n){return"keypress"===n.type?Se(n):0},keyCode:function(n){return"keydown"===n.type||"keyup"===n.type?n.keyCode:0},which:function(n){return"keypress"===n.type?Se(n):"keydown"===n.type||"keyup"===n.type?n.keyCode:0}}),Dt.augmentClass(Te,{dataTransfer:null}),At.augmentClass(Ie,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ut}),An.augmentClass(Re,{propertyName:null,elapsedTime:null,pseudoElement:null}),Dt.augmentClass(Me,{deltaX:function(n){return"deltaX"in n?n.deltaX:"wheelDeltaX"in n?-n.wheelDeltaX:0},deltaY:function(n){return"deltaY"in n?n.deltaY:"wheelDeltaY"in n?-n.wheelDeltaY:"wheelDelta"in n?-n.wheelDelta:0},deltaZ:null,deltaMode:null});var Ae={},Le={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(n){var t=n[0].toUpperCase()+n.slice(1),e="on"+t;e={phasedRegistrationNames:{bubbled:e,captured:e+"Capture"},dependencies:[t="top"+t]},Ae[n]=e,Le[t]=e});var Ne={eventTypes:Ae,extractEvents:function(n,t,e,r){var o=Le[n];if(!o)return null;switch(n){case"topKeyPress":if(0===Se(e))return null;case"topKeyDown":case"topKeyUp":n=Ce;break;case"topBlur":case"topFocus":n=Ee;break;case"topClick":if(2===e.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":n=Dt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":n=Te;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":n=Ie;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":n=_e;break;case"topTransitionEnd":n=Re;break;case"topScroll":n=At;break;case"topWheel":n=Me;break;case"topCopy":case"topCut":case"topPaste":n=Oe;break;default:n=An}return On(t=n.getPooled(o,t,e,r)),t}};Xt=function(n,t,e,r){ln(n=an(n,t,e,r)),un(!1)},rn.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),K=bn.getFiberCurrentPropsFromNode,G=bn.getInstanceFromNode,Y=bn.getNodeFromInstance,rn.injectEventPluginsByName({SimpleEventPlugin:Ne,EnterLeaveEventPlugin:Ft,ChangeEventPlugin:Mt,SelectEventPlugin:ke,BeforeInputEventPlugin:Zn});var Ue=[],De=-1;function ze(n){0>De||(n.current=Ue[De],Ue[De]=null,De--)}function Fe(n,t){Ue[++De]=n.current,n.current=t}new Set;var Be={current:p},Ve={current:!1},He=p;function We(n){return qe(n)?He:Be.current}function $e(n,t){var e=n.type.contextTypes;if(!e)return p;var r=n.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in e)i[o]=t[o];return r&&((n=n.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,n.__reactInternalMemoizedMaskedChildContext=i),i}function qe(n){return 2===n.tag&&null!=n.type.childContextTypes}function Ke(n){qe(n)&&(ze(Ve),ze(Be))}function Ge(n,t,e){null!=Be.cursor&&d("168"),Fe(Be,t),Fe(Ve,e)}function Ye(n,t){var e=n.stateNode,r=n.type.childContextTypes;if("function"!=typeof e.getChildContext)return t;for(var o in e=e.getChildContext())o in r||d("108",Vt(n)||"Unknown",o);return i({},t,e)}function Xe(n){if(!qe(n))return!1;var t=n.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||p,He=Be.current,Fe(Be,t),Fe(Ve,Ve.current),!0}function Je(n,t){var e=n.stateNode;if(e||d("169"),t){var r=Ye(n,He);e.__reactInternalMemoizedMergedChildContext=r,ze(Ve),ze(Be),Fe(Be,r)}else ze(Ve);Fe(Ve,t)}function Qe(n,t,e){this.tag=n,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=e,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Ze(n,t,e){var r=n.alternate;return null===r?((r=new Qe(n.tag,n.key,n.internalContextTag)).type=n.type,r.stateNode=n.stateNode,r.alternate=n,n.alternate=r):(r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=e,r.pendingProps=t,r.child=n.child,r.memoizedProps=n.memoizedProps,r.memoizedState=n.memoizedState,r.updateQueue=n.updateQueue,r.sibling=n.sibling,r.index=n.index,r.ref=n.ref,r}function nr(n,t,e){var r=void 0,o=n.type,i=n.key;return"function"==typeof o?((r=o.prototype&&o.prototype.isReactComponent?new Qe(2,i,t):new Qe(0,i,t)).type=o,r.pendingProps=n.props):"string"==typeof o?((r=new Qe(5,i,t)).type=o,r.pendingProps=n.props):"object"==typeof o&&null!==o&&"number"==typeof o.tag?(r=o).pendingProps=n.props:d("130",null==o?o:typeof o,""),r.expirationTime=e,r}function tr(n,t,e,r){return(t=new Qe(10,r,t)).pendingProps=n,t.expirationTime=e,t}function er(n,t,e){return(t=new Qe(6,null,t)).pendingProps=n,t.expirationTime=e,t}function rr(n,t,e){return(t=new Qe(7,n.key,t)).type=n.handler,t.pendingProps=n,t.expirationTime=e,t}function or(n,t,e){return(n=new Qe(9,null,t)).expirationTime=e,n}function ir(n,t,e){return(t=new Qe(4,n.key,t)).pendingProps=n.children||[],t.expirationTime=e,t.stateNode={containerInfo:n.containerInfo,pendingChildren:null,implementation:n.implementation},t}var ar=null,lr=null;function ur(n){return function(t){try{return n(t)}catch(n){}}}function cr(n){"function"==typeof ar&&ar(n)}function sr(n){"function"==typeof lr&&lr(n)}function fr(n){return{baseState:n,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function pr(n,t){null===n.last?n.first=n.last=t:(n.last.next=t,n.last=t),(0===n.expirationTime||n.expirationTime>t.expirationTime)&&(n.expirationTime=t.expirationTime)}function dr(n,t){var e=n.alternate,r=n.updateQueue;null===r&&(r=n.updateQueue=fr(null)),null!==e?null===(n=e.updateQueue)&&(n=e.updateQueue=fr(null)):n=null,null===(n=n!==r?n:null)?pr(r,t):null===r.last||null===n.last?(pr(r,t),pr(n,t)):(pr(r,t),n.last=t)}function mr(n,t,e,r){return"function"==typeof(n=n.partialState)?n.call(t,e,r):n}function hr(n,t,e,r,o,a){null!==n&&n.updateQueue===e&&(e=t.updateQueue={baseState:e.baseState,expirationTime:e.expirationTime,first:e.first,last:e.last,isInitialized:e.isInitialized,callbackList:null,hasForceUpdate:!1}),e.expirationTime=0,e.isInitialized?n=e.baseState:(n=e.baseState=t.memoizedState,e.isInitialized=!0);for(var l=!0,u=e.first,c=!1;null!==u;){var s=u.expirationTime;if(s>a){var f=e.expirationTime;(0===f||f>s)&&(e.expirationTime=s),c||(c=!0,e.baseState=n)}else c||(e.first=u.next,null===e.first&&(e.last=null)),u.isReplace?(n=mr(u,r,n,o),l=!0):(s=mr(u,r,n,o))&&(n=l?i({},n,s):i(n,s),l=!1),u.isForced&&(e.hasForceUpdate=!0),null!==u.callback&&(null===(s=e.callbackList)&&(s=e.callbackList=[]),s.push(u));u=u.next}return null!==e.callbackList?t.effectTag|=32:null!==e.first||e.hasForceUpdate||(t.updateQueue=null),c||(e.baseState=n),n}function br(n,t){var e=n.callbackList;if(null!==e)for(n.callbackList=null,n=0;n<e.length;n++){var r=e[n],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(t)}}var gr="function"==typeof Symbol&&Symbol.for,vr=gr?Symbol.for("react.element"):60103,yr=gr?Symbol.for("react.call"):60104,xr=gr?Symbol.for("react.return"):60105,wr=gr?Symbol.for("react.portal"):60106,kr=gr?Symbol.for("react.fragment"):60107,_r="function"==typeof Symbol&&Symbol.iterator;function Or(n){return null===n||void 0===n?null:"function"==typeof(n=_r&&n[_r]||n["@@iterator"])?n:null}var Er=Array.isArray;function Sr(n,t){var e=t.ref;if(null!==e&&"function"!=typeof e){if(t._owner){var r=void 0;(t=t._owner)&&(2!==t.tag&&d("110"),r=t.stateNode),r||d("147",e);var o=""+e;return null!==n&&null!==n.ref&&n.ref._stringRef===o?n.ref:((n=function(n){var t=r.refs===p?r.refs={}:r.refs;null===n?delete t[o]:t[o]=n})._stringRef=o,n)}"string"!=typeof e&&d("148"),t._owner||d("149",e)}return e}function jr(n,t){"textarea"!==n.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Pr(n){function t(t,e){if(n){var r=t.lastEffect;null!==r?(r.nextEffect=e,t.lastEffect=e):t.firstEffect=t.lastEffect=e,e.nextEffect=null,e.effectTag=8}}function e(e,r){if(!n)return null;for(;null!==r;)t(e,r),r=r.sibling;return null}function r(n,t){for(n=new Map;null!==t;)null!==t.key?n.set(t.key,t):n.set(t.index,t),t=t.sibling;return n}function o(n,t,e){return(n=Ze(n,t,e)).index=0,n.sibling=null,n}function i(t,e,r){return t.index=r,n?null!==(r=t.alternate)?(r=r.index)<e?(t.effectTag=2,e):r:(t.effectTag=2,e):e}function a(t){return n&&null===t.alternate&&(t.effectTag=2),t}function l(n,t,e,r){return null===t||6!==t.tag?((t=er(e,n.internalContextTag,r)).return=n,t):((t=o(t,e,r)).return=n,t)}function u(n,t,e,r){return null!==t&&t.type===e.type?((r=o(t,e.props,r)).ref=Sr(t,e),r.return=n,r):((r=nr(e,n.internalContextTag,r)).ref=Sr(t,e),r.return=n,r)}function c(n,t,e,r){return null===t||7!==t.tag?((t=rr(e,n.internalContextTag,r)).return=n,t):((t=o(t,e,r)).return=n,t)}function s(n,t,e,r){return null===t||9!==t.tag?((t=or(e,n.internalContextTag,r)).type=e.value,t.return=n,t):((t=o(t,null,r)).type=e.value,t.return=n,t)}function f(n,t,e,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==e.containerInfo||t.stateNode.implementation!==e.implementation?((t=ir(e,n.internalContextTag,r)).return=n,t):((t=o(t,e.children||[],r)).return=n,t)}function p(n,t,e,r,i){return null===t||10!==t.tag?((t=tr(e,n.internalContextTag,r,i)).return=n,t):((t=o(t,e,r)).return=n,t)}function m(n,t,e){if("string"==typeof t||"number"==typeof t)return(t=er(""+t,n.internalContextTag,e)).return=n,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case vr:return t.type===kr?((t=tr(t.props.children,n.internalContextTag,e,t.key)).return=n,t):((e=nr(t,n.internalContextTag,e)).ref=Sr(null,t),e.return=n,e);case yr:return(t=rr(t,n.internalContextTag,e)).return=n,t;case xr:return(e=or(t,n.internalContextTag,e)).type=t.value,e.return=n,e;case wr:return(t=ir(t,n.internalContextTag,e)).return=n,t}if(Er(t)||Or(t))return(t=tr(t,n.internalContextTag,e,null)).return=n,t;jr(n,t)}return null}function h(n,t,e,r){var o=null!==t?t.key:null;if("string"==typeof e||"number"==typeof e)return null!==o?null:l(n,t,""+e,r);if("object"==typeof e&&null!==e){switch(e.$$typeof){case vr:return e.key===o?e.type===kr?p(n,t,e.props.children,r,o):u(n,t,e,r):null;case yr:return e.key===o?c(n,t,e,r):null;case xr:return null===o?s(n,t,e,r):null;case wr:return e.key===o?f(n,t,e,r):null}if(Er(e)||Or(e))return null!==o?null:p(n,t,e,r,null);jr(n,e)}return null}function b(n,t,e,r,o){if("string"==typeof r||"number"==typeof r)return l(t,n=n.get(e)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case vr:return n=n.get(null===r.key?e:r.key)||null,r.type===kr?p(t,n,r.props.children,o,r.key):u(t,n,r,o);case yr:return c(t,n=n.get(null===r.key?e:r.key)||null,r,o);case xr:return s(t,n=n.get(e)||null,r,o);case wr:return f(t,n=n.get(null===r.key?e:r.key)||null,r,o)}if(Er(r)||Or(r))return p(t,n=n.get(e)||null,r,o,null);jr(t,r)}return null}function g(o,a,l,u){for(var c=null,s=null,f=a,p=a=0,d=null;null!==f&&p<l.length;p++){f.index>p?(d=f,f=null):d=f.sibling;var g=h(o,f,l[p],u);if(null===g){null===f&&(f=d);break}n&&f&&null===g.alternate&&t(o,f),a=i(g,a,p),null===s?c=g:s.sibling=g,s=g,f=d}if(p===l.length)return e(o,f),c;if(null===f){for(;p<l.length;p++)(f=m(o,l[p],u))&&(a=i(f,a,p),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);p<l.length;p++)(d=b(f,o,p,l[p],u))&&(n&&null!==d.alternate&&f.delete(null===d.key?p:d.key),a=i(d,a,p),null===s?c=d:s.sibling=d,s=d);return n&&f.forEach(function(n){return t(o,n)}),c}function v(o,a,l,u){var c=Or(l);"function"!=typeof c&&d("150"),null==(l=c.call(l))&&d("151");for(var s=c=null,f=a,p=a=0,g=null,v=l.next();null!==f&&!v.done;p++,v=l.next()){f.index>p?(g=f,f=null):g=f.sibling;var y=h(o,f,v.value,u);if(null===y){f||(f=g);break}n&&f&&null===y.alternate&&t(o,f),a=i(y,a,p),null===s?c=y:s.sibling=y,s=y,f=g}if(v.done)return e(o,f),c;if(null===f){for(;!v.done;p++,v=l.next())null!==(v=m(o,v.value,u))&&(a=i(v,a,p),null===s?c=v:s.sibling=v,s=v);return c}for(f=r(o,f);!v.done;p++,v=l.next())null!==(v=b(f,o,p,v.value,u))&&(n&&null!==v.alternate&&f.delete(null===v.key?p:v.key),a=i(v,a,p),null===s?c=v:s.sibling=v,s=v);return n&&f.forEach(function(n){return t(o,n)}),c}return function(n,r,i,l){"object"==typeof i&&null!==i&&i.type===kr&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case vr:n:{var c=i.key;for(u=r;null!==u;){if(u.key===c){if(10===u.tag?i.type===kr:u.type===i.type){e(n,u.sibling),(r=o(u,i.type===kr?i.props.children:i.props,l)).ref=Sr(u,i),r.return=n,n=r;break n}e(n,u);break}t(n,u),u=u.sibling}i.type===kr?((r=tr(i.props.children,n.internalContextTag,l,i.key)).return=n,n=r):((l=nr(i,n.internalContextTag,l)).ref=Sr(r,i),l.return=n,n=l)}return a(n);case yr:n:{for(u=i.key;null!==r;){if(r.key===u){if(7===r.tag){e(n,r.sibling),(r=o(r,i,l)).return=n,n=r;break n}e(n,r);break}t(n,r),r=r.sibling}(r=rr(i,n.internalContextTag,l)).return=n,n=r}return a(n);case xr:n:{if(null!==r){if(9===r.tag){e(n,r.sibling),(r=o(r,null,l)).type=i.value,r.return=n,n=r;break n}e(n,r)}(r=or(i,n.internalContextTag,l)).type=i.value,r.return=n,n=r}return a(n);case wr:n:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){e(n,r.sibling),(r=o(r,i.children||[],l)).return=n,n=r;break n}e(n,r);break}t(n,r),r=r.sibling}(r=ir(i,n.internalContextTag,l)).return=n,n=r}return a(n)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(e(n,r.sibling),r=o(r,i,l)):(e(n,r),r=er(i,n.internalContextTag,l)),r.return=n,a(n=r);if(Er(i))return g(n,r,i,l);if(Or(i))return v(n,r,i,l);if(u&&jr(n,i),void 0===i)switch(n.tag){case 2:case 1:d("152",(l=n.type).displayName||l.name||"Component")}return e(n,r)}}var Cr=Pr(!0),Tr=Pr(!1);function Ir(n,t,e,r,o){function i(n,t,e){var r=t.expirationTime;t.child=null===n?Tr(t,null,e,r):Cr(t,n.child,e,r)}function a(n,t){var e=t.ref;null===e||n&&n.ref===e||(t.effectTag|=128)}function l(n,t,e,r){if(a(n,t),!e)return r&&Je(t,!1),s(n,t);e=t.stateNode,Bt.current=t;var o=e.render();return t.effectTag|=1,i(n,t,o),t.memoizedState=e.state,t.memoizedProps=e.props,r&&Je(t,!0),t.child}function u(n){var t=n.stateNode;t.pendingContext?Ge(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ge(0,t.context,!1),v(n,t.containerInfo)}function s(n,t){if(null!==n&&t.child!==n.child&&d("153"),null!==t.child){var e=Ze(n=t.child,n.pendingProps,n.expirationTime);for(t.child=e,e.return=t;null!==n.sibling;)n=n.sibling,(e=e.sibling=Ze(n,n.pendingProps,n.expirationTime)).return=t;e.sibling=null}return t.child}function f(n,t){switch(t.tag){case 3:u(t);break;case 2:Xe(t);break;case 4:v(t,t.stateNode.containerInfo)}return null}var m=n.shouldSetTextContent,h=n.useSyncScheduling,b=n.shouldDeprioritizeSubtree,g=t.pushHostContext,v=t.pushHostContainer,y=e.enterHydrationState,x=e.resetHydrationState,w=e.tryToClaimNextHydratableInstance,k=(n=function(n,t,e,r){function o(n,t){t.updater=i,n.stateNode=t,t._reactInternalFiber=n}var i={isMounted:Wt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=t(e);dr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,nextCallback:null,next:null}),n(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=t(e);dr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,nextCallback:null,next:null}),n(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=t(e);dr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,nextCallback:null,next:null}),n(e,o)}};return{adoptClassInstance:o,constructClassInstance:function(n,t){var e=n.type,r=We(n),i=2===n.tag&&null!=n.type.contextTypes,a=i?$e(n,r):p;return o(n,t=new e(t,a)),i&&((n=n.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,n.__reactInternalMemoizedMaskedChildContext=a),t},mountClassInstance:function(n,t){var e=n.alternate,r=n.stateNode,o=r.state||null,a=n.pendingProps;a||d("158");var l=We(n);r.props=a,r.state=n.memoizedState=o,r.refs=p,r.context=$e(n,l),null!=n.type&&null!=n.type.prototype&&!0===n.type.prototype.unstable_isAsyncReactComponent&&(n.internalContextTag|=1),"function"==typeof r.componentWillMount&&(o=r.state,r.componentWillMount(),o!==r.state&&i.enqueueReplaceState(r,r.state,null),null!==(o=n.updateQueue)&&(r.state=hr(e,n,o,r,a,t))),"function"==typeof r.componentDidMount&&(n.effectTag|=4)},updateClassInstance:function(n,t,o){var a=t.stateNode;a.props=t.memoizedProps,a.state=t.memoizedState;var l=t.memoizedProps,u=t.pendingProps;u||null==(u=l)&&d("159");var s=a.context,f=We(t);if(f=$e(t,f),"function"!=typeof a.componentWillReceiveProps||l===u&&s===f||(s=a.state,a.componentWillReceiveProps(u,f),a.state!==s&&i.enqueueReplaceState(a,a.state,null)),s=t.memoizedState,o=null!==t.updateQueue?hr(n,t,t.updateQueue,a,u,o):s,!(l!==u||s!==o||Ve.current||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof a.componentDidUpdate||l===n.memoizedProps&&s===n.memoizedState||(t.effectTag|=4),!1;var p=u;if(null===l||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)p=!0;else{var m=t.stateNode,h=t.type;p="function"==typeof m.shouldComponentUpdate?m.shouldComponentUpdate(p,o,f):!(h.prototype&&h.prototype.isPureReactComponent&&c(l,p)&&c(s,o))}return p?("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(u,o,f),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4)):("function"!=typeof a.componentDidUpdate||l===n.memoizedProps&&s===n.memoizedState||(t.effectTag|=4),e(t,u),r(t,o)),a.props=u,a.state=o,a.context=f,p}}}(r,o,function(n,t){n.memoizedProps=t},function(n,t){n.memoizedState=t})).adoptClassInstance,_=n.constructClassInstance,O=n.mountClassInstance,E=n.updateClassInstance;return{beginWork:function(n,t,e){if(0===t.expirationTime||t.expirationTime>e)return f(0,t);switch(t.tag){case 0:null!==n&&d("155");var r=t.type,o=t.pendingProps,c=We(t);return r=r(o,c=$e(t,c)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render?(t.tag=2,o=Xe(t),k(t,r),O(t,e),t=l(n,t,!0,o)):(t.tag=1,i(n,t,r),t.memoizedProps=o,t=t.child),t;case 1:n:{if(o=t.type,e=t.pendingProps,r=t.memoizedProps,Ve.current)null===e&&(e=r);else if(null===e||r===e){t=s(n,t);break n}o=o(e,r=$e(t,r=We(t))),t.effectTag|=1,i(n,t,o),t.memoizedProps=e,t=t.child}return t;case 2:return o=Xe(t),r=void 0,null===n?t.stateNode?d("153"):(_(t,t.pendingProps),O(t,e),r=!0):r=E(n,t,e),l(n,t,r,o);case 3:return u(t),null!==(o=t.updateQueue)?(r=t.memoizedState)===(o=hr(n,t,o,null,null,e))?(x(),t=s(n,t)):(r=o.element,c=t.stateNode,(null===n||null===n.child)&&c.hydrate&&y(t)?(t.effectTag|=2,t.child=Tr(t,null,r,e)):(x(),i(n,t,r)),t.memoizedState=o,t=t.child):(x(),t=s(n,t)),t;case 5:g(t),null===n&&w(t),o=t.type;var p=t.memoizedProps;return null===(r=t.pendingProps)&&(null===(r=p)&&d("154")),c=null!==n?n.memoizedProps:null,Ve.current||null!==r&&p!==r?(p=r.children,m(o,r)?p=null:c&&m(o,c)&&(t.effectTag|=16),a(n,t),2147483647!==e&&!h&&b(o,r)?(t.expirationTime=2147483647,t=null):(i(n,t,p),t.memoizedProps=r,t=t.child)):t=s(n,t),t;case 6:return null===n&&w(t),null===(n=t.pendingProps)&&(n=t.memoizedProps),t.memoizedProps=n,null;case 8:t.tag=7;case 7:return o=t.pendingProps,Ve.current?null===o&&(null===(o=n&&n.memoizedProps)&&d("154")):null!==o&&t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===n?Tr(t,t.stateNode,r,e):Cr(t,t.stateNode,r,e),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:n:{if(v(t,t.stateNode.containerInfo),o=t.pendingProps,Ve.current)null===o&&(null==(o=n&&n.memoizedProps)&&d("154"));else if(null===o||t.memoizedProps===o){t=s(n,t);break n}null===n?t.child=Cr(t,null,o,e):i(n,t,o),t.memoizedProps=o,t=t.child}return t;case 10:n:{if(e=t.pendingProps,Ve.current)null===e&&(e=t.memoizedProps);else if(null===e||t.memoizedProps===e){t=s(n,t);break n}i(n,t,e),t.memoizedProps=e,t=t.child}return t;default:d("156")}},beginFailedWork:function(n,t,e){switch(t.tag){case 2:Xe(t);break;case 3:u(t);break;default:d("157")}return t.effectTag|=64,null===n?t.child=null:t.child!==n.child&&(t.child=n.child),0===t.expirationTime||t.expirationTime>e?f(0,t):(t.firstEffect=null,t.lastEffect=null,t.child=null===n?Tr(t,null,null,e):Cr(t,n.child,null,e),2===t.tag&&(n=t.stateNode,t.memoizedProps=n.props,t.memoizedState=n.state),t.child)}}}var Rr={};function Mr(n){function t(n){ln=X=!0;var t=n.stateNode;if(t.current===n&&d("177"),t.isReadyForCommit=!1,Bt.current=null,1<n.effectTag)if(null!==n.lastEffect){n.lastEffect.nextEffect=n;var e=n.firstEffect}else e=n;else e=n.firstEffect;for($(),nn=e;null!==nn;){var r=!1,o=void 0;try{for(;null!==nn;){var i=nn.effectTag;if(16&i&&A(nn),128&i){var a=nn.alternate;null!==a&&F(a)}switch(-242&i){case 2:L(nn),nn.effectTag&=-3;break;case 6:L(nn),nn.effectTag&=-3,U(nn.alternate,nn);break;case 4:U(nn.alternate,nn);break;case 8:un=!0,N(nn),un=!1}nn=nn.nextEffect}}catch(n){r=!0,o=n}r&&(null===nn&&d("178"),l(nn,o),null!==nn&&(nn=nn.nextEffect))}for(q(),t.current=n,nn=e;null!==nn;){e=!1,r=void 0;try{for(;null!==nn;){var u=nn.effectTag;if(36&u&&D(nn.alternate,nn),128&u&&z(nn),64&u)switch(o=nn,i=void 0,null!==tn&&(i=tn.get(o),tn.delete(o),null==i&&null!==o.alternate&&(o=o.alternate,i=tn.get(o),tn.delete(o))),null==i&&d("184"),o.tag){case 2:o.stateNode.componentDidCatch(i.error,{componentStack:i.componentStack});break;case 3:null===on&&(on=i.error);break;default:d("157")}var c=nn.nextEffect;nn.nextEffect=null,nn=c}}catch(n){e=!0,r=n}e&&(null===nn&&d("178"),l(nn,r),null!==nn&&(nn=nn.nextEffect))}return X=ln=!1,cr(n.stateNode),rn&&(rn.forEach(b),rn=null),null!==on&&(n=on,on=null,O(n)),0===(t=t.current.expirationTime)&&(en=tn=null),t}function e(n){for(;;){var t=M(n.alternate,n,Z),e=n.return,r=n.sibling,o=n;if(2147483647===Z||2147483647!==o.expirationTime){if(2!==o.tag&&3!==o.tag)var i=0;else i=null===(i=o.updateQueue)?0:i.expirationTime;for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==e&&(null===e.firstEffect&&(e.firstEffect=n.firstEffect),null!==n.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=n.firstEffect),e.lastEffect=n.lastEffect),1<n.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=n:e.firstEffect=n,e.lastEffect=n)),null!==r)return r;if(null===e){n.stateNode.isReadyForCommit=!0;break}n=e}return null}function r(n){var t=I(n.alternate,n,Z);return null===t&&(t=e(n)),Bt.current=null,t}function o(n){var t=R(n.alternate,n,Z);return null===t&&(t=e(n)),Bt.current=null,t}function i(n){if(null!==tn){if(!(0===Z||Z>n))if(Z<=G)for(;null!==J;)J=u(J)?o(J):r(J);else for(;null!==J&&!_();)J=u(J)?o(J):r(J)}else if(!(0===Z||Z>n))if(Z<=G)for(;null!==J;)J=r(J);else for(;null!==J&&!_();)J=r(J)}function a(n,t){if(X&&d("243"),X=!0,n.isReadyForCommit=!1,n!==Q||t!==Z||null===J){for(;-1<De;)Ue[De]=null,De--;He=p,Be.current=p,Ve.current=!1,C(),Z=t,J=Ze((Q=n).current,null,t)}var e=!1,r=null;try{i(t)}catch(n){e=!0,r=n}for(;e;){if(an){on=r;break}var a=J;if(null===a)an=!0;else{var u=l(a,r);if(null===u&&d("183"),!an){try{for(r=t,u=e=u;null!==a;){switch(a.tag){case 2:Ke(a);break;case 5:P(a);break;case 3:j(a);break;case 4:j(a)}if(a===u||a.alternate===u)break;a=a.return}J=o(e),i(r)}catch(n){e=!0,r=n;continue}break}}}return t=on,an=X=!1,on=null,null!==t&&O(t),n.isReadyForCommit?n.current.alternate:null}function l(n,t){var e=Bt.current=null,r=!1,o=!1,i=null;if(3===n.tag)e=n,c(n)&&(an=!0);else for(var a=n.return;null!==a&&null===e;){if(2===a.tag?"function"==typeof a.stateNode.componentDidCatch&&(r=!0,i=Vt(a),e=a,o=!0):3===a.tag&&(e=a),c(a)){if(un||null!==rn&&(rn.has(a)||null!==a.alternate&&rn.has(a.alternate)))return null;e=null,o=!1}a=a.return}if(null!==e){null===en&&(en=new Set),en.add(e);var l="";a=n;do{n:switch(a.tag){case 0:case 1:case 2:case 5:var u=a._debugOwner,s=a._debugSource,f=Vt(a),p=null;u&&(p=Vt(u)),u=s,f="\n    in "+(f||"Unknown")+(u?" (at "+u.fileName.replace(/^.*[\\\/]/,"")+":"+u.lineNumber+")":p?" (created by "+p+")":"");break n;default:f=""}l+=f,a=a.return}while(a);a=l,n=Vt(n),null===tn&&(tn=new Map),t={componentName:n,componentStack:a,error:t,errorBoundary:r?e.stateNode:null,errorBoundaryFound:r,errorBoundaryName:i,willRetry:o},tn.set(e,t);try{var d=t.error;d&&d.suppressReactErrorLogging||console.error(d)}catch(n){n&&n.suppressReactErrorLogging||console.error(n)}return ln?(null===rn&&(rn=new Set),rn.add(e)):b(e),e}return null===on&&(on=t),null}function u(n){return null!==tn&&(tn.has(n)||null!==n.alternate&&tn.has(n.alternate))}function c(n){return null!==en&&(en.has(n)||null!==n.alternate&&en.has(n.alternate))}function s(){return 20*(1+((g()+100)/20|0))}function f(n){return 0!==Y?Y:X?ln?1:Z:!W||1&n.internalContextTag?s():1}function m(n,t){return h(n,t)}function h(n,t){for(;null!==n;){if((0===n.expirationTime||n.expirationTime>t)&&(n.expirationTime=t),null!==n.alternate&&(0===n.alternate.expirationTime||n.alternate.expirationTime>t)&&(n.alternate.expirationTime=t),null===n.return){if(3!==n.tag)break;var e=n.stateNode;!X&&e===Q&&t<Z&&(J=Q=null,Z=0);var r=e,o=t;if(_n>kn&&d("185"),null===r.nextScheduledRoot)r.remainingExpirationTime=o,null===sn?(cn=sn=r,r.nextScheduledRoot=r):(sn=sn.nextScheduledRoot=r).nextScheduledRoot=cn;else{var i=r.remainingExpirationTime;(0===i||o<i)&&(r.remainingExpirationTime=o)}dn||(xn?wn&&k(mn=r,hn=1):1===o?w(1,null):v(o)),!X&&e===Q&&t<Z&&(J=Q=null,Z=0)}n=n.return}}function b(n){h(n,1)}function g(){return G=2+((B()-K)/10|0)}function v(n){if(0!==fn){if(n>fn)return;H(pn)}var t=B()-K;fn=n,pn=V(x,{timeout:10*(n-2)-t})}function y(){var n=0,t=null;if(null!==sn)for(var e=sn,r=cn;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===e||null===sn)&&d("244"),r===r.nextScheduledRoot){cn=sn=r.nextScheduledRoot=null;break}if(r===cn)cn=o=r.nextScheduledRoot,sn.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===sn){(sn=e).nextScheduledRoot=cn,r.nextScheduledRoot=null;break}e.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=e.nextScheduledRoot}else{if((0===n||o<n)&&(n=o,t=r),r===sn)break;e=r,r=r.nextScheduledRoot}}null!==(e=mn)&&e===t?_n++:_n=0,mn=t,hn=n}function x(n){w(0,n)}function w(n,t){for(yn=t,y();null!==mn&&0!==hn&&(0===n||hn<=n)&&!bn;)k(mn,hn),y();if(null!==yn&&(fn=0,pn=-1),0!==hn&&v(hn),yn=null,bn=!1,_n=0,gn)throw n=vn,vn=null,gn=!1,n}function k(n,e){if(dn&&d("245"),dn=!0,e<=g()){var r=n.finishedWork;null!==r?(n.finishedWork=null,n.remainingExpirationTime=t(r)):(n.finishedWork=null,null!==(r=a(n,e))&&(n.remainingExpirationTime=t(r)))}else null!==(r=n.finishedWork)?(n.finishedWork=null,n.remainingExpirationTime=t(r)):(n.finishedWork=null,null!==(r=a(n,e))&&(_()?n.finishedWork=r:n.remainingExpirationTime=t(r)));dn=!1}function _(){return!(null===yn||yn.timeRemaining()>On)&&(bn=!0)}function O(n){null===mn&&d("246"),mn.remainingExpirationTime=0,gn||(gn=!0,vn=n)}var E=function(n){function t(n){return n===Rr&&d("174"),n}var e=n.getChildHostContext,r=n.getRootHostContext,o={current:Rr},i={current:Rr},a={current:Rr};return{getHostContext:function(){return t(o.current)},getRootHostContainer:function(){return t(a.current)},popHostContainer:function(n){ze(o),ze(i),ze(a)},popHostContext:function(n){i.current===n&&(ze(o),ze(i))},pushHostContainer:function(n,t){Fe(a,t),t=r(t),Fe(i,n),Fe(o,t)},pushHostContext:function(n){var r=t(a.current),l=t(o.current);l!==(r=e(l,n.type,r))&&(Fe(i,n),Fe(o,r))},resetHostContainer:function(){o.current=Rr,a.current=Rr}}}(n),S=function(n){function t(n,t){var e=new Qe(5,null,0);e.type="DELETED",e.stateNode=t,e.return=n,e.effectTag=8,null!==n.lastEffect?(n.lastEffect.nextEffect=e,n.lastEffect=e):n.firstEffect=n.lastEffect=e}function e(n,t){switch(n.tag){case 5:return null!==(t=i(t,n.type,n.pendingProps))&&(n.stateNode=t,!0);case 6:return null!==(t=a(t,n.pendingProps))&&(n.stateNode=t,!0);default:return!1}}function r(n){for(n=n.return;null!==n&&5!==n.tag&&3!==n.tag;)n=n.return;f=n}var o=n.shouldSetTextContent;if(!(n=n.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var i=n.canHydrateInstance,a=n.canHydrateTextInstance,l=n.getNextHydratableSibling,u=n.getFirstHydratableChild,c=n.hydrateInstance,s=n.hydrateTextInstance,f=null,p=null,m=!1;return{enterHydrationState:function(n){return p=u(n.stateNode.containerInfo),f=n,m=!0},resetHydrationState:function(){p=f=null,m=!1},tryToClaimNextHydratableInstance:function(n){if(m){var r=p;if(r){if(!e(n,r)){if(!(r=l(r))||!e(n,r))return n.effectTag|=2,m=!1,void(f=n);t(f,p)}f=n,p=u(r)}else n.effectTag|=2,m=!1,f=n}},prepareToHydrateHostInstance:function(n,t,e){return t=c(n.stateNode,n.type,n.memoizedProps,t,e,n),n.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(n){return s(n.stateNode,n.memoizedProps,n)},popHydrationState:function(n){if(n!==f)return!1;if(!m)return r(n),m=!0,!1;var e=n.type;if(5!==n.tag||"head"!==e&&"body"!==e&&!o(e,n.memoizedProps))for(e=p;e;)t(n,e),e=l(e);return r(n),p=f?l(n.stateNode):null,!0}}}(n),j=E.popHostContainer,P=E.popHostContext,C=E.resetHostContainer,T=Ir(n,E,S,m,f),I=T.beginWork,R=T.beginFailedWork,M=function(n,t,e){function r(n){n.effectTag|=4}var o=n.createInstance,i=n.createTextInstance,a=n.appendInitialChild,l=n.finalizeInitialChildren,u=n.prepareUpdate,c=n.persistence,s=t.getRootHostContainer,f=t.popHostContext,p=t.getHostContext,m=t.popHostContainer,h=e.prepareToHydrateHostInstance,b=e.prepareToHydrateHostTextInstance,g=e.popHydrationState,v=void 0,y=void 0,x=void 0;return n.mutation?(v=function(){},y=function(n,t,e){(t.updateQueue=e)&&r(t)},x=function(n,t,e,o){e!==o&&r(t)}):d(c?"235":"236"),{completeWork:function(n,t,e){var c=t.pendingProps;switch(null===c?c=t.memoizedProps:2147483647===t.expirationTime&&2147483647!==e||(t.pendingProps=null),t.tag){case 1:return null;case 2:return Ke(t),null;case 3:return m(t),ze(Ve),ze(Be),(c=t.stateNode).pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==n&&null!==n.child||(g(t),t.effectTag&=-3),v(t),null;case 5:f(t),e=s();var w=t.type;if(null!==n&&null!=t.stateNode){var k=n.memoizedProps,_=t.stateNode,O=p();_=u(_,w,k,c,e,O),y(n,t,_,w,k,c,e),n.ref!==t.ref&&(t.effectTag|=128)}else{if(!c)return null===t.stateNode&&d("166"),null;if(n=p(),g(t))h(t,e,n)&&r(t);else{n=o(w,c,e,n,t);n:for(k=t.child;null!==k;){if(5===k.tag||6===k.tag)a(n,k.stateNode);else if(4!==k.tag&&null!==k.child){k.child.return=k,k=k.child;continue}if(k===t)break;for(;null===k.sibling;){if(null===k.return||k.return===t)break n;k=k.return}k.sibling.return=k.return,k=k.sibling}l(n,w,c,e)&&r(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(n&&null!=t.stateNode)x(n,t,n.memoizedProps,c);else{if("string"!=typeof c)return null===t.stateNode&&d("166"),null;n=s(),e=p(),g(t)?b(t)&&r(t):t.stateNode=i(c,n,e,t)}return null;case 7:(c=t.memoizedProps)||d("165"),t.tag=8,w=[];n:for((k=t.stateNode)&&(k.return=t);null!==k;){if(5===k.tag||6===k.tag||4===k.tag)d("247");else if(9===k.tag)w.push(k.type);else if(null!==k.child){k.child.return=k,k=k.child;continue}for(;null===k.sibling;){if(null===k.return||k.return===t)break n;k=k.return}k.sibling.return=k.return,k=k.sibling}return c=(k=c.handler)(c.props,w),t.child=Cr(t,null!==n?n.child:null,c,e),t.child;case 8:return t.tag=7,null;case 9:case 10:return null;case 4:return m(t),v(t),null;case 0:d("167");default:d("156")}}}}(n,E,S).completeWork,A=(E=function(n,t){function e(n){var e=n.ref;if(null!==e)try{e(null)}catch(e){t(n,e)}}function r(n){switch(sr(n),n.tag){case 2:e(n);var r=n.stateNode;if("function"==typeof r.componentWillUnmount)try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){t(n,e)}break;case 5:e(n);break;case 7:o(n.stateNode);break;case 4:u&&a(n)}}function o(n){for(var t=n;;)if(r(t),null===t.child||u&&4===t.tag){if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function i(n){return 5===n.tag||3===n.tag||4===n.tag}function a(n){for(var t=n,e=!1,i=void 0,a=void 0;;){if(!e){e=t.return;n:for(;;){switch(null===e&&d("160"),e.tag){case 5:i=e.stateNode,a=!1;break n;case 3:case 4:i=e.stateNode.containerInfo,a=!0;break n}e=e.return}e=!0}if(5===t.tag||6===t.tag)o(t),a?y(i,t.stateNode):v(i,t.stateNode);else if(4===t.tag?i=t.stateNode.containerInfo:r(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;4===(t=t.return).tag&&(e=!1)}t.sibling.return=t.return,t=t.sibling}}var l=n.getPublicInstance,u=n.mutation;n=n.persistence,u||d(n?"235":"236");var c=u.commitMount,s=u.commitUpdate,f=u.resetTextContent,p=u.commitTextUpdate,m=u.appendChild,h=u.appendChildToContainer,b=u.insertBefore,g=u.insertInContainerBefore,v=u.removeChild,y=u.removeChildFromContainer;return{commitResetTextContent:function(n){f(n.stateNode)},commitPlacement:function(n){n:{for(var t=n.return;null!==t;){if(i(t)){var e=t;break n}t=t.return}d("160"),e=void 0}var r=t=void 0;switch(e.tag){case 5:t=e.stateNode,r=!1;break;case 3:case 4:t=e.stateNode.containerInfo,r=!0;break;default:d("161")}16&e.effectTag&&(f(t),e.effectTag&=-17);n:t:for(e=n;;){for(;null===e.sibling;){if(null===e.return||i(e.return)){e=null;break n}e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag;){if(2&e.effectTag)continue t;if(null===e.child||4===e.tag)continue t;e.child.return=e,e=e.child}if(!(2&e.effectTag)){e=e.stateNode;break n}}for(var o=n;;){if(5===o.tag||6===o.tag)e?r?g(t,o.stateNode,e):b(t,o.stateNode,e):r?h(t,o.stateNode):m(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===n)break;for(;null===o.sibling;){if(null===o.return||o.return===n)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(n){a(n),n.return=null,n.child=null,n.alternate&&(n.alternate.child=null,n.alternate.return=null)},commitWork:function(n,t){switch(t.tag){case 2:break;case 5:var e=t.stateNode;if(null!=e){var r=t.memoizedProps;n=null!==n?n.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&s(e,i,o,n,r,t)}break;case 6:null===t.stateNode&&d("162"),e=t.memoizedProps,p(t.stateNode,null!==n?n.memoizedProps:e,e);break;case 3:break;default:d("163")}},commitLifeCycles:function(n,t){switch(t.tag){case 2:var e=t.stateNode;if(4&t.effectTag)if(null===n)e.props=t.memoizedProps,e.state=t.memoizedState,e.componentDidMount();else{var r=n.memoizedProps;n=n.memoizedState,e.props=t.memoizedProps,e.state=t.memoizedState,e.componentDidUpdate(r,n)}null!==(t=t.updateQueue)&&br(t,e);break;case 3:null!==(e=t.updateQueue)&&br(e,null!==t.child?t.child.stateNode:null);break;case 5:e=t.stateNode,null===n&&4&t.effectTag&&c(e,t.type,t.memoizedProps,t);break;case 6:case 4:break;default:d("163")}},commitAttachRef:function(n){var t=n.ref;if(null!==t){var e=n.stateNode;switch(n.tag){case 5:t(l(e));break;default:t(e)}}},commitDetachRef:function(n){null!==(n=n.ref)&&n(null)}}}(n,l)).commitResetTextContent,L=E.commitPlacement,N=E.commitDeletion,U=E.commitWork,D=E.commitLifeCycles,z=E.commitAttachRef,F=E.commitDetachRef,B=n.now,V=n.scheduleDeferredCallback,H=n.cancelDeferredCallback,W=n.useSyncScheduling,$=n.prepareForCommit,q=n.resetAfterCommit,K=B(),G=2,Y=0,X=!1,J=null,Q=null,Z=0,nn=null,tn=null,en=null,rn=null,on=null,an=!1,ln=!1,un=!1,cn=null,sn=null,fn=0,pn=-1,dn=!1,mn=null,hn=0,bn=!1,gn=!1,vn=null,yn=null,xn=!1,wn=!1,kn=1e3,_n=0,On=1;return{computeAsyncExpiration:s,computeExpirationForFiber:f,scheduleWork:m,batchedUpdates:function(n,t){var e=xn;xn=!0;try{return n(t)}finally{(xn=e)||dn||w(1,null)}},unbatchedUpdates:function(n){if(xn&&!wn){wn=!0;try{return n()}finally{wn=!1}}return n()},flushSync:function(n){var t=xn;xn=!0;try{n:{var e=Y;Y=1;try{var r=n();break n}finally{Y=e}r=void 0}return r}finally{xn=t,dn&&d("187"),w(1,null)}},deferredUpdates:function(n){var t=Y;Y=s();try{return n()}finally{Y=t}}}}function Ar(n){function t(n){return null===(n=function(n){if(!(n=qt(n)))return null;for(var t=n;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===n)break;for(;!t.sibling;){if(!t.return||t.return===n)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(n))?null:n.stateNode}var e=n.getPublicInstance,r=(n=Mr(n)).computeAsyncExpiration,o=n.computeExpirationForFiber,a=n.scheduleWork;return{createContainer:function(n,t){var e=new Qe(3,null,0);return n={current:e,containerInfo:n,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:t,nextScheduledRoot:null},e.stateNode=n},updateContainer:function(n,t,e,i){var l=t.current;if(e){var u;e=e._reactInternalFiber;n:{for(2===Ht(e)&&2===e.tag||d("170"),u=e;3!==u.tag;){if(qe(u)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break n}(u=u.return)||d("171")}u=u.stateNode.context}e=qe(e)?Ye(e,u):u}else e=p;null===t.context?t.context=e:t.pendingContext=e,t=void 0===(t=i)?null:t,dr(l,{expirationTime:i=null!=n&&null!=n.type&&null!=n.type.prototype&&!0===n.type.prototype.unstable_isAsyncReactComponent?r():o(l),partialState:{element:n},callback:t,isReplace:!1,isForced:!1,nextCallback:null,next:null}),a(l,i)},batchedUpdates:n.batchedUpdates,unbatchedUpdates:n.unbatchedUpdates,deferredUpdates:n.deferredUpdates,flushSync:n.flushSync,getPublicRootInstance:function(n){if(!(n=n.current).child)return null;switch(n.child.tag){case 5:return e(n.child.stateNode);default:return n.child.stateNode}},findHostInstance:t,findHostInstanceWithNoPortals:function(n){return null===(n=function(n){if(!(n=qt(n)))return null;for(var t=n;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===n)break;for(;!t.sibling;){if(!t.return||t.return===n)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(n))?null:n.stateNode},injectIntoDevTools:function(n){var e=n.findFiberByHostInstance;return function(n){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var e=t.inject(n);ar=ur(function(n){return t.onCommitFiberRoot(e,n)}),lr=ur(function(n){return t.onCommitFiberUnmount(e,n)})}catch(n){}return!0}(i({},n,{findHostInstanceByFiber:function(n){return t(n)},findFiberByHostInstance:function(n){return e?e(n):null}}))}}}var Lr=Object.freeze({default:Ar}),Nr=Lr&&Ar||Lr,Ur=Nr.default?Nr.default:Nr;var Dr="object"==typeof performance&&"function"==typeof performance.now,zr=void 0;zr=Dr?function(){return performance.now()}:function(){return Date.now()};var Fr=void 0,Br=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Vr,Hr=null,Wr=!1,$r=-1,qr=!1,Kr=0,Gr=33,Yr=33;Vr=Dr?{didTimeout:!1,timeRemaining:function(){var n=Kr-performance.now();return 0<n?n:0}}:{didTimeout:!1,timeRemaining:function(){var n=Kr-Date.now();return 0<n?n:0}};var Xr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(n){if(n.source===window&&n.data===Xr){if(Wr=!1,n=zr(),0>=Kr-n){if(!(-1!==$r&&$r<=n))return void(qr||(qr=!0,requestAnimationFrame(Jr)));Vr.didTimeout=!0}else Vr.didTimeout=!1;$r=-1,n=Hr,Hr=null,null!==n&&n(Vr)}},!1);var Jr=function(n){qr=!1;var t=n-Kr+Yr;t<Yr&&Gr<Yr?(8>t&&(t=8),Yr=t<Gr?Gr:t):Gr=t,Kr=n+Yr,Wr||(Wr=!0,window.postMessage(Xr,"*"))};Fr=function(n,t){return Hr=n,null!=t&&"number"==typeof t.timeout&&($r=zr()+t.timeout),qr||(qr=!0,requestAnimationFrame(Jr)),0},Br=function(){Hr=null,Wr=!1,$r=-1}}else Fr=window.requestIdleCallback,Br=window.cancelIdleCallback;else Fr=function(n){return setTimeout(function(){n({timeRemaining:function(){return 1/0}})})},Br=function(n){clearTimeout(n)};var Qr=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Zr={},no={};function to(n,t,e){var r=y(t);if(r&&v(t,e)){var o=r.mutationMethod;o?o(n,e):null==e||r.hasBooleanValue&&!e||r.hasNumericValue&&isNaN(e)||r.hasPositiveNumericValue&&1>e||r.hasOverloadedBooleanValue&&!1===e?ro(n,t):r.mustUseProperty?n[r.propertyName]=e:(t=r.attributeName,(o=r.attributeNamespace)?n.setAttributeNS(o,t,""+e):r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===e?n.setAttribute(t,""):n.setAttribute(t,""+e))}else eo(n,t,v(t,e)?e:null)}function eo(n,t,e){(function(n){return!!no.hasOwnProperty(n)||!Zr.hasOwnProperty(n)&&(Qr.test(n)?no[n]=!0:(Zr[n]=!0,!1))})(t)&&(null==e?n.removeAttribute(t):n.setAttribute(t,""+e))}function ro(n,t){var e=y(t);e?(t=e.mutationMethod)?t(n,void 0):e.mustUseProperty?n[e.propertyName]=!e.hasBooleanValue&&"":n.removeAttribute(e.attributeName):n.removeAttribute(t)}function oo(n,t){var e=t.value,r=t.checked;return i({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=e?e:n._wrapperState.initialValue,checked:null!=r?r:n._wrapperState.initialChecked})}function io(n,t){var e=t.defaultValue;n._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:e,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ao(n,t){null!=(t=t.checked)&&to(n,"checked",t)}function lo(n,t){ao(n,t);var e=t.value;null!=e?0===e&&""===n.value?n.value="0":"number"===t.type?(e!=(t=parseFloat(n.value)||0)||e==t&&n.value!=e)&&(n.value=""+e):n.value!==""+e&&(n.value=""+e):(null==t.value&&null!=t.defaultValue&&n.defaultValue!==""+t.defaultValue&&(n.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(n.defaultChecked=!!t.defaultChecked))}function uo(n,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":n.value="",n.value=n.defaultValue;break;default:n.value=n.value}""!==(t=n.name)&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==t&&(n.name=t)}function co(n,t){return n=i({children:void 0},t),(t=function(n){var t="";return r.Children.forEach(n,function(n){null==n||"string"!=typeof n&&"number"!=typeof n||(t+=n)}),t}(t.children))&&(n.children=t),n}function so(n,t,e,r){if(n=n.options,t){t={};for(var o=0;o<e.length;o++)t["$"+e[o]]=!0;for(e=0;e<n.length;e++)o=t.hasOwnProperty("$"+n[e].value),n[e].selected!==o&&(n[e].selected=o),o&&r&&(n[e].defaultSelected=!0)}else{for(e=""+e,t=null,o=0;o<n.length;o++){if(n[o].value===e)return n[o].selected=!0,void(r&&(n[o].defaultSelected=!0));null!==t||n[o].disabled||(t=n[o])}null!==t&&(t.selected=!0)}}function fo(n,t){var e=t.value;n._wrapperState={initialValue:null!=e?e:t.defaultValue,wasMultiple:!!t.multiple}}function po(n,t){return null!=t.dangerouslySetInnerHTML&&d("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+n._wrapperState.initialValue})}function mo(n,t){var e=t.value;null==e&&(e=t.defaultValue,null!=(t=t.children)&&(null!=e&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),e=""+t),null==e&&(e="")),n._wrapperState={initialValue:""+e}}function ho(n,t){var e=t.value;null!=e&&((e=""+e)!==n.value&&(n.value=e),null==t.defaultValue&&(n.defaultValue=e)),null!=t.defaultValue&&(n.defaultValue=t.defaultValue)}function bo(n){var t=n.textContent;t===n._wrapperState.initialValue&&(n.value=t)}var go="http://www.w3.org/1999/xhtml",vo="http://www.w3.org/2000/svg";function yo(n){switch(n){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function xo(n,t){return null==n||"http://www.w3.org/1999/xhtml"===n?yo(t):"http://www.w3.org/2000/svg"===n&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":n}var wo,ko=void 0,_o=(wo=function(n,t){if(n.namespaceURI!==vo||"innerHTML"in n)n.innerHTML=t;else{for((ko=ko||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=ko.firstChild;n.firstChild;)n.removeChild(n.firstChild);for(;t.firstChild;)n.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(n,t,e,r){MSApp.execUnsafeLocalFunction(function(){return wo(n,t)})}:wo);function Oo(n,t){if(t){var e=n.firstChild;if(e&&e===n.lastChild&&3===e.nodeType)return void(e.nodeValue=t)}n.textContent=t}var Eo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},So=["Webkit","ms","Moz","O"];function jo(n,t){for(var e in n=n.style,t)if(t.hasOwnProperty(e)){var r=0===e.indexOf("--"),o=e,i=t[e];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Eo.hasOwnProperty(o)&&Eo[o]?(""+i).trim():i+"px","float"===e&&(e="cssFloat"),r?n.setProperty(e,o):n[e]=o}}Object.keys(Eo).forEach(function(n){So.forEach(function(t){t=t+n.charAt(0).toUpperCase()+n.substring(1),Eo[t]=Eo[n]})});var Po=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Co(n,t,e){t&&(Po[n]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",n,e()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",e()))}function To(n,t){if(-1===n.indexOf("-"))return"string"==typeof t.is;switch(n){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Io=go,Ro=a.thatReturns("");function Mo(n,t){var e=fe(n=9===n.nodeType||11===n.nodeType?n:n.ownerDocument);t=H[t];for(var r=0;r<t.length;r++){var o=t[r];e.hasOwnProperty(o)&&e[o]||("topScroll"===o?Zt("topScroll","scroll",n):"topFocus"===o||"topBlur"===o?(Zt("topFocus","focus",n),Zt("topBlur","blur",n),e.topBlur=!0,e.topFocus=!0):"topCancel"===o?(ht("cancel",!0)&&Zt("topCancel","cancel",n),e.topCancel=!0):"topClose"===o?(ht("close",!0)&&Zt("topClose","close",n),e.topClose=!0):le.hasOwnProperty(o)&&Qt(o,le[o],n),e[o]=!0)}}var Ao={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function Lo(n,t,e,r){return e=9===e.nodeType?e:e.ownerDocument,r===Io&&(r=yo(n)),r===Io?"script"===n?((n=e.createElement("div")).innerHTML="<script><\/script>",n=n.removeChild(n.firstChild)):n="string"==typeof t.is?e.createElement(n,{is:t.is}):e.createElement(n):n=e.createElementNS(r,n),n}function No(n,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(n)}function Uo(n,t,e,r){var o=To(t,e);switch(t){case"iframe":case"object":Qt("topLoad","load",n);var l=e;break;case"video":case"audio":for(l in Ao)Ao.hasOwnProperty(l)&&Qt(l,Ao[l],n);l=e;break;case"source":Qt("topError","error",n),l=e;break;case"img":case"image":Qt("topError","error",n),Qt("topLoad","load",n),l=e;break;case"form":Qt("topReset","reset",n),Qt("topSubmit","submit",n),l=e;break;case"details":Qt("topToggle","toggle",n),l=e;break;case"input":io(n,e),l=oo(n,e),Qt("topInvalid","invalid",n),Mo(r,"onChange");break;case"option":l=co(n,e);break;case"select":fo(n,e),l=i({},e,{value:void 0}),Qt("topInvalid","invalid",n),Mo(r,"onChange");break;case"textarea":mo(n,e),l=po(n,e),Qt("topInvalid","invalid",n),Mo(r,"onChange");break;default:l=e}Co(t,l,Ro);var u,c=l;for(u in c)if(c.hasOwnProperty(u)){var s=c[u];"style"===u?jo(n,s):"dangerouslySetInnerHTML"===u?null!=(s=s?s.__html:void 0)&&_o(n,s):"children"===u?"string"==typeof s?("textarea"!==t||""!==s)&&Oo(n,s):"number"==typeof s&&Oo(n,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(V.hasOwnProperty(u)?null!=s&&Mo(r,u):o?eo(n,u,s):null!=s&&to(n,u,s))}switch(t){case"input":gt(n),uo(n,e);break;case"textarea":gt(n),bo(n);break;case"option":null!=e.value&&n.setAttribute("value",e.value);break;case"select":n.multiple=!!e.multiple,null!=(t=e.value)?so(n,!!e.multiple,t,!1):null!=e.defaultValue&&so(n,!!e.multiple,e.defaultValue,!0);break;default:"function"==typeof l.onClick&&(n.onclick=a)}}function Do(n,t,e,r,o){var l,u,c=null;switch(t){case"input":e=oo(n,e),r=oo(n,r),c=[];break;case"option":e=co(n,e),r=co(n,r),c=[];break;case"select":e=i({},e,{value:void 0}),r=i({},r,{value:void 0}),c=[];break;case"textarea":e=po(n,e),r=po(n,r),c=[];break;default:"function"!=typeof e.onClick&&"function"==typeof r.onClick&&(n.onclick=a)}for(l in Co(t,r,Ro),n=null,e)if(!r.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l)for(u in t=e[l])t.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(V.hasOwnProperty(l)?c||(c=[]):(c=c||[]).push(l,null));for(l in r){var s=r[l];if(t=null!=e?e[l]:void 0,r.hasOwnProperty(l)&&s!==t&&(null!=s||null!=t))if("style"===l)if(t){for(u in t)!t.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&t[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(c||(c=[]),c.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,t=t?t.__html:void 0,null!=s&&t!==s&&(c=c||[]).push(l,""+s)):"children"===l?t===s||"string"!=typeof s&&"number"!=typeof s||(c=c||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(V.hasOwnProperty(l)?(null!=s&&Mo(o,l),c||t===s||(c=[])):(c=c||[]).push(l,s))}return n&&(c=c||[]).push("style",n),c}function zo(n,t,e,r,o){"input"===e&&"radio"===o.type&&null!=o.name&&ao(n,o),To(e,r),r=To(e,o);for(var i=0;i<t.length;i+=2){var a=t[i],l=t[i+1];"style"===a?jo(n,l):"dangerouslySetInnerHTML"===a?_o(n,l):"children"===a?Oo(n,l):r?null!=l?eo(n,a,l):n.removeAttribute(a):null!=l?to(n,a,l):ro(n,a)}switch(e){case"input":lo(n,o);break;case"textarea":ho(n,o);break;case"select":n._wrapperState.initialValue=void 0,t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!o.multiple,null!=(e=o.value)?so(n,!!o.multiple,e,!1):t!==!!o.multiple&&(null!=o.defaultValue?so(n,!!o.multiple,o.defaultValue,!0):so(n,!!o.multiple,o.multiple?[]:"",!1))}}function Fo(n,t,e,r,o){switch(t){case"iframe":case"object":Qt("topLoad","load",n);break;case"video":case"audio":for(var i in Ao)Ao.hasOwnProperty(i)&&Qt(i,Ao[i],n);break;case"source":Qt("topError","error",n);break;case"img":case"image":Qt("topError","error",n),Qt("topLoad","load",n);break;case"form":Qt("topReset","reset",n),Qt("topSubmit","submit",n);break;case"details":Qt("topToggle","toggle",n);break;case"input":io(n,e),Qt("topInvalid","invalid",n),Mo(o,"onChange");break;case"select":fo(n,e),Qt("topInvalid","invalid",n),Mo(o,"onChange");break;case"textarea":mo(n,e),Qt("topInvalid","invalid",n),Mo(o,"onChange")}for(var l in Co(t,e,Ro),r=null,e)e.hasOwnProperty(l)&&(i=e[l],"children"===l?"string"==typeof i?n.textContent!==i&&(r=["children",i]):"number"==typeof i&&n.textContent!==""+i&&(r=["children",""+i]):V.hasOwnProperty(l)&&null!=i&&Mo(o,l));switch(t){case"input":gt(n),uo(n,e);break;case"textarea":gt(n),bo(n);break;case"select":case"option":break;default:"function"==typeof e.onClick&&(n.onclick=a)}return r}function Bo(n,t){return n.nodeValue!==t}var Vo=Object.freeze({createElement:Lo,createTextNode:No,setInitialProperties:Uo,diffProperties:Do,updateProperties:zo,diffHydratedProperties:Fo,diffHydratedText:Bo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(n,t,e){switch(t){case"input":if(lo(n,e),t=e.name,"radio"===e.type&&null!=t){for(e=n;e.parentNode;)e=e.parentNode;for(e=e.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<e.length;t++){var r=e[t];if(r!==n&&r.form===n.form){var o=hn(r);o||d("90"),vt(r),lo(r,o)}}}break;case"textarea":ho(n,e);break;case"select":null!=(t=e.value)&&so(n,!!e.multiple,t,!1)}}});ot.injectFiberControlledHostComponent(Vo);var Ho=null,Wo=null;function $o(n){return!(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType&&(8!==n.nodeType||" react-mount-point-unstable "!==n.nodeValue))}var qo=Ur({getRootHostContext:function(n){var t=n.nodeType;switch(t){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:xo(null,"");break;default:n=xo(n=(t=8===t?n.parentNode:n).namespaceURI||null,t=t.tagName)}return n},getChildHostContext:function(n,t){return xo(n,t)},getPublicInstance:function(n){return n},prepareForCommit:function(){Ho=Yt;var n=u();if(me(n)){if("selectionStart"in n)var t={start:n.selectionStart,end:n.selectionEnd};else n:{var e=window.getSelection&&window.getSelection();if(e&&0!==e.rangeCount){t=e.anchorNode;var r=e.anchorOffset,o=e.focusNode;e=e.focusOffset;try{t.nodeType,o.nodeType}catch(n){t=null;break n}var i=0,a=-1,l=-1,c=0,s=0,f=n,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==e&&3!==f.nodeType||(l=i+e),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===n)break t;if(p===t&&++c===r&&(a=i),p===o&&++s===e&&(l=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;Wo={focusedElem:n,selectionRange:t},Jt(!1)},resetAfterCommit:function(){var n=Wo,t=u(),e=n.focusedElem,r=n.selectionRange;if(t!==e&&s(document.documentElement,e)){if(me(e))if(t=r.start,void 0===(n=r.end)&&(n=t),"selectionStart"in e)e.selectionStart=t,e.selectionEnd=Math.min(n,e.value.length);else if(window.getSelection){t=window.getSelection();var o=e[Pn()].length;n=Math.min(r.start,o),r=void 0===r.end?n:Math.min(r.end,o),!t.extend&&n>r&&(o=r,r=n,n=o),o=de(e,n);var i=de(e,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),n>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],n=e;n=n.parentNode;)1===n.nodeType&&t.push({element:n,left:n.scrollLeft,top:n.scrollTop});for(f(e),e=0;e<t.length;e++)(n=t[e]).element.scrollLeft=n.left,n.element.scrollTop=n.top}Wo=null,Jt(Ho),Ho=null},createInstance:function(n,t,e,r,o){return(n=Lo(n,t,e,r))[fn]=o,n[pn]=t,n},appendInitialChild:function(n,t){n.appendChild(t)},finalizeInitialChildren:function(n,t,e,r){Uo(n,t,e,r);n:{switch(t){case"button":case"input":case"select":case"textarea":n=!!e.autoFocus;break n}n=!1}return n},prepareUpdate:function(n,t,e,r,o){return Do(n,t,e,r,o)},shouldSetTextContent:function(n,t){return"textarea"===n||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(n,t){return!!t.hidden},createTextInstance:function(n,t,e,r){return(n=No(n,t))[fn]=r,n},now:zr,mutation:{commitMount:function(n){n.focus()},commitUpdate:function(n,t,e,r,o){n[pn]=o,zo(n,t,e,r,o)},resetTextContent:function(n){n.textContent=""},commitTextUpdate:function(n,t,e){n.nodeValue=e},appendChild:function(n,t){n.appendChild(t)},appendChildToContainer:function(n,t){8===n.nodeType?n.parentNode.insertBefore(t,n):n.appendChild(t)},insertBefore:function(n,t,e){n.insertBefore(t,e)},insertInContainerBefore:function(n,t,e){8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e)},removeChild:function(n,t){n.removeChild(t)},removeChildFromContainer:function(n,t){8===n.nodeType?n.parentNode.removeChild(t):n.removeChild(t)}},hydration:{canHydrateInstance:function(n,t){return 1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n},canHydrateTextInstance:function(n,t){return""===t||3!==n.nodeType?null:n},getNextHydratableSibling:function(n){for(n=n.nextSibling;n&&1!==n.nodeType&&3!==n.nodeType;)n=n.nextSibling;return n},getFirstHydratableChild:function(n){for(n=n.firstChild;n&&1!==n.nodeType&&3!==n.nodeType;)n=n.nextSibling;return n},hydrateInstance:function(n,t,e,r,o,i){return n[fn]=i,n[pn]=e,Fo(n,t,e,o,r)},hydrateTextInstance:function(n,t,e){return n[fn]=e,Bo(n,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Fr,cancelDeferredCallback:Br,useSyncScheduling:!0});function Ko(n,t,e,r,o){$o(e)||d("200");var i=e._reactRootContainer;if(i)qo.updateContainer(t,i,n,o);else{if(!(r=r||function(n){return!(!(n=n?9===n.nodeType?n.documentElement:n.firstChild:null)||1!==n.nodeType||!n.hasAttribute("data-reactroot"))}(e)))for(i=void 0;i=e.lastChild;)e.removeChild(i);var a=qo.createContainer(e,r);i=e._reactRootContainer=a,qo.unbatchedUpdates(function(){qo.updateContainer(t,a,n,o)})}return qo.getPublicRootInstance(i)}function Go(n,t){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return $o(t)||d("200"),function(n,t,e){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wr,key:null==r?null:""+r,children:n,containerInfo:t,implementation:e}}(n,t,null,e)}function Yo(n,t){this._reactRootContainer=qo.createContainer(n,t)}ut=qo.batchedUpdates,Yo.prototype.render=function(n,t){qo.updateContainer(n,this._reactRootContainer,null,t)},Yo.prototype.unmount=function(n){qo.updateContainer(null,this._reactRootContainer,null,n)};var Xo={createPortal:Go,findDOMNode:function(n){if(null==n)return null;if(1===n.nodeType)return n;var t=n._reactInternalFiber;if(t)return qo.findHostInstance(t);"function"==typeof n.render?d("188"):d("213",Object.keys(n))},hydrate:function(n,t,e){return Ko(null,n,t,!0,e)},render:function(n,t,e){return Ko(null,n,t,!1,e)},unstable_renderSubtreeIntoContainer:function(n,t,e,r){return(null==n||void 0===n._reactInternalFiber)&&d("38"),Ko(n,t,e,!1,r)},unmountComponentAtNode:function(n){return $o(n)||d("40"),!!n._reactRootContainer&&(qo.unbatchedUpdates(function(){Ko(null,null,n,!1,function(){n._reactRootContainer=null})}),!0)},unstable_createPortal:Go,unstable_batchedUpdates:st,unstable_deferredUpdates:qo.deferredUpdates,flushSync:qo.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:cn,EventPluginRegistry:q,EventPropagators:Sn,ReactControlledComponent:lt,ReactDOMComponentTree:bn,ReactDOMEventListener:te}};qo.injectIntoDevTools({findFiberByHostInstance:dn,bundleType:0,version:"16.2.0",rendererPackageName:"react-dom"});var Jo=Object.freeze({default:Xo}),Qo=Jo&&Xo||Jo;n.exports=Qo.default?Qo.default:Qo},function(n,t,e){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};n.exports=o},function(n,t,e){"use strict";var r=e(82),o={listen:function(n,t,e){return n.addEventListener?(n.addEventListener(t,e,!1),{remove:function(){n.removeEventListener(t,e,!1)}}):n.attachEvent?(n.attachEvent("on"+t,e),{remove:function(){n.detachEvent("on"+t,e)}}):void 0},capture:function(n,t,e){return n.addEventListener?(n.addEventListener(t,e,!0),{remove:function(){n.removeEventListener(t,e,!0)}}):{remove:r}},registerDefault:function(){}};n.exports=o},function(n,t,e){"use strict";n.exports=function(n){if(void 0===(n=n||("undefined"!=typeof document?document:void 0)))return null;try{return n.activeElement||n.body}catch(t){return n.body}}},function(n,t,e){"use strict";var r=Object.prototype.hasOwnProperty;function o(n,t){return n===t?0!==n||0!==t||1/n==1/t:n!=n&&t!=t}n.exports=function(n,t){if(o(n,t))return!0;if("object"!=typeof n||null===n||"object"!=typeof t||null===t)return!1;var e=Object.keys(n),i=Object.keys(t);if(e.length!==i.length)return!1;for(var a=0;a<e.length;a++)if(!r.call(t,e[a])||!o(n[e[a]],t[e[a]]))return!1;return!0}},function(n,t,e){"use strict";var r=e(387);n.exports=function n(t,e){return!(!t||!e)&&(t===e||!r(t)&&(r(e)?n(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}},function(n,t,e){"use strict";var r=e(388);n.exports=function(n){return r(n)&&3==n.nodeType}},function(n,t,e){"use strict";n.exports=function(n){var t=(n?n.ownerDocument||n:document).defaultView||window;return!(!n||!("function"==typeof t.Node?n instanceof t.Node:"object"==typeof n&&"number"==typeof n.nodeType&&"string"==typeof n.nodeName))}},function(n,t,e){"use strict";n.exports=function(n){try{n.focus()}catch(n){}}},function(n,t,e){var r=e(391);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(63)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){(n.exports=e(62)(!1)).push([n.i,'/*!\n * Bootstrap v4.0.0 (https://getbootstrap.com)\n * Copyright 2011-2018 The Bootstrap Authors\n * Copyright 2011-2018 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n:root {\n  --blue: #007bff;\n  --indigo: #6610f2;\n  --purple: #6f42c1;\n  --pink: #e83e8c;\n  --red: #dc3545;\n  --orange: #fd7e14;\n  --yellow: #ffc107;\n  --green: #28a745;\n  --teal: #20c997;\n  --cyan: #17a2b8;\n  --white: #fff;\n  --gray: #6c757d;\n  --gray-dark: #343a40;\n  --primary: #007bff;\n  --secondary: #6c757d;\n  --success: #28a745;\n  --info: #17a2b8;\n  --warning: #ffc107;\n  --danger: #dc3545;\n  --light: #f8f9fa;\n  --dark: #343a40;\n  --breakpoint-xs: 0;\n  --breakpoint-sm: 576px;\n  --breakpoint-md: 768px;\n  --breakpoint-lg: 992px;\n  --breakpoint-xl: 1200px;\n  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: sans-serif;\n  line-height: 1.15;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n  -ms-overflow-style: scrollbar;\n  -webkit-tap-highlight-color: transparent;\n}\n\n@-ms-viewport {\n  width: device-width;\n}\n\narticle, aside, dialog, figcaption, figure, footer, header, hgroup, main, nav, section {\n  display: block;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  text-align: left;\n  background-color: #fff;\n}\n\n[tabindex="-1"]:focus {\n  outline: 0 !important;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin-top: 0;\n  margin-bottom: 0.5rem;\n}\n\np {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\nabbr[title],\nabbr[data-original-title] {\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n  text-decoration: underline dotted;\n  cursor: help;\n  border-bottom: 0;\n}\n\naddress {\n  margin-bottom: 1rem;\n  font-style: normal;\n  line-height: inherit;\n}\n\nol,\nul,\ndl {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\nol ol,\nul ul,\nol ul,\nul ol {\n  margin-bottom: 0;\n}\n\ndt {\n  font-weight: 700;\n}\n\ndd {\n  margin-bottom: .5rem;\n  margin-left: 0;\n}\n\nblockquote {\n  margin: 0 0 1rem;\n}\n\ndfn {\n  font-style: italic;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\nsmall {\n  font-size: 80%;\n}\n\nsub,\nsup {\n  position: relative;\n  font-size: 75%;\n  line-height: 0;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -.25em;\n}\n\nsup {\n  top: -.5em;\n}\n\na {\n  color: #007bff;\n  text-decoration: none;\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\na:hover {\n  color: #0056b3;\n  text-decoration: underline;\n}\n\na:not([href]):not([tabindex]) {\n  color: inherit;\n  text-decoration: none;\n}\n\na:not([href]):not([tabindex]):hover, a:not([href]):not([tabindex]):focus {\n  color: inherit;\n  text-decoration: none;\n}\n\na:not([href]):not([tabindex]):focus {\n  outline: 0;\n}\n\npre,\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\npre {\n  margin-top: 0;\n  margin-bottom: 1rem;\n  overflow: auto;\n  -ms-overflow-style: scrollbar;\n}\n\nfigure {\n  margin: 0 0 1rem;\n}\n\nimg {\n  vertical-align: middle;\n  border-style: none;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\ncaption {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  color: #6c757d;\n  text-align: left;\n  caption-side: bottom;\n}\n\nth {\n  text-align: inherit;\n}\n\nlabel {\n  display: inline-block;\n  margin-bottom: .5rem;\n}\n\nbutton {\n  border-radius: 0;\n}\n\nbutton:focus {\n  outline: 1px dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n}\n\ninput,\nbutton,\nselect,\noptgroup,\ntextarea {\n  margin: 0;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\nbutton,\ninput {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\nbutton,\nhtml [type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  padding: 0;\n  border-style: none;\n}\n\ninput[type="radio"],\ninput[type="checkbox"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\ninput[type="date"],\ninput[type="time"],\ninput[type="datetime-local"],\ninput[type="month"] {\n  -webkit-appearance: listbox;\n}\n\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\n\nlegend {\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  padding: 0;\n  margin-bottom: .5rem;\n  font-size: 1.5rem;\n  line-height: inherit;\n  color: inherit;\n  white-space: normal;\n}\n\nprogress {\n  vertical-align: baseline;\n}\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n[type="search"] {\n  outline-offset: -2px;\n  -webkit-appearance: none;\n}\n\n[type="search"]::-webkit-search-cancel-button,\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n::-webkit-file-upload-button {\n  font: inherit;\n  -webkit-appearance: button;\n}\n\noutput {\n  display: inline-block;\n}\n\nsummary {\n  display: list-item;\n  cursor: pointer;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none !important;\n}\n\nh1, h2, h3, h4, h5, h6,\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  margin-bottom: 0.5rem;\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.2;\n  color: inherit;\n}\n\nh1, .h1 {\n  font-size: 2.5rem;\n}\n\nh2, .h2 {\n  font-size: 2rem;\n}\n\nh3, .h3 {\n  font-size: 1.75rem;\n}\n\nh4, .h4 {\n  font-size: 1.5rem;\n}\n\nh5, .h5 {\n  font-size: 1.25rem;\n}\n\nh6, .h6 {\n  font-size: 1rem;\n}\n\n.lead {\n  font-size: 1.25rem;\n  font-weight: 300;\n}\n\n.display-1 {\n  font-size: 6rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-2 {\n  font-size: 5.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-3 {\n  font-size: 4.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-4 {\n  font-size: 3.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\nhr {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  border: 0;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n}\n\nsmall,\n.small {\n  font-size: 80%;\n  font-weight: 400;\n}\n\nmark,\n.mark {\n  padding: 0.2em;\n  background-color: #fcf8e3;\n}\n\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-inline {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-inline-item {\n  display: inline-block;\n}\n\n.list-inline-item:not(:last-child) {\n  margin-right: 0.5rem;\n}\n\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\n\n.blockquote {\n  margin-bottom: 1rem;\n  font-size: 1.25rem;\n}\n\n.blockquote-footer {\n  display: block;\n  font-size: 80%;\n  color: #6c757d;\n}\n\n.blockquote-footer::before {\n  content: "\\2014   \\A0";\n}\n\n.img-fluid {\n  max-width: 100%;\n  height: auto;\n}\n\n.img-thumbnail {\n  padding: 0.25rem;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n  border-radius: 0.25rem;\n  max-width: 100%;\n  height: auto;\n}\n\n.figure {\n  display: inline-block;\n}\n\n.figure-img {\n  margin-bottom: 0.5rem;\n  line-height: 1;\n}\n\n.figure-caption {\n  font-size: 90%;\n  color: #6c757d;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n}\n\ncode {\n  font-size: 87.5%;\n  color: #e83e8c;\n  word-break: break-word;\n}\n\na > code {\n  color: inherit;\n}\n\nkbd {\n  padding: 0.2rem 0.4rem;\n  font-size: 87.5%;\n  color: #fff;\n  background-color: #212529;\n  border-radius: 0.2rem;\n}\n\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: 700;\n}\n\npre {\n  display: block;\n  font-size: 87.5%;\n  color: #212529;\n}\n\npre code {\n  font-size: inherit;\n  color: inherit;\n  word-break: normal;\n}\n\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n\n.container {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n@media (min-width: 576px) {\n  .container {\n    max-width: 540px;\n  }\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 720px;\n  }\n}\n\n@media (min-width: 992px) {\n  .container {\n    max-width: 960px;\n  }\n}\n\n@media (min-width: 1200px) {\n  .container {\n    max-width: 1140px;\n  }\n}\n\n.container-fluid {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.row {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -15px;\n  margin-left: -15px;\n}\n\n.no-gutters {\n  margin-right: 0;\n  margin-left: 0;\n}\n\n.no-gutters > .col,\n.no-gutters > [class*="col-"] {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col,\n.col-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm,\n.col-sm-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col-md,\n.col-md-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg,\n.col-lg-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl,\n.col-xl-auto {\n  position: relative;\n  width: 100%;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n\n.col {\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  -webkit-box-flex: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  max-width: 100%;\n}\n\n.col-auto {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  width: auto;\n  max-width: none;\n}\n\n.col-1 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 8.333333%;\n  flex: 0 0 8.333333%;\n  max-width: 8.333333%;\n}\n\n.col-2 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 16.666667%;\n  flex: 0 0 16.666667%;\n  max-width: 16.666667%;\n}\n\n.col-3 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 25%;\n  flex: 0 0 25%;\n  max-width: 25%;\n}\n\n.col-4 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 33.333333%;\n  flex: 0 0 33.333333%;\n  max-width: 33.333333%;\n}\n\n.col-5 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 41.666667%;\n  flex: 0 0 41.666667%;\n  max-width: 41.666667%;\n}\n\n.col-6 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 50%;\n  flex: 0 0 50%;\n  max-width: 50%;\n}\n\n.col-7 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 58.333333%;\n  flex: 0 0 58.333333%;\n  max-width: 58.333333%;\n}\n\n.col-8 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 66.666667%;\n  flex: 0 0 66.666667%;\n  max-width: 66.666667%;\n}\n\n.col-9 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 75%;\n  flex: 0 0 75%;\n  max-width: 75%;\n}\n\n.col-10 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 83.333333%;\n  flex: 0 0 83.333333%;\n  max-width: 83.333333%;\n}\n\n.col-11 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 91.666667%;\n  flex: 0 0 91.666667%;\n  max-width: 91.666667%;\n}\n\n.col-12 {\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 100%;\n  flex: 0 0 100%;\n  max-width: 100%;\n}\n\n.order-first {\n  -webkit-box-ordinal-group: 0;\n  -ms-flex-order: -1;\n  order: -1;\n}\n\n.order-last {\n  -webkit-box-ordinal-group: 14;\n  -ms-flex-order: 13;\n  order: 13;\n}\n\n.order-0 {\n  -webkit-box-ordinal-group: 1;\n  -ms-flex-order: 0;\n  order: 0;\n}\n\n.order-1 {\n  -webkit-box-ordinal-group: 2;\n  -ms-flex-order: 1;\n  order: 1;\n}\n\n.order-2 {\n  -webkit-box-ordinal-group: 3;\n  -ms-flex-order: 2;\n  order: 2;\n}\n\n.order-3 {\n  -webkit-box-ordinal-group: 4;\n  -ms-flex-order: 3;\n  order: 3;\n}\n\n.order-4 {\n  -webkit-box-ordinal-group: 5;\n  -ms-flex-order: 4;\n  order: 4;\n}\n\n.order-5 {\n  -webkit-box-ordinal-group: 6;\n  -ms-flex-order: 5;\n  order: 5;\n}\n\n.order-6 {\n  -webkit-box-ordinal-group: 7;\n  -ms-flex-order: 6;\n  order: 6;\n}\n\n.order-7 {\n  -webkit-box-ordinal-group: 8;\n  -ms-flex-order: 7;\n  order: 7;\n}\n\n.order-8 {\n  -webkit-box-ordinal-group: 9;\n  -ms-flex-order: 8;\n  order: 8;\n}\n\n.order-9 {\n  -webkit-box-ordinal-group: 10;\n  -ms-flex-order: 9;\n  order: 9;\n}\n\n.order-10 {\n  -webkit-box-ordinal-group: 11;\n  -ms-flex-order: 10;\n  order: 10;\n}\n\n.order-11 {\n  -webkit-box-ordinal-group: 12;\n  -ms-flex-order: 11;\n  order: 11;\n}\n\n.order-12 {\n  -webkit-box-ordinal-group: 13;\n  -ms-flex-order: 12;\n  order: 12;\n}\n\n.offset-1 {\n  margin-left: 8.333333%;\n}\n\n.offset-2 {\n  margin-left: 16.666667%;\n}\n\n.offset-3 {\n  margin-left: 25%;\n}\n\n.offset-4 {\n  margin-left: 33.333333%;\n}\n\n.offset-5 {\n  margin-left: 41.666667%;\n}\n\n.offset-6 {\n  margin-left: 50%;\n}\n\n.offset-7 {\n  margin-left: 58.333333%;\n}\n\n.offset-8 {\n  margin-left: 66.666667%;\n}\n\n.offset-9 {\n  margin-left: 75%;\n}\n\n.offset-10 {\n  margin-left: 83.333333%;\n}\n\n.offset-11 {\n  margin-left: 91.666667%;\n}\n\n@media (min-width: 576px) {\n  .col-sm {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-sm-auto {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-sm-1 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-sm-2 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-sm-3 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-sm-4 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-sm-5 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-sm-6 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-sm-7 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-sm-8 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-sm-9 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-sm-10 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-sm-11 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-sm-12 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-sm-first {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-sm-last {\n    -webkit-box-ordinal-group: 14;\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-sm-0 {\n    -webkit-box-ordinal-group: 1;\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-sm-1 {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-sm-2 {\n    -webkit-box-ordinal-group: 3;\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-sm-3 {\n    -webkit-box-ordinal-group: 4;\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-sm-4 {\n    -webkit-box-ordinal-group: 5;\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-sm-5 {\n    -webkit-box-ordinal-group: 6;\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-sm-6 {\n    -webkit-box-ordinal-group: 7;\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-sm-7 {\n    -webkit-box-ordinal-group: 8;\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-sm-8 {\n    -webkit-box-ordinal-group: 9;\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-sm-9 {\n    -webkit-box-ordinal-group: 10;\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-sm-10 {\n    -webkit-box-ordinal-group: 11;\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-sm-11 {\n    -webkit-box-ordinal-group: 12;\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-sm-12 {\n    -webkit-box-ordinal-group: 13;\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-sm-0 {\n    margin-left: 0;\n  }\n  .offset-sm-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-sm-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-sm-3 {\n    margin-left: 25%;\n  }\n  .offset-sm-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-sm-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-sm-6 {\n    margin-left: 50%;\n  }\n  .offset-sm-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-sm-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-sm-9 {\n    margin-left: 75%;\n  }\n  .offset-sm-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-sm-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 768px) {\n  .col-md {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-md-auto {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-md-1 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-md-2 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-md-3 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-md-4 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-md-5 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-md-6 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-md-7 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-md-8 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-md-9 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-md-10 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-md-11 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-md-12 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-md-first {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-md-last {\n    -webkit-box-ordinal-group: 14;\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-md-0 {\n    -webkit-box-ordinal-group: 1;\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-md-1 {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-md-2 {\n    -webkit-box-ordinal-group: 3;\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-md-3 {\n    -webkit-box-ordinal-group: 4;\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-md-4 {\n    -webkit-box-ordinal-group: 5;\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-md-5 {\n    -webkit-box-ordinal-group: 6;\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-md-6 {\n    -webkit-box-ordinal-group: 7;\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-md-7 {\n    -webkit-box-ordinal-group: 8;\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-md-8 {\n    -webkit-box-ordinal-group: 9;\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-md-9 {\n    -webkit-box-ordinal-group: 10;\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-md-10 {\n    -webkit-box-ordinal-group: 11;\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-md-11 {\n    -webkit-box-ordinal-group: 12;\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-md-12 {\n    -webkit-box-ordinal-group: 13;\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-md-0 {\n    margin-left: 0;\n  }\n  .offset-md-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-md-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-md-3 {\n    margin-left: 25%;\n  }\n  .offset-md-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-md-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-md-6 {\n    margin-left: 50%;\n  }\n  .offset-md-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-md-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-md-9 {\n    margin-left: 75%;\n  }\n  .offset-md-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-md-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 992px) {\n  .col-lg {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-lg-auto {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-lg-1 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-lg-2 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-lg-3 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-lg-4 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-lg-5 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-lg-6 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-lg-7 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-lg-8 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-lg-9 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-lg-10 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-lg-11 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-lg-12 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-lg-first {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-lg-last {\n    -webkit-box-ordinal-group: 14;\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-lg-0 {\n    -webkit-box-ordinal-group: 1;\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-lg-1 {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-lg-2 {\n    -webkit-box-ordinal-group: 3;\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-lg-3 {\n    -webkit-box-ordinal-group: 4;\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-lg-4 {\n    -webkit-box-ordinal-group: 5;\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-lg-5 {\n    -webkit-box-ordinal-group: 6;\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-lg-6 {\n    -webkit-box-ordinal-group: 7;\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-lg-7 {\n    -webkit-box-ordinal-group: 8;\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-lg-8 {\n    -webkit-box-ordinal-group: 9;\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-lg-9 {\n    -webkit-box-ordinal-group: 10;\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-lg-10 {\n    -webkit-box-ordinal-group: 11;\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-lg-11 {\n    -webkit-box-ordinal-group: 12;\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-lg-12 {\n    -webkit-box-ordinal-group: 13;\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-lg-0 {\n    margin-left: 0;\n  }\n  .offset-lg-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-lg-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-lg-3 {\n    margin-left: 25%;\n  }\n  .offset-lg-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-lg-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-lg-6 {\n    margin-left: 50%;\n  }\n  .offset-lg-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-lg-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-lg-9 {\n    margin-left: 75%;\n  }\n  .offset-lg-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-lg-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 1200px) {\n  .col-xl {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-xl-auto {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-xl-1 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-xl-2 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-xl-3 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-xl-4 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-xl-5 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-xl-6 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-xl-7 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-xl-8 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-xl-9 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-xl-10 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-xl-11 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-xl-12 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-xl-first {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-xl-last {\n    -webkit-box-ordinal-group: 14;\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-xl-0 {\n    -webkit-box-ordinal-group: 1;\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-xl-1 {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-xl-2 {\n    -webkit-box-ordinal-group: 3;\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-xl-3 {\n    -webkit-box-ordinal-group: 4;\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-xl-4 {\n    -webkit-box-ordinal-group: 5;\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-xl-5 {\n    -webkit-box-ordinal-group: 6;\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-xl-6 {\n    -webkit-box-ordinal-group: 7;\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-xl-7 {\n    -webkit-box-ordinal-group: 8;\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-xl-8 {\n    -webkit-box-ordinal-group: 9;\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-xl-9 {\n    -webkit-box-ordinal-group: 10;\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-xl-10 {\n    -webkit-box-ordinal-group: 11;\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-xl-11 {\n    -webkit-box-ordinal-group: 12;\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-xl-12 {\n    -webkit-box-ordinal-group: 13;\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-xl-0 {\n    margin-left: 0;\n  }\n  .offset-xl-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-xl-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-xl-3 {\n    margin-left: 25%;\n  }\n  .offset-xl-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-xl-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-xl-6 {\n    margin-left: 50%;\n  }\n  .offset-xl-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-xl-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-xl-9 {\n    margin-left: 75%;\n  }\n  .offset-xl-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-xl-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 1rem;\n  background-color: transparent;\n}\n\n.table th,\n.table td {\n  padding: 0.75rem;\n  vertical-align: top;\n  border-top: 1px solid #dee2e6;\n}\n\n.table thead th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #dee2e6;\n}\n\n.table tbody + tbody {\n  border-top: 2px solid #dee2e6;\n}\n\n.table .table {\n  background-color: #fff;\n}\n\n.table-sm th,\n.table-sm td {\n  padding: 0.3rem;\n}\n\n.table-bordered {\n  border: 1px solid #dee2e6;\n}\n\n.table-bordered th,\n.table-bordered td {\n  border: 1px solid #dee2e6;\n}\n\n.table-bordered thead th,\n.table-bordered thead td {\n  border-bottom-width: 2px;\n}\n\n.table-striped tbody tr:nth-of-type(odd) {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.table-hover tbody tr:hover {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-primary,\n.table-primary > th,\n.table-primary > td {\n  background-color: #b8daff;\n}\n\n.table-hover .table-primary:hover {\n  background-color: #9fcdff;\n}\n\n.table-hover .table-primary:hover > td,\n.table-hover .table-primary:hover > th {\n  background-color: #9fcdff;\n}\n\n.table-secondary,\n.table-secondary > th,\n.table-secondary > td {\n  background-color: #d6d8db;\n}\n\n.table-hover .table-secondary:hover {\n  background-color: #c8cbcf;\n}\n\n.table-hover .table-secondary:hover > td,\n.table-hover .table-secondary:hover > th {\n  background-color: #c8cbcf;\n}\n\n.table-success,\n.table-success > th,\n.table-success > td {\n  background-color: #c3e6cb;\n}\n\n.table-hover .table-success:hover {\n  background-color: #b1dfbb;\n}\n\n.table-hover .table-success:hover > td,\n.table-hover .table-success:hover > th {\n  background-color: #b1dfbb;\n}\n\n.table-info,\n.table-info > th,\n.table-info > td {\n  background-color: #bee5eb;\n}\n\n.table-hover .table-info:hover {\n  background-color: #abdde5;\n}\n\n.table-hover .table-info:hover > td,\n.table-hover .table-info:hover > th {\n  background-color: #abdde5;\n}\n\n.table-warning,\n.table-warning > th,\n.table-warning > td {\n  background-color: #ffeeba;\n}\n\n.table-hover .table-warning:hover {\n  background-color: #ffe8a1;\n}\n\n.table-hover .table-warning:hover > td,\n.table-hover .table-warning:hover > th {\n  background-color: #ffe8a1;\n}\n\n.table-danger,\n.table-danger > th,\n.table-danger > td {\n  background-color: #f5c6cb;\n}\n\n.table-hover .table-danger:hover {\n  background-color: #f1b0b7;\n}\n\n.table-hover .table-danger:hover > td,\n.table-hover .table-danger:hover > th {\n  background-color: #f1b0b7;\n}\n\n.table-light,\n.table-light > th,\n.table-light > td {\n  background-color: #fdfdfe;\n}\n\n.table-hover .table-light:hover {\n  background-color: #ececf6;\n}\n\n.table-hover .table-light:hover > td,\n.table-hover .table-light:hover > th {\n  background-color: #ececf6;\n}\n\n.table-dark,\n.table-dark > th,\n.table-dark > td {\n  background-color: #c6c8ca;\n}\n\n.table-hover .table-dark:hover {\n  background-color: #b9bbbe;\n}\n\n.table-hover .table-dark:hover > td,\n.table-hover .table-dark:hover > th {\n  background-color: #b9bbbe;\n}\n\n.table-active,\n.table-active > th,\n.table-active > td {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-hover .table-active:hover {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-hover .table-active:hover > td,\n.table-hover .table-active:hover > th {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table .thead-dark th {\n  color: #fff;\n  background-color: #212529;\n  border-color: #32383e;\n}\n\n.table .thead-light th {\n  color: #495057;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n\n.table-dark {\n  color: #fff;\n  background-color: #212529;\n}\n\n.table-dark th,\n.table-dark td,\n.table-dark thead th {\n  border-color: #32383e;\n}\n\n.table-dark.table-bordered {\n  border: 0;\n}\n\n.table-dark.table-striped tbody tr:nth-of-type(odd) {\n  background-color: rgba(255, 255, 255, 0.05);\n}\n\n.table-dark.table-hover tbody tr:hover {\n  background-color: rgba(255, 255, 255, 0.075);\n}\n\n@media (max-width: 575.98px) {\n  .table-responsive-sm {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-sm > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .table-responsive-md {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-md > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 991.98px) {\n  .table-responsive-lg {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-lg > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  .table-responsive-xl {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-xl > .table-bordered {\n    border: 0;\n  }\n}\n\n.table-responsive {\n  display: block;\n  width: 100%;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\n.table-responsive > .table-bordered {\n  border: 0;\n}\n\n.form-control {\n  display: block;\n  width: 100%;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\n\n.form-control:focus {\n  color: #495057;\n  background-color: #fff;\n  border-color: #80bdff;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.form-control::-webkit-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::-moz-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control:-ms-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::-ms-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control:disabled, .form-control[readonly] {\n  background-color: #e9ecef;\n  opacity: 1;\n}\n\nselect.form-control:not([size]):not([multiple]) {\n  height: calc(2.25rem + 2px);\n}\n\nselect.form-control:focus::-ms-value {\n  color: #495057;\n  background-color: #fff;\n}\n\n.form-control-file,\n.form-control-range {\n  display: block;\n  width: 100%;\n}\n\n.col-form-label {\n  padding-top: calc(0.375rem + 1px);\n  padding-bottom: calc(0.375rem + 1px);\n  margin-bottom: 0;\n  font-size: inherit;\n  line-height: 1.5;\n}\n\n.col-form-label-lg {\n  padding-top: calc(0.5rem + 1px);\n  padding-bottom: calc(0.5rem + 1px);\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.col-form-label-sm {\n  padding-top: calc(0.25rem + 1px);\n  padding-bottom: calc(0.25rem + 1px);\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n.form-control-plaintext {\n  display: block;\n  width: 100%;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  margin-bottom: 0;\n  line-height: 1.5;\n  background-color: transparent;\n  border: solid transparent;\n  border-width: 1px 0;\n}\n\n.form-control-plaintext.form-control-sm, .input-group-sm > .form-control-plaintext.form-control,\n.input-group-sm > .input-group-prepend > .form-control-plaintext.input-group-text,\n.input-group-sm > .input-group-append > .form-control-plaintext.input-group-text,\n.input-group-sm > .input-group-prepend > .form-control-plaintext.btn,\n.input-group-sm > .input-group-append > .form-control-plaintext.btn, .form-control-plaintext.form-control-lg, .input-group-lg > .form-control-plaintext.form-control,\n.input-group-lg > .input-group-prepend > .form-control-plaintext.input-group-text,\n.input-group-lg > .input-group-append > .form-control-plaintext.input-group-text,\n.input-group-lg > .input-group-prepend > .form-control-plaintext.btn,\n.input-group-lg > .input-group-append > .form-control-plaintext.btn {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.form-control-sm, .input-group-sm > .form-control,\n.input-group-sm > .input-group-prepend > .input-group-text,\n.input-group-sm > .input-group-append > .input-group-text,\n.input-group-sm > .input-group-prepend > .btn,\n.input-group-sm > .input-group-append > .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\nselect.form-control-sm:not([size]):not([multiple]), .input-group-sm > select.form-control:not([size]):not([multiple]),\n.input-group-sm > .input-group-prepend > select.input-group-text:not([size]):not([multiple]),\n.input-group-sm > .input-group-append > select.input-group-text:not([size]):not([multiple]),\n.input-group-sm > .input-group-prepend > select.btn:not([size]):not([multiple]),\n.input-group-sm > .input-group-append > select.btn:not([size]):not([multiple]) {\n  height: calc(1.8125rem + 2px);\n}\n\n.form-control-lg, .input-group-lg > .form-control,\n.input-group-lg > .input-group-prepend > .input-group-text,\n.input-group-lg > .input-group-append > .input-group-text,\n.input-group-lg > .input-group-prepend > .btn,\n.input-group-lg > .input-group-append > .btn {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\nselect.form-control-lg:not([size]):not([multiple]), .input-group-lg > select.form-control:not([size]):not([multiple]),\n.input-group-lg > .input-group-prepend > select.input-group-text:not([size]):not([multiple]),\n.input-group-lg > .input-group-append > select.input-group-text:not([size]):not([multiple]),\n.input-group-lg > .input-group-prepend > select.btn:not([size]):not([multiple]),\n.input-group-lg > .input-group-append > select.btn:not([size]):not([multiple]) {\n  height: calc(2.875rem + 2px);\n}\n\n.form-group {\n  margin-bottom: 1rem;\n}\n\n.form-text {\n  display: block;\n  margin-top: 0.25rem;\n}\n\n.form-row {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -5px;\n  margin-left: -5px;\n}\n\n.form-row > .col,\n.form-row > [class*="col-"] {\n  padding-right: 5px;\n  padding-left: 5px;\n}\n\n.form-check {\n  position: relative;\n  display: block;\n  padding-left: 1.25rem;\n}\n\n.form-check-input {\n  position: absolute;\n  margin-top: 0.3rem;\n  margin-left: -1.25rem;\n}\n\n.form-check-input:disabled ~ .form-check-label {\n  color: #6c757d;\n}\n\n.form-check-label {\n  margin-bottom: 0;\n}\n\n.form-check-inline {\n  display: -webkit-inline-box;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  padding-left: 0;\n  margin-right: 0.75rem;\n}\n\n.form-check-inline .form-check-input {\n  position: static;\n  margin-top: 0;\n  margin-right: 0.3125rem;\n  margin-left: 0;\n}\n\n.valid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #28a745;\n}\n\n.valid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: .5rem;\n  margin-top: .1rem;\n  font-size: .875rem;\n  line-height: 1;\n  color: #fff;\n  background-color: rgba(40, 167, 69, 0.8);\n  border-radius: .2rem;\n}\n\n.was-validated .form-control:valid, .form-control.is-valid, .was-validated\n.custom-select:valid,\n.custom-select.is-valid {\n  border-color: #28a745;\n}\n\n.was-validated .form-control:valid:focus, .form-control.is-valid:focus, .was-validated\n.custom-select:valid:focus,\n.custom-select.is-valid:focus {\n  border-color: #28a745;\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.was-validated .form-control:valid ~ .valid-feedback,\n.was-validated .form-control:valid ~ .valid-tooltip, .form-control.is-valid ~ .valid-feedback,\n.form-control.is-valid ~ .valid-tooltip, .was-validated\n.custom-select:valid ~ .valid-feedback,\n.was-validated\n.custom-select:valid ~ .valid-tooltip,\n.custom-select.is-valid ~ .valid-feedback,\n.custom-select.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .form-check-input:valid ~ .form-check-label, .form-check-input.is-valid ~ .form-check-label {\n  color: #28a745;\n}\n\n.was-validated .form-check-input:valid ~ .valid-feedback,\n.was-validated .form-check-input:valid ~ .valid-tooltip, .form-check-input.is-valid ~ .valid-feedback,\n.form-check-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:valid ~ .custom-control-label, .custom-control-input.is-valid ~ .custom-control-label {\n  color: #28a745;\n}\n\n.was-validated .custom-control-input:valid ~ .custom-control-label::before, .custom-control-input.is-valid ~ .custom-control-label::before {\n  background-color: #71dd8a;\n}\n\n.was-validated .custom-control-input:valid ~ .valid-feedback,\n.was-validated .custom-control-input:valid ~ .valid-tooltip, .custom-control-input.is-valid ~ .valid-feedback,\n.custom-control-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:valid:checked ~ .custom-control-label::before, .custom-control-input.is-valid:checked ~ .custom-control-label::before {\n  background-color: #34ce57;\n}\n\n.was-validated .custom-control-input:valid:focus ~ .custom-control-label::before, .custom-control-input.is-valid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.was-validated .custom-file-input:valid ~ .custom-file-label, .custom-file-input.is-valid ~ .custom-file-label {\n  border-color: #28a745;\n}\n\n.was-validated .custom-file-input:valid ~ .custom-file-label::before, .custom-file-input.is-valid ~ .custom-file-label::before {\n  border-color: inherit;\n}\n\n.was-validated .custom-file-input:valid ~ .valid-feedback,\n.was-validated .custom-file-input:valid ~ .valid-tooltip, .custom-file-input.is-valid ~ .valid-feedback,\n.custom-file-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-file-input:valid:focus ~ .custom-file-label, .custom-file-input.is-valid:focus ~ .custom-file-label {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.invalid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #dc3545;\n}\n\n.invalid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: .5rem;\n  margin-top: .1rem;\n  font-size: .875rem;\n  line-height: 1;\n  color: #fff;\n  background-color: rgba(220, 53, 69, 0.8);\n  border-radius: .2rem;\n}\n\n.was-validated .form-control:invalid, .form-control.is-invalid, .was-validated\n.custom-select:invalid,\n.custom-select.is-invalid {\n  border-color: #dc3545;\n}\n\n.was-validated .form-control:invalid:focus, .form-control.is-invalid:focus, .was-validated\n.custom-select:invalid:focus,\n.custom-select.is-invalid:focus {\n  border-color: #dc3545;\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.was-validated .form-control:invalid ~ .invalid-feedback,\n.was-validated .form-control:invalid ~ .invalid-tooltip, .form-control.is-invalid ~ .invalid-feedback,\n.form-control.is-invalid ~ .invalid-tooltip, .was-validated\n.custom-select:invalid ~ .invalid-feedback,\n.was-validated\n.custom-select:invalid ~ .invalid-tooltip,\n.custom-select.is-invalid ~ .invalid-feedback,\n.custom-select.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .form-check-input:invalid ~ .form-check-label, .form-check-input.is-invalid ~ .form-check-label {\n  color: #dc3545;\n}\n\n.was-validated .form-check-input:invalid ~ .invalid-feedback,\n.was-validated .form-check-input:invalid ~ .invalid-tooltip, .form-check-input.is-invalid ~ .invalid-feedback,\n.form-check-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:invalid ~ .custom-control-label, .custom-control-input.is-invalid ~ .custom-control-label {\n  color: #dc3545;\n}\n\n.was-validated .custom-control-input:invalid ~ .custom-control-label::before, .custom-control-input.is-invalid ~ .custom-control-label::before {\n  background-color: #efa2a9;\n}\n\n.was-validated .custom-control-input:invalid ~ .invalid-feedback,\n.was-validated .custom-control-input:invalid ~ .invalid-tooltip, .custom-control-input.is-invalid ~ .invalid-feedback,\n.custom-control-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:invalid:checked ~ .custom-control-label::before, .custom-control-input.is-invalid:checked ~ .custom-control-label::before {\n  background-color: #e4606d;\n}\n\n.was-validated .custom-control-input:invalid:focus ~ .custom-control-label::before, .custom-control-input.is-invalid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.was-validated .custom-file-input:invalid ~ .custom-file-label, .custom-file-input.is-invalid ~ .custom-file-label {\n  border-color: #dc3545;\n}\n\n.was-validated .custom-file-input:invalid ~ .custom-file-label::before, .custom-file-input.is-invalid ~ .custom-file-label::before {\n  border-color: inherit;\n}\n\n.was-validated .custom-file-input:invalid ~ .invalid-feedback,\n.was-validated .custom-file-input:invalid ~ .invalid-tooltip, .custom-file-input.is-invalid ~ .invalid-feedback,\n.custom-file-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-file-input:invalid:focus ~ .custom-file-label, .custom-file-input.is-invalid:focus ~ .custom-file-label {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.form-inline {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-flow: row wrap;\n  flex-flow: row wrap;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.form-inline .form-check {\n  width: 100%;\n}\n\n@media (min-width: 576px) {\n  .form-inline label {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    margin-bottom: 0;\n  }\n  .form-inline .form-group {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    margin-bottom: 0;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-plaintext {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    width: auto;\n  }\n  .form-inline .form-check {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    width: auto;\n    padding-left: 0;\n  }\n  .form-inline .form-check-input {\n    position: relative;\n    margin-top: 0;\n    margin-right: 0.25rem;\n    margin-left: 0;\n  }\n  .form-inline .custom-control {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n  }\n  .form-inline .custom-control-label {\n    margin-bottom: 0;\n  }\n}\n\n.btn {\n  display: inline-block;\n  font-weight: 400;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.btn:hover, .btn:focus {\n  text-decoration: none;\n}\n\n.btn:focus, .btn.focus {\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.btn.disabled, .btn:disabled {\n  opacity: 0.65;\n}\n\n.btn:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.btn:not(:disabled):not(.disabled):active, .btn:not(:disabled):not(.disabled).active {\n  background-image: none;\n}\n\na.btn.disabled,\nfieldset:disabled a.btn {\n  pointer-events: none;\n}\n\n.btn-primary {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-primary:hover {\n  color: #fff;\n  background-color: #0069d9;\n  border-color: #0062cc;\n}\n\n.btn-primary:focus, .btn-primary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-primary.disabled, .btn-primary:disabled {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-primary:not(:disabled):not(.disabled):active, .btn-primary:not(:disabled):not(.disabled).active,\n.show > .btn-primary.dropdown-toggle {\n  color: #fff;\n  background-color: #0062cc;\n  border-color: #005cbf;\n}\n\n.btn-primary:not(:disabled):not(.disabled):active:focus, .btn-primary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-primary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-secondary {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-secondary:hover {\n  color: #fff;\n  background-color: #5a6268;\n  border-color: #545b62;\n}\n\n.btn-secondary:focus, .btn-secondary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-secondary.disabled, .btn-secondary:disabled {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-secondary:not(:disabled):not(.disabled):active, .btn-secondary:not(:disabled):not(.disabled).active,\n.show > .btn-secondary.dropdown-toggle {\n  color: #fff;\n  background-color: #545b62;\n  border-color: #4e555b;\n}\n\n.btn-secondary:not(:disabled):not(.disabled):active:focus, .btn-secondary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-secondary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-success {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-success:hover {\n  color: #fff;\n  background-color: #218838;\n  border-color: #1e7e34;\n}\n\n.btn-success:focus, .btn-success.focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-success.disabled, .btn-success:disabled {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-success:not(:disabled):not(.disabled):active, .btn-success:not(:disabled):not(.disabled).active,\n.show > .btn-success.dropdown-toggle {\n  color: #fff;\n  background-color: #1e7e34;\n  border-color: #1c7430;\n}\n\n.btn-success:not(:disabled):not(.disabled):active:focus, .btn-success:not(:disabled):not(.disabled).active:focus,\n.show > .btn-success.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-info {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-info:hover {\n  color: #fff;\n  background-color: #138496;\n  border-color: #117a8b;\n}\n\n.btn-info:focus, .btn-info.focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-info.disabled, .btn-info:disabled {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-info:not(:disabled):not(.disabled):active, .btn-info:not(:disabled):not(.disabled).active,\n.show > .btn-info.dropdown-toggle {\n  color: #fff;\n  background-color: #117a8b;\n  border-color: #10707f;\n}\n\n.btn-info:not(:disabled):not(.disabled):active:focus, .btn-info:not(:disabled):not(.disabled).active:focus,\n.show > .btn-info.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-warning {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-warning:hover {\n  color: #212529;\n  background-color: #e0a800;\n  border-color: #d39e00;\n}\n\n.btn-warning:focus, .btn-warning.focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-warning.disabled, .btn-warning:disabled {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-warning:not(:disabled):not(.disabled):active, .btn-warning:not(:disabled):not(.disabled).active,\n.show > .btn-warning.dropdown-toggle {\n  color: #212529;\n  background-color: #d39e00;\n  border-color: #c69500;\n}\n\n.btn-warning:not(:disabled):not(.disabled):active:focus, .btn-warning:not(:disabled):not(.disabled).active:focus,\n.show > .btn-warning.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-danger {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c82333;\n  border-color: #bd2130;\n}\n\n.btn-danger:focus, .btn-danger.focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-danger.disabled, .btn-danger:disabled {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-danger:not(:disabled):not(.disabled):active, .btn-danger:not(:disabled):not(.disabled).active,\n.show > .btn-danger.dropdown-toggle {\n  color: #fff;\n  background-color: #bd2130;\n  border-color: #b21f2d;\n}\n\n.btn-danger:not(:disabled):not(.disabled):active:focus, .btn-danger:not(:disabled):not(.disabled).active:focus,\n.show > .btn-danger.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-light {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-light:hover {\n  color: #212529;\n  background-color: #e2e6ea;\n  border-color: #dae0e5;\n}\n\n.btn-light:focus, .btn-light.focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-light.disabled, .btn-light:disabled {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-light:not(:disabled):not(.disabled):active, .btn-light:not(:disabled):not(.disabled).active,\n.show > .btn-light.dropdown-toggle {\n  color: #212529;\n  background-color: #dae0e5;\n  border-color: #d3d9df;\n}\n\n.btn-light:not(:disabled):not(.disabled):active:focus, .btn-light:not(:disabled):not(.disabled).active:focus,\n.show > .btn-light.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-dark {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-dark:hover {\n  color: #fff;\n  background-color: #23272b;\n  border-color: #1d2124;\n}\n\n.btn-dark:focus, .btn-dark.focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-dark.disabled, .btn-dark:disabled {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-dark:not(:disabled):not(.disabled):active, .btn-dark:not(:disabled):not(.disabled).active,\n.show > .btn-dark.dropdown-toggle {\n  color: #fff;\n  background-color: #1d2124;\n  border-color: #171a1d;\n}\n\n.btn-dark:not(:disabled):not(.disabled):active:focus, .btn-dark:not(:disabled):not(.disabled).active:focus,\n.show > .btn-dark.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-outline-primary {\n  color: #007bff;\n  background-color: transparent;\n  background-image: none;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:hover {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:focus, .btn-outline-primary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-outline-primary.disabled, .btn-outline-primary:disabled {\n  color: #007bff;\n  background-color: transparent;\n}\n\n.btn-outline-primary:not(:disabled):not(.disabled):active, .btn-outline-primary:not(:disabled):not(.disabled).active,\n.show > .btn-outline-primary.dropdown-toggle {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:not(:disabled):not(.disabled):active:focus, .btn-outline-primary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-primary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-outline-secondary {\n  color: #6c757d;\n  background-color: transparent;\n  background-image: none;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:hover {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:focus, .btn-outline-secondary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-outline-secondary.disabled, .btn-outline-secondary:disabled {\n  color: #6c757d;\n  background-color: transparent;\n}\n\n.btn-outline-secondary:not(:disabled):not(.disabled):active, .btn-outline-secondary:not(:disabled):not(.disabled).active,\n.show > .btn-outline-secondary.dropdown-toggle {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:not(:disabled):not(.disabled):active:focus, .btn-outline-secondary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-secondary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-outline-success {\n  color: #28a745;\n  background-color: transparent;\n  background-image: none;\n  border-color: #28a745;\n}\n\n.btn-outline-success:hover {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-outline-success:focus, .btn-outline-success.focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-outline-success.disabled, .btn-outline-success:disabled {\n  color: #28a745;\n  background-color: transparent;\n}\n\n.btn-outline-success:not(:disabled):not(.disabled):active, .btn-outline-success:not(:disabled):not(.disabled).active,\n.show > .btn-outline-success.dropdown-toggle {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-outline-success:not(:disabled):not(.disabled):active:focus, .btn-outline-success:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-success.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-outline-info {\n  color: #17a2b8;\n  background-color: transparent;\n  background-image: none;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:hover {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:focus, .btn-outline-info.focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-outline-info.disabled, .btn-outline-info:disabled {\n  color: #17a2b8;\n  background-color: transparent;\n}\n\n.btn-outline-info:not(:disabled):not(.disabled):active, .btn-outline-info:not(:disabled):not(.disabled).active,\n.show > .btn-outline-info.dropdown-toggle {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:not(:disabled):not(.disabled):active:focus, .btn-outline-info:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-info.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-outline-warning {\n  color: #ffc107;\n  background-color: transparent;\n  background-image: none;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:hover {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:focus, .btn-outline-warning.focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-outline-warning.disabled, .btn-outline-warning:disabled {\n  color: #ffc107;\n  background-color: transparent;\n}\n\n.btn-outline-warning:not(:disabled):not(.disabled):active, .btn-outline-warning:not(:disabled):not(.disabled).active,\n.show > .btn-outline-warning.dropdown-toggle {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:not(:disabled):not(.disabled):active:focus, .btn-outline-warning:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-warning.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-outline-danger {\n  color: #dc3545;\n  background-color: transparent;\n  background-image: none;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:hover {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:focus, .btn-outline-danger.focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-outline-danger.disabled, .btn-outline-danger:disabled {\n  color: #dc3545;\n  background-color: transparent;\n}\n\n.btn-outline-danger:not(:disabled):not(.disabled):active, .btn-outline-danger:not(:disabled):not(.disabled).active,\n.show > .btn-outline-danger.dropdown-toggle {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:not(:disabled):not(.disabled):active:focus, .btn-outline-danger:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-danger.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-outline-light {\n  color: #f8f9fa;\n  background-color: transparent;\n  background-image: none;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:hover {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:focus, .btn-outline-light.focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-outline-light.disabled, .btn-outline-light:disabled {\n  color: #f8f9fa;\n  background-color: transparent;\n}\n\n.btn-outline-light:not(:disabled):not(.disabled):active, .btn-outline-light:not(:disabled):not(.disabled).active,\n.show > .btn-outline-light.dropdown-toggle {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:not(:disabled):not(.disabled):active:focus, .btn-outline-light:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-light.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-outline-dark {\n  color: #343a40;\n  background-color: transparent;\n  background-image: none;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:hover {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:focus, .btn-outline-dark.focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-outline-dark.disabled, .btn-outline-dark:disabled {\n  color: #343a40;\n  background-color: transparent;\n}\n\n.btn-outline-dark:not(:disabled):not(.disabled):active, .btn-outline-dark:not(:disabled):not(.disabled).active,\n.show > .btn-outline-dark.dropdown-toggle {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:not(:disabled):not(.disabled):active:focus, .btn-outline-dark:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-dark.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-link {\n  font-weight: 400;\n  color: #007bff;\n  background-color: transparent;\n}\n\n.btn-link:hover {\n  color: #0056b3;\n  text-decoration: underline;\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.btn-link:focus, .btn-link.focus {\n  text-decoration: underline;\n  border-color: transparent;\n  box-shadow: none;\n}\n\n.btn-link:disabled, .btn-link.disabled {\n  color: #6c757d;\n}\n\n.btn-lg, .btn-group-lg > .btn {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\n.btn-sm, .btn-group-sm > .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\n.btn-block {\n  display: block;\n  width: 100%;\n}\n\n.btn-block + .btn-block {\n  margin-top: 0.5rem;\n}\n\ninput[type="submit"].btn-block,\ninput[type="reset"].btn-block,\ninput[type="button"].btn-block {\n  width: 100%;\n}\n\n.fade {\n  opacity: 0;\n  transition: opacity 0.15s linear;\n}\n\n.fade.show {\n  opacity: 1;\n}\n\n.collapse {\n  display: none;\n}\n\n.collapse.show {\n  display: block;\n}\n\ntr.collapse.show {\n  display: table-row;\n}\n\ntbody.collapse.show {\n  display: table-row-group;\n}\n\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  transition: height 0.35s ease;\n}\n\n.dropup,\n.dropdown {\n  position: relative;\n}\n\n.dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0;\n  border-left: 0.3em solid transparent;\n}\n\n.dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 10rem;\n  padding: 0.5rem 0;\n  margin: 0.125rem 0 0;\n  font-size: 1rem;\n  color: #212529;\n  text-align: left;\n  list-style: none;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 0.25rem;\n}\n\n.dropup .dropdown-menu {\n  margin-top: 0;\n  margin-bottom: 0.125rem;\n}\n\n.dropup .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0.3em solid;\n  border-left: 0.3em solid transparent;\n}\n\n.dropup .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropright .dropdown-menu {\n  margin-top: 0;\n  margin-left: 0.125rem;\n}\n\n.dropright .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-bottom: 0.3em solid transparent;\n  border-left: 0.3em solid;\n}\n\n.dropright .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropright .dropdown-toggle::after {\n  vertical-align: 0;\n}\n\n.dropleft .dropdown-menu {\n  margin-top: 0;\n  margin-right: 0.125rem;\n}\n\n.dropleft .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n}\n\n.dropleft .dropdown-toggle::after {\n  display: none;\n}\n\n.dropleft .dropdown-toggle::before {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-right: 0.3em solid;\n  border-bottom: 0.3em solid transparent;\n}\n\n.dropleft .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropleft .dropdown-toggle::before {\n  vertical-align: 0;\n}\n\n.dropdown-divider {\n  height: 0;\n  margin: 0.5rem 0;\n  overflow: hidden;\n  border-top: 1px solid #e9ecef;\n}\n\n.dropdown-item {\n  display: block;\n  width: 100%;\n  padding: 0.25rem 1.5rem;\n  clear: both;\n  font-weight: 400;\n  color: #212529;\n  text-align: inherit;\n  white-space: nowrap;\n  background-color: transparent;\n  border: 0;\n}\n\n.dropdown-item:hover, .dropdown-item:focus {\n  color: #16181b;\n  text-decoration: none;\n  background-color: #f8f9fa;\n}\n\n.dropdown-item.active, .dropdown-item:active {\n  color: #fff;\n  text-decoration: none;\n  background-color: #007bff;\n}\n\n.dropdown-item.disabled, .dropdown-item:disabled {\n  color: #6c757d;\n  background-color: transparent;\n}\n\n.dropdown-menu.show {\n  display: block;\n}\n\n.dropdown-header {\n  display: block;\n  padding: 0.5rem 1.5rem;\n  margin-bottom: 0;\n  font-size: 0.875rem;\n  color: #6c757d;\n  white-space: nowrap;\n}\n\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: -webkit-inline-box;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  vertical-align: middle;\n}\n\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n}\n\n.btn-group > .btn:hover,\n.btn-group-vertical > .btn:hover {\n  z-index: 1;\n}\n\n.btn-group > .btn:focus, .btn-group > .btn:active, .btn-group > .btn.active,\n.btn-group-vertical > .btn:focus,\n.btn-group-vertical > .btn:active,\n.btn-group-vertical > .btn.active {\n  z-index: 1;\n}\n\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group,\n.btn-group-vertical .btn + .btn,\n.btn-group-vertical .btn + .btn-group,\n.btn-group-vertical .btn-group + .btn,\n.btn-group-vertical .btn-group + .btn-group {\n  margin-left: -1px;\n}\n\n.btn-toolbar {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n}\n\n.btn-toolbar .input-group {\n  width: auto;\n}\n\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n\n.btn-group > .btn:not(:last-child):not(.dropdown-toggle),\n.btn-group > .btn-group:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.btn-group > .btn:not(:first-child),\n.btn-group > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.dropdown-toggle-split {\n  padding-right: 0.5625rem;\n  padding-left: 0.5625rem;\n}\n\n.dropdown-toggle-split::after {\n  margin-left: 0;\n}\n\n.btn-sm + .dropdown-toggle-split, .btn-group-sm > .btn + .dropdown-toggle-split {\n  padding-right: 0.375rem;\n  padding-left: 0.375rem;\n}\n\n.btn-lg + .dropdown-toggle-split, .btn-group-lg > .btn + .dropdown-toggle-split {\n  padding-right: 0.75rem;\n  padding-left: 0.75rem;\n}\n\n.btn-group-vertical {\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n}\n\n.btn-group-vertical .btn,\n.btn-group-vertical .btn-group {\n  width: 100%;\n}\n\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n\n.btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle),\n.btn-group-vertical > .btn-group:not(:last-child) > .btn {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.btn-group-vertical > .btn:not(:first-child),\n.btn-group-vertical > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.btn-group-toggle > .btn,\n.btn-group-toggle > .btn-group > .btn {\n  margin-bottom: 0;\n}\n\n.btn-group-toggle > .btn input[type="radio"],\n.btn-group-toggle > .btn input[type="checkbox"],\n.btn-group-toggle > .btn-group > .btn input[type="radio"],\n.btn-group-toggle > .btn-group > .btn input[type="checkbox"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n\n.input-group {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-align: stretch;\n  -ms-flex-align: stretch;\n  align-items: stretch;\n  width: 100%;\n}\n\n.input-group > .form-control,\n.input-group > .custom-select,\n.input-group > .custom-file {\n  position: relative;\n  -webkit-box-flex: 1;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  width: 1%;\n  margin-bottom: 0;\n}\n\n.input-group > .form-control:focus,\n.input-group > .custom-select:focus,\n.input-group > .custom-file:focus {\n  z-index: 3;\n}\n\n.input-group > .form-control + .form-control,\n.input-group > .form-control + .custom-select,\n.input-group > .form-control + .custom-file,\n.input-group > .custom-select + .form-control,\n.input-group > .custom-select + .custom-select,\n.input-group > .custom-select + .custom-file,\n.input-group > .custom-file + .form-control,\n.input-group > .custom-file + .custom-select,\n.input-group > .custom-file + .custom-file {\n  margin-left: -1px;\n}\n\n.input-group > .form-control:not(:last-child),\n.input-group > .custom-select:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .form-control:not(:first-child),\n.input-group > .custom-select:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group > .custom-file {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.input-group > .custom-file:not(:last-child) .custom-file-label,\n.input-group > .custom-file:not(:last-child) .custom-file-label::before {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .custom-file:not(:first-child) .custom-file-label,\n.input-group > .custom-file:not(:first-child) .custom-file-label::before {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group-prepend,\n.input-group-append {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.input-group-prepend .btn,\n.input-group-append .btn {\n  position: relative;\n  z-index: 2;\n}\n\n.input-group-prepend .btn + .btn,\n.input-group-prepend .btn + .input-group-text,\n.input-group-prepend .input-group-text + .input-group-text,\n.input-group-prepend .input-group-text + .btn,\n.input-group-append .btn + .btn,\n.input-group-append .btn + .input-group-text,\n.input-group-append .input-group-text + .input-group-text,\n.input-group-append .input-group-text + .btn {\n  margin-left: -1px;\n}\n\n.input-group-prepend {\n  margin-right: -1px;\n}\n\n.input-group-append {\n  margin-left: -1px;\n}\n\n.input-group-text {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  padding: 0.375rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  text-align: center;\n  white-space: nowrap;\n  background-color: #e9ecef;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n}\n\n.input-group-text input[type="radio"],\n.input-group-text input[type="checkbox"] {\n  margin-top: 0;\n}\n\n.input-group > .input-group-prepend > .btn,\n.input-group > .input-group-prepend > .input-group-text,\n.input-group > .input-group-append:not(:last-child) > .btn,\n.input-group > .input-group-append:not(:last-child) > .input-group-text,\n.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .input-group-append > .btn,\n.input-group > .input-group-append > .input-group-text,\n.input-group > .input-group-prepend:not(:first-child) > .btn,\n.input-group > .input-group-prepend:not(:first-child) > .input-group-text,\n.input-group > .input-group-prepend:first-child > .btn:not(:first-child),\n.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.custom-control {\n  position: relative;\n  display: block;\n  min-height: 1.5rem;\n  padding-left: 1.5rem;\n}\n\n.custom-control-inline {\n  display: -webkit-inline-box;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  margin-right: 1rem;\n}\n\n.custom-control-input {\n  position: absolute;\n  z-index: -1;\n  opacity: 0;\n}\n\n.custom-control-input:checked ~ .custom-control-label::before {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.custom-control-input:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-control-input:active ~ .custom-control-label::before {\n  color: #fff;\n  background-color: #b3d7ff;\n}\n\n.custom-control-input:disabled ~ .custom-control-label {\n  color: #6c757d;\n}\n\n.custom-control-input:disabled ~ .custom-control-label::before {\n  background-color: #e9ecef;\n}\n\n.custom-control-label {\n  margin-bottom: 0;\n}\n\n.custom-control-label::before {\n  position: absolute;\n  top: 0.25rem;\n  left: 0;\n  display: block;\n  width: 1rem;\n  height: 1rem;\n  pointer-events: none;\n  content: "";\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-color: #dee2e6;\n}\n\n.custom-control-label::after {\n  position: absolute;\n  top: 0.25rem;\n  left: 0;\n  display: block;\n  width: 1rem;\n  height: 1rem;\n  content: "";\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-size: 50% 50%;\n}\n\n.custom-checkbox .custom-control-label::before {\n  border-radius: 0.25rem;\n}\n\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3E%3Cpath fill=\'%23fff\' d=\'M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\'/%3E%3C/svg%3E");\n}\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 4\'%3E%3Cpath stroke=\'%23fff\' d=\'M0 2h4\'/%3E%3C/svg%3E");\n}\n\n.custom-checkbox .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-checkbox .custom-control-input:disabled:indeterminate ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-radio .custom-control-label::before {\n  border-radius: 50%;\n}\n\n.custom-radio .custom-control-input:checked ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-radio .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'%3E%3Ccircle r=\'3\' fill=\'%23fff\'/%3E%3C/svg%3E");\n}\n\n.custom-radio .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-select {\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 1.75rem 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  vertical-align: middle;\n  background: #fff url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3E%3Cpath fill=\'%23343a40\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3E%3C/svg%3E") no-repeat right 0.75rem center;\n  background-size: 8px 10px;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.custom-select:focus {\n  border-color: #80bdff;\n  outline: 0;\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075), 0 0 5px rgba(128, 189, 255, 0.5);\n}\n\n.custom-select:focus::-ms-value {\n  color: #495057;\n  background-color: #fff;\n}\n\n.custom-select[multiple], .custom-select[size]:not([size="1"]) {\n  height: auto;\n  padding-right: 0.75rem;\n  background-image: none;\n}\n\n.custom-select:disabled {\n  color: #6c757d;\n  background-color: #e9ecef;\n}\n\n.custom-select::-ms-expand {\n  opacity: 0;\n}\n\n.custom-select-sm {\n  height: calc(1.8125rem + 2px);\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 75%;\n}\n\n.custom-select-lg {\n  height: calc(2.875rem + 2px);\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 125%;\n}\n\n.custom-file {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin-bottom: 0;\n}\n\n.custom-file-input {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin: 0;\n  opacity: 0;\n}\n\n.custom-file-input:focus ~ .custom-file-control {\n  border-color: #80bdff;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-file-input:focus ~ .custom-file-control::before {\n  border-color: #80bdff;\n}\n\n.custom-file-input:lang(en) ~ .custom-file-label::after {\n  content: "Browse";\n}\n\n.custom-file-label {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n}\n\n.custom-file-label::after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 3;\n  display: block;\n  height: calc(calc(2.25rem + 2px) - 1px * 2);\n  padding: 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  content: "Browse";\n  background-color: #e9ecef;\n  border-left: 1px solid #ced4da;\n  border-radius: 0 0.25rem 0.25rem 0;\n}\n\n.nav {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.nav-link {\n  display: block;\n  padding: 0.5rem 1rem;\n}\n\n.nav-link:hover, .nav-link:focus {\n  text-decoration: none;\n}\n\n.nav-link.disabled {\n  color: #6c757d;\n}\n\n.nav-tabs {\n  border-bottom: 1px solid #dee2e6;\n}\n\n.nav-tabs .nav-item {\n  margin-bottom: -1px;\n}\n\n.nav-tabs .nav-link {\n  border: 1px solid transparent;\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.nav-tabs .nav-link:hover, .nav-tabs .nav-link:focus {\n  border-color: #e9ecef #e9ecef #dee2e6;\n}\n\n.nav-tabs .nav-link.disabled {\n  color: #6c757d;\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.nav-tabs .nav-link.active,\n.nav-tabs .nav-item.show .nav-link {\n  color: #495057;\n  background-color: #fff;\n  border-color: #dee2e6 #dee2e6 #fff;\n}\n\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.nav-pills .nav-link {\n  border-radius: 0.25rem;\n}\n\n.nav-pills .nav-link.active,\n.nav-pills .show > .nav-link {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.nav-fill .nav-item {\n  -webkit-box-flex: 1;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  text-align: center;\n}\n\n.nav-justified .nav-item {\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  -webkit-box-flex: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  text-align: center;\n}\n\n.tab-content > .tab-pane {\n  display: none;\n}\n\n.tab-content > .active {\n  display: block;\n}\n\n.navbar {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n}\n\n.navbar > .container,\n.navbar > .container-fluid {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n}\n\n.navbar-brand {\n  display: inline-block;\n  padding-top: 0.3125rem;\n  padding-bottom: 0.3125rem;\n  margin-right: 1rem;\n  font-size: 1.25rem;\n  line-height: inherit;\n  white-space: nowrap;\n}\n\n.navbar-brand:hover, .navbar-brand:focus {\n  text-decoration: none;\n}\n\n.navbar-nav {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.navbar-nav .nav-link {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.navbar-nav .dropdown-menu {\n  position: static;\n  float: none;\n}\n\n.navbar-text {\n  display: inline-block;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.navbar-collapse {\n  -ms-flex-preferred-size: 100%;\n  flex-basis: 100%;\n  -webkit-box-flex: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.navbar-toggler {\n  padding: 0.25rem 0.75rem;\n  font-size: 1.25rem;\n  line-height: 1;\n  background-color: transparent;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n}\n\n.navbar-toggler:hover, .navbar-toggler:focus {\n  text-decoration: none;\n}\n\n.navbar-toggler:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.navbar-toggler-icon {\n  display: inline-block;\n  width: 1.5em;\n  height: 1.5em;\n  vertical-align: middle;\n  content: "";\n  background: no-repeat center center;\n  background-size: 100% 100%;\n}\n\n@media (max-width: 575.98px) {\n  .navbar-expand-sm > .container,\n  .navbar-expand-sm > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 576px) {\n  .navbar-expand-sm {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-sm .navbar-nav {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-sm .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-sm .navbar-nav .dropdown-menu-right {\n    right: 0;\n    left: auto;\n  }\n  .navbar-expand-sm .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-sm > .container,\n  .navbar-expand-sm > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-sm .navbar-collapse {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-sm .navbar-toggler {\n    display: none;\n  }\n  .navbar-expand-sm .dropup .dropdown-menu {\n    top: auto;\n    bottom: 100%;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .navbar-expand-md > .container,\n  .navbar-expand-md > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 768px) {\n  .navbar-expand-md {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-md .navbar-nav {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-md .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-md .navbar-nav .dropdown-menu-right {\n    right: 0;\n    left: auto;\n  }\n  .navbar-expand-md .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-md > .container,\n  .navbar-expand-md > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-md .navbar-collapse {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-md .navbar-toggler {\n    display: none;\n  }\n  .navbar-expand-md .dropup .dropdown-menu {\n    top: auto;\n    bottom: 100%;\n  }\n}\n\n@media (max-width: 991.98px) {\n  .navbar-expand-lg > .container,\n  .navbar-expand-lg > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 992px) {\n  .navbar-expand-lg {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-lg .navbar-nav {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-lg .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-lg .navbar-nav .dropdown-menu-right {\n    right: 0;\n    left: auto;\n  }\n  .navbar-expand-lg .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-lg > .container,\n  .navbar-expand-lg > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-lg .navbar-collapse {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-lg .navbar-toggler {\n    display: none;\n  }\n  .navbar-expand-lg .dropup .dropdown-menu {\n    top: auto;\n    bottom: 100%;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  .navbar-expand-xl > .container,\n  .navbar-expand-xl > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 1200px) {\n  .navbar-expand-xl {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-xl .navbar-nav {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-xl .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-xl .navbar-nav .dropdown-menu-right {\n    right: 0;\n    left: auto;\n  }\n  .navbar-expand-xl .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-xl > .container,\n  .navbar-expand-xl > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-xl .navbar-collapse {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-xl .navbar-toggler {\n    display: none;\n  }\n  .navbar-expand-xl .dropup .dropdown-menu {\n    top: auto;\n    bottom: 100%;\n  }\n}\n\n.navbar-expand {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-flow: row nowrap;\n  flex-flow: row nowrap;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n}\n\n.navbar-expand > .container,\n.navbar-expand > .container-fluid {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.navbar-expand .navbar-nav {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n}\n\n.navbar-expand .navbar-nav .dropdown-menu {\n  position: absolute;\n}\n\n.navbar-expand .navbar-nav .dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n\n.navbar-expand .navbar-nav .nav-link {\n  padding-right: 0.5rem;\n  padding-left: 0.5rem;\n}\n\n.navbar-expand > .container,\n.navbar-expand > .container-fluid {\n  -ms-flex-wrap: nowrap;\n  flex-wrap: nowrap;\n}\n\n.navbar-expand .navbar-collapse {\n  display: -webkit-box !important;\n  display: -ms-flexbox !important;\n  display: flex !important;\n  -ms-flex-preferred-size: auto;\n  flex-basis: auto;\n}\n\n.navbar-expand .navbar-toggler {\n  display: none;\n}\n\n.navbar-expand .dropup .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n}\n\n.navbar-light .navbar-brand {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-brand:hover, .navbar-light .navbar-brand:focus {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-nav .nav-link {\n  color: rgba(0, 0, 0, 0.5);\n}\n\n.navbar-light .navbar-nav .nav-link:hover, .navbar-light .navbar-nav .nav-link:focus {\n  color: rgba(0, 0, 0, 0.7);\n}\n\n.navbar-light .navbar-nav .nav-link.disabled {\n  color: rgba(0, 0, 0, 0.3);\n}\n\n.navbar-light .navbar-nav .show > .nav-link,\n.navbar-light .navbar-nav .active > .nav-link,\n.navbar-light .navbar-nav .nav-link.show,\n.navbar-light .navbar-nav .nav-link.active {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-toggler {\n  color: rgba(0, 0, 0, 0.5);\n  border-color: rgba(0, 0, 0, 0.1);\n}\n\n.navbar-light .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(0, 0, 0, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E");\n}\n\n.navbar-light .navbar-text {\n  color: rgba(0, 0, 0, 0.5);\n}\n\n.navbar-light .navbar-text a {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-text a:hover, .navbar-light .navbar-text a:focus {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-dark .navbar-brand {\n  color: #fff;\n}\n\n.navbar-dark .navbar-brand:hover, .navbar-dark .navbar-brand:focus {\n  color: #fff;\n}\n\n.navbar-dark .navbar-nav .nav-link {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n.navbar-dark .navbar-nav .nav-link:hover, .navbar-dark .navbar-nav .nav-link:focus {\n  color: rgba(255, 255, 255, 0.75);\n}\n\n.navbar-dark .navbar-nav .nav-link.disabled {\n  color: rgba(255, 255, 255, 0.25);\n}\n\n.navbar-dark .navbar-nav .show > .nav-link,\n.navbar-dark .navbar-nav .active > .nav-link,\n.navbar-dark .navbar-nav .nav-link.show,\n.navbar-dark .navbar-nav .nav-link.active {\n  color: #fff;\n}\n\n.navbar-dark .navbar-toggler {\n  color: rgba(255, 255, 255, 0.5);\n  border-color: rgba(255, 255, 255, 0.1);\n}\n\n.navbar-dark .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(255, 255, 255, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E");\n}\n\n.navbar-dark .navbar-text {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n.navbar-dark .navbar-text a {\n  color: #fff;\n}\n\n.navbar-dark .navbar-text a:hover, .navbar-dark .navbar-text a:focus {\n  color: #fff;\n}\n\n.card {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  min-width: 0;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: border-box;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-radius: 0.25rem;\n}\n\n.card > hr {\n  margin-right: 0;\n  margin-left: 0;\n}\n\n.card > .list-group:first-child .list-group-item:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.card > .list-group:last-child .list-group-item:last-child {\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.card-body {\n  -webkit-box-flex: 1;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  padding: 1.25rem;\n}\n\n.card-title {\n  margin-bottom: 0.75rem;\n}\n\n.card-subtitle {\n  margin-top: -0.375rem;\n  margin-bottom: 0;\n}\n\n.card-text:last-child {\n  margin-bottom: 0;\n}\n\n.card-link:hover {\n  text-decoration: none;\n}\n\n.card-link + .card-link {\n  margin-left: 1.25rem;\n}\n\n.card-header {\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 0;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.card-header:first-child {\n  border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0;\n}\n\n.card-header + .list-group .list-group-item:first-child {\n  border-top: 0;\n}\n\n.card-footer {\n  padding: 0.75rem 1.25rem;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-top: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.card-footer:last-child {\n  border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px);\n}\n\n.card-header-tabs {\n  margin-right: -0.625rem;\n  margin-bottom: -0.75rem;\n  margin-left: -0.625rem;\n  border-bottom: 0;\n}\n\n.card-header-pills {\n  margin-right: -0.625rem;\n  margin-left: -0.625rem;\n}\n\n.card-img-overlay {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1.25rem;\n}\n\n.card-img {\n  width: 100%;\n  border-radius: calc(0.25rem - 1px);\n}\n\n.card-img-top {\n  width: 100%;\n  border-top-left-radius: calc(0.25rem - 1px);\n  border-top-right-radius: calc(0.25rem - 1px);\n}\n\n.card-img-bottom {\n  width: 100%;\n  border-bottom-right-radius: calc(0.25rem - 1px);\n  border-bottom-left-radius: calc(0.25rem - 1px);\n}\n\n.card-deck {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n\n.card-deck .card {\n  margin-bottom: 15px;\n}\n\n@media (min-width: 576px) {\n  .card-deck {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n    margin-right: -15px;\n    margin-left: -15px;\n  }\n  .card-deck .card {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-flex: 1;\n    -ms-flex: 1 0 0%;\n    flex: 1 0 0%;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    margin-right: 15px;\n    margin-bottom: 0;\n    margin-left: 15px;\n  }\n}\n\n.card-group {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n\n.card-group > .card {\n  margin-bottom: 15px;\n}\n\n@media (min-width: 576px) {\n  .card-group {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n  }\n  .card-group > .card {\n    -webkit-box-flex: 1;\n    -ms-flex: 1 0 0%;\n    flex: 1 0 0%;\n    margin-bottom: 0;\n  }\n  .card-group > .card + .card {\n    margin-left: 0;\n    border-left: 0;\n  }\n  .card-group > .card:first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  .card-group > .card:first-child .card-img-top,\n  .card-group > .card:first-child .card-header {\n    border-top-right-radius: 0;\n  }\n  .card-group > .card:first-child .card-img-bottom,\n  .card-group > .card:first-child .card-footer {\n    border-bottom-right-radius: 0;\n  }\n  .card-group > .card:last-child {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .card-group > .card:last-child .card-img-top,\n  .card-group > .card:last-child .card-header {\n    border-top-left-radius: 0;\n  }\n  .card-group > .card:last-child .card-img-bottom,\n  .card-group > .card:last-child .card-footer {\n    border-bottom-left-radius: 0;\n  }\n  .card-group > .card:only-child {\n    border-radius: 0.25rem;\n  }\n  .card-group > .card:only-child .card-img-top,\n  .card-group > .card:only-child .card-header {\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n  }\n  .card-group > .card:only-child .card-img-bottom,\n  .card-group > .card:only-child .card-footer {\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n  }\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) {\n    border-radius: 0;\n  }\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-top,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-header,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-footer {\n    border-radius: 0;\n  }\n}\n\n.card-columns .card {\n  margin-bottom: 0.75rem;\n}\n\n@media (min-width: 576px) {\n  .card-columns {\n    -webkit-column-count: 3;\n    -moz-column-count: 3;\n    column-count: 3;\n    -webkit-column-gap: 1.25rem;\n    -moz-column-gap: 1.25rem;\n    column-gap: 1.25rem;\n  }\n  .card-columns .card {\n    display: inline-block;\n    width: 100%;\n  }\n}\n\n.breadcrumb {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 0.75rem 1rem;\n  margin-bottom: 1rem;\n  list-style: none;\n  background-color: #e9ecef;\n  border-radius: 0.25rem;\n}\n\n.breadcrumb-item + .breadcrumb-item::before {\n  display: inline-block;\n  padding-right: 0.5rem;\n  padding-left: 0.5rem;\n  color: #6c757d;\n  content: "/";\n}\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: underline;\n}\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: none;\n}\n\n.breadcrumb-item.active {\n  color: #6c757d;\n}\n\n.pagination {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  padding-left: 0;\n  list-style: none;\n  border-radius: 0.25rem;\n}\n\n.page-link {\n  position: relative;\n  display: block;\n  padding: 0.5rem 0.75rem;\n  margin-left: -1px;\n  line-height: 1.25;\n  color: #007bff;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n}\n\n.page-link:hover {\n  color: #0056b3;\n  text-decoration: none;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n\n.page-link:focus {\n  z-index: 2;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.page-link:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.page-item:first-child .page-link {\n  margin-left: 0;\n  border-top-left-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.page-item:last-child .page-link {\n  border-top-right-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.page-item.active .page-link {\n  z-index: 1;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.page-item.disabled .page-link {\n  color: #6c757d;\n  pointer-events: none;\n  cursor: auto;\n  background-color: #fff;\n  border-color: #dee2e6;\n}\n\n.pagination-lg .page-link {\n  padding: 0.75rem 1.5rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.pagination-lg .page-item:first-child .page-link {\n  border-top-left-radius: 0.3rem;\n  border-bottom-left-radius: 0.3rem;\n}\n\n.pagination-lg .page-item:last-child .page-link {\n  border-top-right-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem;\n}\n\n.pagination-sm .page-link {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n.pagination-sm .page-item:first-child .page-link {\n  border-top-left-radius: 0.2rem;\n  border-bottom-left-radius: 0.2rem;\n}\n\n.pagination-sm .page-item:last-child .page-link {\n  border-top-right-radius: 0.2rem;\n  border-bottom-right-radius: 0.2rem;\n}\n\n.badge {\n  display: inline-block;\n  padding: 0.25em 0.4em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: 0.25rem;\n}\n\n.badge:empty {\n  display: none;\n}\n\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n\n.badge-pill {\n  padding-right: 0.6em;\n  padding-left: 0.6em;\n  border-radius: 10rem;\n}\n\n.badge-primary {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.badge-primary[href]:hover, .badge-primary[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #0062cc;\n}\n\n.badge-secondary {\n  color: #fff;\n  background-color: #6c757d;\n}\n\n.badge-secondary[href]:hover, .badge-secondary[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #545b62;\n}\n\n.badge-success {\n  color: #fff;\n  background-color: #28a745;\n}\n\n.badge-success[href]:hover, .badge-success[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #1e7e34;\n}\n\n.badge-info {\n  color: #fff;\n  background-color: #17a2b8;\n}\n\n.badge-info[href]:hover, .badge-info[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #117a8b;\n}\n\n.badge-warning {\n  color: #212529;\n  background-color: #ffc107;\n}\n\n.badge-warning[href]:hover, .badge-warning[href]:focus {\n  color: #212529;\n  text-decoration: none;\n  background-color: #d39e00;\n}\n\n.badge-danger {\n  color: #fff;\n  background-color: #dc3545;\n}\n\n.badge-danger[href]:hover, .badge-danger[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #bd2130;\n}\n\n.badge-light {\n  color: #212529;\n  background-color: #f8f9fa;\n}\n\n.badge-light[href]:hover, .badge-light[href]:focus {\n  color: #212529;\n  text-decoration: none;\n  background-color: #dae0e5;\n}\n\n.badge-dark {\n  color: #fff;\n  background-color: #343a40;\n}\n\n.badge-dark[href]:hover, .badge-dark[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #1d2124;\n}\n\n.jumbotron {\n  padding: 2rem 1rem;\n  margin-bottom: 2rem;\n  background-color: #e9ecef;\n  border-radius: 0.3rem;\n}\n\n@media (min-width: 576px) {\n  .jumbotron {\n    padding: 4rem 2rem;\n  }\n}\n\n.jumbotron-fluid {\n  padding-right: 0;\n  padding-left: 0;\n  border-radius: 0;\n}\n\n.alert {\n  position: relative;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 1rem;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n}\n\n.alert-heading {\n  color: inherit;\n}\n\n.alert-link {\n  font-weight: 700;\n}\n\n.alert-dismissible {\n  padding-right: 4rem;\n}\n\n.alert-dismissible .close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 0.75rem 1.25rem;\n  color: inherit;\n}\n\n.alert-primary {\n  color: #004085;\n  background-color: #cce5ff;\n  border-color: #b8daff;\n}\n\n.alert-primary hr {\n  border-top-color: #9fcdff;\n}\n\n.alert-primary .alert-link {\n  color: #002752;\n}\n\n.alert-secondary {\n  color: #383d41;\n  background-color: #e2e3e5;\n  border-color: #d6d8db;\n}\n\n.alert-secondary hr {\n  border-top-color: #c8cbcf;\n}\n\n.alert-secondary .alert-link {\n  color: #202326;\n}\n\n.alert-success {\n  color: #155724;\n  background-color: #d4edda;\n  border-color: #c3e6cb;\n}\n\n.alert-success hr {\n  border-top-color: #b1dfbb;\n}\n\n.alert-success .alert-link {\n  color: #0b2e13;\n}\n\n.alert-info {\n  color: #0c5460;\n  background-color: #d1ecf1;\n  border-color: #bee5eb;\n}\n\n.alert-info hr {\n  border-top-color: #abdde5;\n}\n\n.alert-info .alert-link {\n  color: #062c33;\n}\n\n.alert-warning {\n  color: #856404;\n  background-color: #fff3cd;\n  border-color: #ffeeba;\n}\n\n.alert-warning hr {\n  border-top-color: #ffe8a1;\n}\n\n.alert-warning .alert-link {\n  color: #533f03;\n}\n\n.alert-danger {\n  color: #721c24;\n  background-color: #f8d7da;\n  border-color: #f5c6cb;\n}\n\n.alert-danger hr {\n  border-top-color: #f1b0b7;\n}\n\n.alert-danger .alert-link {\n  color: #491217;\n}\n\n.alert-light {\n  color: #818182;\n  background-color: #fefefe;\n  border-color: #fdfdfe;\n}\n\n.alert-light hr {\n  border-top-color: #ececf6;\n}\n\n.alert-light .alert-link {\n  color: #686868;\n}\n\n.alert-dark {\n  color: #1b1e21;\n  background-color: #d6d8d9;\n  border-color: #c6c8ca;\n}\n\n.alert-dark hr {\n  border-top-color: #b9bbbe;\n}\n\n.alert-dark .alert-link {\n  color: #040505;\n}\n\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n.progress {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  height: 1rem;\n  overflow: hidden;\n  font-size: 0.75rem;\n  background-color: #e9ecef;\n  border-radius: 0.25rem;\n}\n\n.progress-bar {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  color: #fff;\n  text-align: center;\n  background-color: #007bff;\n  transition: width 0.6s ease;\n}\n\n.progress-bar-striped {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 1rem 1rem;\n}\n\n.progress-bar-animated {\n  -webkit-animation: progress-bar-stripes 1s linear infinite;\n  animation: progress-bar-stripes 1s linear infinite;\n}\n\n.media {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n}\n\n.media-body {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n}\n\n.list-group {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n}\n\n.list-group-item-action {\n  width: 100%;\n  color: #495057;\n  text-align: inherit;\n}\n\n.list-group-item-action:hover, .list-group-item-action:focus {\n  color: #495057;\n  text-decoration: none;\n  background-color: #f8f9fa;\n}\n\n.list-group-item-action:active {\n  color: #212529;\n  background-color: #e9ecef;\n}\n\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.list-group-item:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.list-group-item:hover, .list-group-item:focus {\n  z-index: 1;\n  text-decoration: none;\n}\n\n.list-group-item.disabled, .list-group-item:disabled {\n  color: #6c757d;\n  background-color: #fff;\n}\n\n.list-group-item.active {\n  z-index: 2;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.list-group-flush .list-group-item {\n  border-right: 0;\n  border-left: 0;\n  border-radius: 0;\n}\n\n.list-group-flush:first-child .list-group-item:first-child {\n  border-top: 0;\n}\n\n.list-group-flush:last-child .list-group-item:last-child {\n  border-bottom: 0;\n}\n\n.list-group-item-primary {\n  color: #004085;\n  background-color: #b8daff;\n}\n\n.list-group-item-primary.list-group-item-action:hover, .list-group-item-primary.list-group-item-action:focus {\n  color: #004085;\n  background-color: #9fcdff;\n}\n\n.list-group-item-primary.list-group-item-action.active {\n  color: #fff;\n  background-color: #004085;\n  border-color: #004085;\n}\n\n.list-group-item-secondary {\n  color: #383d41;\n  background-color: #d6d8db;\n}\n\n.list-group-item-secondary.list-group-item-action:hover, .list-group-item-secondary.list-group-item-action:focus {\n  color: #383d41;\n  background-color: #c8cbcf;\n}\n\n.list-group-item-secondary.list-group-item-action.active {\n  color: #fff;\n  background-color: #383d41;\n  border-color: #383d41;\n}\n\n.list-group-item-success {\n  color: #155724;\n  background-color: #c3e6cb;\n}\n\n.list-group-item-success.list-group-item-action:hover, .list-group-item-success.list-group-item-action:focus {\n  color: #155724;\n  background-color: #b1dfbb;\n}\n\n.list-group-item-success.list-group-item-action.active {\n  color: #fff;\n  background-color: #155724;\n  border-color: #155724;\n}\n\n.list-group-item-info {\n  color: #0c5460;\n  background-color: #bee5eb;\n}\n\n.list-group-item-info.list-group-item-action:hover, .list-group-item-info.list-group-item-action:focus {\n  color: #0c5460;\n  background-color: #abdde5;\n}\n\n.list-group-item-info.list-group-item-action.active {\n  color: #fff;\n  background-color: #0c5460;\n  border-color: #0c5460;\n}\n\n.list-group-item-warning {\n  color: #856404;\n  background-color: #ffeeba;\n}\n\n.list-group-item-warning.list-group-item-action:hover, .list-group-item-warning.list-group-item-action:focus {\n  color: #856404;\n  background-color: #ffe8a1;\n}\n\n.list-group-item-warning.list-group-item-action.active {\n  color: #fff;\n  background-color: #856404;\n  border-color: #856404;\n}\n\n.list-group-item-danger {\n  color: #721c24;\n  background-color: #f5c6cb;\n}\n\n.list-group-item-danger.list-group-item-action:hover, .list-group-item-danger.list-group-item-action:focus {\n  color: #721c24;\n  background-color: #f1b0b7;\n}\n\n.list-group-item-danger.list-group-item-action.active {\n  color: #fff;\n  background-color: #721c24;\n  border-color: #721c24;\n}\n\n.list-group-item-light {\n  color: #818182;\n  background-color: #fdfdfe;\n}\n\n.list-group-item-light.list-group-item-action:hover, .list-group-item-light.list-group-item-action:focus {\n  color: #818182;\n  background-color: #ececf6;\n}\n\n.list-group-item-light.list-group-item-action.active {\n  color: #fff;\n  background-color: #818182;\n  border-color: #818182;\n}\n\n.list-group-item-dark {\n  color: #1b1e21;\n  background-color: #c6c8ca;\n}\n\n.list-group-item-dark.list-group-item-action:hover, .list-group-item-dark.list-group-item-action:focus {\n  color: #1b1e21;\n  background-color: #b9bbbe;\n}\n\n.list-group-item-dark.list-group-item-action.active {\n  color: #fff;\n  background-color: #1b1e21;\n  border-color: #1b1e21;\n}\n\n.close {\n  float: right;\n  font-size: 1.5rem;\n  font-weight: 700;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  opacity: .5;\n}\n\n.close:hover, .close:focus {\n  color: #000;\n  text-decoration: none;\n  opacity: .75;\n}\n\n.close:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\nbutton.close {\n  padding: 0;\n  background-color: transparent;\n  border: 0;\n  -webkit-appearance: none;\n}\n\n.modal-open {\n  overflow: hidden;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  overflow: hidden;\n  outline: 0;\n}\n\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 0.5rem;\n  pointer-events: none;\n}\n\n.modal.fade .modal-dialog {\n  transition: -webkit-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\n  -webkit-transform: translate(0, -25%);\n  transform: translate(0, -25%);\n}\n\n.modal.show .modal-dialog {\n  -webkit-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n\n.modal-dialog-centered {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  min-height: calc(100% - (0.5rem * 2));\n}\n\n.modal-content {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n  outline: 0;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n\n.modal-backdrop.fade {\n  opacity: 0;\n}\n\n.modal-backdrop.show {\n  opacity: 0.5;\n}\n\n.modal-header {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 1rem;\n  border-bottom: 1px solid #e9ecef;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n}\n\n.modal-header .close {\n  padding: 1rem;\n  margin: -1rem -1rem -1rem auto;\n}\n\n.modal-title {\n  margin-bottom: 0;\n  line-height: 1.5;\n}\n\n.modal-body {\n  position: relative;\n  -webkit-box-flex: 1;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  padding: 1rem;\n}\n\n.modal-footer {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  justify-content: flex-end;\n  padding: 1rem;\n  border-top: 1px solid #e9ecef;\n}\n\n.modal-footer > :not(:first-child) {\n  margin-left: .25rem;\n}\n\n.modal-footer > :not(:last-child) {\n  margin-right: .25rem;\n}\n\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n\n@media (min-width: 576px) {\n  .modal-dialog {\n    max-width: 500px;\n    margin: 1.75rem auto;\n  }\n  .modal-dialog-centered {\n    min-height: calc(100% - (1.75rem * 2));\n  }\n  .modal-sm {\n    max-width: 300px;\n  }\n}\n\n@media (min-width: 992px) {\n  .modal-lg {\n    max-width: 800px;\n  }\n}\n\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  opacity: 0;\n}\n\n.tooltip.show {\n  opacity: 0.9;\n}\n\n.tooltip .arrow {\n  position: absolute;\n  display: block;\n  width: 0.8rem;\n  height: 0.4rem;\n}\n\n.tooltip .arrow::before {\n  position: absolute;\n  content: "";\n  border-color: transparent;\n  border-style: solid;\n}\n\n.bs-tooltip-top, .bs-tooltip-auto[x-placement^="top"] {\n  padding: 0.4rem 0;\n}\n\n.bs-tooltip-top .arrow, .bs-tooltip-auto[x-placement^="top"] .arrow {\n  bottom: 0;\n}\n\n.bs-tooltip-top .arrow::before, .bs-tooltip-auto[x-placement^="top"] .arrow::before {\n  top: 0;\n  border-width: 0.4rem 0.4rem 0;\n  border-top-color: #000;\n}\n\n.bs-tooltip-right, .bs-tooltip-auto[x-placement^="right"] {\n  padding: 0 0.4rem;\n}\n\n.bs-tooltip-right .arrow, .bs-tooltip-auto[x-placement^="right"] .arrow {\n  left: 0;\n  width: 0.4rem;\n  height: 0.8rem;\n}\n\n.bs-tooltip-right .arrow::before, .bs-tooltip-auto[x-placement^="right"] .arrow::before {\n  right: 0;\n  border-width: 0.4rem 0.4rem 0.4rem 0;\n  border-right-color: #000;\n}\n\n.bs-tooltip-bottom, .bs-tooltip-auto[x-placement^="bottom"] {\n  padding: 0.4rem 0;\n}\n\n.bs-tooltip-bottom .arrow, .bs-tooltip-auto[x-placement^="bottom"] .arrow {\n  top: 0;\n}\n\n.bs-tooltip-bottom .arrow::before, .bs-tooltip-auto[x-placement^="bottom"] .arrow::before {\n  bottom: 0;\n  border-width: 0 0.4rem 0.4rem;\n  border-bottom-color: #000;\n}\n\n.bs-tooltip-left, .bs-tooltip-auto[x-placement^="left"] {\n  padding: 0 0.4rem;\n}\n\n.bs-tooltip-left .arrow, .bs-tooltip-auto[x-placement^="left"] .arrow {\n  right: 0;\n  width: 0.4rem;\n  height: 0.8rem;\n}\n\n.bs-tooltip-left .arrow::before, .bs-tooltip-auto[x-placement^="left"] .arrow::before {\n  left: 0;\n  border-width: 0.4rem 0 0.4rem 0.4rem;\n  border-left-color: #000;\n}\n\n.tooltip-inner {\n  max-width: 200px;\n  padding: 0.25rem 0.5rem;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 0.25rem;\n}\n\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: block;\n  max-width: 276px;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n}\n\n.popover .arrow {\n  position: absolute;\n  display: block;\n  width: 1rem;\n  height: 0.5rem;\n  margin: 0 0.3rem;\n}\n\n.popover .arrow::before, .popover .arrow::after {\n  position: absolute;\n  display: block;\n  content: "";\n  border-color: transparent;\n  border-style: solid;\n}\n\n.bs-popover-top, .bs-popover-auto[x-placement^="top"] {\n  margin-bottom: 0.5rem;\n}\n\n.bs-popover-top .arrow, .bs-popover-auto[x-placement^="top"] .arrow {\n  bottom: calc((0.5rem + 1px) * -1);\n}\n\n.bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before,\n.bs-popover-top .arrow::after, .bs-popover-auto[x-placement^="top"] .arrow::after {\n  border-width: 0.5rem 0.5rem 0;\n}\n\n.bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before {\n  bottom: 0;\n  border-top-color: rgba(0, 0, 0, 0.25);\n}\n\n.bs-popover-top .arrow::after, .bs-popover-auto[x-placement^="top"] .arrow::after {\n  bottom: 1px;\n  border-top-color: #fff;\n}\n\n.bs-popover-right, .bs-popover-auto[x-placement^="right"] {\n  margin-left: 0.5rem;\n}\n\n.bs-popover-right .arrow, .bs-popover-auto[x-placement^="right"] .arrow {\n  left: calc((0.5rem + 1px) * -1);\n  width: 0.5rem;\n  height: 1rem;\n  margin: 0.3rem 0;\n}\n\n.bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before,\n.bs-popover-right .arrow::after, .bs-popover-auto[x-placement^="right"] .arrow::after {\n  border-width: 0.5rem 0.5rem 0.5rem 0;\n}\n\n.bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before {\n  left: 0;\n  border-right-color: rgba(0, 0, 0, 0.25);\n}\n\n.bs-popover-right .arrow::after, .bs-popover-auto[x-placement^="right"] .arrow::after {\n  left: 1px;\n  border-right-color: #fff;\n}\n\n.bs-popover-bottom, .bs-popover-auto[x-placement^="bottom"] {\n  margin-top: 0.5rem;\n}\n\n.bs-popover-bottom .arrow, .bs-popover-auto[x-placement^="bottom"] .arrow {\n  top: calc((0.5rem + 1px) * -1);\n}\n\n.bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before,\n.bs-popover-bottom .arrow::after, .bs-popover-auto[x-placement^="bottom"] .arrow::after {\n  border-width: 0 0.5rem 0.5rem 0.5rem;\n}\n\n.bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before {\n  top: 0;\n  border-bottom-color: rgba(0, 0, 0, 0.25);\n}\n\n.bs-popover-bottom .arrow::after, .bs-popover-auto[x-placement^="bottom"] .arrow::after {\n  top: 1px;\n  border-bottom-color: #fff;\n}\n\n.bs-popover-bottom .popover-header::before, .bs-popover-auto[x-placement^="bottom"] .popover-header::before {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  display: block;\n  width: 1rem;\n  margin-left: -0.5rem;\n  content: "";\n  border-bottom: 1px solid #f7f7f7;\n}\n\n.bs-popover-left, .bs-popover-auto[x-placement^="left"] {\n  margin-right: 0.5rem;\n}\n\n.bs-popover-left .arrow, .bs-popover-auto[x-placement^="left"] .arrow {\n  right: calc((0.5rem + 1px) * -1);\n  width: 0.5rem;\n  height: 1rem;\n  margin: 0.3rem 0;\n}\n\n.bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before,\n.bs-popover-left .arrow::after, .bs-popover-auto[x-placement^="left"] .arrow::after {\n  border-width: 0.5rem 0 0.5rem 0.5rem;\n}\n\n.bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before {\n  right: 0;\n  border-left-color: rgba(0, 0, 0, 0.25);\n}\n\n.bs-popover-left .arrow::after, .bs-popover-auto[x-placement^="left"] .arrow::after {\n  right: 1px;\n  border-left-color: #fff;\n}\n\n.popover-header {\n  padding: 0.5rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  color: inherit;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-top-left-radius: calc(0.3rem - 1px);\n  border-top-right-radius: calc(0.3rem - 1px);\n}\n\n.popover-header:empty {\n  display: none;\n}\n\n.popover-body {\n  padding: 0.5rem 0.75rem;\n  color: #212529;\n}\n\n.carousel {\n  position: relative;\n}\n\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n\n.carousel-item {\n  position: relative;\n  display: none;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  width: 100%;\n  transition: -webkit-transform 0.6s ease;\n  transition: transform 0.6s ease;\n  transition: transform 0.6s ease, -webkit-transform 0.6s ease;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  -webkit-perspective: 1000px;\n  perspective: 1000px;\n}\n\n.carousel-item.active,\n.carousel-item-next,\n.carousel-item-prev {\n  display: block;\n}\n\n.carousel-item-next,\n.carousel-item-prev {\n  position: absolute;\n  top: 0;\n}\n\n.carousel-item-next.carousel-item-left,\n.carousel-item-prev.carousel-item-right {\n  -webkit-transform: translateX(0);\n  transform: translateX(0);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-next.carousel-item-left,\n  .carousel-item-prev.carousel-item-right {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.carousel-item-next,\n.active.carousel-item-right {\n  -webkit-transform: translateX(100%);\n  transform: translateX(100%);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-next,\n  .active.carousel-item-right {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n  }\n}\n\n.carousel-item-prev,\n.active.carousel-item-left {\n  -webkit-transform: translateX(-100%);\n  transform: translateX(-100%);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-prev,\n  .active.carousel-item-left {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n  }\n}\n\n.carousel-control-prev,\n.carousel-control-next {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 15%;\n  color: #fff;\n  text-align: center;\n  opacity: 0.5;\n}\n\n.carousel-control-prev:hover, .carousel-control-prev:focus,\n.carousel-control-next:hover,\n.carousel-control-next:focus {\n  color: #fff;\n  text-decoration: none;\n  outline: 0;\n  opacity: .9;\n}\n\n.carousel-control-prev {\n  left: 0;\n}\n\n.carousel-control-next {\n  right: 0;\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  background: transparent no-repeat center center;\n  background-size: 100% 100%;\n}\n\n.carousel-control-prev-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3E%3Cpath d=\'M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z\'/%3E%3C/svg%3E");\n}\n\n.carousel-control-next-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3E%3Cpath d=\'M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z\'/%3E%3C/svg%3E");\n}\n\n.carousel-indicators {\n  position: absolute;\n  right: 0;\n  bottom: 10px;\n  left: 0;\n  z-index: 15;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  padding-left: 0;\n  margin-right: 15%;\n  margin-left: 15%;\n  list-style: none;\n}\n\n.carousel-indicators li {\n  position: relative;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n  width: 30px;\n  height: 3px;\n  margin-right: 3px;\n  margin-left: 3px;\n  text-indent: -999px;\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n.carousel-indicators li::before {\n  position: absolute;\n  top: -10px;\n  left: 0;\n  display: inline-block;\n  width: 100%;\n  height: 10px;\n  content: "";\n}\n\n.carousel-indicators li::after {\n  position: absolute;\n  bottom: -10px;\n  left: 0;\n  display: inline-block;\n  width: 100%;\n  height: 10px;\n  content: "";\n}\n\n.carousel-indicators .active {\n  background-color: #fff;\n}\n\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n}\n\n.align-baseline {\n  vertical-align: baseline !important;\n}\n\n.align-top {\n  vertical-align: top !important;\n}\n\n.align-middle {\n  vertical-align: middle !important;\n}\n\n.align-bottom {\n  vertical-align: bottom !important;\n}\n\n.align-text-bottom {\n  vertical-align: text-bottom !important;\n}\n\n.align-text-top {\n  vertical-align: text-top !important;\n}\n\n.bg-primary {\n  background-color: #007bff !important;\n}\n\na.bg-primary:hover, a.bg-primary:focus,\nbutton.bg-primary:hover,\nbutton.bg-primary:focus {\n  background-color: #0062cc !important;\n}\n\n.bg-secondary {\n  background-color: #6c757d !important;\n}\n\na.bg-secondary:hover, a.bg-secondary:focus,\nbutton.bg-secondary:hover,\nbutton.bg-secondary:focus {\n  background-color: #545b62 !important;\n}\n\n.bg-success {\n  background-color: #28a745 !important;\n}\n\na.bg-success:hover, a.bg-success:focus,\nbutton.bg-success:hover,\nbutton.bg-success:focus {\n  background-color: #1e7e34 !important;\n}\n\n.bg-info {\n  background-color: #17a2b8 !important;\n}\n\na.bg-info:hover, a.bg-info:focus,\nbutton.bg-info:hover,\nbutton.bg-info:focus {\n  background-color: #117a8b !important;\n}\n\n.bg-warning {\n  background-color: #ffc107 !important;\n}\n\na.bg-warning:hover, a.bg-warning:focus,\nbutton.bg-warning:hover,\nbutton.bg-warning:focus {\n  background-color: #d39e00 !important;\n}\n\n.bg-danger {\n  background-color: #dc3545 !important;\n}\n\na.bg-danger:hover, a.bg-danger:focus,\nbutton.bg-danger:hover,\nbutton.bg-danger:focus {\n  background-color: #bd2130 !important;\n}\n\n.bg-light {\n  background-color: #f8f9fa !important;\n}\n\na.bg-light:hover, a.bg-light:focus,\nbutton.bg-light:hover,\nbutton.bg-light:focus {\n  background-color: #dae0e5 !important;\n}\n\n.bg-dark {\n  background-color: #343a40 !important;\n}\n\na.bg-dark:hover, a.bg-dark:focus,\nbutton.bg-dark:hover,\nbutton.bg-dark:focus {\n  background-color: #1d2124 !important;\n}\n\n.bg-white {\n  background-color: #fff !important;\n}\n\n.bg-transparent {\n  background-color: transparent !important;\n}\n\n.border {\n  border: 1px solid #dee2e6 !important;\n}\n\n.border-top {\n  border-top: 1px solid #dee2e6 !important;\n}\n\n.border-right {\n  border-right: 1px solid #dee2e6 !important;\n}\n\n.border-bottom {\n  border-bottom: 1px solid #dee2e6 !important;\n}\n\n.border-left {\n  border-left: 1px solid #dee2e6 !important;\n}\n\n.border-0 {\n  border: 0 !important;\n}\n\n.border-top-0 {\n  border-top: 0 !important;\n}\n\n.border-right-0 {\n  border-right: 0 !important;\n}\n\n.border-bottom-0 {\n  border-bottom: 0 !important;\n}\n\n.border-left-0 {\n  border-left: 0 !important;\n}\n\n.border-primary {\n  border-color: #007bff !important;\n}\n\n.border-secondary {\n  border-color: #6c757d !important;\n}\n\n.border-success {\n  border-color: #28a745 !important;\n}\n\n.border-info {\n  border-color: #17a2b8 !important;\n}\n\n.border-warning {\n  border-color: #ffc107 !important;\n}\n\n.border-danger {\n  border-color: #dc3545 !important;\n}\n\n.border-light {\n  border-color: #f8f9fa !important;\n}\n\n.border-dark {\n  border-color: #343a40 !important;\n}\n\n.border-white {\n  border-color: #fff !important;\n}\n\n.rounded {\n  border-radius: 0.25rem !important;\n}\n\n.rounded-top {\n  border-top-left-radius: 0.25rem !important;\n  border-top-right-radius: 0.25rem !important;\n}\n\n.rounded-right {\n  border-top-right-radius: 0.25rem !important;\n  border-bottom-right-radius: 0.25rem !important;\n}\n\n.rounded-bottom {\n  border-bottom-right-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important;\n}\n\n.rounded-left {\n  border-top-left-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important;\n}\n\n.rounded-circle {\n  border-radius: 50% !important;\n}\n\n.rounded-0 {\n  border-radius: 0 !important;\n}\n\n.clearfix::after {\n  display: block;\n  clear: both;\n  content: "";\n}\n\n.d-none {\n  display: none !important;\n}\n\n.d-inline {\n  display: inline !important;\n}\n\n.d-inline-block {\n  display: inline-block !important;\n}\n\n.d-block {\n  display: block !important;\n}\n\n.d-table {\n  display: table !important;\n}\n\n.d-table-row {\n  display: table-row !important;\n}\n\n.d-table-cell {\n  display: table-cell !important;\n}\n\n.d-flex {\n  display: -webkit-box !important;\n  display: -ms-flexbox !important;\n  display: flex !important;\n}\n\n.d-inline-flex {\n  display: -webkit-inline-box !important;\n  display: -ms-inline-flexbox !important;\n  display: inline-flex !important;\n}\n\n@media (min-width: 576px) {\n  .d-sm-none {\n    display: none !important;\n  }\n  .d-sm-inline {\n    display: inline !important;\n  }\n  .d-sm-inline-block {\n    display: inline-block !important;\n  }\n  .d-sm-block {\n    display: block !important;\n  }\n  .d-sm-table {\n    display: table !important;\n  }\n  .d-sm-table-row {\n    display: table-row !important;\n  }\n  .d-sm-table-cell {\n    display: table-cell !important;\n  }\n  .d-sm-flex {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-sm-inline-flex {\n    display: -webkit-inline-box !important;\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .d-md-none {\n    display: none !important;\n  }\n  .d-md-inline {\n    display: inline !important;\n  }\n  .d-md-inline-block {\n    display: inline-block !important;\n  }\n  .d-md-block {\n    display: block !important;\n  }\n  .d-md-table {\n    display: table !important;\n  }\n  .d-md-table-row {\n    display: table-row !important;\n  }\n  .d-md-table-cell {\n    display: table-cell !important;\n  }\n  .d-md-flex {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-md-inline-flex {\n    display: -webkit-inline-box !important;\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .d-lg-none {\n    display: none !important;\n  }\n  .d-lg-inline {\n    display: inline !important;\n  }\n  .d-lg-inline-block {\n    display: inline-block !important;\n  }\n  .d-lg-block {\n    display: block !important;\n  }\n  .d-lg-table {\n    display: table !important;\n  }\n  .d-lg-table-row {\n    display: table-row !important;\n  }\n  .d-lg-table-cell {\n    display: table-cell !important;\n  }\n  .d-lg-flex {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-lg-inline-flex {\n    display: -webkit-inline-box !important;\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .d-xl-none {\n    display: none !important;\n  }\n  .d-xl-inline {\n    display: inline !important;\n  }\n  .d-xl-inline-block {\n    display: inline-block !important;\n  }\n  .d-xl-block {\n    display: block !important;\n  }\n  .d-xl-table {\n    display: table !important;\n  }\n  .d-xl-table-row {\n    display: table-row !important;\n  }\n  .d-xl-table-cell {\n    display: table-cell !important;\n  }\n  .d-xl-flex {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-xl-inline-flex {\n    display: -webkit-inline-box !important;\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media print {\n  .d-print-none {\n    display: none !important;\n  }\n  .d-print-inline {\n    display: inline !important;\n  }\n  .d-print-inline-block {\n    display: inline-block !important;\n  }\n  .d-print-block {\n    display: block !important;\n  }\n  .d-print-table {\n    display: table !important;\n  }\n  .d-print-table-row {\n    display: table-row !important;\n  }\n  .d-print-table-cell {\n    display: table-cell !important;\n  }\n  .d-print-flex {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-print-inline-flex {\n    display: -webkit-inline-box !important;\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n.embed-responsive {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: 0;\n  overflow: hidden;\n}\n\n.embed-responsive::before {\n  display: block;\n  content: "";\n}\n\n.embed-responsive .embed-responsive-item,\n.embed-responsive iframe,\n.embed-responsive embed,\n.embed-responsive object,\n.embed-responsive video {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n\n.embed-responsive-21by9::before {\n  padding-top: 42.857143%;\n}\n\n.embed-responsive-16by9::before {\n  padding-top: 56.25%;\n}\n\n.embed-responsive-4by3::before {\n  padding-top: 75%;\n}\n\n.embed-responsive-1by1::before {\n  padding-top: 100%;\n}\n\n.flex-row {\n  -webkit-box-orient: horizontal !important;\n  -webkit-box-direction: normal !important;\n  -ms-flex-direction: row !important;\n  flex-direction: row !important;\n}\n\n.flex-column {\n  -webkit-box-orient: vertical !important;\n  -webkit-box-direction: normal !important;\n  -ms-flex-direction: column !important;\n  flex-direction: column !important;\n}\n\n.flex-row-reverse {\n  -webkit-box-orient: horizontal !important;\n  -webkit-box-direction: reverse !important;\n  -ms-flex-direction: row-reverse !important;\n  flex-direction: row-reverse !important;\n}\n\n.flex-column-reverse {\n  -webkit-box-orient: vertical !important;\n  -webkit-box-direction: reverse !important;\n  -ms-flex-direction: column-reverse !important;\n  flex-direction: column-reverse !important;\n}\n\n.flex-wrap {\n  -ms-flex-wrap: wrap !important;\n  flex-wrap: wrap !important;\n}\n\n.flex-nowrap {\n  -ms-flex-wrap: nowrap !important;\n  flex-wrap: nowrap !important;\n}\n\n.flex-wrap-reverse {\n  -ms-flex-wrap: wrap-reverse !important;\n  flex-wrap: wrap-reverse !important;\n}\n\n.justify-content-start {\n  -webkit-box-pack: start !important;\n  -ms-flex-pack: start !important;\n  justify-content: flex-start !important;\n}\n\n.justify-content-end {\n  -webkit-box-pack: end !important;\n  -ms-flex-pack: end !important;\n  justify-content: flex-end !important;\n}\n\n.justify-content-center {\n  -webkit-box-pack: center !important;\n  -ms-flex-pack: center !important;\n  justify-content: center !important;\n}\n\n.justify-content-between {\n  -webkit-box-pack: justify !important;\n  -ms-flex-pack: justify !important;\n  justify-content: space-between !important;\n}\n\n.justify-content-around {\n  -ms-flex-pack: distribute !important;\n  justify-content: space-around !important;\n}\n\n.align-items-start {\n  -webkit-box-align: start !important;\n  -ms-flex-align: start !important;\n  align-items: flex-start !important;\n}\n\n.align-items-end {\n  -webkit-box-align: end !important;\n  -ms-flex-align: end !important;\n  align-items: flex-end !important;\n}\n\n.align-items-center {\n  -webkit-box-align: center !important;\n  -ms-flex-align: center !important;\n  align-items: center !important;\n}\n\n.align-items-baseline {\n  -webkit-box-align: baseline !important;\n  -ms-flex-align: baseline !important;\n  align-items: baseline !important;\n}\n\n.align-items-stretch {\n  -webkit-box-align: stretch !important;\n  -ms-flex-align: stretch !important;\n  align-items: stretch !important;\n}\n\n.align-content-start {\n  -ms-flex-line-pack: start !important;\n  align-content: flex-start !important;\n}\n\n.align-content-end {\n  -ms-flex-line-pack: end !important;\n  align-content: flex-end !important;\n}\n\n.align-content-center {\n  -ms-flex-line-pack: center !important;\n  align-content: center !important;\n}\n\n.align-content-between {\n  -ms-flex-line-pack: justify !important;\n  align-content: space-between !important;\n}\n\n.align-content-around {\n  -ms-flex-line-pack: distribute !important;\n  align-content: space-around !important;\n}\n\n.align-content-stretch {\n  -ms-flex-line-pack: stretch !important;\n  align-content: stretch !important;\n}\n\n.align-self-auto {\n  -ms-flex-item-align: auto !important;\n  align-self: auto !important;\n}\n\n.align-self-start {\n  -ms-flex-item-align: start !important;\n  align-self: flex-start !important;\n}\n\n.align-self-end {\n  -ms-flex-item-align: end !important;\n  align-self: flex-end !important;\n}\n\n.align-self-center {\n  -ms-flex-item-align: center !important;\n  align-self: center !important;\n}\n\n.align-self-baseline {\n  -ms-flex-item-align: baseline !important;\n  align-self: baseline !important;\n}\n\n.align-self-stretch {\n  -ms-flex-item-align: stretch !important;\n  align-self: stretch !important;\n}\n\n@media (min-width: 576px) {\n  .flex-sm-row {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-sm-column {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-sm-row-reverse {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-sm-column-reverse {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-sm-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-sm-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-sm-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .justify-content-sm-start {\n    -webkit-box-pack: start !important;\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-sm-end {\n    -webkit-box-pack: end !important;\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-sm-center {\n    -webkit-box-pack: center !important;\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-sm-between {\n    -webkit-box-pack: justify !important;\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-sm-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-sm-start {\n    -webkit-box-align: start !important;\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-sm-end {\n    -webkit-box-align: end !important;\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-sm-center {\n    -webkit-box-align: center !important;\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-sm-baseline {\n    -webkit-box-align: baseline !important;\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-sm-stretch {\n    -webkit-box-align: stretch !important;\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-sm-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-sm-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-sm-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-sm-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-sm-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-sm-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-sm-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-sm-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-sm-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-sm-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-sm-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-sm-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .flex-md-row {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-md-column {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-md-row-reverse {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-md-column-reverse {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-md-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-md-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-md-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .justify-content-md-start {\n    -webkit-box-pack: start !important;\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-md-end {\n    -webkit-box-pack: end !important;\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-md-center {\n    -webkit-box-pack: center !important;\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-md-between {\n    -webkit-box-pack: justify !important;\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-md-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-md-start {\n    -webkit-box-align: start !important;\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-md-end {\n    -webkit-box-align: end !important;\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-md-center {\n    -webkit-box-align: center !important;\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-md-baseline {\n    -webkit-box-align: baseline !important;\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-md-stretch {\n    -webkit-box-align: stretch !important;\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-md-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-md-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-md-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-md-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-md-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-md-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-md-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-md-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-md-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-md-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-md-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-md-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .flex-lg-row {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-lg-column {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-lg-row-reverse {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-lg-column-reverse {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-lg-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-lg-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-lg-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .justify-content-lg-start {\n    -webkit-box-pack: start !important;\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-lg-end {\n    -webkit-box-pack: end !important;\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-lg-center {\n    -webkit-box-pack: center !important;\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-lg-between {\n    -webkit-box-pack: justify !important;\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-lg-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-lg-start {\n    -webkit-box-align: start !important;\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-lg-end {\n    -webkit-box-align: end !important;\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-lg-center {\n    -webkit-box-align: center !important;\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-lg-baseline {\n    -webkit-box-align: baseline !important;\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-lg-stretch {\n    -webkit-box-align: stretch !important;\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-lg-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-lg-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-lg-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-lg-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-lg-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-lg-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-lg-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-lg-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-lg-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-lg-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-lg-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-lg-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .flex-xl-row {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-xl-column {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: normal !important;\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-xl-row-reverse {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-xl-column-reverse {\n    -webkit-box-orient: vertical !important;\n    -webkit-box-direction: reverse !important;\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-xl-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-xl-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-xl-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .justify-content-xl-start {\n    -webkit-box-pack: start !important;\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-xl-end {\n    -webkit-box-pack: end !important;\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-xl-center {\n    -webkit-box-pack: center !important;\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-xl-between {\n    -webkit-box-pack: justify !important;\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-xl-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-xl-start {\n    -webkit-box-align: start !important;\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-xl-end {\n    -webkit-box-align: end !important;\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-xl-center {\n    -webkit-box-align: center !important;\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-xl-baseline {\n    -webkit-box-align: baseline !important;\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-xl-stretch {\n    -webkit-box-align: stretch !important;\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-xl-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-xl-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-xl-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-xl-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-xl-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-xl-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-xl-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-xl-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-xl-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-xl-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-xl-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-xl-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n.float-left {\n  float: left !important;\n}\n\n.float-right {\n  float: right !important;\n}\n\n.float-none {\n  float: none !important;\n}\n\n@media (min-width: 576px) {\n  .float-sm-left {\n    float: left !important;\n  }\n  .float-sm-right {\n    float: right !important;\n  }\n  .float-sm-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .float-md-left {\n    float: left !important;\n  }\n  .float-md-right {\n    float: right !important;\n  }\n  .float-md-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .float-lg-left {\n    float: left !important;\n  }\n  .float-lg-right {\n    float: right !important;\n  }\n  .float-lg-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .float-xl-left {\n    float: left !important;\n  }\n  .float-xl-right {\n    float: right !important;\n  }\n  .float-xl-none {\n    float: none !important;\n  }\n}\n\n.position-static {\n  position: static !important;\n}\n\n.position-relative {\n  position: relative !important;\n}\n\n.position-absolute {\n  position: absolute !important;\n}\n\n.position-fixed {\n  position: fixed !important;\n}\n\n.position-sticky {\n  position: -webkit-sticky !important;\n  position: sticky !important;\n}\n\n.fixed-top {\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n\n.fixed-bottom {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1030;\n}\n\n@supports ((position: -webkit-sticky) or (position: sticky)) {\n  .sticky-top {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n    z-index: 1020;\n  }\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  -webkit-clip-path: inset(50%);\n  clip-path: inset(50%);\n  border: 0;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  overflow: visible;\n  clip: auto;\n  white-space: normal;\n  -webkit-clip-path: none;\n  clip-path: none;\n}\n\n.w-25 {\n  width: 25% !important;\n}\n\n.w-50 {\n  width: 50% !important;\n}\n\n.w-75 {\n  width: 75% !important;\n}\n\n.w-100 {\n  width: 100% !important;\n}\n\n.h-25 {\n  height: 25% !important;\n}\n\n.h-50 {\n  height: 50% !important;\n}\n\n.h-75 {\n  height: 75% !important;\n}\n\n.h-100 {\n  height: 100% !important;\n}\n\n.mw-100 {\n  max-width: 100% !important;\n}\n\n.mh-100 {\n  max-height: 100% !important;\n}\n\n.m-0 {\n  margin: 0 !important;\n}\n\n.mt-0,\n.my-0 {\n  margin-top: 0 !important;\n}\n\n.mr-0,\n.mx-0 {\n  margin-right: 0 !important;\n}\n\n.mb-0,\n.my-0 {\n  margin-bottom: 0 !important;\n}\n\n.ml-0,\n.mx-0 {\n  margin-left: 0 !important;\n}\n\n.m-1 {\n  margin: 0.25rem !important;\n}\n\n.mt-1,\n.my-1 {\n  margin-top: 0.25rem !important;\n}\n\n.mr-1,\n.mx-1 {\n  margin-right: 0.25rem !important;\n}\n\n.mb-1,\n.my-1 {\n  margin-bottom: 0.25rem !important;\n}\n\n.ml-1,\n.mx-1 {\n  margin-left: 0.25rem !important;\n}\n\n.m-2 {\n  margin: 0.5rem !important;\n}\n\n.mt-2,\n.my-2 {\n  margin-top: 0.5rem !important;\n}\n\n.mr-2,\n.mx-2 {\n  margin-right: 0.5rem !important;\n}\n\n.mb-2,\n.my-2 {\n  margin-bottom: 0.5rem !important;\n}\n\n.ml-2,\n.mx-2 {\n  margin-left: 0.5rem !important;\n}\n\n.m-3 {\n  margin: 1rem !important;\n}\n\n.mt-3,\n.my-3 {\n  margin-top: 1rem !important;\n}\n\n.mr-3,\n.mx-3 {\n  margin-right: 1rem !important;\n}\n\n.mb-3,\n.my-3 {\n  margin-bottom: 1rem !important;\n}\n\n.ml-3,\n.mx-3 {\n  margin-left: 1rem !important;\n}\n\n.m-4 {\n  margin: 1.5rem !important;\n}\n\n.mt-4,\n.my-4 {\n  margin-top: 1.5rem !important;\n}\n\n.mr-4,\n.mx-4 {\n  margin-right: 1.5rem !important;\n}\n\n.mb-4,\n.my-4 {\n  margin-bottom: 1.5rem !important;\n}\n\n.ml-4,\n.mx-4 {\n  margin-left: 1.5rem !important;\n}\n\n.m-5 {\n  margin: 3rem !important;\n}\n\n.mt-5,\n.my-5 {\n  margin-top: 3rem !important;\n}\n\n.mr-5,\n.mx-5 {\n  margin-right: 3rem !important;\n}\n\n.mb-5,\n.my-5 {\n  margin-bottom: 3rem !important;\n}\n\n.ml-5,\n.mx-5 {\n  margin-left: 3rem !important;\n}\n\n.p-0 {\n  padding: 0 !important;\n}\n\n.pt-0,\n.py-0 {\n  padding-top: 0 !important;\n}\n\n.pr-0,\n.px-0 {\n  padding-right: 0 !important;\n}\n\n.pb-0,\n.py-0 {\n  padding-bottom: 0 !important;\n}\n\n.pl-0,\n.px-0 {\n  padding-left: 0 !important;\n}\n\n.p-1 {\n  padding: 0.25rem !important;\n}\n\n.pt-1,\n.py-1 {\n  padding-top: 0.25rem !important;\n}\n\n.pr-1,\n.px-1 {\n  padding-right: 0.25rem !important;\n}\n\n.pb-1,\n.py-1 {\n  padding-bottom: 0.25rem !important;\n}\n\n.pl-1,\n.px-1 {\n  padding-left: 0.25rem !important;\n}\n\n.p-2 {\n  padding: 0.5rem !important;\n}\n\n.pt-2,\n.py-2 {\n  padding-top: 0.5rem !important;\n}\n\n.pr-2,\n.px-2 {\n  padding-right: 0.5rem !important;\n}\n\n.pb-2,\n.py-2 {\n  padding-bottom: 0.5rem !important;\n}\n\n.pl-2,\n.px-2 {\n  padding-left: 0.5rem !important;\n}\n\n.p-3 {\n  padding: 1rem !important;\n}\n\n.pt-3,\n.py-3 {\n  padding-top: 1rem !important;\n}\n\n.pr-3,\n.px-3 {\n  padding-right: 1rem !important;\n}\n\n.pb-3,\n.py-3 {\n  padding-bottom: 1rem !important;\n}\n\n.pl-3,\n.px-3 {\n  padding-left: 1rem !important;\n}\n\n.p-4 {\n  padding: 1.5rem !important;\n}\n\n.pt-4,\n.py-4 {\n  padding-top: 1.5rem !important;\n}\n\n.pr-4,\n.px-4 {\n  padding-right: 1.5rem !important;\n}\n\n.pb-4,\n.py-4 {\n  padding-bottom: 1.5rem !important;\n}\n\n.pl-4,\n.px-4 {\n  padding-left: 1.5rem !important;\n}\n\n.p-5 {\n  padding: 3rem !important;\n}\n\n.pt-5,\n.py-5 {\n  padding-top: 3rem !important;\n}\n\n.pr-5,\n.px-5 {\n  padding-right: 3rem !important;\n}\n\n.pb-5,\n.py-5 {\n  padding-bottom: 3rem !important;\n}\n\n.pl-5,\n.px-5 {\n  padding-left: 3rem !important;\n}\n\n.m-auto {\n  margin: auto !important;\n}\n\n.mt-auto,\n.my-auto {\n  margin-top: auto !important;\n}\n\n.mr-auto,\n.mx-auto {\n  margin-right: auto !important;\n}\n\n.mb-auto,\n.my-auto {\n  margin-bottom: auto !important;\n}\n\n.ml-auto,\n.mx-auto {\n  margin-left: auto !important;\n}\n\n@media (min-width: 576px) {\n  .m-sm-0 {\n    margin: 0 !important;\n  }\n  .mt-sm-0,\n  .my-sm-0 {\n    margin-top: 0 !important;\n  }\n  .mr-sm-0,\n  .mx-sm-0 {\n    margin-right: 0 !important;\n  }\n  .mb-sm-0,\n  .my-sm-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-sm-0,\n  .mx-sm-0 {\n    margin-left: 0 !important;\n  }\n  .m-sm-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-sm-1,\n  .my-sm-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-sm-1,\n  .mx-sm-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-sm-1,\n  .my-sm-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-sm-1,\n  .mx-sm-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-sm-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-sm-2,\n  .my-sm-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-sm-2,\n  .mx-sm-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-sm-2,\n  .my-sm-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-sm-2,\n  .mx-sm-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-sm-3 {\n    margin: 1rem !important;\n  }\n  .mt-sm-3,\n  .my-sm-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-sm-3,\n  .mx-sm-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-sm-3,\n  .my-sm-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-sm-3,\n  .mx-sm-3 {\n    margin-left: 1rem !important;\n  }\n  .m-sm-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-sm-4,\n  .my-sm-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-sm-4,\n  .mx-sm-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-sm-4,\n  .my-sm-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-sm-4,\n  .mx-sm-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-sm-5 {\n    margin: 3rem !important;\n  }\n  .mt-sm-5,\n  .my-sm-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-sm-5,\n  .mx-sm-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-sm-5,\n  .my-sm-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-sm-5,\n  .mx-sm-5 {\n    margin-left: 3rem !important;\n  }\n  .p-sm-0 {\n    padding: 0 !important;\n  }\n  .pt-sm-0,\n  .py-sm-0 {\n    padding-top: 0 !important;\n  }\n  .pr-sm-0,\n  .px-sm-0 {\n    padding-right: 0 !important;\n  }\n  .pb-sm-0,\n  .py-sm-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-sm-0,\n  .px-sm-0 {\n    padding-left: 0 !important;\n  }\n  .p-sm-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-sm-1,\n  .py-sm-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-sm-1,\n  .px-sm-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-sm-1,\n  .py-sm-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-sm-1,\n  .px-sm-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-sm-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-sm-2,\n  .py-sm-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-sm-2,\n  .px-sm-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-sm-2,\n  .py-sm-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-sm-2,\n  .px-sm-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-sm-3 {\n    padding: 1rem !important;\n  }\n  .pt-sm-3,\n  .py-sm-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-sm-3,\n  .px-sm-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-sm-3,\n  .py-sm-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-sm-3,\n  .px-sm-3 {\n    padding-left: 1rem !important;\n  }\n  .p-sm-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-sm-4,\n  .py-sm-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-sm-4,\n  .px-sm-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-sm-4,\n  .py-sm-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-sm-4,\n  .px-sm-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-sm-5 {\n    padding: 3rem !important;\n  }\n  .pt-sm-5,\n  .py-sm-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-sm-5,\n  .px-sm-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-sm-5,\n  .py-sm-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-sm-5,\n  .px-sm-5 {\n    padding-left: 3rem !important;\n  }\n  .m-sm-auto {\n    margin: auto !important;\n  }\n  .mt-sm-auto,\n  .my-sm-auto {\n    margin-top: auto !important;\n  }\n  .mr-sm-auto,\n  .mx-sm-auto {\n    margin-right: auto !important;\n  }\n  .mb-sm-auto,\n  .my-sm-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-sm-auto,\n  .mx-sm-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .m-md-0 {\n    margin: 0 !important;\n  }\n  .mt-md-0,\n  .my-md-0 {\n    margin-top: 0 !important;\n  }\n  .mr-md-0,\n  .mx-md-0 {\n    margin-right: 0 !important;\n  }\n  .mb-md-0,\n  .my-md-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-md-0,\n  .mx-md-0 {\n    margin-left: 0 !important;\n  }\n  .m-md-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-md-1,\n  .my-md-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-md-1,\n  .mx-md-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-md-1,\n  .my-md-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-md-1,\n  .mx-md-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-md-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-md-2,\n  .my-md-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-md-2,\n  .mx-md-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-md-2,\n  .my-md-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-md-2,\n  .mx-md-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-md-3 {\n    margin: 1rem !important;\n  }\n  .mt-md-3,\n  .my-md-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-md-3,\n  .mx-md-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-md-3,\n  .my-md-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-md-3,\n  .mx-md-3 {\n    margin-left: 1rem !important;\n  }\n  .m-md-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-md-4,\n  .my-md-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-md-4,\n  .mx-md-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-md-4,\n  .my-md-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-md-4,\n  .mx-md-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-md-5 {\n    margin: 3rem !important;\n  }\n  .mt-md-5,\n  .my-md-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-md-5,\n  .mx-md-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-md-5,\n  .my-md-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-md-5,\n  .mx-md-5 {\n    margin-left: 3rem !important;\n  }\n  .p-md-0 {\n    padding: 0 !important;\n  }\n  .pt-md-0,\n  .py-md-0 {\n    padding-top: 0 !important;\n  }\n  .pr-md-0,\n  .px-md-0 {\n    padding-right: 0 !important;\n  }\n  .pb-md-0,\n  .py-md-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-md-0,\n  .px-md-0 {\n    padding-left: 0 !important;\n  }\n  .p-md-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-md-1,\n  .py-md-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-md-1,\n  .px-md-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-md-1,\n  .py-md-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-md-1,\n  .px-md-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-md-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-md-2,\n  .py-md-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-md-2,\n  .px-md-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-md-2,\n  .py-md-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-md-2,\n  .px-md-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-md-3 {\n    padding: 1rem !important;\n  }\n  .pt-md-3,\n  .py-md-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-md-3,\n  .px-md-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-md-3,\n  .py-md-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-md-3,\n  .px-md-3 {\n    padding-left: 1rem !important;\n  }\n  .p-md-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-md-4,\n  .py-md-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-md-4,\n  .px-md-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-md-4,\n  .py-md-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-md-4,\n  .px-md-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-md-5 {\n    padding: 3rem !important;\n  }\n  .pt-md-5,\n  .py-md-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-md-5,\n  .px-md-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-md-5,\n  .py-md-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-md-5,\n  .px-md-5 {\n    padding-left: 3rem !important;\n  }\n  .m-md-auto {\n    margin: auto !important;\n  }\n  .mt-md-auto,\n  .my-md-auto {\n    margin-top: auto !important;\n  }\n  .mr-md-auto,\n  .mx-md-auto {\n    margin-right: auto !important;\n  }\n  .mb-md-auto,\n  .my-md-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-md-auto,\n  .mx-md-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .m-lg-0 {\n    margin: 0 !important;\n  }\n  .mt-lg-0,\n  .my-lg-0 {\n    margin-top: 0 !important;\n  }\n  .mr-lg-0,\n  .mx-lg-0 {\n    margin-right: 0 !important;\n  }\n  .mb-lg-0,\n  .my-lg-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-lg-0,\n  .mx-lg-0 {\n    margin-left: 0 !important;\n  }\n  .m-lg-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-lg-1,\n  .my-lg-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-lg-1,\n  .mx-lg-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-lg-1,\n  .my-lg-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-lg-1,\n  .mx-lg-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-lg-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-lg-2,\n  .my-lg-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-lg-2,\n  .mx-lg-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-lg-2,\n  .my-lg-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-lg-2,\n  .mx-lg-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-lg-3 {\n    margin: 1rem !important;\n  }\n  .mt-lg-3,\n  .my-lg-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-lg-3,\n  .mx-lg-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-lg-3,\n  .my-lg-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-lg-3,\n  .mx-lg-3 {\n    margin-left: 1rem !important;\n  }\n  .m-lg-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-lg-4,\n  .my-lg-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-lg-4,\n  .mx-lg-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-lg-4,\n  .my-lg-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-lg-4,\n  .mx-lg-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-lg-5 {\n    margin: 3rem !important;\n  }\n  .mt-lg-5,\n  .my-lg-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-lg-5,\n  .mx-lg-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-lg-5,\n  .my-lg-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-lg-5,\n  .mx-lg-5 {\n    margin-left: 3rem !important;\n  }\n  .p-lg-0 {\n    padding: 0 !important;\n  }\n  .pt-lg-0,\n  .py-lg-0 {\n    padding-top: 0 !important;\n  }\n  .pr-lg-0,\n  .px-lg-0 {\n    padding-right: 0 !important;\n  }\n  .pb-lg-0,\n  .py-lg-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-lg-0,\n  .px-lg-0 {\n    padding-left: 0 !important;\n  }\n  .p-lg-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-lg-1,\n  .py-lg-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-lg-1,\n  .px-lg-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-lg-1,\n  .py-lg-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-lg-1,\n  .px-lg-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-lg-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-lg-2,\n  .py-lg-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-lg-2,\n  .px-lg-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-lg-2,\n  .py-lg-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-lg-2,\n  .px-lg-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-lg-3 {\n    padding: 1rem !important;\n  }\n  .pt-lg-3,\n  .py-lg-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-lg-3,\n  .px-lg-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-lg-3,\n  .py-lg-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-lg-3,\n  .px-lg-3 {\n    padding-left: 1rem !important;\n  }\n  .p-lg-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-lg-4,\n  .py-lg-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-lg-4,\n  .px-lg-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-lg-4,\n  .py-lg-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-lg-4,\n  .px-lg-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-lg-5 {\n    padding: 3rem !important;\n  }\n  .pt-lg-5,\n  .py-lg-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-lg-5,\n  .px-lg-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-lg-5,\n  .py-lg-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-lg-5,\n  .px-lg-5 {\n    padding-left: 3rem !important;\n  }\n  .m-lg-auto {\n    margin: auto !important;\n  }\n  .mt-lg-auto,\n  .my-lg-auto {\n    margin-top: auto !important;\n  }\n  .mr-lg-auto,\n  .mx-lg-auto {\n    margin-right: auto !important;\n  }\n  .mb-lg-auto,\n  .my-lg-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-lg-auto,\n  .mx-lg-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .m-xl-0 {\n    margin: 0 !important;\n  }\n  .mt-xl-0,\n  .my-xl-0 {\n    margin-top: 0 !important;\n  }\n  .mr-xl-0,\n  .mx-xl-0 {\n    margin-right: 0 !important;\n  }\n  .mb-xl-0,\n  .my-xl-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-xl-0,\n  .mx-xl-0 {\n    margin-left: 0 !important;\n  }\n  .m-xl-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-xl-1,\n  .my-xl-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-xl-1,\n  .mx-xl-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-xl-1,\n  .my-xl-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-xl-1,\n  .mx-xl-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-xl-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-xl-2,\n  .my-xl-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-xl-2,\n  .mx-xl-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-xl-2,\n  .my-xl-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-xl-2,\n  .mx-xl-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-xl-3 {\n    margin: 1rem !important;\n  }\n  .mt-xl-3,\n  .my-xl-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-xl-3,\n  .mx-xl-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-xl-3,\n  .my-xl-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-xl-3,\n  .mx-xl-3 {\n    margin-left: 1rem !important;\n  }\n  .m-xl-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-xl-4,\n  .my-xl-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-xl-4,\n  .mx-xl-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-xl-4,\n  .my-xl-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-xl-4,\n  .mx-xl-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-xl-5 {\n    margin: 3rem !important;\n  }\n  .mt-xl-5,\n  .my-xl-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-xl-5,\n  .mx-xl-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-xl-5,\n  .my-xl-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-xl-5,\n  .mx-xl-5 {\n    margin-left: 3rem !important;\n  }\n  .p-xl-0 {\n    padding: 0 !important;\n  }\n  .pt-xl-0,\n  .py-xl-0 {\n    padding-top: 0 !important;\n  }\n  .pr-xl-0,\n  .px-xl-0 {\n    padding-right: 0 !important;\n  }\n  .pb-xl-0,\n  .py-xl-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-xl-0,\n  .px-xl-0 {\n    padding-left: 0 !important;\n  }\n  .p-xl-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-xl-1,\n  .py-xl-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-xl-1,\n  .px-xl-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-xl-1,\n  .py-xl-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-xl-1,\n  .px-xl-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-xl-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-xl-2,\n  .py-xl-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-xl-2,\n  .px-xl-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-xl-2,\n  .py-xl-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-xl-2,\n  .px-xl-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-xl-3 {\n    padding: 1rem !important;\n  }\n  .pt-xl-3,\n  .py-xl-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-xl-3,\n  .px-xl-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-xl-3,\n  .py-xl-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-xl-3,\n  .px-xl-3 {\n    padding-left: 1rem !important;\n  }\n  .p-xl-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-xl-4,\n  .py-xl-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-xl-4,\n  .px-xl-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-xl-4,\n  .py-xl-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-xl-4,\n  .px-xl-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-xl-5 {\n    padding: 3rem !important;\n  }\n  .pt-xl-5,\n  .py-xl-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-xl-5,\n  .px-xl-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-xl-5,\n  .py-xl-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-xl-5,\n  .px-xl-5 {\n    padding-left: 3rem !important;\n  }\n  .m-xl-auto {\n    margin: auto !important;\n  }\n  .mt-xl-auto,\n  .my-xl-auto {\n    margin-top: auto !important;\n  }\n  .mr-xl-auto,\n  .mx-xl-auto {\n    margin-right: auto !important;\n  }\n  .mb-xl-auto,\n  .my-xl-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-xl-auto,\n  .mx-xl-auto {\n    margin-left: auto !important;\n  }\n}\n\n.text-justify {\n  text-align: justify !important;\n}\n\n.text-nowrap {\n  white-space: nowrap !important;\n}\n\n.text-truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.text-left {\n  text-align: left !important;\n}\n\n.text-right {\n  text-align: right !important;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n@media (min-width: 576px) {\n  .text-sm-left {\n    text-align: left !important;\n  }\n  .text-sm-right {\n    text-align: right !important;\n  }\n  .text-sm-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .text-md-left {\n    text-align: left !important;\n  }\n  .text-md-right {\n    text-align: right !important;\n  }\n  .text-md-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .text-lg-left {\n    text-align: left !important;\n  }\n  .text-lg-right {\n    text-align: right !important;\n  }\n  .text-lg-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .text-xl-left {\n    text-align: left !important;\n  }\n  .text-xl-right {\n    text-align: right !important;\n  }\n  .text-xl-center {\n    text-align: center !important;\n  }\n}\n\n.text-lowercase {\n  text-transform: lowercase !important;\n}\n\n.text-uppercase {\n  text-transform: uppercase !important;\n}\n\n.text-capitalize {\n  text-transform: capitalize !important;\n}\n\n.font-weight-light {\n  font-weight: 300 !important;\n}\n\n.font-weight-normal {\n  font-weight: 400 !important;\n}\n\n.font-weight-bold {\n  font-weight: 700 !important;\n}\n\n.font-italic {\n  font-style: italic !important;\n}\n\n.text-white {\n  color: #fff !important;\n}\n\n.text-primary {\n  color: #007bff !important;\n}\n\na.text-primary:hover, a.text-primary:focus {\n  color: #0062cc !important;\n}\n\n.text-secondary {\n  color: #6c757d !important;\n}\n\na.text-secondary:hover, a.text-secondary:focus {\n  color: #545b62 !important;\n}\n\n.text-success {\n  color: #28a745 !important;\n}\n\na.text-success:hover, a.text-success:focus {\n  color: #1e7e34 !important;\n}\n\n.text-info {\n  color: #17a2b8 !important;\n}\n\na.text-info:hover, a.text-info:focus {\n  color: #117a8b !important;\n}\n\n.text-warning {\n  color: #ffc107 !important;\n}\n\na.text-warning:hover, a.text-warning:focus {\n  color: #d39e00 !important;\n}\n\n.text-danger {\n  color: #dc3545 !important;\n}\n\na.text-danger:hover, a.text-danger:focus {\n  color: #bd2130 !important;\n}\n\n.text-light {\n  color: #f8f9fa !important;\n}\n\na.text-light:hover, a.text-light:focus {\n  color: #dae0e5 !important;\n}\n\n.text-dark {\n  color: #343a40 !important;\n}\n\na.text-dark:hover, a.text-dark:focus {\n  color: #1d2124 !important;\n}\n\n.text-muted {\n  color: #6c757d !important;\n}\n\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n\n.visible {\n  visibility: visible !important;\n}\n\n.invisible {\n  visibility: hidden !important;\n}\n\n@media print {\n  *,\n  *::before,\n  *::after {\n    text-shadow: none !important;\n    box-shadow: none !important;\n  }\n  a:not(.btn) {\n    text-decoration: underline;\n  }\n  abbr[title]::after {\n    content: " (" attr(title) ")";\n  }\n  pre {\n    white-space: pre-wrap !important;\n  }\n  pre,\n  blockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  @page {\n    size: a3;\n  }\n  body {\n    min-width: 992px !important;\n  }\n  .container {\n    min-width: 992px !important;\n  }\n  .navbar {\n    display: none;\n  }\n  .badge {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}',""])},function(n,t){n.exports=function(n){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=t.protocol+"//"+t.host,r=e+t.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,t){var o,i=t.trim().replace(/^"(.*)"$/,function(n,t){return t}).replace(/^'(.*)'$/,function(n,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),o=e(1),i=s(o),a=e(15),l=s(e(423)),u=e(11),c=s(e(478));function s(n){return n&&n.__esModule?n:{default:n}}var f=function(n){function t(n){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return i.default.createElement(u.Provider,c.default,i.default.createElement(a.HashRouter,null,i.default.createElement(l.default,null)))}}]),t}();t.default=f},function(n,t,e){"use strict";var r=e(13),o=e.n(r),i=e(1),a=e.n(i),l=e(10),u=e.n(l),c=e(398),s=e.n(c),f=e(116);function p(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}var d=function(n){function t(){var e,r;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=p(this,n.call.apply(n,[this].concat(i))),r.history=s()(r.props),p(r,e)}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(f.a,{history:this.history,children:this.props.children})},t}(a.a.Component);d.propTypes={basename:u.a.string,forceRefresh:u.a.bool,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node},t.a=d},function(n,t,e){"use strict";var r=e(82),o=e(396),i=e(397);n.exports=function(){function n(n,t,e,r,a,l){l!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return n}n.isRequired=n;var e={array:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:t,element:n,instanceOf:t,node:n,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return e.checkPropTypes=r,e.PropTypes=e,e}},function(n,t,e){"use strict";var r=function(n){};n.exports=function(n,t,e,o,i,a,l,u){if(r(t),!n){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[e,o,i,a,l,u],f=0;(c=new Error(t.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(n,t,e){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(n,t,e){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},o=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},i=f(e(13)),a=f(e(28)),l=e(114),u=e(64),c=f(e(115)),s=e(158);function f(n){return n&&n.__esModule?n:{default:n}}var p=function(){try{return window.history.state||{}}catch(n){return{}}};t.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(s.canUseDOM,"Browser history needs a DOM");var t=window.history,e=(0,s.supportsHistory)(),f=!(0,s.supportsPopStateOnHashChange)(),d=n.forceRefresh,m=void 0!==d&&d,h=n.getUserConfirmation,b=void 0===h?s.getConfirmation:h,g=n.keyLength,v=void 0===g?6:g,y=n.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(n.basename)):"",x=function(n){var t=n||{},e=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!y||(0,u.hasBasename)(a,y),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+y+'".'),y&&(a=(0,u.stripBasename)(a,y)),(0,l.createLocation)(a,r,e)},w=function(){return Math.random().toString(36).substr(2,v)},k=(0,c.default)(),_=function(n){o(N,n),N.length=t.length,k.notifyListeners(N.location,N.action)},O=function(n){(0,s.isExtraneousPopstateEvent)(n)||j(x(n.state))},E=function(){j(x(p()))},S=!1,j=function(n){S?(S=!1,_()):k.confirmTransitionTo(n,"POP",b,function(t){t?_({action:"POP",location:n}):P(n)})},P=function(n){var t=N.location,e=T.indexOf(t.key);-1===e&&(e=0);var r=T.indexOf(n.key);-1===r&&(r=0);var o=e-r;o&&(S=!0,R(o))},C=x(p()),T=[C.key],I=function(n){return y+(0,u.createPath)(n)},R=function(n){t.go(n)},M=0,A=function(n){1===(M+=n)?((0,s.addEventListener)(window,"popstate",O),f&&(0,s.addEventListener)(window,"hashchange",E)):0===M&&((0,s.removeEventListener)(window,"popstate",O),f&&(0,s.removeEventListener)(window,"hashchange",E))},L=!1,N={length:t.length,action:"POP",location:C,createHref:I,push:function(n,o){(0,i.default)(!("object"===(void 0===n?"undefined":r(n))&&void 0!==n.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,l.createLocation)(n,o,w(),N.location);k.confirmTransitionTo(a,"PUSH",b,function(n){if(n){var r=I(a),o=a.key,l=a.state;if(e)if(t.pushState({key:o,state:l},null,r),m)window.location.href=r;else{var u=T.indexOf(N.location.key),c=T.slice(0,-1===u?0:u+1);c.push(a.key),T=c,_({action:"PUSH",location:a})}else(0,i.default)(void 0===l,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(n,o){(0,i.default)(!("object"===(void 0===n?"undefined":r(n))&&void 0!==n.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,l.createLocation)(n,o,w(),N.location);k.confirmTransitionTo(a,"REPLACE",b,function(n){if(n){var r=I(a),o=a.key,l=a.state;if(e)if(t.replaceState({key:o,state:l},null,r),m)window.location.replace(r);else{var u=T.indexOf(N.location.key);-1!==u&&(T[u]=a.key),_({action:"REPLACE",location:a})}else(0,i.default)(void 0===l,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:R,goBack:function(){return R(-1)},goForward:function(){return R(1)},block:function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=k.setPrompt(n);return L||(A(1),L=!0),function(){return L&&(L=!1,A(-1)),t()}},listen:function(n){var t=k.appendListener(n);return A(1),function(){A(-1),t()}}};return N}},function(n,t,e){"use strict";var r=e(13),o=e.n(r),i=e(1),a=e.n(i),l=e(10),u=e.n(l),c=e(400),s=e.n(c),f=e(116);function p(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}var d=function(n){function t(){var e,r;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=p(this,n.call.apply(n,[this].concat(i))),r.history=s()(r.props),p(r,e)}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(f.a,{history:this.history,children:this.props.children})},t}(a.a.Component);d.propTypes={basename:u.a.string,getUserConfirmation:u.a.func,hashType:u.a.oneOf(["hashbang","noslash","slash"]),children:u.a.node},t.a=d},function(n,t,e){"use strict";t.__esModule=!0;var r=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},o=s(e(13)),i=s(e(28)),a=e(114),l=e(64),u=s(e(115)),c=e(158);function s(n){return n&&n.__esModule?n:{default:n}}var f={hashbang:{encodePath:function(n){return"!"===n.charAt(0)?n:"!/"+(0,l.stripLeadingSlash)(n)},decodePath:function(n){return"!"===n.charAt(0)?n.substr(1):n}},noslash:{encodePath:l.stripLeadingSlash,decodePath:l.addLeadingSlash},slash:{encodePath:l.addLeadingSlash,decodePath:l.addLeadingSlash}},p=function(){var n=window.location.href,t=n.indexOf("#");return-1===t?"":n.substring(t+1)},d=function(n){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+n)};t.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Hash history needs a DOM");var t=window.history,e=(0,c.supportsGoWithoutReloadUsingHash)(),s=n.getUserConfirmation,m=void 0===s?c.getConfirmation:s,h=n.hashType,b=void 0===h?"slash":h,g=n.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(n.basename)):"",v=f[b],y=v.encodePath,x=v.decodePath,w=function(){var n=x(p());return(0,o.default)(!g||(0,l.hasBasename)(n,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+n+'" to begin with "'+g+'".'),g&&(n=(0,l.stripBasename)(n,g)),(0,a.createLocation)(n)},k=(0,u.default)(),_=function(n){r(U,n),U.length=t.length,k.notifyListeners(U.location,U.action)},O=!1,E=null,S=function(){var n=p(),t=y(n);if(n!==t)d(t);else{var e=w(),r=U.location;if(!O&&(0,a.locationsAreEqual)(r,e))return;if(E===(0,l.createPath)(e))return;E=null,j(e)}},j=function(n){O?(O=!1,_()):k.confirmTransitionTo(n,"POP",m,function(t){t?_({action:"POP",location:n}):P(n)})},P=function(n){var t=U.location,e=R.lastIndexOf((0,l.createPath)(t));-1===e&&(e=0);var r=R.lastIndexOf((0,l.createPath)(n));-1===r&&(r=0);var o=e-r;o&&(O=!0,M(o))},C=p(),T=y(C);C!==T&&d(T);var I=w(),R=[(0,l.createPath)(I)],M=function(n){(0,o.default)(e,"Hash history go(n) causes a full page reload in this browser"),t.go(n)},A=0,L=function(n){1===(A+=n)?(0,c.addEventListener)(window,"hashchange",S):0===A&&(0,c.removeEventListener)(window,"hashchange",S)},N=!1,U={length:t.length,action:"POP",location:I,createHref:function(n){return"#"+y(g+(0,l.createPath)(n))},push:function(n,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var e=(0,a.createLocation)(n,void 0,void 0,U.location);k.confirmTransitionTo(e,"PUSH",m,function(n){if(n){var t=(0,l.createPath)(e),r=y(g+t);if(p()!==r){E=t,function(n){window.location.hash=n}(r);var i=R.lastIndexOf((0,l.createPath)(U.location)),a=R.slice(0,-1===i?0:i+1);a.push(t),R=a,_({action:"PUSH",location:e})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),_()}})},replace:function(n,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var e=(0,a.createLocation)(n,void 0,void 0,U.location);k.confirmTransitionTo(e,"REPLACE",m,function(n){if(n){var t=(0,l.createPath)(e),r=y(g+t);p()!==r&&(E=t,d(r));var o=R.indexOf((0,l.createPath)(U.location));-1!==o&&(R[o]=t),_({action:"REPLACE",location:e})}})},go:M,goBack:function(){return M(-1)},goForward:function(){return M(1)},block:function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=k.setPrompt(n);return N||(L(1),N=!0),function(){return N&&(N=!1,L(-1)),t()}},listen:function(n){var t=k.appendListener(n);return L(1),function(){L(-1),t()}}};return U}},function(n,t,e){"use strict";var r=e(402);t.a=r.a},function(n,t,e){"use strict";var r=e(13),o=e.n(r),i=e(1),a=e.n(i),l=e(10),u=e.n(l),c=e(403),s=e.n(c),f=e(117);function p(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}var d=function(n){function t(){var e,r;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=p(this,n.call.apply(n,[this].concat(i))),r.history=s()(r.props),p(r,e)}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(f.a,{history:this.history,children:this.props.children})},t}(a.a.Component);d.propTypes={initialEntries:u.a.array,initialIndex:u.a.number,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node},t.a=d},function(n,t,e){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},o=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},i=c(e(13)),a=e(64),l=e(114),u=c(e(115));function c(n){return n&&n.__esModule?n:{default:n}}var s=function(n,t,e){return Math.min(Math.max(n,t),e)};t.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.getUserConfirmation,e=n.initialEntries,c=void 0===e?["/"]:e,f=n.initialIndex,p=void 0===f?0:f,d=n.keyLength,m=void 0===d?6:d,h=(0,u.default)(),b=function(n){o(k,n),k.length=k.entries.length,h.notifyListeners(k.location,k.action)},g=function(){return Math.random().toString(36).substr(2,m)},v=s(p,0,c.length-1),y=c.map(function(n){return"string"==typeof n?(0,l.createLocation)(n,void 0,g()):(0,l.createLocation)(n,void 0,n.key||g())}),x=a.createPath,w=function(n){var e=s(k.index+n,0,k.entries.length-1),r=k.entries[e];h.confirmTransitionTo(r,"POP",t,function(n){n?b({action:"POP",location:r,index:e}):b()})},k={length:y.length,action:"POP",location:y[v],index:v,entries:y,createHref:x,push:function(n,e){(0,i.default)(!("object"===(void 0===n?"undefined":r(n))&&void 0!==n.state&&void 0!==e),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,l.createLocation)(n,e,g(),k.location);h.confirmTransitionTo(o,"PUSH",t,function(n){if(n){var t=k.index+1,e=k.entries.slice(0);e.length>t?e.splice(t,e.length-t,o):e.push(o),b({action:"PUSH",location:o,index:t,entries:e})}})},replace:function(n,e){(0,i.default)(!("object"===(void 0===n?"undefined":r(n))&&void 0!==n.state&&void 0!==e),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,l.createLocation)(n,e,g(),k.location);h.confirmTransitionTo(o,"REPLACE",t,function(n){n&&(k.entries[k.index]=o,b({action:"REPLACE",location:o}))})},go:w,goBack:function(){return w(-1)},goForward:function(){return w(1)},canGo:function(n){var t=k.index+n;return t>=0&&t<k.entries.length},block:function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return h.setPrompt(n)},listen:function(n){return h.appendListener(n)}};return k}},function(n,t,e){"use strict";var r=e(1),o=e.n(r),i=e(10),a=e.n(i),l=e(160),u=e(159),c=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n},s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};var f=function(n){var t=n.to,e=n.exact,r=n.strict,i=n.location,a=n.activeClassName,f=n.className,p=n.activeStyle,d=n.style,m=n.isActive,h=n.ariaCurrent,b=function(n,t){var e={};for(var r in n)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}(n,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return o.a.createElement(l.a,{path:"object"===(void 0===t?"undefined":s(t))?t.pathname:t,exact:e,strict:r,location:i,children:function(n){var e=n.location,r=n.match,i=!!(m?m(r,e):r);return o.a.createElement(u.a,c({to:t,className:i?[f,a].filter(function(n){return n}).join(" "):f,style:i?c({},d,p):d,"aria-current":i&&h},b))}})};f.propTypes={to:u.a.propTypes.to,exact:a.a.bool,strict:a.a.bool,location:a.a.object,activeClassName:a.a.string,className:a.a.string,activeStyle:a.a.object,style:a.a.object,isActive:a.a.func,ariaCurrent:a.a.oneOf(["page","step","location","true"])},f.defaultProps={activeClassName:"active",ariaCurrent:"true"},t.a=f},function(n,t,e){var r=e(406);n.exports=d,n.exports.parse=i,n.exports.compile=function(n,t){return l(i(n,t))},n.exports.tokensToFunction=l,n.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(n,t){for(var e,r=[],i=0,a=0,l="",s=t&&t.delimiter||"/";null!=(e=o.exec(n));){var f=e[0],p=e[1],d=e.index;if(l+=n.slice(a,d),a=d+f.length,p)l+=p[1];else{var m=n[a],h=e[2],b=e[3],g=e[4],v=e[5],y=e[6],x=e[7];l&&(r.push(l),l="");var w=null!=h&&null!=m&&m!==h,k="+"===y||"*"===y,_="?"===y||"*"===y,O=e[2]||s,E=g||v;r.push({name:b||i++,prefix:h||"",delimiter:O,optional:_,repeat:k,partial:w,asterisk:!!x,pattern:E?c(E):x?".*":"[^"+u(O)+"]+?"})}}return a<n.length&&(l+=n.substr(a)),l&&r.push(l),r}function a(n){return encodeURI(n).replace(/[\/?#]/g,function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})}function l(n){for(var t=new Array(n.length),e=0;e<n.length;e++)"object"==typeof n[e]&&(t[e]=new RegExp("^(?:"+n[e].pattern+")$"));return function(e,o){for(var i="",l=e||{},u=(o||{}).pretty?a:encodeURIComponent,c=0;c<n.length;c++){var s=n[c];if("string"!=typeof s){var f,p=l[s.name];if(null==p){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=u(p[d]),!t[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}):u(p),!t[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function u(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function s(n,t){return n.keys=t,n}function f(n){return n.sensitive?"":"i"}function p(n,t,e){r(t)||(e=t||e,t=[]);for(var o=(e=e||{}).strict,i=!1!==e.end,a="",l=0;l<n.length;l++){var c=n[l];if("string"==typeof c)a+=u(c);else{var p=u(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+p+d+")*"),a+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var m=u(e.delimiter||"/"),h=a.slice(-m.length)===m;return o||(a=(h?a.slice(0,-m.length):a)+"(?:"+m+"(?=$))?"),a+=i?"$":o&&h?"":"(?="+m+"|$)",s(new RegExp("^"+a,f(e)),t)}function d(n,t,e){return r(t)||(e=t||e,t=[]),e=e||{},n instanceof RegExp?function(n,t){var e=n.source.match(/\((?!\?)/g);if(e)for(var r=0;r<e.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(n,t)}(n,t):r(n)?function(n,t,e){for(var r=[],o=0;o<n.length;o++)r.push(d(n[o],t,e).source);return s(new RegExp("(?:"+r.join("|")+")",f(e)),t)}(n,t,e):function(n,t,e){return p(i(n,e),t,e)}(n,t,e)}},function(n,t){n.exports=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)}},function(n,t,e){"use strict";var r=e(408);t.a=r.a},function(n,t,e){"use strict";var r=e(1),o=e.n(r),i=e(10),a=e.n(i),l=e(28),u=e.n(l);var c=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,n.apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.enable=function(n){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(n)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){u()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(n){n.when?this.props.when&&this.props.message===n.message||this.enable(n.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(o.a.Component);c.propTypes={when:a.a.bool,message:a.a.oneOfType([a.a.func,a.a.string]).isRequired},c.defaultProps={when:!0},c.contextTypes={router:a.a.shape({history:a.a.shape({block:a.a.func.isRequired}).isRequired}).isRequired},t.a=c},function(n,t,e){"use strict";var r=e(410);t.a=r.a},function(n,t,e){"use strict";var r=e(1),o=e.n(r),i=e(10),a=e.n(i),l=e(13),u=e.n(l),c=e(28),s=e.n(c),f=e(411);var p=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,n.apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){s()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(n){var t=Object(f.a)(n.to),e=Object(f.a)(this.props.to);Object(f.b)(t,e)?u()(!1,"You tried to redirect to the same route you're currently on: \""+e.pathname+e.search+'"'):this.perform()},t.prototype.perform=function(){var n=this.context.router.history,t=this.props,e=t.push,r=t.to;e?n.push(r):n.replace(r)},t.prototype.render=function(){return null},t}(o.a.Component);p.propTypes={push:a.a.bool,from:a.a.string,to:a.a.oneOfType([a.a.string,a.a.object]).isRequired},p.defaultProps={push:!1},p.contextTypes={router:a.a.shape({history:a.a.shape({push:a.a.func.isRequired,replace:a.a.func.isRequired}).isRequired,staticContext:a.a.object}).isRequired},t.a=p},function(n,t,e){"use strict";e(412),e(413),e(414);var r=e(83);e.d(t,"a",function(){return r.a}),e.d(t,"b",function(){return r.b});e(65)},function(n,t,e){"use strict";var r=e(13),o=(e.n(r),e(28));e.n(o),e(83),e(65),e(119),e(162),"function"==typeof Symbol&&Symbol.iterator,Object.assign},function(n,t,e){"use strict";var r=e(13),o=(e.n(r),e(28)),i=(e.n(o),e(83),e(65));e(119),e(162),Object.assign,i.f,i.a,i.a,i.a},function(n,t,e){"use strict";var r=e(13);e.n(r),e(65),e(83),e(119),"function"==typeof Symbol&&Symbol.iterator,Object.assign},function(n,t,e){"use strict";var r=e(416);t.a=r.a},function(n,t,e){"use strict";var r=e(13),o=e.n(r),i=e(28),a=e.n(i),l=e(1),u=e.n(l),c=e(10),s=e.n(c),f=e(64),p=(e.n(f),e(117)),d=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n};function m(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}var h=function(n,t){return n?d({},t,{pathname:Object(f.addLeadingSlash)(n)+t.pathname}):t},b=function(n){return"string"==typeof n?Object(f.parsePath)(n):(e=(t=n).pathname,r=void 0===e?"/":e,o=t.search,i=void 0===o?"":o,a=t.hash,l=void 0===a?"":a,{pathname:r,search:"?"===i?"":i,hash:"#"===l?"":l});var t,e,r,o,i,a,l},g=function(n){return"string"==typeof n?n:Object(f.createPath)(n)},v=function(n){return function(){a()(!1,"You cannot %s with <StaticRouter>",n)}},y=function(){},x=function(n){function t(){var e,r;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return e=r=m(this,n.call.apply(n,[this].concat(i))),r.createHref=function(n){return Object(f.addLeadingSlash)(r.props.basename+g(n))},r.handlePush=function(n){var t=r.props,e=t.basename,o=t.context;o.action="PUSH",o.location=h(e,b(n)),o.url=g(o.location)},r.handleReplace=function(n){var t=r.props,e=t.basename,o=t.context;o.action="REPLACE",o.location=h(e,b(n)),o.url=g(o.location)},r.handleListen=function(){return y},r.handleBlock=function(){return y},m(r,e)}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var n=this.props,t=n.basename,e=(n.context,n.location),r=function(n,t){var e={};for(var r in n)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}(n,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(n,t){if(!n)return t;var e=Object(f.addLeadingSlash)(n);return 0!==t.pathname.indexOf(e)?t:d({},t,{pathname:t.pathname.substr(e.length)})}(t,b(e)),push:this.handlePush,replace:this.handleReplace,go:v("go"),goBack:v("goBack"),goForward:v("goForward"),listen:this.handleListen,block:this.handleBlock};return u.a.createElement(p.a,d({},r,{history:o}))},t}(u.a.Component);x.propTypes={basename:s.a.string,context:s.a.object.isRequired,location:s.a.oneOfType([s.a.string,s.a.object])},x.defaultProps={basename:"",location:"/"},x.childContextTypes={router:s.a.object.isRequired},t.a=x},function(n,t,e){"use strict";var r=e(418);t.a=r.a},function(n,t,e){"use strict";var r=e(1),o=e.n(r),i=e(10),a=e.n(i),l=e(13),u=e.n(l),c=e(28),s=e.n(c),f=e(118);var p=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,n.apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,n),t.prototype.componentWillMount=function(){s()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(n){u()(!(n.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),u()(!(!n.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var n=this.context.router.route,t=this.props.children,e=this.props.location||n.location,r=void 0,i=void 0;return o.a.Children.forEach(t,function(t){if(o.a.isValidElement(t)){var a=t.props,l=a.path,u=a.exact,c=a.strict,s=a.sensitive,p=a.from,d=l||p;null==r&&(i=t,r=d?Object(f.a)(e.pathname,{path:d,exact:u,strict:c,sensitive:s}):n.match)}}),r?o.a.cloneElement(i,{location:e,computedMatch:r}):null},t}(o.a.Component);p.contextTypes={router:a.a.shape({route:a.a.object.isRequired}).isRequired},p.propTypes={children:a.a.node,location:a.a.object},t.a=p},function(n,t,e){"use strict";var r=e(118);t.a=r.a},function(n,t,e){"use strict";var r=e(421);t.a=r.a},function(n,t,e){"use strict";var r=e(1),o=e.n(r),i=e(10),a=e.n(i),l=e(422),u=e.n(l),c=e(161),s=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r])}return n};t.a=function(n){var t=function(t){var e=t.wrappedComponentRef,r=function(n,t){var e={};for(var r in n)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}(t,["wrappedComponentRef"]);return o.a.createElement(c.a,{render:function(t){return o.a.createElement(n,s({},r,t,{ref:e}))}})};return t.displayName="withRouter("+(n.displayName||n.name)+")",t.WrappedComponent=n,t.propTypes={wrappedComponentRef:a.a.func},u()(t,n)}},function(n,t,e){var r;r=function(){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},e=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,l=a&&a(Object);return function u(c,s,f){if("string"!=typeof s){if(l){var p=a(s);p&&p!==l&&u(c,p,f)}var d=r(s);o&&(d=d.concat(o(s)));for(var m=0;m<d.length;++m){var h=d[m];if(!(n[h]||t[h]||f&&f[h])){var b=i(s,h);try{e(c,h,b)}catch(n){}}}return c}return c}},n.exports=r()},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=g(e(1)),a=e(15),l=e(11),u=g(e(23)),c=g(e(425)),s=g(e(426)),f=g(e(457)),p=e(54),d=g(e(460)),m=g(e(462)),h=g(e(466)),b=g(e(475));function g(n){return n&&n.__esModule?n:{default:n}}var v=(0,l.inject)(function(n){return{userInfo:n.session.userInfo}})(r=(0,l.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.renderRouter=e.renderRouter.bind(e),e.props.history.listen(function(n,t){}),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"renderRouter",value:function(){var n=this.props.userInfo;return u.default.isNil(n)?i.default.createElement(a.Switch,null,i.default.createElement(a.Route,{key:p.SIGN_UP_URI,path:p.SIGN_UP_URI,component:f.default}),i.default.createElement(a.Route,{key:p.SIGN_IN_URI,path:p.SIGN_IN_URI,component:d.default}),i.default.createElement(a.Route,{key:"any",path:"*",component:d.default})):i.default.createElement(a.Switch,null,i.default.createElement(a.Route,{key:p.USER_URI,path:p.USER_URI+"/:id",component:b.default}),i.default.createElement(a.Route,{key:p.MOVIE_URI,path:p.MOVIE_URI,component:h.default}),i.default.createElement(a.Route,{key:p.SEARCH_RESULT_URI,path:p.SEARCH_RESULT_URI,component:s.default}),i.default.createElement(a.Route,{key:"any",path:"*",component:c.default}))}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement(m.default,null),i.default.createElement("div",{className:"container"},this.renderRouter()))}}]),t}())||r)||r;t.default=(0,a.withRouter)(v)},function(n,t){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),a=e(11),l=e(15);var u=(0,a.inject)(function(n){return{userInfo:n.session.userInfo}})(r=(0,a.observer)(r=(0,l.withRouter)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.state={isLoading:!1,fullName:e.props.userInfo.fullName},e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"render",value:function(){return i.createElement("div",null,i.createElement("h3",null,"Hello ",this.state.fullName,"!"))}}]),t}())||r)||r)||r;t.default=u},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),a=c(e(23)),l=c(e(84)),u=e(11);function c(n){return n&&n.__esModule?n:{default:n}}var s=(0,u.inject)(function(n){var t=n.users,e=n.omdb;return{getUserBySearch:t.getUserBySearch,userList:t.userList,getMovieBySearch:e.getMovieBySearch,movieList:e.movieList.toJS()}})(r=(0,u.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.searchByKeyWord=e.searchByKeyWord.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"componentWillReceiveProps",value:function(n){var t=this.props.location.search,e=n.location.search;e&&e!=t&&this.searchByKeyWord(e.substr(7))}},{key:"searchByKeyWord",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(t){var e,r,o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return e=this.props,r=e.getMovieBySearch,o=e.getUserBySearch,n.next=3,r(t);case 3:return n.next=5,o(t);case 5:case"end":return n.stop()}},n,this)}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(n){return t.apply(this,arguments)}}()},{key:"componentWillMount",value:function(){var n=this.props.location.search;n&&this.searchByKeyWord(n.substr(7))}},{key:"renderUsers",value:function(){var n=this.props.userList;return a.default.map(n,function(n){return i.createElement("h5",{key:n._id},n.fullName)})}},{key:"renderMovies",value:function(){var n=this.props.movieList;return a.default.map(n,function(n){return i.createElement(l.default,{imdbID:n.imdbID,key:n.imdbID})})}},{key:"render",value:function(){return i.createElement("div",null,i.createElement("div",{className:"result-list"},i.createElement("h1",null,"Search Result"),i.createElement("h5",null,"Users"),this.renderUsers(),i.createElement("h5",null,"Movies"),this.renderMovies()))}}]),t}())||r)||r;t.default=s},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=u(e(1)),a=e(11),l=u(e(10));function u(n){return n&&n.__esModule?n:{default:n}}function c(n){return function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})}}var s=(0,a.inject)(function(n){var t=n.likes;return{likeMovie:t.likeMovie,unlikeMovie:t.unlikeMovie,isMovieLikedByUser:t.isMovieLikedByUser,currentUserLikedMovies:t.currentUserLikedMovies}})(r=(0,a.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.postLikedMovie=e.postLikedMovie.bind(e),e.unLikeMovie=e.unLikeMovie.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"postLikedMovie",value:function(){var n=c(regeneratorRuntime.mark(function n(){var t,e,r;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=this.props,e=t.likeMovie,r=t.imdbID,n.next=3,e({imdbID:r});case 3:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"unLikeMovie",value:function(){var n=c(regeneratorRuntime.mark(function n(){var t,e,r;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=this.props,e=t.unlikeMovie,r=t.imdbID,n.next=3,e({imdbID:r});case 3:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"render",value:function(){var n=this.props,t=n.isMovieLikedByUser,e=n.imdbID;return t({currentUserLikedMovies:n.currentUserLikedMovies,imdbID:e})?i.default.createElement("button",{onClick:this.unLikeMovie},"Unlike"):i.default.createElement("button",{onClick:this.postLikedMovie},"Like")}}]),t}())||r)||r;s.propTypes={imdbID:l.default.string.isRequired},t.default=s},function(n,t,e){var r=e(429);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(63)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){(n.exports=e(62)(!1)).push([n.i,".movieButtons {\n    position: relative;\n    float: right;\n}",""])},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=c(e(1)),a=e(11),l=c(e(10)),u=e(15);function c(n){return n&&n.__esModule?n:{default:n}}var s=(0,a.inject)(function(n){return{getUsersLengthLikedMovieId:n.likes.getUsersLengthLikedMovieId}})(r=(0,a.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.linkToMovieLikedByPage=function(n){n.preventDefault(),e.props.history.push({pathname:"/movie/"+e.props.imdbID+"/likedBy"})},e.state={count:0},e.linkToMovieLikedByPage=e.linkToMovieLikedByPage.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"getUsersLengthLikedMovieId",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(){var t,e,r,o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=this.props,e=t.getUsersLengthLikedMovieId,r=t.imdbID,n.next=3,e({imdbID:r});case 3:o=n.sent,this.setState({count:o.length?o.length:0});case 5:case"end":return n.stop()}},n,this)}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(){return t.apply(this,arguments)}}()},{key:"componentWillMount",value:function(){this.getUsersLengthLikedMovieId()}},{key:"render",value:function(){var n=this.state.count;return i.default.createElement("button",{onClick:this.linkToMovieLikedByPage},n)}}]),t}())||r)||r;s.propTypes={imdbID:l.default.string.isRequired},t.default=(0,u.withRouter)(s)},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=e(432),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default,n.exports=t.default},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=u(e(433)),a=u(e(81)),l=e(434);function u(n){return n&&n.__esModule?n:{default:n}}var c=function(){function n(t,e){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.cookies=function(n){return"string"==typeof n?i.default.parse(n):"object"===(void 0===n?"undefined":r(n))&&null!==n?n:{}}(t),this.hooks=e,this.HAS_DOCUMENT_COOKIE=(0,l.hasDocumentCookie)()}return o(n,[{key:"_updateBrowserValues",value:function(){this.HAS_DOCUMENT_COOKIE&&(this.cookies=i.default.parse(document.cookie))}},{key:"get",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this._updateBrowserValues(),s(this.cookies[n],t)}},{key:"getAll",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._updateBrowserValues();var t={};for(var e in this.cookies)t[e]=s(this.cookies[e],n);return t}},{key:"set",value:function(n,t,e){"object"===(void 0===t?"undefined":r(t))&&(t=JSON.stringify(t)),this.hooks&&this.hooks.onSet&&this.hooks.onSet(n,t,e),this.cookies[n]=t,this.HAS_DOCUMENT_COOKIE&&(document.cookie=i.default.serialize(n,t,e))}},{key:"remove",value:function(n,t){var e=t=(0,a.default)({},t,{expires:new Date(1970,1,1,0,0,1),maxAge:0});this.hooks&&this.hooks.onRemove&&this.hooks.onRemove(n,e),delete this.cookies[n],this.HAS_DOCUMENT_COOKIE&&(document.cookie=i.default.serialize(n,"",e))}}]),n}();function s(n){if(function(n,t){return void 0===t&&(t=!n||"{"!==n[0]&&"["!==n[0]&&'"'!==n[0]),!t}(n,(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).doNotParse))try{return JSON.parse(n)}catch(n){}return n}t.default=c,n.exports=t.default},function(n,t,e){"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */t.parse=function(n,t){if("string"!=typeof n)throw new TypeError("argument str must be a string");for(var e={},o=t||{},a=n.split(i),u=o.decode||r,c=0;c<a.length;c++){var s=a[c],f=s.indexOf("=");if(!(f<0)){var p=s.substr(0,f).trim(),d=s.substr(++f,s.length).trim();'"'==d[0]&&(d=d.slice(1,-1)),void 0==e[p]&&(e[p]=l(d,u))}}return e},t.serialize=function(n,t,e){var r=e||{},i=r.encode||o;if("function"!=typeof i)throw new TypeError("option encode is invalid");if(!a.test(n))throw new TypeError("argument name is invalid");var l=i(t);if(l&&!a.test(l))throw new TypeError("argument val is invalid");var u=n+"="+l;if(null!=r.maxAge){var c=r.maxAge-0;if(isNaN(c))throw new Error("maxAge should be a Number");u+="; Max-Age="+Math.floor(c)}if(r.domain){if(!a.test(r.domain))throw new TypeError("option domain is invalid");u+="; Domain="+r.domain}if(r.path){if(!a.test(r.path))throw new TypeError("option path is invalid");u+="; Path="+r.path}if(r.expires){if("function"!=typeof r.expires.toUTCString)throw new TypeError("option expires is invalid");u+="; Expires="+r.expires.toUTCString()}r.httpOnly&&(u+="; HttpOnly");r.secure&&(u+="; Secure");if(r.sameSite){var s="string"==typeof r.sameSite?r.sameSite.toLowerCase():r.sameSite;switch(s){case!0:u+="; SameSite=Strict";break;case"lax":u+="; SameSite=Lax";break;case"strict":u+="; SameSite=Strict";break;default:throw new TypeError("option sameSite is invalid")}}return u};var r=decodeURIComponent,o=encodeURIComponent,i=/; */,a=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function l(n,t){try{return t(n)}catch(t){return n}}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};function o(){return"object"===("undefined"==typeof document?"undefined":r(document))&&"string"==typeof document.cookie}t.hasDocumentCookie=o,t.cleanCookies=function(){document.cookie.split(";").forEach(function(n){document.cookie=n.replace(/^ +/,"").replace(/=.*/,"=;expires="+(new Date).toUTCString()+";path=/")})};t.HAS_DOCUMENT_COOKIE=o()},function(n,t,e){"use strict";var r=e(436),o=e(81),i=e(437);function a(n,t){return t.encode?t.strict?r(n):encodeURIComponent(n):n}function l(n){var t=n.indexOf("?");return-1===t?"":n.slice(t+1)}function u(n,t){var e=function(n){var t;switch(n.arrayFormat){case"index":return function(n,e,r){t=/\[(\d*)\]$/.exec(n),n=n.replace(/\[\d*\]$/,""),t?(void 0===r[n]&&(r[n]={}),r[n][t[1]]=e):r[n]=e};case"bracket":return function(n,e,r){t=/(\[\])$/.exec(n),n=n.replace(/\[\]$/,""),t?void 0!==r[n]?r[n]=[].concat(r[n],e):r[n]=[e]:r[n]=e};default:return function(n,t,e){void 0!==e[n]?e[n]=[].concat(e[n],t):e[n]=t}}}(t=o({arrayFormat:"none"},t)),r=Object.create(null);return"string"!=typeof n?r:(n=n.trim().replace(/^[?#&]/,""))?(n.split("&").forEach(function(n){var t=n.replace(/\+/g," ").split("="),o=t.shift(),a=t.length>0?t.join("="):void 0;a=void 0===a?null:i(a),e(i(o),a,r)}),Object.keys(r).sort().reduce(function(n,t){var e=r[t];return Boolean(e)&&"object"==typeof e&&!Array.isArray(e)?n[t]=function n(t){return Array.isArray(t)?t.sort():"object"==typeof t?n(Object.keys(t)).sort(function(n,t){return Number(n)-Number(t)}).map(function(n){return t[n]}):t}(e):n[t]=e,n},Object.create(null))):r}t.extract=l,t.parse=u,t.stringify=function(n,t){!1===(t=o({encode:!0,strict:!0,arrayFormat:"none"},t)).sort&&(t.sort=function(){});var e=function(n){switch(n.arrayFormat){case"index":return function(t,e,r){return null===e?[a(t,n),"[",r,"]"].join(""):[a(t,n),"[",a(r,n),"]=",a(e,n)].join("")};case"bracket":return function(t,e){return null===e?a(t,n):[a(t,n),"[]=",a(e,n)].join("")};default:return function(t,e){return null===e?a(t,n):[a(t,n),"=",a(e,n)].join("")}}}(t);return n?Object.keys(n).sort(t.sort).map(function(r){var o=n[r];if(void 0===o)return"";if(null===o)return a(r,t);if(Array.isArray(o)){var i=[];return o.slice().forEach(function(n){void 0!==n&&i.push(e(r,n,i.length))}),i.join("&")}return a(r,t)+"="+a(o,t)}).filter(function(n){return n.length>0}).join("&"):""},t.parseUrl=function(n,t){return{url:n.split("?")[0]||"",query:u(l(n),t)}}},function(n,t,e){"use strict";n.exports=function(n){return encodeURIComponent(n).replace(/[!'()*]/g,function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})}},function(n,t,e){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),o=new RegExp("(%[a-f0-9]{2})+","gi");function i(n,t){try{return decodeURIComponent(n.join(""))}catch(n){}if(1===n.length)return n;t=t||1;var e=n.slice(0,t),r=n.slice(t);return Array.prototype.concat.call([],i(e),i(r))}function a(n){try{return decodeURIComponent(n)}catch(o){for(var t=n.match(r),e=1;e<t.length;e++)t=(n=i(t,e).join("")).match(r);return n}}n.exports=function(n){if("string"!=typeof n)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof n+"`");try{return n=n.replace(/\+/g," "),decodeURIComponent(n)}catch(t){return function(n){for(var t={"%FE%FF":"��","%FF%FE":"��"},e=o.exec(n);e;){try{t[e[0]]=decodeURIComponent(e[0])}catch(n){var r=a(e[0]);r!==e[0]&&(t[e[0]]=r)}e=o.exec(n)}t["%C2"]="�";for(var i=Object.keys(t),l=0;l<i.length;l++){var u=i[l];n=n.replace(new RegExp(u,"g"),t[u])}return n}(n)}}},function(n,t,e){n.exports=e(439)},function(n,t,e){"use strict";var r=e(24),o=e(164),i=e(441),a=e(120);function l(n){var t=new i(n),e=o(i.prototype.request,t);return r.extend(e,i.prototype,t),r.extend(e,t),e}var u=l(a);u.Axios=i,u.create=function(n){return l(r.merge(a,n))},u.Cancel=e(168),u.CancelToken=e(455),u.isCancel=e(167),u.all=function(n){return Promise.all(n)},u.spread=e(456),n.exports=u,n.exports.default=u},function(n,t){function e(n){return!!n.constructor&&"function"==typeof n.constructor.isBuffer&&n.constructor.isBuffer(n)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
n.exports=function(n){return null!=n&&(e(n)||function(n){return"function"==typeof n.readFloatLE&&"function"==typeof n.slice&&e(n.slice(0,0))}(n)||!!n._isBuffer)}},function(n,t,e){"use strict";var r=e(120),o=e(24),i=e(450),a=e(451);function l(n){this.defaults=n,this.interceptors={request:new i,response:new i}}l.prototype.request=function(n){"string"==typeof n&&(n=o.merge({url:arguments[0]},arguments[1])),(n=o.merge(r,{method:"get"},this.defaults,n)).method=n.method.toLowerCase();var t=[a,void 0],e=Promise.resolve(n);for(this.interceptors.request.forEach(function(n){t.unshift(n.fulfilled,n.rejected)}),this.interceptors.response.forEach(function(n){t.push(n.fulfilled,n.rejected)});t.length;)e=e.then(t.shift(),t.shift());return e},o.forEach(["delete","get","head","options"],function(n){l.prototype[n]=function(t,e){return this.request(o.merge(e||{},{method:n,url:t}))}}),o.forEach(["post","put","patch"],function(n){l.prototype[n]=function(t,e,r){return this.request(o.merge(r||{},{method:n,url:t,data:e}))}}),n.exports=l},function(n,t,e){"use strict";var r=e(24);n.exports=function(n,t){r.forEach(n,function(e,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(n[t]=e,delete n[r])})}},function(n,t,e){"use strict";var r=e(166);n.exports=function(n,t,e){var o=e.config.validateStatus;e.status&&o&&!o(e.status)?t(r("Request failed with status code "+e.status,e.config,null,e.request,e)):n(e)}},function(n,t,e){"use strict";n.exports=function(n,t,e,r,o){return n.config=t,e&&(n.code=e),n.request=r,n.response=o,n}},function(n,t,e){"use strict";var r=e(24);function o(n){return encodeURIComponent(n).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}n.exports=function(n,t,e){if(!t)return n;var i;if(e)i=e(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(n,t){null!==n&&void 0!==n&&(r.isArray(n)?t+="[]":n=[n],r.forEach(n,function(n){r.isDate(n)?n=n.toISOString():r.isObject(n)&&(n=JSON.stringify(n)),a.push(o(t)+"="+o(n))}))}),i=a.join("&")}return i&&(n+=(-1===n.indexOf("?")?"?":"&")+i),n}},function(n,t,e){"use strict";var r=e(24),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];n.exports=function(n){var t,e,i,a={};return n?(r.forEach(n.split("\n"),function(n){if(i=n.indexOf(":"),t=r.trim(n.substr(0,i)).toLowerCase(),e=r.trim(n.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([e]):a[t]?a[t]+", "+e:e}}),a):a}},function(n,t,e){"use strict";var r=e(24);n.exports=r.isStandardBrowserEnv()?function(){var n,t=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");function o(n){var r=n;return t&&(e.setAttribute("href",r),r=e.href),e.setAttribute("href",r),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return n=o(window.location.href),function(t){var e=r.isString(t)?o(t):t;return e.protocol===n.protocol&&e.host===n.host}}():function(){return!0}},function(n,t,e){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",n.exports=function(n){for(var t,e,i=String(n),a="",l=0,u=r;i.charAt(0|l)||(u="=",l%1);a+=u.charAt(63&t>>8-l%1*8)){if((e=i.charCodeAt(l+=.75))>255)throw new o;t=t<<8|e}return a}},function(n,t,e){"use strict";var r=e(24);n.exports=r.isStandardBrowserEnv()?{write:function(n,t,e,o,i,a){var l=[];l.push(n+"="+encodeURIComponent(t)),r.isNumber(e)&&l.push("expires="+new Date(e).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(i)&&l.push("domain="+i),!0===a&&l.push("secure"),document.cookie=l.join("; ")},read:function(n){var t=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(n,t,e){"use strict";var r=e(24);function o(){this.handlers=[]}o.prototype.use=function(n,t){return this.handlers.push({fulfilled:n,rejected:t}),this.handlers.length-1},o.prototype.eject=function(n){this.handlers[n]&&(this.handlers[n]=null)},o.prototype.forEach=function(n){r.forEach(this.handlers,function(t){null!==t&&n(t)})},n.exports=o},function(n,t,e){"use strict";var r=e(24),o=e(452),i=e(167),a=e(120),l=e(453),u=e(454);function c(n){n.cancelToken&&n.cancelToken.throwIfRequested()}n.exports=function(n){return c(n),n.baseURL&&!l(n.url)&&(n.url=u(n.baseURL,n.url)),n.headers=n.headers||{},n.data=o(n.data,n.headers,n.transformRequest),n.headers=r.merge(n.headers.common||{},n.headers[n.method]||{},n.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete n.headers[t]}),(n.adapter||a.adapter)(n).then(function(t){return c(n),t.data=o(t.data,t.headers,n.transformResponse),t},function(t){return i(t)||(c(n),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,n.transformResponse))),Promise.reject(t)})}},function(n,t,e){"use strict";var r=e(24);n.exports=function(n,t,e){return r.forEach(e,function(e){n=e(n,t)}),n}},function(n,t,e){"use strict";n.exports=function(n){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(n)}},function(n,t,e){"use strict";n.exports=function(n,t){return t?n.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):n}},function(n,t,e){"use strict";var r=e(168);function o(n){if("function"!=typeof n)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(n){t=n});var e=this;n(function(n){e.reason||(e.reason=new r(n),t(e.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var n;return{token:new o(function(t){n=t}),cancel:n}},n.exports=o},function(n,t,e){"use strict";n.exports=function(n){return function(t){return n.apply(null,t)}}},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=c(e(1)),a=e(11),l=e(15),u=c(e(458));function c(n){return n&&n.__esModule?n:{default:n}}var s=(0,a.inject)(function(n){var t=n.register;return{email:t.email,password:t.password,fullName:t.fullName,errorMessage:t.errorMessage,setEmail:t.setEmail,setPassword:t.setPassword,setFullName:t.setFullName,onRegister:t.onRegister}})(r=(0,a.observer)(r=(0,l.withRouter)(r=function(n){function t(n){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement(u.default,this.props))}}]),t}())||r)||r)||r;t.default=s},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=c(e(1)),a=c(e(10)),l=e(11),u=c(e(459));function c(n){return n&&n.__esModule?n:{default:n}}var s=(0,l.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.handleSignUp=e.handleSignUp.bind(e),e.handleEmailChange=e.handleEmailChange.bind(e),e.handlePasswordChange=e.handlePasswordChange.bind(e),e.handleFullNameChange=e.handleFullNameChange.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"handleEmailChange",value:function(n){n.preventDefault(),this.props.setEmail(n.target.value)}},{key:"handlePasswordChange",value:function(n){n.preventDefault(),this.props.setPassword(n.target.value)}},{key:"handleFullNameChange",value:function(n){n.preventDefault(),this.props.setFullName(n.target.value)}},{key:"render",value:function(){var n=this.props,t=n.errorMessage,e=n.email,r=n.password,o=n.fullName;return i.default.createElement("div",null,i.default.createElement("form",null,i.default.createElement(u.default,{errorMessage:t}),i.default.createElement("div",{className:"form-group"},i.default.createElement("label",{htmlFor:"exampleInputEmail1"},"Email"),i.default.createElement("input",{type:"email",value:e,onChange:this.handleEmailChange,className:"form-control",id:"exampleInputEmail1","aria-describedby":"emailHelp",placeholder:"Enter email"}),i.default.createElement("small",{id:"emailHelp",className:"form-text text-muted"},"We'll never share your email with anyone else.")),i.default.createElement("div",{className:"form-group"},i.default.createElement("label",{htmlFor:"exampleInputPassword1"},"Password"),i.default.createElement("input",{type:"password",value:r,onChange:this.handlePasswordChange,className:"form-control",id:"exampleInputPassword1",placeholder:"Password"})),i.default.createElement("div",{className:"form-group"},i.default.createElement("label",{htmlFor:"exampleFullName1"},"FullName"),i.default.createElement("input",{type:"text",value:o,onChange:this.handleFullNameChange,className:"form-control",id:"exampleFullName1",placeholder:"Full Name"})),i.default.createElement("button",{type:"submit",className:"btn btn-primary btn-lg btn-block",onClick:this.handleSignUp},"Register")))}},{key:"handleSignUp",value:function(n){n.preventDefault(),this.props.onRegister()}}]),t}())||r;s.propTypes={fullName:a.default.string.isRequired,email:a.default.string.isRequired,password:a.default.string.isRequired,errorMessage:a.default.string,setEmail:a.default.func.isRequired,setPassword:a.default.func.isRequired,setFullName:a.default.func.isRequired,onRegister:a.default.func.isRequired},t.default=s},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=l(e(1)),a=l(e(10));function l(n){return n&&n.__esModule?n:{default:n}}var u=(0,e(11).observer)(r=function(n){function t(n){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"render",value:function(){return _.isNil(this.props.errorMessage)?i.default.createElement("div",null):i.default.createElement("div",{className:"alert alert-danger",role:"alert"},this.props.errorMessage)}}]),t}())||r;u.propTypes={errorMessage:a.default.string},t.default=u},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),a=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),l=e(11),u=e(15),c=e(461),s=(o=c)&&o.__esModule?o:{default:o};var f=(0,l.inject)(function(n){var t=n.account;return{email:t.email,password:t.password,errorMessage:t.errorMessage,setEmail:t.setEmail,setPassword:t.setPassword,login:t.login}})(r=(0,l.observer)(r=(0,u.withRouter)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.state={isLoading:!1},e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,a.Component),i(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var n=this.props,t=n.email,e=n.password,r=(n.userInfo,n.errorMessage),o=n.setEmail,i=n.setPassword,l=n.login;return a.createElement("div",null,a.createElement(s.default,{email:t,password:e,errorMessage:r,setEmail:o,setPassword:i,login:l}))}}]),t}())||r)||r)||r;t.default=f},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),a=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),l=e(10),u=(o=l)&&o.__esModule?o:{default:o};var c=(0,e(11).observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.handleLogin=e.handleLogin.bind(e),e.handleEmailChange=e.handleEmailChange.bind(e),e.handlePasswordChange=e.handlePasswordChange.bind(e),e.renderErrorMessage=e.renderErrorMessage.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,a.Component),i(t,[{key:"componentDidMount",value:function(){}},{key:"handleEmailChange",value:function(n){n.preventDefault(),this.props.setEmail(n.target.value)}},{key:"handlePasswordChange",value:function(n){n.preventDefault(),this.props.setPassword(n.target.value)}},{key:"renderErrorMessage",value:function(){if(!_.isNil(this.props.errorMessage))return a.createElement("div",{className:"alert alert-danger",role:"alert"},this.props.errorMessage)}},{key:"render",value:function(){return a.createElement("div",null,a.createElement("form",null,this.renderErrorMessage(),a.createElement("div",{className:"form-group"},a.createElement("label",{htmlFor:"exampleInputEmail1"},"Email"),a.createElement("input",{type:"email",value:this.props.email,onChange:this.handleEmailChange,className:"form-control",id:"exampleInputEmail1","aria-describedby":"emailHelp",placeholder:"Enter email"}),a.createElement("small",{id:"emailHelp",className:"form-text text-muted"},"We'll never share your email with anyone else.")),a.createElement("div",{className:"form-group"},a.createElement("label",{htmlFor:"exampleInputPassword1"},"Password"),a.createElement("input",{type:"password",value:this.props.password,onChange:this.handlePasswordChange,className:"form-control",id:"exampleInputPassword1",placeholder:"Password"})),a.createElement("button",{type:"submit",className:"btn btn-primary btn-lg btn-block",onClick:this.handleLogin},"Login")))}},{key:"handleLogin",value:function(n){n.preventDefault(),this.props.login()}}]),t}())||r;c.propTypes={login:u.default.func.isRequired,setEmail:u.default.func.isRequired,setPassword:u.default.func.isRequired,email:u.default.string.isRequired,password:u.default.string.isRequired,errorMessage:u.default.string},t.default=c},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),a=(f(e(170)),e(15)),l=e(172),u=f(e(23)),c=e(54),s=(e(36),f(e(173)),f(e(464)));function f(n){return n&&n.__esModule?n:{default:n}}e(174);var p=(0,l.inject)(function(n){var t=n.session;return{userInfo:t.userInfo,logOut:t.logout}})(r=(0,l.observer)(r=function(n){function t(n){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"render",value:function(){var n=this.props,t=n.userInfo,e=n.logOut;return u.default.isNil(t)?i.createElement("div",{className:"topNav"},i.createElement("h3",{className:"title"},"Spoiled Tomatillos"),i.createElement(a.Link,{to:c.SIGN_UP_URI},"Register"),i.createElement(a.Link,{to:c.SIGN_IN_URI},"Login")):i.createElement(s.default,{userInfo:t,logOut:e})}}]),t}())||r)||r;t.default=p},function(n,t,e){(n.exports=e(62)(!1)).push([n.i,".searchBar {\n    float: right;\n    padding: 12px;\n}\n\n.searchText{\n    height: 35px;\n    width: 25vw;\n}\n\n.btn-primary {\n    margin-top: -5px;\n    background-color: #7094db !important;\n    height: 36px;\n    font-family: Arial;\n}\n",""])},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),a=m(e(170)),l=e(15),u=e(172),c=m(e(23)),s=m(e(10)),f=e(54),p=e(36),d=m(e(173));function m(n){return n&&n.__esModule?n:{default:n}}e(174);var h=(0,u.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n)),r=e.props.userInfo._id,o=[{to:"/home",title:"Home",active:!0},{to:(0,p.generateUserURI)(r,f.USER_PROFILE_URI),title:"Profile",active:!1},{to:f.MOVIE_LIST_URI,title:"Movies",active:!1}];return e.state={links:o},e.renderLinks=e.renderLinks.bind(e),e.onLinkClickHigherOrder=e.onLinkClickHigherOrder.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"onLinkClickHigherOrder",value:function(n){var t=this;return function(){var e=c.default.map(t.state.links,function(t){return t.to===n.to?(t.active=!0,t):(t.active=!1,t)});t.setState({links:e})}}},{key:"renderLinks",value:function(){var n=this,t=this.state.links;return c.default.map(t,function(t){return i.createElement(l.Link,{key:t.to,className:t.active?"active":"",onClick:n.onLinkClickHigherOrder(t),to:t.to},t.title)})}},{key:"render",value:function(){return i.createElement("div",{className:"topNav"},i.createElement("h3",{className:"title"},"Spoiled Tomatillos"),this.renderLinks(),i.createElement(d.default,{logOut:this.props.logOut}),i.createElement(a.default,{className:"searchBar"}))}}]),t}())||r;h.propTypes={userInfo:s.default.object.isRequired,logOut:s.default.func.isRequired},t.default=h},function(n,t,e){(n.exports=e(62)(!1)).push([n.i,".topNav {\n    background-color: #1f3d7a;\n    overflow: hidden;\n    margin-left: calc(50% - 50vw);\n    width: 100vw;\n}\n\n.signOutButton {\n    color: #f2f2f2 !important;\n}\n\n.topNav a {\n    float: left;\n    color: #f2f2f2;\n    text-align: center;\n    margin-top: 2px;\n    padding: 16px 16px;\n    text-decoration: none;\n    font-size: 17px;\n}\n\n.topNav a.active {\n    background-color: #7094db;\n    color: white;\n}\n\n.topNav a:hover {\n    background-color: #ddd;\n    color: black;\n}\n\n.title {\n    float: left;\n    margin-top: 3px;\n    padding: 8px 16px;\n    color: #f2f2f2;\n}\n\n.SearchBar {\n    float: right;\n    padding: 6px;\n    border: none;\n    margin-top: 8px;\n    margin-right: 16px;\n    font-size: 17px;\n}\n\n.profile {\n    float: right;\n}",""])},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=p(e(1)),a=e(15),l=e(11),u=p(e(467)),c=p(e(468)),s=p(e(474)),f=e(54);function p(n){return n&&n.__esModule?n:{default:n}}var d=(0,l.observer)(r=function(n){function t(n){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"render",value:function(){return i.default.createElement(a.Switch,null,i.default.createElement(a.Route,{key:f.MOVIE_LIST_URI,path:f.MOVIE_LIST_URI,component:u.default}),i.default.createElement(a.Route,{key:f.MOVIE_DETAIL_URI,path:f.MOVIE_DETAIL_URI,component:c.default}),i.default.createElement(a.Route,{key:f.MOVIE_LIKED_BY_URI,path:f.MOVIE_LIKED_BY_URI,component:s.default}),i.default.createElement(a.Route,{key:"any",path:"*",component:u.default}))}}]),t}())||r;t.default=(0,a.withRouter)(d)},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),a=c(e(23)),l=c(e(84)),u=e(11);function c(n){return n&&n.__esModule?n:{default:n}}var s=(0,u.inject)(function(n){var t=n.movies;return{fetchMovieList:t.fetchMovieList,movieList:t.movieList.toJS()}})(r=(0,u.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.renderMoveInfoList=e.renderMoveInfoList.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"componentWillMount",value:function(){this.props.fetchMovieList()}},{key:"renderMoveInfoList",value:function(){var n=this.props.movieList;return a.default.map(n,function(n){return i.createElement(l.default,{imdbID:n.imdbID,key:n.imdbID})})}},{key:"render",value:function(){return i.createElement("div",null,i.createElement("h2",null,"Movie List"),this.renderMoveInfoList())}}]),t}())||r)||r;t.default=s},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),a=e(11),l=p(e(84));e(175);var u=p(e(470)),c=p(e(471)),s=p(e(472)),f=p(e(473));function p(n){return n&&n.__esModule?n:{default:n}}function d(n){var t=n.userRating?c.default:u.default;return i.createElement("button",null,i.createElement("img",{src:t}))}function m(n){var t=null==n.userRating||n.userRating?s.default:f.default;return i.createElement("button",null,i.createElement("img",{src:t}))}var h=(0,a.inject)(function(n){return{userInfo:n.account.userInfo}})(r=(0,a.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n)),r=e.props.match.params.movieId;return e.state={imdbID:r,userRating:!0},e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"render",value:function(){var n=this.state.imdbID;return i.createElement("div",null,i.createElement("div",{className:"movie"},i.createElement(l.default,{imdbID:n})),i.createElement("div",null,i.createElement(d,{userRating:this.state.userRating}),i.createElement(m,{userRating:this.state.userRating})))}}]),t}())||r)||r;t.default=h},function(n,t,e){(n.exports=e(62)(!1)).push([n.i,".movie {\n    padding: 12px;\n}",""])},function(n,t,e){n.exports=e.p+"f21c8f899ae53106586653246605b3bb.png"},function(n,t,e){n.exports=e.p+"a7fc4ab0c884097bb6f948d55d098a9a.png"},function(n,t,e){n.exports=e.p+"3bd39a13cb9ae5ee870da85f9fa64f4c.png"},function(n,t,e){n.exports=e.p+"a2d08ffc5943442a89c39159ded8fbe2.png"},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),a=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),l=e(11),u=e(23),c=(o=u)&&o.__esModule?o:{default:o};e(175);var s=(0,l.inject)(function(n){var t=n.likes,e=n.omdb;return{getUsersLikedMovieId:t.getUsersLikedMovieId,getMovieById:e.getMovieById}})(r=(0,l.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.state={users:[],movie:null,isLoading:!0},e.loadUsersAndMovie=e.loadUsersAndMovie.bind(e),e.renderUsers=e.renderUsers.bind(e),e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,a.Component),i(t,[{key:"loadUsersAndMovie",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(){var t,e,r,o,i,a,l;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=this.props,e=t.match,r=t.getUsersLikedMovieId,o=t.getMovieById,i=e.params.movieId,n.next=4,r({movieId:i});case 4:return a=n.sent,n.next=7,o(i);case 7:l=n.sent,this.setState({users:a,movie:l,isLoading:!1});case 9:case"end":return n.stop()}},n,this)}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(){return t.apply(this,arguments)}}()},{key:"componentWillMount",value:function(){this.loadUsersAndMovie()}},{key:"renderUsers",value:function(){var n=this.state.users;return c.default.map(n,function(n){return a.createElement("li",{key:n._id},n.fullName)})}},{key:"render",value:function(){var n=this.state,t=n.movie;return n.isLoading?a.createElement("div",null):a.createElement("div",null,a.createElement("h5",null,"People who also like ",t.Title,":"),a.createElement("ul",null,this.renderUsers()))}}]),t}())||r)||r;t.default=s},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=f(e(1)),a=e(15),l=e(11),u=f(e(476)),c=f(e(477)),s=e(54);function f(n){return n&&n.__esModule?n:{default:n}}var p=(0,l.observer)(r=function(n){function t(n){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"render",value:function(){return i.default.createElement(a.Switch,null,i.default.createElement(a.Route,{key:s.USER_PROFILE_URI,path:s.USER_PROFILE_URI,component:c.default}),i.default.createElement(a.Route,{key:s.USER_LIKES_URI,path:s.USER_LIKES_URI,component:u.default}),i.default.createElement(a.Route,{key:"any",path:"*",component:c.default}))}}]),t}())||r;t.default=(0,a.withRouter)(p)},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=c(e(1)),a=c(e(23)),l=e(11),u=c(e(84));function c(n){return n&&n.__esModule?n:{default:n}}function s(n){return function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})}}var f=(0,l.inject)(function(n){var t=n.account,e=n.movies,r=n.likes,o=n.profiles;return{userInfo:t.userInfo,postLikeMovie:e.postLikeMovie,likeMovie:r.likeMovie,unlikeMovie:r.unlikeMovie,isMovieLikedByUser:r.isMovieLikedByUser,currentUserLikedMovies:r.currentUserLikedMovies,updateMoviesLikedByUserId:r.updateMoviesLikedByUserId,getMoviesLikedByUserId:r.getMoviesLikedByUserId,fetchUserProfile:o.fetchUserProfile}})(r=(0,l.observer)(r=function(n){function t(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return e.renderMoveInfoList=e.renderMoveInfoList.bind(e),e.getPageUserName=e.getPageUserName.bind(e),e.state={pageUserName:"Unknown",userLikedMovieList:[]},e}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.default.Component),o(t,[{key:"getPageUserName",value:function(){var n=s(regeneratorRuntime.mark(function n(){var t,e,r,o,i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=this.props,e=t.fetchUserProfile,r=t.match,o=r.params.userId,n.next=4,e({userId:o});case 4:i=n.sent,this.setState({pageUserName:i.fullName});case 6:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"getPageUserMoveList",value:function(){var n=s(regeneratorRuntime.mark(function n(){var t,e,r,o,i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=this.props,e=t.getMoviesLikedByUserId,r=t.match,o=r.params.userId,n.next=4,e({userId:o});case 4:i=n.sent,this.setState({userLikedMovieList:i});case 6:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"componentWillMount",value:function(){this.props.updateMoviesLikedByUserId(),this.getPageUserName(),this.getPageUserMoveList()}},{key:"renderMoveInfoList",value:function(){var n=this.state.userLikedMovieList;return a.default.map(n,function(n){return i.default.createElement("div",{key:n.title},i.default.createElement("h1",null,n.title," "),i.default.createElement(u.default,{imdbID:n.imdbID}))})}},{key:"render",value:function(){var n=this.state.pageUserName;return i.default.createElement("div",null,i.default.createElement("h2",null,"Movies Liked by ",n),this.renderMoveInfoList())}}]),t}())||r)||r;t.default=f},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(e(1)),a=e(11),l=e(15),u=e(54),c=e(36);var s=(0,a.inject)(function(n){return{userInfo:n.session.userInfo}})(r=(0,a.observer)(r=(0,l.withRouter)(r=function(n){function t(n){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}(t,i.Component),o(t,[{key:"render",value:function(){var n=this.props.userInfo,t=n.fullName,e=n._id;return i.createElement("div",null,i.createElement("h1",null,"Profile"),i.createElement("h3",null,"Hello ",t,"!"),i.createElement(l.Link,{to:(0,c.generateUserURI)(e,u.USER_LIKES_URI)},"Likes"))}}]),t}())||r)||r)||r;t.default=s},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=f(e(479)),o=f(e(480)),i=f(e(481)),a=f(e(482)),l=f(e(85)),u=f(e(483)),c=f(e(484)),s=f(e(485));function f(n){return n&&n.__esModule?n:{default:n}}var p={account:r.default,movies:o.default,omdb:i.default,register:a.default,session:l.default,likes:u.default,profiles:c.default,users:s.default};t.default=p},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i,a,l,u=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),c=e(35),s=e(39),f=e(42),p=e(36),d=e(85),m=(l=d)&&l.__esModule?l:{default:l};function h(n,t,e,r){e&&Object.defineProperty(n,t,{enumerable:e.enumerable,configurable:e.configurable,writable:e.writable,value:e.initializer?e.initializer.call(r):void 0})}function b(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var g=new(r=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),h(this,"email",o,this),h(this,"password",i,this),h(this,"errorMessage",a,this)}return u(n,[{key:"setEmail",value:function(n){g.email=n}},{key:"setPassword",value:function(n){g.password=n}},{key:"login",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(){var t;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,s.axios.post(f.SIGNIN_API,{email:g.email,password:g.password});case 3:return t=n.sent,(0,p.setXAccessToken)(t.data.token),n.next=7,m.default.getUserInfo();case 7:g.errorMessage=null,g.email="",g.password="",n.next=15;break;case 12:n.prev=12,n.t0=n.catch(0),g.errorMessage=n.t0.message;case 15:case"end":return n.stop()}},n,this,[[0,12]])}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(){return t.apply(this,arguments)}}()}]),n}(),o=b(r.prototype,"email",[c.observable],{enumerable:!0,initializer:function(){return""}}),i=b(r.prototype,"password",[c.observable],{enumerable:!0,initializer:function(){return""}}),a=b(r.prototype,"errorMessage",[c.observable],{enumerable:!0,initializer:function(){return null}}),b(r.prototype,"setEmail",[c.action],Object.getOwnPropertyDescriptor(r.prototype,"setEmail"),r.prototype),b(r.prototype,"setPassword",[c.action],Object.getOwnPropertyDescriptor(r.prototype,"setPassword"),r.prototype),b(r.prototype,"login",[c.action],Object.getOwnPropertyDescriptor(r.prototype,"login"),r.prototype),r);t.default=g},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i,a,l=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),u=e(35),c=e(23),s=((a=c)&&a.__esModule,e(39)),f=e(42);function p(n){return function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})}}function d(n,t,e,r){e&&Object.defineProperty(n,t,{enumerable:e.enumerable,configurable:e.configurable,writable:e.writable,value:e.initializer?e.initializer.call(r):void 0})}function m(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var h=new(r=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),d(this,"movieList",o,this),d(this,"errorMessage",i,this)}return l(n,[{key:"setMovieList",value:function(n){h.movieList=n}},{key:"postLikeMovie",value:function(){var n=p(regeneratorRuntime.mark(function n(t){var e=t.movie;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:s.axios.post(f.POST_MOVIE_API,{imdbID:e.imdbID,title:e.Title,posterImgPath:e.Poster,releaseYear:e.Year,briefDescription:e.Plot});case 1:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()},{key:"fetchMovieList",value:function(){var n=p(regeneratorRuntime.mark(function n(){var t;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,s.axios.get(f.MOVIE_LIST_API);case 3:t=n.sent,h.setMovieList(t.data),n.next=11;break;case 7:n.prev=7,n.t0=n.catch(0),h.errorMessage=n.t0.message,console.log(n.t0);case 11:case"end":return n.stop()}},n,this,[[0,7]])}));return function(){return n.apply(this,arguments)}}()}]),n}(),o=m(r.prototype,"movieList",[u.observable],{enumerable:!0,initializer:function(){return[]}}),i=m(r.prototype,"errorMessage",[u.observable],{enumerable:!0,initializer:function(){return null}}),m(r.prototype,"setMovieList",[u.action],Object.getOwnPropertyDescriptor(r.prototype,"setMovieList"),r.prototype),m(r.prototype,"postLikeMovie",[u.action],Object.getOwnPropertyDescriptor(r.prototype,"postLikeMovie"),r.prototype),m(r.prototype,"fetchMovieList",[u.action],Object.getOwnPropertyDescriptor(r.prototype,"fetchMovieList"),r.prototype),r);t.default=h},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i,a=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),l=e(35),u=e(23),c=(i=u)&&i.__esModule?i:{default:i},s=e(39),f=(e(42),e(169));function p(n){return function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})}}function d(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var m=new(r=function(){function n(){var t,e,r,i;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e="movieList",i=this,(r=o)&&Object.defineProperty(t,e,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}return a(n,[{key:"setMovieList",value:function(n){m.movieList=n}},{key:"getMovieBySearch",value:function(){var n=p(regeneratorRuntime.mark(function n(t){var e,r,o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return m.setMovieList([]),e=f.OMDB_API_KEY+"&s="+t,n.next=4,s.omdb_axios.get(e);case 4:r=n.sent,o=r.data.Search,(o=c.default.uniqBy(o,function(n){return n.imdbID})).map(function(n){m.addMovieById(n.imdbID)});case 8:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()},{key:"addMovieById",value:function(){var n=p(regeneratorRuntime.mark(function n(t){var e,r;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,e=f.OMDB_API_KEY+"&i="+t,n.next=4,s.omdb_axios.get(e);case 4:r=n.sent,m.addMovie(r.data),n.next=11;break;case 8:n.prev=8,n.t0=n.catch(0),console.log(n.t0);case 11:case"end":return n.stop()}},n,this,[[0,8]])}));return function(t){return n.apply(this,arguments)}}()},{key:"getMovieById",value:function(){var n=p(regeneratorRuntime.mark(function n(t){var e,r,o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,e=f.OMDB_API_KEY+"&i="+t,n.next=4,s.omdb_axios.get(e);case 4:if(r=n.sent,o=r.data,!c.default.isNil(o.Error)){n.next=10;break}return n.abrupt("return",r.data);case 10:throw o.Error;case 11:n.next=16;break;case 13:throw n.prev=13,n.t0=n.catch(0),n.t0;case 16:case"end":return n.stop()}},n,this,[[0,13]])}));return function(t){return n.apply(this,arguments)}}()},{key:"addMovie",value:function(n){m.movieList=[].concat(function(n){if(Array.isArray(n)){for(var t=0,e=Array(n.length);t<n.length;t++)e[t]=n[t];return e}return Array.from(n)}(m.movieList),[n])}}]),n}(),o=d(r.prototype,"movieList",[l.observable],{enumerable:!0,initializer:function(){return[]}}),d(r.prototype,"setMovieList",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"setMovieList"),r.prototype),d(r.prototype,"getMovieBySearch",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"getMovieBySearch"),r.prototype),d(r.prototype,"addMovieById",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"addMovieById"),r.prototype),d(r.prototype,"getMovieById",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"getMovieById"),r.prototype),d(r.prototype,"addMovie",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"addMovie"),r.prototype),r);t.default=m},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i,a,l,u,c=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),s=e(35),f=e(39),p=e(42),d=e(36),m=e(85),h=(u=m)&&u.__esModule?u:{default:u};function b(n,t,e,r){e&&Object.defineProperty(n,t,{enumerable:e.enumerable,configurable:e.configurable,writable:e.writable,value:e.initializer?e.initializer.call(r):void 0})}function g(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var v=new(r=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),b(this,"email",o,this),b(this,"password",i,this),b(this,"fullName",a,this),b(this,"errorMessage",l,this)}return c(n,[{key:"setEmail",value:function(n){v.email=n}},{key:"setPassword",value:function(n){v.password=n}},{key:"setFullName",value:function(n){v.fullName=n}},{key:"resetForm",value:function(){v.errorMessage=null,v.email="",v.password="",v.fullName=""}},{key:"onRegister",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(){var t;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,f.axios.post(p.SIGNUP_API,{fullName:v.fullName,email:v.email,password:v.password});case 3:return t=n.sent,(0,d.setXAccessToken)(t.data.token),v.resetForm(),n.next=8,h.default.getUserInfo();case 8:n.next=13;break;case 10:n.prev=10,n.t0=n.catch(0),v.errorMessage=n.t0.message;case 13:case"end":return n.stop()}},n,this,[[0,10]])}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(){return t.apply(this,arguments)}}()}]),n}(),o=g(r.prototype,"email",[s.observable],{enumerable:!0,initializer:function(){return""}}),i=g(r.prototype,"password",[s.observable],{enumerable:!0,initializer:function(){return""}}),a=g(r.prototype,"fullName",[s.observable],{enumerable:!0,initializer:function(){return""}}),l=g(r.prototype,"errorMessage",[s.observable],{enumerable:!0,initializer:function(){return null}}),g(r.prototype,"setEmail",[s.action],Object.getOwnPropertyDescriptor(r.prototype,"setEmail"),r.prototype),g(r.prototype,"setPassword",[s.action],Object.getOwnPropertyDescriptor(r.prototype,"setPassword"),r.prototype),g(r.prototype,"setFullName",[s.action],Object.getOwnPropertyDescriptor(r.prototype,"setFullName"),r.prototype),g(r.prototype,"resetForm",[s.action],Object.getOwnPropertyDescriptor(r.prototype,"resetForm"),r.prototype),g(r.prototype,"onRegister",[s.action],Object.getOwnPropertyDescriptor(r.prototype,"onRegister"),r.prototype),r);t.default=v},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i,a=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),l=e(35),u=d(e(23)),c=e(39),s=d(e(85)),f=e(36),p=e(42);function d(n){return n&&n.__esModule?n:{default:n}}function m(n){return function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})}}function h(n,t,e,r){e&&Object.defineProperty(n,t,{enumerable:e.enumerable,configurable:e.configurable,writable:e.writable,value:e.initializer?e.initializer.call(r):void 0})}function b(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var g=new(r=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),h(this,"currentUserLikedMovies",o,this),h(this,"errorMessage",i,this)}return a(n,[{key:"updateMoviesLikedByUserId",value:function(){var n=m(regeneratorRuntime.mark(function n(){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,g.getMoviesLikedByUserId({userId:s.default.userInfo._id});case 2:g.currentUserLikedMovies=n.sent;case 3:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"getMoviesLikedByUserId",value:function(){var n=m(regeneratorRuntime.mark(function n(t){var e,r=t.userId;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,c.axios.get((0,f.generateUserURI)(r,p.MOVIES_LIKED_BY_USERID_API));case 2:return e=n.sent,n.abrupt("return",e.data);case 4:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()},{key:"getUsersLikedMovieId",value:function(){var n=m(regeneratorRuntime.mark(function n(t){var e,r=t.movieId;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,c.axios.get((0,f.generateMovieURI)(r,p.USERS_LIKE_MOVIEID_API));case 2:return e=n.sent,n.abrupt("return",e.data);case 4:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()},{key:"getUsersLengthLikedMovieId",value:function(){var n=m(regeneratorRuntime.mark(function n(t){var e,r=t.imdbID;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,c.axios.get((0,f.generateMovieURI)(r,p.USERS_LENGTH_LIKE_MOVIEID_API));case 2:return e=n.sent,n.abrupt("return",e.data);case 4:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()},{key:"isMovieLikedByUser",value:function(n){var t=n.currentUserLikedMovies,e=n.imdbID,r=u.default.find(t,function(n){return n.imdbID===e});return!u.default.isNil(r)}},{key:"likeMovie",value:function(){var n=m(regeneratorRuntime.mark(function n(t){var e=t.imdbID;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,c.axios.post(p.LIKE_MOVIE_API,{imdbID:e});case 2:return n.next=4,g.updateMoviesLikedByUserId();case 4:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()},{key:"unlikeMovie",value:function(){var n=m(regeneratorRuntime.mark(function n(t){var e=t.imdbID;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,c.axios.post(p.UNLIKE_MOVIE_API,{imdbID:e});case 2:return n.next=4,g.updateMoviesLikedByUserId();case 4:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()}]),n}(),o=b(r.prototype,"currentUserLikedMovies",[l.observable],{enumerable:!0,initializer:function(){return[]}}),i=b(r.prototype,"errorMessage",[l.observable],{enumerable:!0,initializer:function(){return null}}),b(r.prototype,"updateMoviesLikedByUserId",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"updateMoviesLikedByUserId"),r.prototype),b(r.prototype,"getMoviesLikedByUserId",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"getMoviesLikedByUserId"),r.prototype),b(r.prototype,"getUsersLikedMovieId",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"getUsersLikedMovieId"),r.prototype),b(r.prototype,"getUsersLengthLikedMovieId",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"getUsersLengthLikedMovieId"),r.prototype),b(r.prototype,"isMovieLikedByUser",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"isMovieLikedByUser"),r.prototype),b(r.prototype,"likeMovie",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"likeMovie"),r.prototype),b(r.prototype,"unlikeMovie",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"unlikeMovie"),r.prototype),r);t.default=g},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i,a=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),l=e(35),u=e(23),c=((i=u)&&i.__esModule,e(39)),s=e(42),f=e(36);function p(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var d=new(r=function(){function n(){var t,e,r,i;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e="errorMessage",i=this,(r=o)&&Object.defineProperty(t,e,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}return a(n,[{key:"fetchUserProfile",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(t){var e,r=t.userId;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return d.errorMessage=null,n.prev=1,n.next=4,c.axios.get((0,f.generateUserURI)(r,s.PROFILE_USER_INFO));case 4:return e=n.sent,n.abrupt("return",e.data);case 8:n.prev=8,n.t0=n.catch(1),d.errorMessage=n.t0.message,console.log(n.t0);case 12:case"end":return n.stop()}},n,this,[[1,8]])}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(n){return t.apply(this,arguments)}}()}]),n}(),o=p(r.prototype,"errorMessage",[l.observable],{enumerable:!0,initializer:function(){return null}}),p(r.prototype,"fetchUserProfile",[l.action],Object.getOwnPropertyDescriptor(r.prototype,"fetchUserProfile"),r.prototype),r);t.default=d},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),a=e(35),l=e(39),u=e(42);function c(n,t,e,r,o){var i={};return Object.keys(r).forEach(function(n){i[n]=r[n]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,r){return r(n,t,e)||e},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,t,i),i=null),i}var s=new(r=function(){function n(){var t,e,r,i;!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e="userList",i=this,(r=o)&&Object.defineProperty(t,e,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}return i(n,[{key:"setUserList",value:function(n){s.userList=n}},{key:"getUserBySearch",value:function(){var n,t=(n=regeneratorRuntime.mark(function n(t){var e;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return s.setUserList([]),n.next=3,l.axios.post(u.SEARCH_USER_API,{searchBy:t});case 3:e=n.sent,s.setUserList(e.data);case 5:case"end":return n.stop()}},n,this)}),function(){var t=n.apply(this,arguments);return new Promise(function(n,e){return function r(o,i){try{var a=t[o](i),l=a.value}catch(n){return void e(n)}if(!a.done)return Promise.resolve(l).then(function(n){r("next",n)},function(n){r("throw",n)});n(l)}("next")})});return function(n){return t.apply(this,arguments)}}()}]),n}(),o=c(r.prototype,"userList",[a.observable],{enumerable:!0,initializer:function(){return[]}}),c(r.prototype,"setUserList",[a.action],Object.getOwnPropertyDescriptor(r.prototype,"setUserList"),r.prototype),c(r.prototype,"getUserBySearch",[a.action],Object.getOwnPropertyDescriptor(r.prototype,"getUserBySearch"),r.prototype),r);t.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZDkxMDBmYzBkMTIzNDUyMTQ5NzMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC9pbmRleC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngvbGliL21vYngubW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9fYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL3JvdXRlc0NvbnRhaW5lci91cmlDb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTW92aWVJdGVtLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9zZXNzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2hCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9TZWFyY2hCYXIuY3NzP2M3ZjMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vYngtcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2lnbk91dEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL05hdkJhci5jc3M/ODQwZSIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL01vdmllLmNzcz9mZGU5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ZvY3VzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5jc3M/MGYxNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL05hdkxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL3JvdXRlc0NvbnRhaW5lci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL0hvbWVQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL1NlYXJjaFJlc3VsdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CdXR0b24vTW92aWVMaWtlQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvTW92aWVJdGVtLmNzcz9mNDRmIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvTW92aWVJdGVtLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQ291bnRMaWtlQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bml2ZXJzYWwtY29va2llL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pdmVyc2FsLWNvb2tpZS9saWIvQ29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29va2llL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bml2ZXJzYWwtY29va2llL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpY3QtdXJpLWVuY29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL1NpZ251cFBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2lnbnVwRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvU2lnbkluUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TaWduSW5Gb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05hdkJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL1NlYXJjaEJhci5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTmF2QmFyTG9nZ2VkSW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9OYXZCYXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL3JvdXRlc0NvbnRhaW5lci9tb3ZpZVJvdXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL01vdmllTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9Nb3ZpZVBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9Nb3ZpZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9ncmV5dXAtNjR4NjQucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWcvZ3JlZW51cC02NHg2NC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9ncmV5ZG93bi02NHg2NC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9yZWRkb3duLTY0eDY0LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9Nb3ZpZUxpa2VkQnlQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL3JvdXRlc0NvbnRhaW5lci9wcm9maWxlUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvVXNlckxpa2VzUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9Qcm9maWxlUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2FjY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL21vdmllcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvb21kYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvcmVnaXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2xpa2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9wcm9maWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvdXNlcnMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsImtleSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJTeW1ib2wiLCJVU0VfU1lNQk9MIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwidmFsdWUiLCJ0b0ludGVnZXIiLCJtaW4iLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsImNsYXNzQ2FsbENoZWNrIiwiQXdhaXRWYWx1ZSIsInRoaXMiLCJBc3luY0dlbmVyYXRvciIsImdlbiIsImZyb250IiwiYmFjayIsInJlc3VtZSIsImFyZyIsInJlc3VsdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInNldHRsZSIsImRvbmUiLCJlcnIiLCJyZWplY3QiLCJuZXh0IiwiX2ludm9rZSIsInJlcXVlc3QiLCJyZXR1cm4iLCJhc3luY0l0ZXJhdG9yIiwidGhyb3ciLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJpbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiRXZlbnRFbWl0dGVyIiwibGlzdGVuZXJzIiwiY2IiLCJfdGhpcyIsInB1c2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkYXRhIiwiZm9yRWFjaCIsImZuIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJkZWZpbmVQcm9wZXJ0eSQxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwiY29uY2F0IiwiY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCJ2YWxpZGF0ZSIsImNoZWNrVHlwZSIsImlzUmVxdWlyZWQiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsIl9sZW4iLCJyZXN0IiwiQXJyYXkiLCJfa2V5IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX21vYnhfXyIsImFjdHVhbCIsIkVycm9yIiwiYXBwbHkiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiYmluZCIsImdldFByb3BUeXBlIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJpc0FycmF5IiwiUmVnRXhwIiwiaXNTeW1ib2wiLCJjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yIiwiYWxsb3dOYXRpdmVUeXBlIiwibW9ieFR5cGUiLCJ0b0xvd2VyQ2FzZSIsIm1vYnhDaGVja2VyIiwicHJlY2lzZVR5cGUiLCJEYXRlIiwiZ2V0UHJlY2lzZVR5cGUiLCJuYXRpdmVUeXBlRXhwZWN0YXRpb25NZXNzYWdlIiwiY3JlYXRlT2JzZXJ2YWJsZUFycmF5T2ZUeXBlQ2hlY2tlciIsInR5cGVDaGVja2VyIiwiX2xlbjIiLCJfa2V5MiIsImVycm9yIiwib2JzZXJ2YWJsZUFycmF5Iiwib2JzZXJ2YWJsZUFycmF5T2YiLCJvYnNlcnZhYmxlTWFwIiwib2JzZXJ2YWJsZU9iamVjdCIsImFycmF5T3JPYnNlcnZhYmxlQXJyYXkiLCJhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2YiLCJvYmplY3RPck9ic2VydmFibGVPYmplY3QiLCJmcmVlemUiLCJpbmplY3RvckNvbnRleHRUeXBlcyIsIm1vYnhTdG9yZXMiLCJzZWFsIiwicHJveGllZEluamVjdG9yUHJvcHMiLCJzZXQiLCJfIiwiY29uc29sZSIsIndhcm4iLCJpc01vYnhJbmplY3RvciIsImNyZWF0ZVN0b3JlSW5qZWN0b3IiLCJncmFiU3RvcmVzRm4iLCJjb21wb25lbnQiLCJpbmplY3ROYW1lcyIsIl9jbGFzcyIsIl90ZW1wMiIsIkluamVjdG9yIiwiX0NvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsImFyZ3MiLCJzdG9yZVJlZiIsIndyYXBwZWRJbnN0YW5jZSIsIm5ld1Byb3BzIiwiYWRkaXRpb25hbFByb3BzIiwiY29udGV4dCIsInJlbmRlciIsImlzU3RhdGVsZXNzIiwicmVmIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18iLCJ3cmFwcGVkQ29tcG9uZW50IiwiaW5qZWN0IiwiY29tcG9uZW50Q2xhc3MiLCJpbmplY3RlZCIsIm9ic2VydmVyIiwic3RvcmVOYW1lcyIsImJhc2VTdG9yZXMiLCJuZXh0UHJvcHMiLCJzdG9yZU5hbWUiLCJncmFiU3RvcmVzQnlOYW1lIiwiam9pbiIsImlzRGV2dG9vbHNFbmFibGVkIiwiaXNVc2luZ1N0YXRpY1JlbmRlcmluZyIsIndhcm5lZEFib3V0T2JzZXJ2ZXJJbmplY3REZXByZWNhdGlvbiIsImNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeSIsIldlYWtNYXAiLCJyZW5kZXJSZXBvcnRlciIsImZpbmRET01Ob2RlJDIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX18iLCJyZXBvcnRSZW5kZXJpbmciLCJub2RlIiwiZW1pdCIsImV2ZW50IiwicmVuZGVyVGltZSIsIl9fJG1vYlJlbmRlckVuZCIsIl9fJG1vYlJlbmRlclN0YXJ0IiwidG90YWxUaW1lIiwibm93IiwidHJhY2tDb21wb25lbnRzIiwidXNlU3RhdGljUmVuZGVyaW5nIiwiZXJyb3JzUmVwb3J0ZXIiLCJwYXRjaCIsImZ1bmNOYW1lIiwicnVuTWl4aW5GaXJzdCIsImJhc2UiLCJtaXhpbkZ1bmMiLCJyZWFjdGl2ZU1peGluIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJpcyIsImtleXNBIiwia2V5c0IiLCJ4IiwieSIsImNvbXBvbmVudFdpbGxNb3VudCIsImluaXRpYWxOYW1lIiwicm9vdE5vZGVJRCIsIl9yZWFjdEludGVybmFsSW5zdGFuY2UiLCJfcm9vdE5vZGVJRCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJfZGVidWdJRCIsInNraXBSZW5kZXIiLCJpc0ZvcmNpbmdVcGRhdGUiLCJtYWtlUHJvcGVydHlPYnNlcnZhYmxlUmVmZXJlbmNlIiwiYmFzZVJlbmRlciIsInJlYWN0aW9uIiwiaXNSZW5kZXJpbmdQZW5kaW5nIiwicmVhY3RpdmVSZW5kZXIiLCJleGNlcHRpb24iLCJyZW5kZXJpbmciLCJ0cmFjayIsImNvbXBvbmVudFdpbGxSZWFjdCIsIl9fJG1vYnhJc1VubW91bnRlZCIsImhhc0Vycm9yIiwiZm9yY2VVcGRhdGUiLCJkaXNwb3NlIiwicmVhY3RDb21wb25lbnQiLCIkbW9ieCIsInZhbHVlSG9sZGVyIiwiYXRvbSIsInJlcG9ydE9ic2VydmVkIiwidiIsInJlcG9ydENoYW5nZWQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRlbGV0ZSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFN0YXRlIiwic3RhdGUiLCJhcmcxIiwiYXJnMiIsImlzUmVhY3RDbGFzcyIsImlzUHJvdG90eXBlT2YiLCJtaXhpbkxpZmVjeWNsZUV2ZW50cyIsImlzTW9iWFJlYWN0T2JzZXJ2ZXIiLCJPYnNlcnZlciIsImNoaWxkcmVuIiwib2JzZXJ2ZXJJbmplY3QiLCJJbmplY3RDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX19kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIk9ic2VydmVyUHJvcHNDaGVjayIsImV4dHJhS2V5Iiwic3BlY2lhbFJlYWN0S2V5cyIsIlByb3ZpZGVyIiwib25seSIsInN0b3JlcyIsInN1cHByZXNzQ2hhbmdlZFN0b3JlV2FybmluZyIsInJlYWN0aW9uU2NoZWR1bGVyIiwib25FcnJvciIsIm9uIiwiX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJtb2J4JDEiLCJzcHkiLCJleHRyYXMiLCJnZXREZWJ1Z05hbWUiLCJtb2J4UmVhY3QiLCJpbmplY3RNb2J4UmVhY3QiLCJkZWZpbmVkIiwid2FybmluZyIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsIlN0cmluZyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsIklPYmplY3QiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJMQVJHRV9BUlJBWV9TSVpFIiwiQ09SRV9FUlJPUl9URVhUIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJNQVhfTUVNT0laRV9TSVpFIiwiUExBQ0VIT0xERVIiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJXUkFQX0JJTkRfRkxBRyIsIldSQVBfQklORF9LRVlfRkxBRyIsIldSQVBfQ1VSUllfQk9VTkRfRkxBRyIsIldSQVBfQ1VSUllfRkxBRyIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiV1JBUF9GTElQX0ZMQUciLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIkxBWllfRklMVEVSX0ZMQUciLCJMQVpZX01BUF9GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUFYX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwiTUFYX0FSUkFZX0lOREVYIiwiSEFMRl9NQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImRvbUV4Y1RhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm51bGxUYWciLCJvYmplY3RUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJ3ZWFrU2V0VGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltIiwicmVUcmltU3RhcnQiLCJyZVRyaW1FbmQiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyZU9wdE1vZCIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJcXCIsIiciLCJcbiIsIlxyIiwi4oCoIiwi4oCpIiwiZnJlZVBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJyb290IiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJiaW5kaW5nIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJmdW5jIiwidGhpc0FyZyIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsInZhbHVlcyIsIm9mZnNldCIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJjdXJyZW50IiwiYmFzZVRpbWVzIiwiYmFzZVVuYXJ5IiwiYmFzZVZhbHVlcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCLDgCIsIsOBIiwiw4IiLCLDgyIsIsOEIiwiw4UiLCLDoCIsIsOhIiwiw6IiLCLDoyIsIsOkIiwiw6UiLCLDhyIsIsOnIiwiw5AiLCLDsCIsIsOIIiwiw4kiLCLDiiIsIsOLIiwiw6giLCLDqSIsIsOqIiwiw6siLCLDjCIsIsONIiwiw44iLCLDjyIsIsOsIiwiw60iLCLDriIsIsOvIiwiw5EiLCLDsSIsIsOSIiwiw5MiLCLDlCIsIsOVIiwiw5YiLCLDmCIsIsOyIiwiw7MiLCLDtCIsIsO1Iiwiw7YiLCLDuCIsIsOZIiwiw5oiLCLDmyIsIsOcIiwiw7kiLCLDuiIsIsO7Iiwiw7wiLCLDnSIsIsO9Iiwiw78iLCLDhiIsIsOmIiwiw54iLCLDviIsIsOfIiwixIAiLCLEgiIsIsSEIiwixIEiLCLEgyIsIsSFIiwixIYiLCLEiCIsIsSKIiwixIwiLCLEhyIsIsSJIiwixIsiLCLEjSIsIsSOIiwixJAiLCLEjyIsIsSRIiwixJIiLCLElCIsIsSWIiwixJgiLCLEmiIsIsSTIiwixJUiLCLElyIsIsSZIiwixJsiLCLEnCIsIsSeIiwixKAiLCLEoiIsIsSdIiwixJ8iLCLEoSIsIsSjIiwixKQiLCLEpiIsIsSlIiwixKciLCLEqCIsIsSqIiwixKwiLCLEriIsIsSwIiwixKkiLCLEqyIsIsStIiwixK8iLCLEsSIsIsS0IiwixLUiLCLEtiIsIsS3IiwixLgiLCLEuSIsIsS7IiwixL0iLCLEvyIsIsWBIiwixLoiLCLEvCIsIsS+IiwixYAiLCLFgiIsIsWDIiwixYUiLCLFhyIsIsWKIiwixYQiLCLFhiIsIsWIIiwixYsiLCLFjCIsIsWOIiwixZAiLCLFjSIsIsWPIiwixZEiLCLFlCIsIsWWIiwixZgiLCLFlSIsIsWXIiwixZkiLCLFmiIsIsWcIiwixZ4iLCLFoCIsIsWbIiwixZ0iLCLFnyIsIsWhIiwixaIiLCLFpCIsIsWmIiwixaMiLCLFpSIsIsWnIiwixagiLCLFqiIsIsWsIiwixa4iLCLFsCIsIsWyIiwixakiLCLFqyIsIsWtIiwixa8iLCLFsSIsIsWzIiwixbQiLCLFtSIsIsW2IiwixbciLCLFuCIsIsW5IiwixbsiLCLFvSIsIsW6IiwixbwiLCLFviIsIsSyIiwixLMiLCLFkiIsIsWTIiwixYkiLCLFvyIsImVzY2FwZUh0bWxDaGFyIiwiJiIsIjwiLCI+IiwiXCIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsIm1hcFRvQXJyYXkiLCJtYXAiLCJzaXplIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsInJlcGxhY2VIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJzYWZlR2V0Iiwic2V0VG9BcnJheSIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCImYW1wOyIsIiZsdDsiLCImZ3Q7IiwiJnF1b3Q7IiwiJiMzOTsiLCJydW5JbkNvbnRleHQiLCJkZWZhdWx0cyIsInBpY2siLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJjdHhTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJjZWlsIiwibmF0aXZlRmxvb3IiLCJmbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJyYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiU2V0IiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJhZGQiLCJTdGFjayIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJzeW1ib2wiLCJyZWdleHAiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImVzY2FwZSIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJ2YXJpYWJsZSIsImltcG9ydHMiLCJwb3AiLCJoYXNoIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5Iiwic2VlbiIsImJhc2VJbnZva2UiLCJwYXJlbnQiLCJsYXN0IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwibWVzc2FnZSIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwibmV3VmFsdWUiLCJpc1R5cGVkIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNvbXBhcmVyIiwic29ydCIsImJhc2VTb3J0QnkiLCJjcml0ZXJpYSIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwib3JkZXIiLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInN0YXJ0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImVuZCIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJpZCIsInNsaWNlIiwiY29weSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwiY2hhckF0IiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwiY2FsbGJhY2siLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsImNvdW50SG9sZGVycyIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiZGVmYXVsdFZhbHVlIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwiY3JlYXRlUmFuZ2UiLCJzdGVwIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwibWVyZ2VEYXRhIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJtZW1vaXplQ2FwcGVkIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kS2V5IiwiZGVib3VuY2UiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImZsdXNoIiwiZGVmZXIiLCJkZWxheSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ24iLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwicm91bmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmlsdGVyIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlbW92ZSIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJwb3NpdGlvbiIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYU4iLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsInJlRGVsaW1pdGVycyIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW0iLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsIm5ld0VuZCIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc1ZpZXciLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImRvY3VtZW50IiwiYiIsInN0ciIsImFGdW5jdGlvbiIsInRoYXQiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwidmVyc2lvbiIsIl9fZSIsIktFWSIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImludGVyY2VwdFJlYWRzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX19hc3NpZ24iLCJ0IiwiX19yZWFkIiwiciIsImFyIiwiX19zcHJlYWQiLCJlbnVtZXJhYmxlRGVzY3JpcHRvckNhY2hlIiwibm9uRW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSIsImluaXRpYWxpemVJbnN0YW5jZSIsIl9fbW9ieERpZFJ1bkxhenlJbml0aWFsaXplcnMiLCJkZWNvcmF0b3JzIiwiX19tb2J4RGVjb3JhdG9ycyIsImFkZEhpZGRlblByb3AiLCJwcm9wZXJ0eUNyZWF0b3IiLCJkZWNvcmF0b3JUYXJnZXQiLCJkZWNvcmF0b3JBcmd1bWVudHMiLCJjcmVhdGVQcm9wRGVjb3JhdG9yIiwicHJvcGVydHlJbml0aWFsbHlFbnVtZXJhYmxlIiwiZGVjb3JhdG9yIiwiYXBwbHlJbW1lZGlhdGVseSIsImluaGVyaXRlZERlY29yYXRvcnMiLCJjcmVhdGVQcm9wZXJ0eUluaXRpYWxpemVyRGVzY3JpcHRvciIsIkVNUFRZX0FSUkFZIiwiaXNTcHlFbmFibGVkIiwiZ2xvYmFsU3RhdGUiLCJzcHlMaXN0ZW5lcnMiLCJzcHlSZXBvcnQiLCJzcHlSZXBvcnRTdGFydCIsIkVORF9FVkVOVCIsInNweVJlcG9ydEVuZCIsImNoYW5nZSIsImxpc3RlbmVyIiwiaWR4IiwiY3JlYXRlQWN0aW9uIiwiYWN0aW9uTmFtZSIsImV4ZWN1dGVBY3Rpb24iLCJpc01vYnhBY3Rpb24iLCJzY29wZSIsInJ1bkluZm8iLCJub3RpZnlTcHkiLCJzdGFydFRpbWUiLCJmbGF0dGVuZEFyZ3MiLCJwcmV2RGVyaXZhdGlvbiIsInVudHJhY2tlZFN0YXJ0Iiwic3RhcnRCYXRjaCIsInByZXZBbGxvd1N0YXRlQ2hhbmdlcyIsImFsbG93U3RhdGVDaGFuZ2VzU3RhcnQiLCJzdGFydEFjdGlvbiIsImFsbG93U3RhdGVDaGFuZ2VzRW5kIiwiZW5kQmF0Y2giLCJ1bnRyYWNrZWRFbmQiLCJlbmRBY3Rpb24iLCJhbGxvd1N0YXRlQ2hhbmdlcyIsInByZXYiLCJkb250UmVhc3NpZ25GaWVsZHMiLCJmYWlsJDEiLCJuYW1lZEFjdGlvbkRlY29yYXRvciIsImluaXRpYWxpemVyXzEiLCJhZGRIaWRkZW5GaW5hbFByb3AiLCJhY3Rpb25GaWVsZERlY29yYXRvciIsImFyZzMiLCJhcmc0IiwicnVuSW5BY3Rpb24iLCJpc0FjdGlvbiIsInRoaW5nIiwiZGVmaW5lQm91bmRBY3Rpb24iLCJwcm9wZXJ0eU5hbWUiLCJib3VuZCIsImFwcGx5VG9JbnN0YW5jZSIsImRlZXBFcXVhbCIsImFTdGFjayIsImJTdGFjayIsInVud3JhcCIsImNsYXNzTmFtZSIsImFyZUFycmF5cyIsImFDdG9yIiwiYkN0b3IiLCJrZXlzJCQxIiwiaGFzJCQxIiwiZGVlcEVxIiwiaXNPYnNlcnZhYmxlQXJyYXkiLCJwZWVrIiwiaXNFUzZNYXAiLCJpc09ic2VydmFibGVNYXAiLCJpZGVudGl0eUNvbXBhcmVyIiwic3RydWN0dXJhbCIsImRlZmF1bHQiLCJhcmVCb3RoTmFOIiwiYXV0b3J1biIsIm9wdHMiLCJFTVBUWV9PQkpFQ1QiLCJnZXROZXh0SWQiLCJzY2hlZHVsZXIiLCJSZWFjdGlvbiIsInJlYWN0aW9uUnVubmVyIiwic2NoZWR1bGVyXzEiLCJjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyIsImlzU2NoZWR1bGVkXzEiLCJpc0Rpc3Bvc2VkIiwic2NoZWR1bGUiLCJnZXREaXNwb3NlciIsInJ1biIsImV4cHJlc3Npb24iLCJlZmZlY3QiLCJmaXJlSW1tZWRpYXRlbHkiLCJkZXByZWNhdGVkIiwiZXJyb3JIYW5kbGVyIiwiYmFzZUZuIiwiZWZmZWN0QWN0aW9uIiwicnVuU3luYyIsImZpcnN0VGltZSIsImlzU2NoZWR1bGVkIiwiZXF1YWxzIiwiY29tcGFyZVN0cnVjdHVyYWwiLCJjaGFuZ2VkIiwibmV4dFZhbHVlIiwiQ29tcHV0ZWRWYWx1ZSIsImRlcGVuZGVuY2llc1N0YXRlIiwiSURlcml2YXRpb25TdGF0ZSIsIk5PVF9UUkFDS0lORyIsIm9ic2VydmluZyIsIm5ld09ic2VydmluZyIsImlzQmVpbmdPYnNlcnZlZCIsImlzUGVuZGluZ1Vub2JzZXJ2YXRpb24iLCJvYnNlcnZlcnMiLCJvYnNlcnZlcnNJbmRleGVzIiwiZGlmZlZhbHVlIiwicnVuSWQiLCJsYXN0QWNjZXNzZWRCeSIsImxvd2VzdE9ic2VydmVyU3RhdGUiLCJVUF9UT19EQVRFIiwidW5ib3VuZERlcHNDb3VudCIsIl9fbWFwaWQiLCJDYXVnaHRFeGNlcHRpb24iLCJpc0NvbXB1dGluZyIsImlzUnVubmluZ1NldHRlciIsImlzVHJhY2luZyIsIlRyYWNlTW9kZSIsIk5PTkUiLCJkZXJpdmF0aW9uIiwic3RydWN0IiwicmVxdWlyZXNSZWFjdGlvbiIsImtlZXBBbGl2ZSIsIm9uQmVjb21lU3RhbGUiLCJvYnNlcnZhYmxlIiwiUE9TU0lCTFlfU1RBTEUiLCJsb2dUcmFjZUluZm8iLCJwcm9wYWdhdGVNYXliZUNoYW5nZWQiLCJvbkJlY29tZVVub2JzZXJ2ZWQiLCJvbkJlY29tZU9ic2VydmVkIiwiaW5CYXRjaCIsInNob3VsZENvbXB1dGUiLCJ3YXJuQWJvdXRVbnRyYWNrZWRSZWFkIiwiY29tcHV0ZVZhbHVlIiwidHJhY2tBbmRDb21wdXRlIiwiU1RBTEUiLCJwcm9wYWdhdGVDaGFuZ2VDb25maXJtZWQiLCJpc0NhdWdodEV4Y2VwdGlvbiIsImNhdXNlIiwiaW52YXJpYW50Iiwib2xkVmFsdWUiLCJ3YXNTdXNwZW5kZWQiLCJjb21wdXRhdGlvbkRlcHRoIiwidHJhY2tEZXJpdmVkRnVuY3Rpb24iLCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzIiwic3VzcGVuZCIsImNsZWFyT2JzZXJ2aW5nIiwib2JzZXJ2ZSIsInByZXZWYWx1ZSIsInByZXZVIiwicHJpbWl0aXZlU3ltYm9sIiwiaXNDb21wdXRlZFZhbHVlIiwiY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSIsImhhc0ludGVyY2VwdG9ycyIsImludGVyY2VwdGFibGUiLCJpbnRlcmNlcHRvcnMiLCJyZWdpc3RlckludGVyY2VwdG9yIiwiaGFuZGxlciIsImludGVyY2VwdENoYW5nZSIsImhhc0xpc3RlbmVycyIsImxpc3RlbmFibGUiLCJjaGFuZ2VMaXN0ZW5lcnMiLCJyZWdpc3Rlckxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwiVU5DSEFOR0VEIiwiQXRvbSIsIkF0b21JbXBsIiwicHJvcGFnYXRlQ2hhbmdlZCIsImlzQXRvbSIsImRlY2xhcmVBdG9tIiwiT2JzZXJ2YWJsZVZhbHVlIiwiX3N1cGVyIiwiZW5oYW5jZXIiLCJoYXNVbnJlcG9ydGVkQ2hhbmdlIiwiZGVoYW5jZVZhbHVlIiwiZGVoYW5jZXIiLCJwcmVwYXJlTmV3VmFsdWUiLCJzZXROZXdWYWx1ZSIsImNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkIiwiaW50ZXJjZXB0IiwiaXNPYnNlcnZhYmxlVmFsdWUiLCJPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24iLCJkZWZhdWx0RW5oYW5jZXIiLCJyZWFkIiwib3duZXIiLCJpbGxlZ2FsQWNjZXNzIiwid3JpdGUiLCJub3RpZnkiLCJnZXRLZXlzIiwiT2JzZXJ2YWJsZUFycmF5IiwicmVmZXJlbmNlRW5oYW5jZXIiLCJhc09ic2VydmFibGVPYmplY3QiLCJkZWVwRW5oYW5jZXIiLCJhZG0iLCJkZWZpbmVPYnNlcnZhYmxlUHJvcGVydHkiLCJvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzIiwiZ2VuZXJhdGVPYnNlcnZhYmxlUHJvcENvbmZpZyIsIm5vdGlmeVByb3BlcnR5QWRkaXRpb24iLCJkZWZpbmVDb21wdXRlZFByb3BlcnR5IiwiY29tcHV0ZWRQcm9wZXJ0eUNvbmZpZ3MiLCJnZXRBZG1pbmlzdHJhdGlvbkZvckNvbXB1dGVkUHJvcE93bmVyIiwiZ2VuZXJhdGVDb21wdXRlZFByb3BDb25maWciLCJpc09ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiIsImlzT2JzZXJ2YWJsZU9iamVjdCIsImNyZWF0ZURlY29yYXRvckZvckVuaGFuY2VyIiwiX2RlY29yYXRvclRhcmdldCIsImRlY29yYXRvckFyZ3MiLCJOT0RFX0VOViIsIl9pc09ic2VydmFibGUiLCJpc1JlYWN0aW9uIiwiaXNPYnNlcnZhYmxlIiwiaXNPYnNlcnZhYmxlUHJvcCIsIl9pc0NvbXB1dGVkIiwiZ2V0QXRvbSIsImlzQ29tcHV0ZWQiLCJpc0NvbXB1dGVkUHJvcCIsImNvbXB1dGVkRGVjb3JhdG9yIiwiY29tcHV0ZWRTdHJ1Y3REZWNvcmF0b3IiLCJleHRlbmRTaGFsbG93T2JzZXJ2YWJsZSIsImV4dGVuZE9ic2VydmFibGUiLCJzaGFsbG93Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMiLCJkZWZhdWx0RGVjb3JhdG9yIiwiYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyIsImRlZXAiLCJyZWZEZWNvcmF0b3IiLCJkZWVwRGVjb3JhdG9yIiwicmVzdWx0RGVzY3JpcHRvciIsImRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyIsImdldEVuaGFuY2VyRnJvbU9wdGlvbnMiLCJzaGFsbG93RGVjb3JhdG9yIiwicmVmU3RydWN0RGVjb3JhdG9yIiwib2JzZXJ2YWJsZUZhY3RvcmllcyIsImJveCIsImluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yIiwic2hhbGxvd0JveCIsImluaXRpYWxWYWx1ZXMiLCJzaGFsbG93QXJyYXkiLCJPYnNlcnZhYmxlTWFwIiwic2hhbGxvd01hcCIsInNoYWxsb3dPYmplY3QiLCJzaGFsbG93IiwiaXRlcmF0b3JTeW1ib2wiLCJkZWNsYXJlSXRlcmF0b3IiLCJwcm90b3RUeXBlIiwiaXRlcmF0b3JGYWN0b3J5IiwibWFrZUl0ZXJhYmxlIiwidHJhbnNhY3Rpb24iLCJPYnNlcnZhYmxlTWFwTWFya2VyIiwiaW5pdGlhbERhdGEiLCJfa2V5cyIsIl9kYXRhIiwiX2hhc01hcCIsIl9oYXMiLCJfdXBkYXRlSGFzTWFwRW50cnkiLCJoYXNLZXkiLCJfdXBkYXRlVmFsdWUiLCJfYWRkVmFsdWUiLCJuZXh0SW5kZXgiLCJ0b0pTIiwiX2EiLCJfYiIsInVudHJhY2tlZCIsIm5ld0tleXMiLCJrIiwidG9QT0pPIiwiYW55VGhpbmciLCJnZXRBZG1pbmlzdHJhdGlvbiIsImludGVyY2VwdEhvb2siLCJob29rIiwib3JpZyIsImNyZWF0ZUF0b20iLCJvbkJlY29tZU9ic2VydmVkSGFuZGxlciIsIm9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIiLCJjdG9yIiwic2FmYXJpUHJvdG90eXBlU2V0dGVySW5oZXJpdGFuY2VCdWciLCJPQlNFUlZBQkxFX0FSUkFZX0JVRkZFUl9TSVpFIiwiU3R1YkFycmF5IiwiaXNGcm96ZW4iLCJPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiIsIm93bmVkIiwibGFzdEtub3duTGVuZ3RoIiwibmV3ViIsIm9sZFYiLCJkZWhhbmNlVmFsdWVzIiwiYWRkZWQiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsInJlbW92ZWRDb3VudCIsImdldEFycmF5TGVuZ3RoIiwic2V0QXJyYXlMZW5ndGgiLCJuZXdMZW5ndGgiLCJjdXJyZW50TGVuZ3RoIiwibmV3SXRlbXMiLCJzcGxpY2VXaXRoQXJyYXkiLCJ1cGRhdGVBcnJheUxlbmd0aCIsIm9sZExlbmd0aCIsImRlbHRhIiwicmVzZXJ2ZUFycmF5QnVmZmVyIiwiZGVsZXRlQ291bnQiLCJsZW5ndGhEZWx0YSIsInNwbGljZUl0ZW1zSW50b1ZhbHVlcyIsIm5vdGlmeUFycmF5U3BsaWNlIiwibm90aWZ5QXJyYXlDaGlsZFVwZGF0ZSIsIkVOVFJZXzAiLCJfaSIsIml0ZW1zIiwic2hpZnQiLCJ1bnNoaWZ0IiwiY29tcGFyZUZuIiwibW92ZSIsInRvSW5kZXgiLCJjaGVja0luZGV4Iiwib2xkSXRlbXMiLCJpbXBsIiwiYmFzZUZ1bmMiLCJwcm9wTmFtZXMiLCJtYWtlTm9uRW51bWVyYWJsZSIsImNyZWF0ZUFycmF5RW50cnlEZXNjcmlwdG9yIiwiY3JlYXRlQXJyYXlCdWZmZXJJdGVtIiwiaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiIsIk9CRlVTQ0FURURfRVJST1IiLCJnZXRHbG9iYWwiLCJtb2J4R3VpZCIsImNoZWNrIiwibXNnIiwiaW52b2tlZCIsImNsYXp6IiwicGVyc2lzdGVudEtleXMiLCJNb2JYR2xvYmFscyIsInRyYWNraW5nRGVyaXZhdGlvbiIsInBlbmRpbmdVbm9ic2VydmF0aW9ucyIsInBlbmRpbmdSZWFjdGlvbnMiLCJpc1J1bm5pbmdSZWFjdGlvbnMiLCJlbmZvcmNlQWN0aW9ucyIsImdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycyIsImNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiIsInJ1bkluSXNvbGF0aW9uQ2FsbGVkIiwiZ2xvYmFsXzEiLCJnZXRHbG9iYWxTdGF0ZSIsInJlc2V0R2xvYmFsU3RhdGUiLCJkZWZhdWx0R2xvYmFscyIsImdldERlcGVuZGVuY3lUcmVlIiwibm9kZVRvRGVwZW5kZW5jeVRyZWUiLCJsaXN0IiwiZGVwZW5kZW5jaWVzIiwiaXRlbSIsImdldE9ic2VydmVyVHJlZSIsIm5vZGVUb09ic2VydmVyVHJlZSIsImdldE9ic2VydmVycyIsImFkZE9ic2VydmVyIiwicmVtb3ZlT2JzZXJ2ZXIiLCJxdWV1ZUZvclVub2JzZXJ2YXRpb24iLCJmaWxsZXIiLCJydW5SZWFjdGlvbnMiLCJsb2ciLCJCUkVBSyIsImxpbmVzIiwicHJpbnREZXBUcmVlIiwidHJlZSIsImNoaWxkIiwiX19tb2J4SW5zdGFuY2VDb3VudCIsInByZXZVbnRyYWNrZWQiLCJvYnMiLCJjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMCIsImlzQ29tcHV0aW5nRGVyaXZhdGlvbiIsImhhc09ic2VydmVycyQkMSIsInByZXZUcmFja2luZyIsInByZXZPYnNlcnZpbmciLCJsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUiLCJpMCIsImRlcCIsImJpbmREZXBlbmRlbmNpZXMiLCJ0cmFjZSIsImVudGVyQnJlYWtQb2ludCIsImdldEF0b21Gcm9tQXJncyIsIkxPRyIsIm9uSW52YWxpZGF0ZSIsIl9pc1NjaGVkdWxlZCIsIl9pc1RyYWNrUGVuZGluZyIsIl9pc1J1bm5pbmciLCJydW5SZWFjdGlvbiIsInJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbiIsIm9uUmVhY3Rpb25FcnJvciIsIk1BWF9SRUFDVElPTl9JVEVSQVRJT05TIiwicnVuUmVhY3Rpb25zSGVscGVyIiwiYWxsUmVhY3Rpb25zIiwiaXRlcmF0aW9ucyIsInJlbWFpbmluZ1JlYWN0aW9ucyIsInByb3BPckNiIiwiY2JPckZpcmUiLCJvYnNlcnZlT2JzZXJ2YWJsZVByb3BlcnR5Iiwib2JzZXJ2ZU9ic2VydmFibGUiLCJwcm9wT3JIYW5kbGVyIiwiaW50ZXJjZXB0UHJvcGVydHkiLCJpbnRlcmNlcHRJbnRlcmNlcHRhYmxlIiwid2hlbiIsImRpc3Bvc2VyIiwiX3doZW4iLCJ3aGVuUHJvbWlzZSIsInRpbWVvdXRIYW5kbGUiLCJ0aW1lb3V0IiwiZXhpc3RpbmdPYnNlcnZhYmxlIiwidmFsdWVzXzEiLCJrZXlfMSIsImhhcyQxIiwiZGVjb3JhdGUiLCJuZXdEZXNjcmlwdG9yIiwiY29uZmlndXJlIiwiYmFzZVNjaGVkdWxlciIsImlzb2xhdGVHbG9iYWxTdGF0ZSIsImdlbmVyYXRvcklkIiwiZ2VuZXJhdG9yIiwiZmFpbCIsInJlamVjdG9yIiwicGVuZGluZ1Byb21pc2UiLCJzdGVwSWQiLCJvbkZ1bGZpbGxlZCIsInJldCIsIm9uUmVqZWN0ZWQiLCJjYW5jZWxQcm9taXNlIiwicmVzXzEiLCJ5aWVsZGVkUHJvbWlzZSIsInByb21pc2UiLCJkZWZhdWx0T3B0aW9ucyIsImRldGVjdEN5Y2xlcyIsImV4cG9ydE1hcHNBc09iamVjdHMiLCJfX2FscmVhZHlTZWVuIiwidG9BZGQiLCJyZXNfMiIsImluamVjdE1vYngiLCJjb29raWVzIiwiX3VuaXZlcnNhbENvb2tpZTIiLCJnZXRYQWNjZXNzVG9rZW5Gcm9tQ29va2llIiwic2V0WEFjY2Vzc1Rva2VuIiwidG9rZW4iLCJfbG9kYXNoMiIsImF4aW9zIiwiaGVhZGVycyIsImNoYW5nZUF4aW9zSW5zdGFuY2VYQWNjZXNzVG9rZW5IZWFkZXIiLCJnZW5lcmF0ZVVzZXJVUkkiLCJ1c2VySWQiLCJ1cmkiLCJnZW5lcmF0ZU1vdmllVVJJIiwibW92aWVJZCIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiQXJyYXlQcm90byIsIiRBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiRk9SQ0VEX1NFVCIsInRvT2Zmc2V0IiwiQllURVMiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsImNvcHlXaXRoaW4iLCJzZWFyY2hFbGVtZW50IiwibWlkZGxlIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsIiRiZWdpbiIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiJG9mZnNldCIsIiRsZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiYXhpb3NDbGFzcyIsIl9jb25zdGFudHMiLCJfdXRpbCIsImJhc2VVUkwiLCJ4LWFjY2Vzcy10b2tlbiIsIm9tZGJfYXhpb3MiLCJNRVRBIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJVTlNDT1BBQkxFUyIsIlNJR05VUF9BUEkiLCJBUEkiLCJTSUdOSU5fQVBJIiwiU0VBUkNIX1VTRVJfQVBJIiwiUFJPRklMRV9NRV9BUEkiLCJQT1NUX01PVklFX0FQSSIsIk1PVklFX0xJU1RfQVBJIiwiTElLRV9NT1ZJRV9BUEkiLCJVTkxJS0VfTU9WSUVfQVBJIiwiQ1VSUkVOVF9VU0VSX0xJS0VEX01PVklFU19BUEkiLCJNT1ZJRVNfTElLRURfQllfVVNFUklEX0FQSSIsIlVTRVJTX0xJS0VfTU9WSUVJRF9BUEkiLCJVU0VSU19MRU5HVEhfTElLRV9NT1ZJRUlEX0FQSSIsIlBST0ZJTEVfVVNFUl9JTkZPIiwiYml0bWFwIiwicHgiLCIka2V5cyIsImVudW1CdWdLZXlzIiwiZFBzIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsImZvcmJpZGRlbkZpZWxkIiwiUkVUVVJOIiwiU0VBUkNIX1JFU1VMVF9VUkkiLCJTSUdOX1VQX1VSSSIsIlNJR05fSU5fVVJJIiwiTU9WSUVfVVJJIiwiVVNFUl9VUkkiLCJNT1ZJRV9MSVNUX1VSSSIsIk1PVklFX0RFVEFJTF9VUkkiLCJNT1ZJRV9MSUtFRF9CWV9VUkkiLCJVU0VSX0xJS0VTX1VSSSIsIlVTRVJfUFJPRklMRV9VUkkiLCJkZWYiLCJzdGF0Iiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwiX3QiLCJjb2YiLCJBUkciLCJUIiwidHJ5R2V0IiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsImVsIiwic2V0QXR0cmlidXRlIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdWJzdHIiLCJoYXNCYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImciLCJldmFsIiwiSVNfSU5DTFVERVMiLCJNQVRDSCIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJhcnIiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIlNZTUJPTCIsImZucyIsInN0cmZuIiwicnhmbiIsIkQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZ2V0Q29uc3RydWN0b3IiLCJzZXRTdHJvbmciLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJLIiwiX19kZWZpbmVTZXR0ZXJfXyIsIkNPTExFQ1RJT04iLCJBIiwibWFwRm4iLCJuZXh0SXRlbSIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG8iLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19QYXRoVXRpbHNfXyIsIl9leHRlbmRzIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZXNvbHZlX3BhdGhuYW1lX18iLCJsb2NhdGlvbnNBcmVFcXVhbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV92YWx1ZV9lcXVhbF9fIiwiX3JlYWN0IiwiX21vYnhSZWFjdCIsIl9yZWFjdFJvdXRlckRvbSIsIl91cmlDb25zdGFudHMiLCJNb3ZpZUl0ZW0iLCJnZXRNb3ZpZUJ5SWQiLCJvbWRiIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJnZXRNb3ZpZSIsImxvYWRpbmciLCJpbWRiSUQiLCJtb3ZpZUluZm8iLCJzZXRTdGF0ZSIsIl9zdGF0ZSIsIl9yZWFjdDIiLCJhbHQiLCJQb3N0ZXIiLCJfTW92aWVMaWtlQnV0dG9uMiIsIl9Db3VudExpa2VCdXR0b24yIiwiTGluayIsIlRpdGxlIiwiWWVhciIsIlBsb3QiLCJSYXRpbmdzIiwicmF0ZSIsIlNvdXJjZSIsIlZhbHVlIiwiR2VucmUiLCJEaXJlY3RvciIsIldyaXRlciIsIlJlbGVhc2VkIiwiQm94T2ZmaWNlIiwiUnVudGltZSIsIlByb2R1Y3Rpb24iLCJfcHJvcFR5cGVzMiIsIl9tb2J4IiwiX2F4aW9zIiwiX2luZGV4IiwiU2Vzc2lvbiIsIl9kZXNjcmlwdG9yIiwiZ2V0VXNlckluZm8iLCJ1c2VySW5mbyIsIndrc0V4dCIsIiRTeW1ib2wiLCJkb2N1bWVudEVsZW1lbnQiLCJidWdneSIsInNpZ24iLCIkZXhwbTEiLCJleHBtMSIsIlRPX1NUUklORyIsInBvcyIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwic2VhcmNoU3RyaW5nIiwicmUiLCIkZGVmaW5lUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsIm9yaWdpbmFsIiwiZW5kUG9zIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX2siLCJBcmd1bWVudHMiLCJjaGFubmVsIiwicG9ydCIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwibmV4dFRpY2siLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaXNOb2RlIiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJ1c2VyQWdlbnQiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJfd2FybmluZyIsIl93YXJuaW5nMiIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3Rfcm91dGVyX2VzX1JvdXRlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX3Byb3BfdHlwZXNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19wcm9wX3R5cGVzX19fZGVmYXVsdCIsIlJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJjb21wdXRlTWF0Y2giLCJoaXN0b3J5IiwiX2luaGVyaXRzIiwiZ2V0Q2hpbGRDb250ZXh0Iiwicm91dGVyIiwicm91dGUiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiX3RoaXMyIiwiX3Byb3BzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2ludmFyaWFudF9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfX19kZWZhdWx0IiwiQ2hpbGRyZW4iLCJ1bmxpc3RlbiIsImxpc3RlbiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfd2FybmluZ19fX2RlZmF1bHQiLCJDb21wb25lbnQiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsInN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwiY29tcGlsZWRQYXR0ZXJuIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3BhdGhfdG9fcmVnZXhwX19fZGVmYXVsdCIsImNvbXBpbGVQYXRoIiwidXRpbHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJBY2NlcHQiLCJuYW1lcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImlzRW51bSIsImZhY3RvcmllcyIsInBhcnRBcmdzIiwiY29uc3RydWN0IiwidW4iLCIkcGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwiJHBhcnNlRmxvYXQiLCJsb2cxcCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwiaW5jIiwiZmxhZ3MiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5Iiwic3Ryb25nIiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJfZiIsIl9sIiwiSW50ZXJuYWxNYXAiLCJ3ZWFrIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsInVmc3RvcmUiLCJ0bXAiLCIkV2Vha01hcCIsIiRoYXMiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwiUmVmbGVjdCIsIm93bktleXMiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJtYXBwZXIiLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJlbXB0eU9iamVjdCIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJ2YWx1ZUVxdWFsIiwiYVR5cGUiLCJhVmFsdWUiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiY2FuVXNlRE9NIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwidWEiLCJzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlIiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2ludmFyaWFudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2ludmFyaWFudF9fX2RlZmF1bHQiLCJpc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJpbm5lclJlZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNyZWF0ZUhyZWYiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0IiwiYm9vbCIsIm9uZU9mVHlwZSIsInNoYXBlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X3JvdXRlcl9lc19Sb3V0ZV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19tYXRjaFBhdGhfXyIsImlzRW1wdHlDaGlsZHJlbiIsIlJvdXRlIiwiY29tcHV0ZWRNYXRjaCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsInBhcmFtc1NlcmlhbGl6ZXIiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsIiwiYXBpRW5kcG9pbnQiLCJBUElfRU5EUE9JTlQiLCJPTURCX0FQSSIsIk9NREJfQVBJX0tFWSIsIlNlYXJjaEJhciIsImhhbmRsZVN1Ym1pdCIsInNlYXJjaENvbnRlbnQiLCJlbGVtZW50cyIsIm9uU3VibWl0Iiwid2l0aFJvdXRlciIsImhtciIsImxvY2FscyIsIm1vYngiLCJSZWFjdCIsInJlYWN0RG9tIiwiUmVhY3RfX2RlZmF1bHQiLCJmaW5kRE9NTm9kZSIsIl9hbGxvd1N0YXRlQ2hhbmdlcyIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiUHJvcFR5cGVzIiwiZmFjdG9yeSIsIlNpZ25PdXRCdXR0b24iLCJoYW5kbGVTaWduT3V0IiwibG9nT3V0IiwiX2JhYmVsUG9seWZpbGwiLCJERUZJTkVfUFJPUEVSVFkiLCJkZWZpbmUiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwic3ltIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJkaWdpdHMiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsImMyIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwiX2lzRmluaXRlIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsImxhcmciLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzEwIiwiTE9HMTBFIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJyYXciLCJjYWxsU2l0ZSIsInRwbCIsIiRhdCIsInBvaW50IiwiY29kZVBvaW50QXQiLCIkZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsIiRzdGFydHNXaXRoIiwiY29sb3IiLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCJmb3JjZWQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwicmUxIiwicmUyIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiJG1hdGNoIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIk5QQ0ciLCJzZXBhcmF0b3IyIiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCIkUHJvbWlzZSIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJjYXRjaCIsImNhcGFiaWxpdHkiLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIiRpc1ZpZXciLCJmaW5hbCIsInZpZXdTIiwidmlld1QiLCJpbml0IiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImFycmF5U3BlY2llc0NyZWF0ZSIsImRlcHRoQXJnIiwiJHBhZCIsImdldEZsYWdzIiwiUmVnRXhwUHJvdG8iLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJfciIsIm1hdGNoQWxsIiwicngiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIiR2YWx1ZXMiLCJfX2RlZmluZUdldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCJpc3ViaCIsImltdWxoIiwidSIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsInVtdWxoIiwic2lnbmJpdCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0cnkiLCJtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsImRlbGV0ZU1ldGFkYXRhIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCIkbWV0YWRhdGEiLCJhc2FwIiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIk9ic2VydmFibGUiLCJNU0lFIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCIkdGFzayIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJPcCIsImhhc093biIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJtYXJrIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCIkcmUiLCJyZWdFeHAiLCJfcmVhY3REb20yIiwiX2NvbnRhaW5lcnMyIiwiZ2V0RWxlbWVudEJ5SWQiLCJxIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsImlzUmVhY3RDb21wb25lbnQiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCIsIkgiLCJJIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiaCIsIiQkdHlwZW9mIiwiX293bmVyIiwiTSIsIk4iLCJrZXlQcmVmaXgiLCJRIiwiPSIsIjoiLCJQdXJlQ29tcG9uZW50IiwidW5zdGFibGVfQXN5bmNDb21wb25lbnQiLCJGcmFnbWVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJhYSIsImJhIiwiZGEiLCJlYSIsImZhIiwiaWEiLCJvYSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiZGVmYXVsdENoZWNrZWQiLCJpbm5lckhUTUwiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJwYSIsInRhIiwiTVVTVF9VU0VfUFJPUEVSVFkiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJET01BdHRyaWJ1dGVOYW1lc3BhY2VzIiwiRE9NQXR0cmlidXRlTmFtZXMiLCJET01NdXRhdGlvbk1ldGhvZHMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXV0YXRpb25NZXRob2QiLCJtdXN0VXNlUHJvcGVydHkiLCJoYXNCb29sZWFuVmFsdWUiLCJoYXNOdW1lcmljVmFsdWUiLCJoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZSIsImhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUiLCJoYXNTdHJpbmdCb29sZWFuVmFsdWUiLCJ2YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJhbGxvd0Z1bGxTY3JlZW4iLCJhdXRvRm9jdXMiLCJhdXRvUGxheSIsImNhcHR1cmUiLCJjaGVja2VkIiwiY29scyIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRyb2xzIiwiZGlzYWJsZWQiLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImZvcm1Ob1ZhbGlkYXRlIiwiaGlkZGVuIiwibG9vcCIsIm11bHRpcGxlIiwibXV0ZWQiLCJub1ZhbGlkYXRlIiwicGxheXNJbmxpbmUiLCJyZWFkT25seSIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb3dzIiwicm93U3BhbiIsInNjb3BlZCIsInNlYW1sZXNzIiwic2VsZWN0ZWQiLCJzcGFuIiwic3BlbGxDaGVjayIsInRhYkluZGV4IiwiaXRlbVNjb3BlIiwiYWNjZXB0Q2hhcnNldCIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJ2YWxpZGl0eSIsImJhZElucHV0Iiwib3duZXJEb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJFYSIsIkdhIiwiYXV0b1JldmVyc2UiLCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkIiwicHJlc2VydmVBbHBoYSIsInhsaW5rQWN0dWF0ZSIsInhsaW5rQXJjcm9sZSIsInhsaW5rSHJlZiIsInhsaW5rUm9sZSIsInhsaW5rU2hvdyIsInhsaW5rVGl0bGUiLCJ4bGlua1R5cGUiLCJ4bWxCYXNlIiwieG1sTGFuZyIsInhtbFNwYWNlIiwiSGEiLCJJYSIsIl9jYXVnaHRFcnJvciIsIl9oYXNDYXVnaHRFcnJvciIsIl9yZXRocm93RXJyb3IiLCJfaGFzUmV0aHJvd0Vycm9yIiwiaW5qZWN0aW9uIiwiaW5qZWN0RXJyb3JVdGlscyIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsIkphIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsIlBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJRYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJSYSIsIlNhIiwiVGEiLCJVYSIsIlZhIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiV2EiLCJYYSIsIllhIiwiWmEiLCJjdXJyZW50VGFyZ2V0IiwiJGEiLCJhYiIsImJiIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiZGIiLCJnYiIsImhiIiwiaWIiLCJzdGF0ZU5vZGUiLCJqYiIsImtiIiwibGIiLCJtYiIsImdldExpc3RlbmVyIiwiZW5xdWV1ZUV2ZW50cyIsInByb2Nlc3NFdmVudFF1ZXVlIiwibmIiLCJvYiIsInBiIiwicWIiLCJyYiIsInNiIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJ0YiIsInViIiwidmIiLCJkaXNwYXRjaENvbmZpZyIsIndiIiwiX3RhcmdldEluc3QiLCJ4YiIsInliIiwiemIiLCJBYiIsIkJiIiwiYWx0ZXJuYXRlIiwiQ2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsIkRiIiwiRWIiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiS2IiLCJldmVudFBvb2wiLCJMYiIsImRlc3RydWN0b3IiLCJKYiIsImdldFBvb2xlZCIsIk1iIiwiTmIiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiYXVnbWVudENsYXNzIiwiWGIiLCJQYiIsIlZiIiwiV2IiLCJkb2N1bWVudE1vZGUiLCJZYiIsIm9wZXJhIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiY2MiLCJkYyIsImtleUNvZGUiLCJlYyIsImRldGFpbCIsImZjIiwiaWMiLCJ3aGljaCIsImdjIiwiY2hhciIsImhjIiwiamMiLCJrYyIsImxjIiwibWMiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwibmMiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50Iiwib2MiLCJwYyIsInFjIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwicmMiLCJzYyIsInRjIiwieGMiLCJ1YyIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInRlbCIsInRleHQiLCJ3ZWVrIiwidmMiLCJub2RlTmFtZSIsIndjIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwieWMiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJ6YyIsIkJjIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiQWMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiJGMiLCJhZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJfd3JhcHBlclN0YXRlIiwiY29udHJvbGxlZCIsImdldEF0dHJpYnV0ZSIsImJkIiwiY2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiZGQiLCJnZXRNb2RpZmllclN0YXRlIiwiZWQiLCJmZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsImdkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJoZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiamQiLCJrZCIsImVmZmVjdFRhZyIsImxkIiwibWQiLCJuZCIsInNpYmxpbmciLCJxZCIsInJkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJzZCIsInRvcExldmVsVHlwZSIsInRkIiwidWQiLCJ2ZCIsIndkIiwieGQiLCJfZW5hYmxlZCIsIl9oYW5kbGVUb3BMZXZlbCIsInNldEhhbmRsZVRvcExldmVsIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJ5ZCIsInpkIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiQWQiLCJCZCIsIkNkIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkRkIiwidG9wQWJvcnQiLCJ0b3BBbmltYXRpb25FbmQiLCJ0b3BBbmltYXRpb25JdGVyYXRpb24iLCJ0b3BBbmltYXRpb25TdGFydCIsInRvcEJsdXIiLCJ0b3BDYW5jZWwiLCJ0b3BDYW5QbGF5IiwidG9wQ2FuUGxheVRocm91Z2giLCJ0b3BDaGFuZ2UiLCJ0b3BDbGljayIsInRvcENsb3NlIiwidG9wQ29tcG9zaXRpb25FbmQiLCJ0b3BDb21wb3NpdGlvblN0YXJ0IiwidG9wQ29tcG9zaXRpb25VcGRhdGUiLCJ0b3BDb250ZXh0TWVudSIsInRvcENvcHkiLCJ0b3BDdXQiLCJ0b3BEb3VibGVDbGljayIsInRvcERyYWciLCJ0b3BEcmFnRW5kIiwidG9wRHJhZ0VudGVyIiwidG9wRHJhZ0V4aXQiLCJ0b3BEcmFnTGVhdmUiLCJ0b3BEcmFnT3ZlciIsInRvcERyYWdTdGFydCIsInRvcERyb3AiLCJ0b3BEdXJhdGlvbkNoYW5nZSIsInRvcEVtcHRpZWQiLCJ0b3BFbmNyeXB0ZWQiLCJ0b3BFbmRlZCIsInRvcEVycm9yIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZGVkRGF0YSIsInRvcExvYWQiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wUGF1c2UiLCJ0b3BQbGF5IiwidG9wUGxheWluZyIsInRvcFByb2dyZXNzIiwidG9wUmF0ZUNoYW5nZSIsInRvcFNjcm9sbCIsInRvcFNlZWtlZCIsInRvcFNlZWtpbmciLCJ0b3BTZWxlY3Rpb25DaGFuZ2UiLCJ0b3BTdGFsbGVkIiwidG9wU3VzcGVuZCIsInRvcFRleHRJbnB1dCIsInRvcFRpbWVVcGRhdGUiLCJ0b3BUb2dnbGUiLCJ0b3BUb3VjaENhbmNlbCIsInRvcFRvdWNoRW5kIiwidG9wVG91Y2hNb3ZlIiwidG9wVG91Y2hTdGFydCIsInRvcFRyYW5zaXRpb25FbmQiLCJ0b3BWb2x1bWVDaGFuZ2UiLCJ0b3BXYWl0aW5nIiwidG9wV2hlZWwiLCJFZCIsIkZkIiwiR2QiLCJIZCIsIklkIiwiSmQiLCJ0ZXh0Q29udGVudCIsIktkIiwiTGQiLCJNZCIsInNlbGVjdCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlNkIiwib25TZWxlY3QiLCJUZCIsIlVkIiwiVmQiLCJXZCIsImNoYXJDb2RlIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsImNsaXBib2FyZERhdGEiLCJYZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJZZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwibG9jYWxlIiwiZGF0YVRyYW5zZmVyIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiZGUiLCJlZSIsImZlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImdlIiwiaGUiLCJpZSIsIlgiLCJqZSIsImtlIiwibGUiLCJtZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIm5lIiwib2UiLCJjdXJzb3IiLCJwZSIsInFlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJZIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsInBlbmRpbmdQcm9wcyIsImludGVybmFsQ29udGV4dFRhZyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwicGVuZGluZ0NoaWxkcmVuIiwiemUiLCJBZSIsIkJlIiwiRGUiLCJFZSIsIkZlIiwiYmFzZVN0YXRlIiwiY2FsbGJhY2tMaXN0IiwiaGFzRm9yY2VVcGRhdGUiLCJpc0luaXRpYWxpemVkIiwiR2UiLCJIZSIsIkllIiwicGFydGlhbFN0YXRlIiwiSmUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsIktlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJfc3RyaW5nUmVmIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInBlbmRpbmdDb250ZXh0Iiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJ1c2VTeW5jU2NoZWR1bGluZyIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJuZXh0Q2FsbGJhY2siLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJMZSIsIk9iIiwiYmVnaW5Xb3JrIiwiaHlkcmF0ZSIsImJlZ2luRmFpbGVkV29yayIsImdmIiwia2YiLCJRYiIsImphIiwiaXNSZWFkeUZvckNvbW1pdCIsInlnIiwiemciLCJBZyIsIk5lIiwiT2UiLCJTYyIsIkJnIiwiVGMiLCJDZyIsIkRnIiwiRWciLCJjb21wb25lbnREaWRDYXRjaCIsImNvbXBvbmVudFN0YWNrIiwiY2EiLCJRYyIsImhhIiwicWEiLCJGZyIsInJnIiwiR2ciLCJVYyIsInJhIiwiUmMiLCJlYiIsInFnIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJlcnJvckJvdW5kYXJ5IiwiZXJyb3JCb3VuZGFyeUZvdW5kIiwiZXJyb3JCb3VuZGFyeU5hbWUiLCJ3aWxsUmV0cnkiLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiVmMiLCJrYSIsIkhnIiwiUmIiLCJJZyIsIm5leHRTY2hlZHVsZWRSb290IiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJzYSIsIkZhIiwibGEiLCJTYiIsIm1hIiwibmEiLCJXYyIsIlBlIiwiVGIiLCJKZyIsIlhjIiwiS2ciLCJmYiIsIlljIiwiVWIiLCJaYyIsImZpbmlzaGVkV29yayIsInRpbWVSZW1haW5pbmciLCJMZyIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwicmVzZXRIb3N0Q29udGFpbmVyIiwiaGYiLCJoeWRyYXRpb24iLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UiLCJwb3BIeWRyYXRpb25TdGF0ZSIsImNhbkh5ZHJhdGVJbnN0YW5jZSIsImNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmciLCJnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCIsImh5ZHJhdGVJbnN0YW5jZSIsImh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJqZiIsIk1lIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiZWYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwiaW5zZXJ0SW5Db250YWluZXJCZWZvcmUiLCJyZW1vdmVDaGlsZEZyb21Db250YWluZXIiLCJjb21taXRSZXNldFRleHRDb250ZW50IiwiY29tbWl0UGxhY2VtZW50IiwiY29tbWl0RGVsZXRpb24iLCJjb21taXRXb3JrIiwiY29tbWl0TGlmZUN5Y2xlcyIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImZmIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiY29tcHV0ZUFzeW5jRXhwaXJhdGlvbiIsImNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIiLCJzY2hlZHVsZVdvcmsiLCJiYXRjaGVkVXBkYXRlcyIsInVuYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJkZWZlcnJlZFVwZGF0ZXMiLCJsZiIsIm9kIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwicGQiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkNlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJtZiIsIm5mIiwicWYiLCJwZXJmb3JtYW5jZSIsInJmIiwic2YiLCJ0ZiIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJCZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiZGlkVGltZW91dCIsIkNmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJJZiIsIkpmIiwic2V0QXR0cmlidXRlTlMiLCJLZiIsIkhmIiwiTGYiLCJpbml0aWFsVmFsdWUiLCJpbml0aWFsQ2hlY2tlZCIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUmYiLCJRZiIsIlNmIiwiZGVmYXVsdFNlbGVjdGVkIiwiVGYiLCJ3YXNNdWx0aXBsZSIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsIm5hbWVzcGFjZVVSSSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJjZyIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsImRnIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImVnIiwiZmciLCJzZXRQcm9wZXJ0eSIsImdnIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwicGFyYW0iLCJ3YnIiLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsImNyZWF0ZUVsZW1lbnROUyIsIm9nIiwicGciLCJfX2h0bWwiLCJvbmNsaWNrIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJ4ZyIsIk1nIiwiTmciLCJaIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiUGciLCJfcmVhY3RSb290Q29udGFpbmVyIiwiT2ciLCJRZyIsInBmIiwiUmciLCJ1bm1vdW50IiwiU2ciLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJUZyIsIlVnIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJFdmVudExpc3RlbmVyIiwiZXZlbnRUeXBlIiwicmVnaXN0ZXJEZWZhdWx0IiwiZG9jIiwiYm9keSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwiSW5kZXhDb250YWluZXIiLCJfaW5kZXgyIiwiSGFzaFJvdXRlciIsIl9yb3V0ZXNDb250YWluZXIyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19Sb3V0ZXJfXyIsIkJyb3dzZXJSb3V0ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfaGlzdG9yeV9jcmVhdGVCcm93c2VySGlzdG9yeV9fX2RlZmF1bHQiLCJiYXNlbmFtZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9wcm9wX3R5cGVzX19fZGVmYXVsdCIsImZvcmNlUmVmcmVzaCIsImtleUxlbmd0aCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsImNoZWNrUHJvcFR5cGVzIiwidmFsaWRhdGVGb3JtYXQiLCJfaW52YXJpYW50MiIsIl9Mb2NhdGlvblV0aWxzIiwiX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiIsIl9ET01VdGlscyIsImdldEhpc3RvcnlTdGF0ZSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsImFsbEtleXMiLCJnbyIsImluaXRpYWxMb2NhdGlvbiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2hpc3RvcnlfY3JlYXRlSGFzaEhpc3RvcnlfX19kZWZhdWx0IiwiaGFzaFR5cGUiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X3JvdXRlcl9lc19NZW1vcnlSb3V0ZXJfXyIsIk1lbW9yeVJvdXRlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19oaXN0b3J5X2NyZWF0ZU1lbW9yeUhpc3RvcnlfX19kZWZhdWx0IiwiaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsSW5kZXgiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19MaW5rX18iLCJOYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19Sb3V0ZV9fIiwiX3JlZjIiLCJhcmlhLWN1cnJlbnQiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJtb2RpZmllciIsImFzdGVyaXNrIiwib3B0aW9uYWwiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImVuY29kZSIsInByZXR0eSIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9yb3V0ZXJfZXNfUHJvbXB0X18iLCJQcm9tcHQiLCJlbmFibGUiLCJkaXNhYmxlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X3JvdXRlcl9lc19SZWRpcmVjdF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2hpc3RvcnlfXyIsIlJlZGlyZWN0IiwiaXNTdGF0aWMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfaW52YXJpYW50X19fZGVmYXVsdCIsInByZXZQcm9wcyIsInByZXZUbyIsIm5leHRUbyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl93YXJuaW5nX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fUGF0aFV0aWxzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3Rfcm91dGVyX2VzX1N0YXRpY1JvdXRlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19Sb3V0ZXJfXyIsImFkZEJhc2VuYW1lIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2hpc3RvcnlfUGF0aFV0aWxzX18iLCJfb2JqZWN0JHBhdGhuYW1lIiwiX29iamVjdCRzZWFyY2giLCJfb2JqZWN0JGhhc2giLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwiU3RhdGljUm91dGVyIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9yb3V0ZXJfZXNfU3dpdGNoX18iLCJTd2l0Y2giLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X3JvdXRlcl9lc19tYXRjaFBhdGhfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9yb3V0ZXJfZXNfd2l0aFJvdXRlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19Sb3V0ZV9fIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwicm91dGVDb21wb25lbnRQcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfX19kZWZhdWx0IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiUm91dGVzQ29udGFpbmVyIiwic2Vzc2lvbiIsInJlbmRlclJvdXRlciIsIl9TaWdudXBQYWdlMiIsIl9TaWduSW5QYWdlMiIsIl9wcm9maWxlUm91dGUyIiwiX21vdmllUm91dGUyIiwiX1NlYXJjaFJlc3VsdDIiLCJfSG9tZVBhZ2UyIiwiX05hdkJhcjIiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJIb21lUGFnZSIsImlzTG9hZGluZyIsImZ1bGxOYW1lIiwiU2VhcmNoUmVzdWx0IiwidXNlcnMiLCJnZXRVc2VyQnlTZWFyY2giLCJ1c2VyTGlzdCIsImdldE1vdmllQnlTZWFyY2giLCJtb3ZpZUxpc3QiLCJzZWFyY2hCeUtleVdvcmQiLCJzZWFyY2hCeSIsInVzZXIiLCJfaWQiLCJtb3ZpZSIsIl9Nb3ZpZUl0ZW0yIiwicmVuZGVyVXNlcnMiLCJyZW5kZXJNb3ZpZXMiLCJNb3ZpZUxpa2VCdXR0b24iLCJsaWtlcyIsImxpa2VNb3ZpZSIsInVubGlrZU1vdmllIiwiaXNNb3ZpZUxpa2VkQnlVc2VyIiwiY3VycmVudFVzZXJMaWtlZE1vdmllcyIsInBvc3RMaWtlZE1vdmllIiwidW5MaWtlTW92aWUiLCJfcHJvcHMzIiwiQ291bnRMaWtlQnV0dG9uIiwiZ2V0VXNlcnNMZW5ndGhMaWtlZE1vdmllSWQiLCJsaW5rVG9Nb3ZpZUxpa2VkQnlQYWdlIiwiX0Nvb2tpZXMiLCJfQ29va2llczIiLCJfY3JlYXRlQ2xhc3MiLCJfY29va2llMiIsIl9vYmplY3RBc3NpZ24yIiwiX3V0aWxzIiwiQ29va2llcyIsImhvb2tzIiwicGFyc2VDb29raWVzIiwiSEFTX0RPQ1VNRU5UX0NPT0tJRSIsImhhc0RvY3VtZW50Q29va2llIiwiY29va2llIiwiX3VwZGF0ZUJyb3dzZXJWYWx1ZXMiLCJyZWFkQ29va2llIiwib25TZXQiLCJzZXJpYWxpemUiLCJmaW5hbE9wdGlvbnMiLCJleHBpcmVzIiwibWF4QWdlIiwib25SZW1vdmUiLCJkb05vdFBhcnNlIiwiaXNQYXJzaW5nQ29va2llIiwib3B0IiwicGFpclNwbGl0UmVnRXhwIiwiZGVjIiwiZGVjb2RlIiwiZXFfaWR4IiwidHJ5RGVjb2RlIiwiZW5jIiwiZmllbGRDb250ZW50UmVnRXhwIiwidG9VVENTdHJpbmciLCJodHRwT25seSIsInNlY3VyZSIsInNhbWVTaXRlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY2xlYW5Db29raWVzIiwic3RyaWN0VXJpRW5jb2RlIiwib2JqZWN0QXNzaWduIiwiZGVjb2RlQ29tcG9uZW50IiwiZXh0cmFjdCIsInF1ZXJ5U3RhcnQiLCJmb3JtYXR0ZXIiLCJhcnJheUZvcm1hdCIsInBhcnNlckZvckFycmF5Rm9ybWF0Iiwia2V5c1NvcnRlciIsImVuY29kZXJGb3JBcnJheUZvcm1hdCIsInZhbDIiLCJwYXJzZVVybCIsInF1ZXJ5Iiwic2luZ2xlTWF0Y2hlciIsIm11bHRpTWF0Y2hlciIsImRlY29kZUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwicmlnaHQiLCJlbmNvZGVkVVJJIiwicmVwbGFjZU1hcCIsIiVGRSVGRiIsIiVGRiVGRSIsImN1c3RvbURlY29kZVVSSUNvbXBvbmVudCIsIkF4aW9zIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsIm5vcm1hbGl6ZWROYW1lIiwic2VyaWFsaXplZFBhcmFtcyIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJob3N0bmFtZSIsInJlcXVlc3RVUkwiLCJ0b0dNVFN0cmluZyIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJyZWxhdGl2ZVVSTCIsInJlc29sdmVQcm9taXNlIiwiU2lnbnVwUGFnZSIsInJlZ2lzdGVyIiwiZXJyb3JNZXNzYWdlIiwic2V0RW1haWwiLCJzZXRQYXNzd29yZCIsInNldEZ1bGxOYW1lIiwib25SZWdpc3RlciIsIl9TaWdudXBGb3JtMiIsIlNpZ25VcEZvcm0iLCJoYW5kbGVTaWduVXAiLCJoYW5kbGVFbWFpbENoYW5nZSIsImhhbmRsZVBhc3N3b3JkQ2hhbmdlIiwiaGFuZGxlRnVsbE5hbWVDaGFuZ2UiLCJfRXJyb3JNZXNzYWdlMiIsIm9uQ2hhbmdlIiwiYXJpYS1kZXNjcmliZWRieSIsIkVycm9yTWVzc2FnZSIsInJvbGUiLCJfU2lnbkluRm9ybSIsIlNpZ25JblBhZ2UiLCJhY2NvdW50IiwibG9naW4iLCJfU2lnbkluRm9ybTIiLCJfcHJvcFR5cGVzIiwiU2lnbkluRm9ybSIsImhhbmRsZUxvZ2luIiwicmVuZGVyRXJyb3JNZXNzYWdlIiwiTmF2QmFyIiwibG9nb3V0IiwiX05hdkJhckxvZ2dlZEluMiIsIk5hdkJhckxvZ2dlZEluIiwibGlua3MiLCJhY3RpdmUiLCJyZW5kZXJMaW5rcyIsIm9uTGlua0NsaWNrSGlnaGVyT3JkZXIiLCJuZXdMaW5rcyIsIl90aGlzMyIsIl9TaWduT3V0QnV0dG9uMiIsIl9TZWFyY2hCYXIyIiwiTW92aWVSb3V0ZSIsIl9Nb3ZpZUxpc3QyIiwiX01vdmllUGFnZTIiLCJfTW92aWVMaWtlZEJ5UGFnZTIiLCJNb3ZpZUxpc3QiLCJtb3ZpZXMiLCJmZXRjaE1vdmllTGlzdCIsInJlbmRlck1vdmVJbmZvTGlzdCIsIlRodW1ic1VwIiwidHVfaW1nIiwidXNlclJhdGluZyIsIl9ncmVlbnVwNjR4MiIsIl9ncmV5dXA2NHgyIiwiVGh1bWJzRG93biIsInRkX2ltZyIsIl9ncmV5ZG93bjY0eDIiLCJfcmVkZG93bjY0eDIiLCJNb3ZpZVBhZ2UiLCJfbG9kYXNoIiwiTW92aWVMaWtlZEJ5UGFnZSIsImdldFVzZXJzTGlrZWRNb3ZpZUlkIiwibG9hZFVzZXJzQW5kTW92aWUiLCJQcm9maWxlUm91dGUiLCJfUHJvZmlsZVBhZ2UyIiwiX1VzZXJMaWtlc1BhZ2UyIiwiTXlMaWtlc1BhZ2UiLCJwcm9maWxlcyIsInBvc3RMaWtlTW92aWUiLCJ1cGRhdGVNb3ZpZXNMaWtlZEJ5VXNlcklkIiwiZ2V0TW92aWVzTGlrZWRCeVVzZXJJZCIsImZldGNoVXNlclByb2ZpbGUiLCJnZXRQYWdlVXNlck5hbWUiLCJwYWdlVXNlck5hbWUiLCJ1c2VyTGlrZWRNb3ZpZUxpc3QiLCJ1c2VyUHJvZmlsZSIsImdldFBhZ2VVc2VyTW92ZUxpc3QiLCJQcm9maWxlUGFnZSIsIl9wcm9wcyR1c2VySW5mbyIsIl9zZXNzaW9uIiwiQWNjb3VudCIsIl9pbml0RGVmaW5lUHJvcCIsIl9kZXNjcmlwdG9yMiIsIl9kZXNjcmlwdG9yMyIsInBvc3QiLCJfc2Vzc2lvbjIiLCJfY29udGV4dCIsInQwIiwicG9zdGVySW1nUGF0aCIsInJlbGVhc2VZZWFyIiwiYnJpZWZEZXNjcmlwdGlvbiIsInNldE1vdmllTGlzdCIsIl9jb250ZXh0MiIsIl9jb25zdGFudHMyIiwiU2VhcmNoIiwiYWRkTW92aWVCeUlkIiwiYWRkTW92aWUiLCJyZXNkYXRhIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiUmVnaXN0ZXIiLCJfZGVzY3JpcHRvcjQiLCJyZXNldEZvcm0iLCJfcmVmOCIsIm1vdmllRm91bmQiLCJzZXRVc2VyTGlzdCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBaEIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBaUIsV0FDQSxXQUEyQixPQUFBakIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVEsRUFBQUMsR0FBc0QsT0FBQVIsT0FBQVMsVUFBQUMsZUFBQWpCLEtBQUFjLEVBQUFDLElBR3REdEIsRUFBQXlCLEVBQUEsR0FHQXpCLElBQUEwQixFQUFBLHVCQzdEQSxJQUFBQyxFQUFBM0IsRUFBQSxHQUNBNEIsRUFBQTVCLEVBQUEsSUFDQTZCLEVBQUE3QixFQUFBLElBQ0E4QixFQUFBOUIsRUFBQSxJQUNBK0IsRUFBQS9CLEVBQUEsSUFHQWdDLEVBQUEsU0FBQUMsRUFBQXRCLEVBQUF1QixHQUNBLElBUUFD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LElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FFQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMs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RUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtB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QiwyQkFDQ0EsRUFBSWhoRCxzQ0FFWHhFLEVBQUs0aEosYUFBZWtGLEVBQUFDLEdBQUlocEgsUUFDeEJ0MEIsUUFBUTJ6RCxJQUFSMHBGLEVBQUFDLDBkQVRtQiw4SUFpQmhCL21KLDhVQzNCZnE3RSxFQUFBbC9FLEVBQUEsSUFFQW0vRSxFQUFBbi9FLEVBQUEsSUFDQWt1RSxFQUFBbHVFLEVBQUEsOGFBbUJNNkQsRUFBTyxzWEFiU3E2SSxHQUNsQnI2SSxFQUFLcTZJLFNBQVdBLDBGQUdZSSwrRkFDNUJ6NkksRUFBS2dvSix5QkFDYTFzRSxFQUFBaFosTUFBTXNrRixLQUFOdjhFLEVBQUFxQixpQkFDaEIrdUUsU0FBVUEsV0FETmoxRixTQUdOeGxELEVBQUtnb0osWUFBWXhpRyxFQUFJaGhELHVzQkFNVnhFIiwiZmlsZSI6ImJ1bmRsZS5mZWZlMTY1NjkxZjE3YTUwMTVlYi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE3Nik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZDkxMDBmYzBkMTIzNDUyMTQ5NzMiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgUmVhY3Rpb24sIF9hbGxvd1N0YXRlQ2hhbmdlcywgY29uZmlndXJlLCBjcmVhdGVBdG9tLCBnZXREZWJ1Z05hbWUsIGlzT2JzZXJ2YWJsZUFycmF5LCBpc09ic2VydmFibGVNYXAsIGlzT2JzZXJ2YWJsZU9iamVjdCwgc3B5LCB1bnRyYWNrZWQgfSBmcm9tICdtb2J4JztcbmltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiwgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUsIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIH0gZnJvbSAncmVhY3QtZG9tJztcblxuLy8gVGhlc2UgZnVuY3Rpb25zIGNhbiBiZSBzdHViYmVkIG91dCBpbiBzcGVjaWZpYyBlbnZpcm9ubWVudHNcbnZhciB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQxID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxuXG5cblxuXG52YXIgYXN5bmNHZW5lcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEF3YWl0VmFsdWUodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0dlbmVyYXRvcihnZW4pIHtcbiAgICB2YXIgZnJvbnQsIGJhY2s7XG5cbiAgICBmdW5jdGlvbiBzZW5kKGtleSwgYXJnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVxdWVzdCA9IHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgIHJlamVjdDogcmVqZWN0LFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoYmFjaykge1xuICAgICAgICAgIGJhY2sgPSBiYWNrLm5leHQgPSByZXF1ZXN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZyb250ID0gYmFjayA9IHJlcXVlc3Q7XG4gICAgICAgICAgcmVzdW1lKGtleSwgYXJnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzdW1lKGtleSwgYXJnKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZ2VuW2tleV0oYXJnKTtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0VmFsdWUpIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUodmFsdWUudmFsdWUpLnRoZW4oZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmVzdW1lKFwibmV4dFwiLCBhcmcpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJlc3VtZShcInRocm93XCIsIGFyZyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0dGxlKHJlc3VsdC5kb25lID8gXCJyZXR1cm5cIiA6IFwibm9ybWFsXCIsIHJlc3VsdC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzZXR0bGUoXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldHRsZSh0eXBlLCB2YWx1ZSkge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJyZXR1cm5cIjpcbiAgICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwidGhyb3dcIjpcbiAgICAgICAgICBmcm9udC5yZWplY3QodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZnJvbnQucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBmcm9udCA9IGZyb250Lm5leHQ7XG5cbiAgICAgIGlmIChmcm9udCkge1xuICAgICAgICByZXN1bWUoZnJvbnQua2V5LCBmcm9udC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW52b2tlID0gc2VuZDtcblxuICAgIGlmICh0eXBlb2YgZ2VuLnJldHVybiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnJldHVybiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yKSB7XG4gICAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gIH1cblxuICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFwibmV4dFwiLCBhcmcpO1xuICB9O1xuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFwidGhyb3dcIiwgYXJnKTtcbiAgfTtcblxuICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJyZXR1cm5cIiwgYXJnKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHdyYXA6IGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBc3luY0dlbmVyYXRvcihmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBhd2FpdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmV3IEF3YWl0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cblxuXG5cblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIEV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50RW1pdHRlcik7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoRXZlbnRFbWl0dGVyLCBbe1xuICAgICAgICBrZXk6IFwib25cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGNiKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGNiKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gX3RoaXMubGlzdGVuZXJzLmluZGV4T2YoY2IpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIF90aGlzLmxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImVtaXRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyO1xufSgpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcblxudmFyIGRlZmluZVByb3BlcnR5JDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG52YXIgaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5JDEodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59O1xuXG4vLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IEFycmF5KF9sZW4gPiA2ID8gX2xlbiAtIDYgOiAwKSwgX2tleSA9IDY7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIHJlc3RbX2tleSAtIDZdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVudHJhY2tlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBcIjw8YW5vbnltb3VzPj5cIjtcbiAgICAgICAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICAgICAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3R1YWwgPSBwcm9wc1twcm9wTmFtZV0gPT09IG51bGwgPyBcIm51bGxcIiA6IFwidW5kZWZpbmVkXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgXCIgKyBsb2NhdGlvbiArIFwiIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgXCIgKyBcImluIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYFwiICsgYWN0dWFsICsgXCJgLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZS5hcHBseSh1bmRlZmluZWQsIFtwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWVdLmNvbmNhdChyZXN0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuICAgIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufVxuXG4vLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcbmZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbXCJAQHRvU3RyaW5nVGFnXCJdID09PSBcIlN5bWJvbFwiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIENvcGllZCBmcm9tIFJlYWN0LlByb3BUeXBlc1xuZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHByb3BWYWx1ZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gXCJhcnJheVwiO1xuICAgIH1cbiAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAgIC8vIHBhc3NlcyBQcm9wVHlwZXMub2JqZWN0LlxuICAgICAgICByZXR1cm4gXCJvYmplY3RcIjtcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBcInN5bWJvbFwiO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG59XG5cbi8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbi8vIENvcGllZCBmcm9tIFJlYWN0LlByb3BUeXBlc1xuZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcImRhdGVcIjtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIHJldHVybiBcInJlZ2V4cFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcihhbGxvd05hdGl2ZVR5cGUsIG1vYnhUeXBlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHVudHJhY2tlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dOYXRpdmVUeXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldFByb3BUeXBlKHByb3BzW3Byb3BOYW1lXSkgPT09IG1vYnhUeXBlLnRvTG93ZXJDYXNlKCkpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1vYnhDaGVja2VyID0gdm9pZCAwO1xuICAgICAgICAgICAgc3dpdGNoIChtb2J4VHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJheVwiOlxuICAgICAgICAgICAgICAgICAgICBtb2J4Q2hlY2tlciA9IGlzT2JzZXJ2YWJsZUFycmF5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiT2JqZWN0XCI6XG4gICAgICAgICAgICAgICAgICAgIG1vYnhDaGVja2VyID0gaXNPYnNlcnZhYmxlT2JqZWN0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiTWFwXCI6XG4gICAgICAgICAgICAgICAgICAgIG1vYnhDaGVja2VyID0gaXNPYnNlcnZhYmxlTWFwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1vYnhUeXBlOiBcIiArIG1vYnhUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgICBpZiAoIW1vYnhDaGVja2VyKHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhciBuYXRpdmVUeXBlRXhwZWN0YXRpb25NZXNzYWdlID0gYWxsb3dOYXRpdmVUeXBlID8gXCIgb3IgamF2YXNjcmlwdCBgXCIgKyBtb2J4VHlwZS50b0xvd2VyQ2FzZSgpICsgXCJgXCIgOiBcIlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJlY2lzZVR5cGUgKyBcImAgc3VwcGxpZWQgdG9cIiArIFwiIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBtb2J4Lk9ic2VydmFibGVcIiArIG1vYnhUeXBlICsgXCJgXCIgKyBuYXRpdmVUeXBlRXhwZWN0YXRpb25NZXNzYWdlICsgXCIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyKGFsbG93TmF0aXZlVHlwZSwgdHlwZUNoZWNrZXIpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBBcnJheShfbGVuMiA+IDUgPyBfbGVuMiAtIDUgOiAwKSwgX2tleTIgPSA1OyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICByZXN0W19rZXkyIC0gNV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVudHJhY2tlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiUHJvcGVydHkgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIGNvbXBvbmVudCBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgIGhhcyBcIiArIFwiaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbi5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGFsbG93TmF0aXZlVHlwZSwgXCJBcnJheVwiKShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGVycm9yID0gdHlwZUNoZWNrZXIuYXBwbHkodW5kZWZpbmVkLCBbcHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgXCJbXCIgKyBpICsgXCJdXCJdLmNvbmNhdChyZXN0KSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxudmFyIG9ic2VydmFibGVBcnJheSA9IGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoZmFsc2UsIFwiQXJyYXlcIik7XG52YXIgb2JzZXJ2YWJsZUFycmF5T2YgPSBjcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyLmJpbmQobnVsbCwgZmFsc2UpO1xudmFyIG9ic2VydmFibGVNYXAgPSBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGZhbHNlLCBcIk1hcFwiKTtcbnZhciBvYnNlcnZhYmxlT2JqZWN0ID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcihmYWxzZSwgXCJPYmplY3RcIik7XG52YXIgYXJyYXlPck9ic2VydmFibGVBcnJheSA9IGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IodHJ1ZSwgXCJBcnJheVwiKTtcbnZhciBhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2YgPSBjcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyLmJpbmQobnVsbCwgdHJ1ZSk7XG52YXIgb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0ID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcih0cnVlLCBcIk9iamVjdFwiKTtcblxuXG5cbnZhciBwcm9wVHlwZXMgPSBPYmplY3QuZnJlZXplKHtcblx0b2JzZXJ2YWJsZUFycmF5OiBvYnNlcnZhYmxlQXJyYXksXG5cdG9ic2VydmFibGVBcnJheU9mOiBvYnNlcnZhYmxlQXJyYXlPZixcblx0b2JzZXJ2YWJsZU1hcDogb2JzZXJ2YWJsZU1hcCxcblx0b2JzZXJ2YWJsZU9iamVjdDogb2JzZXJ2YWJsZU9iamVjdCxcblx0YXJyYXlPck9ic2VydmFibGVBcnJheTogYXJyYXlPck9ic2VydmFibGVBcnJheSxcblx0YXJyYXlPck9ic2VydmFibGVBcnJheU9mOiBhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2YsXG5cdG9iamVjdE9yT2JzZXJ2YWJsZU9iamVjdDogb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0XG59KTtcblxuZnVuY3Rpb24gaXNTdGF0ZWxlc3MoY29tcG9uZW50KSB7XG4gICAgLy8gYGZ1bmN0aW9uKCkge31gIGhhcyBwcm90b3R5cGUsIGJ1dCBgKCkgPT4ge31gIGRvZXNuJ3RcbiAgICAvLyBgKCkgPT4ge31gIHZpYSBCYWJlbCBoYXMgcHJvdG90eXBlIHRvby5cbiAgICByZXR1cm4gIShjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyKTtcbn1cblxudmFyIGluamVjdG9yQ29udGV4dFR5cGVzID0ge1xuICAgIG1vYnhTdG9yZXM6IG9iamVjdE9yT2JzZXJ2YWJsZU9iamVjdFxufTtcbk9iamVjdC5zZWFsKGluamVjdG9yQ29udGV4dFR5cGVzKTtcblxudmFyIHByb3hpZWRJbmplY3RvclByb3BzID0ge1xuICAgIGNvbnRleHRUeXBlczoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmplY3RvckNvbnRleHRUeXBlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEoXykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTW9ieCBJbmplY3RvcjogeW91IGFyZSB0cnlpbmcgdG8gYXR0YWNoIGBjb250ZXh0VHlwZXNgIG9uIGFuIGNvbXBvbmVudCBkZWNvcmF0ZWQgd2l0aCBgaW5qZWN0YCAob3IgYG9ic2VydmVyYCkgSE9DLiBQbGVhc2Ugc3BlY2lmeSB0aGUgY29udGV4dFR5cGVzIG9uIHRoZSB3cmFwcGVkIGNvbXBvbmVudCBpbnN0ZWFkLiBJdCBpcyBhY2Nlc3NpYmxlIHRocm91Z2ggdGhlIGB3cmFwcGVkQ29tcG9uZW50YFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH0sXG4gICAgaXNNb2J4SW5qZWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZSBJbmplY3Rpb25cbiAgICAgKi9cbn07ZnVuY3Rpb24gY3JlYXRlU3RvcmVJbmplY3RvcihncmFiU3RvcmVzRm4sIGNvbXBvbmVudCwgaW5qZWN0TmFtZXMpIHtcbiAgICB2YXIgX2NsYXNzLCBfdGVtcDI7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBcImluamVjdC1cIiArIChjb21wb25lbnQuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Lm5hbWUgfHwgY29tcG9uZW50LmNvbnN0cnVjdG9yICYmIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5uYW1lIHx8IFwiVW5rbm93blwiKTtcbiAgICBpZiAoaW5qZWN0TmFtZXMpIGRpc3BsYXlOYW1lICs9IFwiLXdpdGgtXCIgKyBpbmplY3ROYW1lcztcblxuICAgIHZhciBJbmplY3RvciA9IChfdGVtcDIgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgICBpbmhlcml0cyhJbmplY3RvciwgX0NvbXBvbmVudCk7XG5cbiAgICAgICAgZnVuY3Rpb24gSW5qZWN0b3IoKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5qZWN0b3IpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IEluamVjdG9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5qZWN0b3IpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdG9yZVJlZiA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLndyYXBwZWRJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZUNsYXNzKEluamVjdG9yLCBbe1xuICAgICAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAvLyBPcHRpbWl6YXRpb246IGl0IG1pZ2h0IGJlIG1vcmUgZWZmaWNpZW50IHRvIGFwcGx5IHRoZSBtYXBwZXIgZnVuY3Rpb24gKm91dHNpZGUqIHRoZSByZW5kZXIgbWV0aG9kXG4gICAgICAgICAgICAgICAgLy8gKGlmIHRoZSBtYXBwZXIgaXMgYSBmdW5jdGlvbiksIHRoYXQgY291bGQgYXZvaWQgZXhwZW5zaXZlKD8pIHJlLXJlbmRlcmluZyBvZiB0aGUgaW5qZWN0b3IgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgLy8gU2VlIHRoaXMgdGVzdDogJ3VzaW5nIGEgY3VzdG9tIGluamVjdG9yIGlzIG5vdCB0b28gcmVhY3RpdmUnIGluIGluamVjdC5qc1xuICAgICAgICAgICAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Byb3BzW2tleV0gPSB0aGlzLnByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9dmFyIGFkZGl0aW9uYWxQcm9wcyA9IGdyYWJTdG9yZXNGbih0aGlzLmNvbnRleHQubW9ieFN0b3JlcyB8fCB7fSwgbmV3UHJvcHMsIHRoaXMuY29udGV4dCkgfHwge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2tleTIgaW4gYWRkaXRpb25hbFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Byb3BzW19rZXkyXSA9IGFkZGl0aW9uYWxQcm9wc1tfa2V5Ml07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpc1N0YXRlbGVzcyhjb21wb25lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Byb3BzLnJlZiA9IHRoaXMuc3RvcmVSZWY7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBuZXdQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcbiAgICAgICAgcmV0dXJuIEluamVjdG9yO1xuICAgIH0oQ29tcG9uZW50KSwgX2NsYXNzLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWUsIF90ZW1wMik7XG5cbiAgICAvLyBTdGF0aWMgZmllbGRzIGZyb20gY29tcG9uZW50IHNob3VsZCBiZSB2aXNpYmxlIG9uIHRoZSBnZW5lcmF0ZWQgSW5qZWN0b3JcblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKEluamVjdG9yLCBjb21wb25lbnQpO1xuXG4gICAgSW5qZWN0b3Iud3JhcHBlZENvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhJbmplY3RvciwgcHJveGllZEluamVjdG9yUHJvcHMpO1xuXG4gICAgcmV0dXJuIEluamVjdG9yO1xufVxuXG5mdW5jdGlvbiBncmFiU3RvcmVzQnlOYW1lKHN0b3JlTmFtZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGJhc2VTdG9yZXMsIG5leHRQcm9wcykge1xuICAgICAgICBzdG9yZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuICAgICAgICAgICAgaWYgKHN0b3JlTmFtZSBpbiBuZXh0UHJvcHMgLy8gcHJlZmVyIHByb3BzIG92ZXIgc3RvcmVzXG4gICAgICAgICAgICApIHJldHVybjtcbiAgICAgICAgICAgIGlmICghKHN0b3JlTmFtZSBpbiBiYXNlU3RvcmVzKSkgdGhyb3cgbmV3IEVycm9yKFwiTW9iWCBpbmplY3RvcjogU3RvcmUgJ1wiICsgc3RvcmVOYW1lICsgXCInIGlzIG5vdCBhdmFpbGFibGUhIE1ha2Ugc3VyZSBpdCBpcyBwcm92aWRlZCBieSBzb21lIFByb3ZpZGVyXCIpO1xuICAgICAgICAgICAgbmV4dFByb3BzW3N0b3JlTmFtZV0gPSBiYXNlU3RvcmVzW3N0b3JlTmFtZV07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV4dFByb3BzO1xuICAgIH07XG59XG5cbi8qKlxuICogaGlnaGVyIG9yZGVyIGNvbXBvbmVudCB0aGF0IGluamVjdHMgc3RvcmVzIHRvIGEgY2hpbGQuXG4gKiB0YWtlcyBlaXRoZXIgYSB2YXJhcmdzIGxpc3Qgb2Ygc3RyaW5ncywgd2hpY2ggYXJlIHN0b3JlcyByZWFkIGZyb20gdGhlIGNvbnRleHQsXG4gKiBvciBhIGZ1bmN0aW9uIHRoYXQgbWFudWFsbHkgbWFwcyB0aGUgYXZhaWxhYmxlIHN0b3JlcyBmcm9tIHRoZSBjb250ZXh0IHRvIHByb3BzOlxuICogc3RvcmVzVG9Qcm9wcyhtb2J4U3RvcmVzLCBwcm9wcywgY29udGV4dCkgPT4gbmV3UHJvcHNcbiAqL1xuZnVuY3Rpb24gaW5qZWN0KCkgLyogZm4oc3RvcmVzLCBuZXh0UHJvcHMpIG9yIC4uLnN0b3JlTmFtZXMgKi97XG4gICAgdmFyIGdyYWJTdG9yZXNGbiA9IHZvaWQgMDtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGdyYWJTdG9yZXNGbiA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgICAgICAgICAgdmFyIGluamVjdGVkID0gY3JlYXRlU3RvcmVJbmplY3RvcihncmFiU3RvcmVzRm4sIGNvbXBvbmVudENsYXNzKTtcbiAgICAgICAgICAgIGluamVjdGVkLmlzTW9ieEluamVjdG9yID0gZmFsc2U7IC8vIHN1cHJlc3Mgd2FybmluZ1xuICAgICAgICAgICAgLy8gbWFyayB0aGUgSW5qZWN0b3IgYXMgb2JzZXJ2ZXIsIHRvIG1ha2UgaXQgcmVhY3QgdG8gZXhwcmVzc2lvbnMgaW4gYGdyYWJTdG9yZXNGbmAsXG4gICAgICAgICAgICAvLyBzZWUgIzExMVxuICAgICAgICAgICAgaW5qZWN0ZWQgPSBvYnNlcnZlcihpbmplY3RlZCk7XG4gICAgICAgICAgICBpbmplY3RlZC5pc01vYnhJbmplY3RvciA9IHRydWU7IC8vIHJlc3RvcmUgd2FybmluZ1xuICAgICAgICAgICAgcmV0dXJuIGluamVjdGVkO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzdG9yZU5hbWVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdG9yZU5hbWVzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9Z3JhYlN0b3Jlc0ZuID0gZ3JhYlN0b3Jlc0J5TmFtZShzdG9yZU5hbWVzKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVN0b3JlSW5qZWN0b3IoZ3JhYlN0b3Jlc0ZuLCBjb21wb25lbnRDbGFzcywgc3RvcmVOYW1lcy5qb2luKFwiLVwiKSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIGRldiB0b29sIHN1cHBvcnRcbiAqL1xudmFyIGlzRGV2dG9vbHNFbmFibGVkID0gZmFsc2U7XG5cbnZhciBpc1VzaW5nU3RhdGljUmVuZGVyaW5nID0gZmFsc2U7XG5cbnZhciB3YXJuZWRBYm91dE9ic2VydmVySW5qZWN0RGVwcmVjYXRpb24gPSBmYWxzZTtcblxuLy8gV2Vha01hcDxOb2RlLCBPYmplY3Q+O1xudmFyIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeSA9IHR5cGVvZiBXZWFrTWFwICE9PSBcInVuZGVmaW5lZFwiID8gbmV3IFdlYWtNYXAoKSA6IHVuZGVmaW5lZDtcbnZhciByZW5kZXJSZXBvcnRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuZnVuY3Rpb24gZmluZERPTU5vZGUkMihjb21wb25lbnQpIHtcbiAgICBpZiAoZmluZERPTU5vZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmaW5kRE9NTm9kZShjb21wb25lbnQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBmaW5kRE9NTm9kZSB3aWxsIHRocm93IGluIHJlYWN0LXRlc3QtcmVuZGVyZXIsIHNlZTpcbiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngtcmVhY3QvaXNzdWVzLzIxNlxuICAgICAgICAgICAgLy8gSXMgdGhlcmUgYSBiZXR0ZXIgaGV1cmlzdGljP1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlcG9ydFJlbmRlcmluZyhjb21wb25lbnQpIHtcbiAgICB2YXIgbm9kZSA9IGZpbmRET01Ob2RlJDIoY29tcG9uZW50KTtcbiAgICBpZiAobm9kZSAmJiBjb21wb25lbnRCeU5vZGVSZWdpc3RlcnkpIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeS5zZXQobm9kZSwgY29tcG9uZW50KTtcblxuICAgIHJlbmRlclJlcG9ydGVyLmVtaXQoe1xuICAgICAgICBldmVudDogXCJyZW5kZXJcIixcbiAgICAgICAgcmVuZGVyVGltZTogY29tcG9uZW50Ll9fJG1vYlJlbmRlckVuZCAtIGNvbXBvbmVudC5fXyRtb2JSZW5kZXJTdGFydCxcbiAgICAgICAgdG90YWxUaW1lOiBEYXRlLm5vdygpIC0gY29tcG9uZW50Ll9fJG1vYlJlbmRlclN0YXJ0LFxuICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICAgICAgbm9kZTogbm9kZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFja0NvbXBvbmVudHMoKSB7XG4gICAgaWYgKHR5cGVvZiBXZWFrTWFwID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC1yZWFjdF0gdHJhY2tpbmcgY29tcG9uZW50cyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci5cIik7XG4gICAgaWYgKCFpc0RldnRvb2xzRW5hYmxlZCkgaXNEZXZ0b29sc0VuYWJsZWQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiB1c2VTdGF0aWNSZW5kZXJpbmcodXNlU3RhdGljUmVuZGVyaW5nKSB7XG4gICAgaXNVc2luZ1N0YXRpY1JlbmRlcmluZyA9IHVzZVN0YXRpY1JlbmRlcmluZztcbn1cblxuLyoqXG4gKiBFcnJvcnMgcmVwb3J0ZXJcbiAqL1xuXG52YXIgZXJyb3JzUmVwb3J0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbi8qKlxuICogVXRpbGl0aWVzXG4gKi9cblxuZnVuY3Rpb24gcGF0Y2godGFyZ2V0LCBmdW5jTmFtZSkge1xuICAgIHZhciBydW5NaXhpbkZpcnN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICAgIHZhciBiYXNlID0gdGFyZ2V0W2Z1bmNOYW1lXTtcbiAgICB2YXIgbWl4aW5GdW5jID0gcmVhY3RpdmVNaXhpbltmdW5jTmFtZV07XG4gICAgdmFyIGYgPSAhYmFzZSA/IG1peGluRnVuYyA6IHJ1bk1peGluRmlyc3QgPT09IHRydWUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG1peGluRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBiYXNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBtaXhpbkZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgLy8gTVdFOiBpZGVhbGx5IHdlIGZyZWV6ZSBoZXJlIHRvIHByb3RlY3QgYWdhaW5zdCBhY2NpZGVudGFsIG92ZXJ3cml0ZXMgaW4gY29tcG9uZW50IGluc3RhbmNlcywgc2VlICMxOTVcbiAgICAvLyAuLi5idXQgdGhhdCBicmVha3MgcmVhY3QtaG90LWxvYWRlciwgc2VlICMyMzEuLi5cbiAgICB0YXJnZXRbZnVuY05hbWVdID0gZjtcbn1cblxuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgICAvL0Zyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvYzY5OTA0YTUxMWI5MDAyNjY5MzUxNjgyMjMwNjNkZDg3NzJkZmM0MC9wYWNrYWdlcy9mYmpzL3NyYy9jb3JlL3NoYWxsb3dFcXVhbC5qc1xuICAgIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKCh0eXBlb2Ygb2JqQSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iakEpKSAhPT0gXCJvYmplY3RcIiB8fCBvYmpBID09PSBudWxsIHx8ICh0eXBlb2Ygb2JqQiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iakIpKSAhPT0gXCJvYmplY3RcIiB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gICAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICAvLyBGcm9tOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2M2OTkwNGE1MTFiOTAwMjY2OTM1MTY4MjIzMDYzZGQ4NzcyZGZjNDAvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9zaGFsbG93RXF1YWwuanNcbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVhY3RpdmVNaXhpblxuICovXG52YXIgcmVhY3RpdmVNaXhpbiA9IHtcbiAgICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoaXNVc2luZ1N0YXRpY1JlbmRlcmluZyA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgICAvLyBHZW5lcmF0ZSBmcmllbmRseSBuYW1lIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgdmFyIGluaXRpYWxOYW1lID0gdGhpcy5kaXNwbGF5TmFtZSB8fCB0aGlzLm5hbWUgfHwgdGhpcy5jb25zdHJ1Y3RvciAmJiAodGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpIHx8IFwiPGNvbXBvbmVudD5cIjtcbiAgICAgICAgdmFyIHJvb3ROb2RlSUQgPSB0aGlzLl9yZWFjdEludGVybmFsSW5zdGFuY2UgJiYgdGhpcy5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9yb290Tm9kZUlEIHx8IHRoaXMuX3JlYWN0SW50ZXJuYWxGaWJlciAmJiB0aGlzLl9yZWFjdEludGVybmFsRmliZXIuX2RlYnVnSUQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHByb3BzIGFyZSBzaGFsbG93bHkgbW9kaWZpZWQsIHJlYWN0IHdpbGwgcmVuZGVyIGFueXdheSxcbiAgICAgICAgICogc28gYXRvbS5yZXBvcnRDaGFuZ2VkKCkgc2hvdWxkIG5vdCByZXN1bHQgaW4geWV0IGFub3RoZXIgcmUtcmVuZGVyXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgc2tpcFJlbmRlciA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogZm9yY2VVcGRhdGUgd2lsbCByZS1hc3NpZ24gdGhpcy5wcm9wcy4gV2UgZG9uJ3Qgd2FudCB0aGF0IHRvIGNhdXNlIGEgbG9vcCxcbiAgICAgICAgICogc28gZGV0ZWN0IHRoZXNlIGNoYW5nZXNcbiAgICAgICAgICovXG4gICAgICAgIHZhciBpc0ZvcmNpbmdVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBmdW5jdGlvbiBtYWtlUHJvcGVydHlPYnNlcnZhYmxlUmVmZXJlbmNlKHByb3BOYW1lKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVIb2xkZXIgPSB0aGlzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIHZhciBhdG9tID0gY3JlYXRlQXRvbShcInJlYWN0aXZlIFwiICsgcHJvcE5hbWUpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BOYW1lLCB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlSG9sZGVyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEodikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRm9yY2luZ1VwZGF0ZSAmJiAhc2hhbGxvd0VxdWFsKHZhbHVlSG9sZGVyLCB2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVIb2xkZXIgPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFJlbmRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdG9tLnJlcG9ydENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSG9sZGVyID0gdjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWFrZSB0aGlzLnByb3BzIGFuIG9ic2VydmFibGUgcmVmZXJlbmNlLCBzZWUgIzEyNFxuICAgICAgICBtYWtlUHJvcGVydHlPYnNlcnZhYmxlUmVmZXJlbmNlLmNhbGwodGhpcywgXCJwcm9wc1wiKTtcbiAgICAgICAgLy8gbWFrZSBzdGF0ZSBhbiBvYnNlcnZhYmxlIHJlZmVyZW5jZVxuICAgICAgICBtYWtlUHJvcGVydHlPYnNlcnZhYmxlUmVmZXJlbmNlLmNhbGwodGhpcywgXCJzdGF0ZVwiKTtcblxuICAgICAgICAvLyB3aXJlIHVwIHJlYWN0aXZlIHJlbmRlclxuICAgICAgICB2YXIgYmFzZVJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHZhciByZWFjdGlvbiA9IG51bGw7XG4gICAgICAgIHZhciBpc1JlbmRlcmluZ1BlbmRpbmcgPSBmYWxzZTtcblxuICAgICAgICB2YXIgaW5pdGlhbFJlbmRlciA9IGZ1bmN0aW9uIGluaXRpYWxSZW5kZXIoKSB7XG4gICAgICAgICAgICByZWFjdGlvbiA9IG5ldyBSZWFjdGlvbihpbml0aWFsTmFtZSArIFwiI1wiICsgcm9vdE5vZGVJRCArIFwiLnJlbmRlcigpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVuZGVyaW5nUGVuZGluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBOLkIuIEdldHRpbmcgaGVyZSAqYmVmb3JlIG1vdW50aW5nKiBtZWFucyB0aGF0IGEgY29tcG9uZW50IGNvbnN0cnVjdG9yIGhhcyBzaWRlIGVmZmVjdHMgKHNlZSB0aGUgcmVsZXZhbnQgdGVzdCBpbiBtaXNjLmpzKVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHVuaWRpb21hdGljIFJlYWN0IHVzYWdlIGJ1dCBSZWFjdCB3aWxsIGNvcnJlY3RseSB3YXJuIGFib3V0IHRoaXMgc28gd2UgY29udGludWUgYXMgdXN1YWxcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlICM4NSAvIFB1bGwgIzQ0XG4gICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyaW5nUGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMuY29tcG9uZW50V2lsbFJlYWN0ID09PSBcImZ1bmN0aW9uXCIpIF90aGlzLmNvbXBvbmVudFdpbGxSZWFjdCgpOyAvLyBUT0RPOiB3cmFwIGluIGFjdGlvbj9cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9fJG1vYnhJc1VubW91bnRlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHVubW91bnRlZCBhdCB0aGlzIHBvaW50LCBjb21wb25lbnRXaWxsUmVhY3QoKSBoYWQgYSBzaWRlIGVmZmVjdCBjYXVzaW5nIHRoZSBjb21wb25lbnQgdG8gdW5tb3VudGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBjaGVjaz8gVGhlbiByZWFjdCB3aWxsIHByb3Blcmx5IHdhcm4gYWJvdXQgdGhlIGZhY3QgdGhhdCB0aGlzIHNob3VsZCBub3QgaGFwcGVuPyBTZWUgIzczXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCBwZW9wbGUgYWxzbyBjbGFpbSB0aGlzIG1pZ3RoIGhhcHBlbiBkdXJpbmcgdW5pdCB0ZXN0cy4uXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZvcmNpbmdVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcFJlbmRlcikgQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZS5jYWxsKF90aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZvcmNpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHJlYWN0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhY3Rpb24ucmVhY3RDb21wb25lbnQgPSBfdGhpcztcbiAgICAgICAgICAgIHJlYWN0aXZlUmVuZGVyLiRtb2J4ID0gcmVhY3Rpb247XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXIgPSByZWFjdGl2ZVJlbmRlcjtcbiAgICAgICAgICAgIHJldHVybiByZWFjdGl2ZVJlbmRlcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZWFjdGl2ZVJlbmRlciA9IGZ1bmN0aW9uIHJlYWN0aXZlUmVuZGVyKCkge1xuICAgICAgICAgICAgaXNSZW5kZXJpbmdQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgZXhjZXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIHJlbmRlcmluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlYWN0aW9uLnRyYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX18kbW9iUmVuZGVyU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmcgPSBfYWxsb3dTdGF0ZUNoYW5nZXMoZmFsc2UsIGJhc2VSZW5kZXIpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uID0gZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRGV2dG9vbHNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9fJG1vYlJlbmRlckVuZCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzUmVwb3J0ZXIuZW1pdChleGNlcHRpb24pO1xuICAgICAgICAgICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZW5kZXJpbmc7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5yZW5kZXIgPSBpbml0aWFsUmVuZGVyO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmIChpc1VzaW5nU3RhdGljUmVuZGVyaW5nID09PSB0cnVlKSByZXR1cm47XG4gICAgICAgIHRoaXMucmVuZGVyLiRtb2J4ICYmIHRoaXMucmVuZGVyLiRtb2J4LmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fXyRtb2J4SXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gZmluZERPTU5vZGUkMih0aGlzKTtcbiAgICAgICAgICAgIGlmIChub2RlICYmIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeS5kZWxldGUobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW5kZXJSZXBvcnRlci5lbWl0KHtcbiAgICAgICAgICAgICAgICBldmVudDogXCJkZXN0cm95XCIsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5vZGU6IG5vZGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKGlzRGV2dG9vbHNFbmFibGVkKSB7XG4gICAgICAgICAgICByZXBvcnRSZW5kZXJpbmcodGhpcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0RldnRvb2xzRW5hYmxlZCkge1xuICAgICAgICAgICAgcmVwb3J0UmVuZGVyaW5nKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIGlmIChpc1VzaW5nU3RhdGljUmVuZGVyaW5nKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieC1yZWFjdF0gSXQgc2VlbXMgdGhhdCBhIHJlLXJlbmRlcmluZyBvZiBhIFJlYWN0IGNvbXBvbmVudCBpcyB0cmlnZ2VyZWQgd2hpbGUgaW4gc3RhdGljIChzZXJ2ZXItc2lkZSkgbW9kZS4gUGxlYXNlIG1ha2Ugc3VyZSBjb21wb25lbnRzIGFyZSByZW5kZXJlZCBvbmx5IG9uY2Ugc2VydmVyLXNpZGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHVwZGF0ZSBvbiBhbnkgc3RhdGUgY2hhbmdlcyAoYXMgaXMgdGhlIGRlZmF1bHQpXG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIHVwZGF0ZSBpZiBwcm9wcyBhcmUgc2hhbGxvd2x5IG5vdCBlcXVhbCwgaW5zcGlyZWQgYnkgUHVyZVJlbmRlck1peGluXG4gICAgICAgIC8vIHdlIGNvdWxkIHJldHVybiBqdXN0ICdmYWxzZScgaGVyZSwgYW5kIGF2b2lkIHRoZSBgc2tpcFJlbmRlcmAgY2hlY2tzIGV0Y1xuICAgICAgICAvLyBob3dldmVyLCBpdCBpcyBuaWNlciBpZiBsaWZlY3ljbGUgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgbGlrZSB1c3VhbGx5LFxuICAgICAgICAvLyBzbyB3ZSByZXR1cm4gdHJ1ZSBoZXJlIGlmIHByb3BzIGFyZSBzaGFsbG93bHkgbW9kaWZpZWQuXG4gICAgICAgIHJldHVybiAhc2hhbGxvd0VxdWFsKHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2ZXIgZnVuY3Rpb24gLyBkZWNvcmF0b3JcbiAgICAgKi9cbn07ZnVuY3Rpb24gb2JzZXJ2ZXIoYXJnMSwgYXJnMikge1xuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdG9yZSBuYW1lcyBzaG91bGQgYmUgcHJvdmlkZWQgYXMgYXJyYXlcIik7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZzEpKSB7XG4gICAgICAgIC8vIGNvbXBvbmVudCBuZWVkcyBzdG9yZXNcbiAgICAgICAgaWYgKCF3YXJuZWRBYm91dE9ic2VydmVySW5qZWN0RGVwcmVjYXRpb24pIHtcbiAgICAgICAgICAgIHdhcm5lZEFib3V0T2JzZXJ2ZXJJbmplY3REZXByZWNhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ01vYnggb2JzZXJ2ZXI6IFVzaW5nIG9ic2VydmVyIHRvIGluamVjdCBzdG9yZXMgaXMgZGVwcmVjYXRlZCBzaW5jZSA0LjAuIFVzZSBgQGluamVjdChcInN0b3JlMVwiLCBcInN0b3JlMlwiKSBAb2JzZXJ2ZXIgQ29tcG9uZW50Q2xhc3NgIG9yIGBpbmplY3QoXCJzdG9yZTFcIiwgXCJzdG9yZTJcIikob2JzZXJ2ZXIoY29tcG9uZW50Q2xhc3MpKWAgaW5zdGVhZCBvZiBgQG9ic2VydmVyKFtcInN0b3JlMVwiLCBcInN0b3JlMlwiXSkgQ29tcG9uZW50Q2xhc3NgJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmcyKSB7XG4gICAgICAgICAgICAvLyBpbnZva2VkIGFzIGRlY29yYXRvclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlcihhcmcxLCBjb21wb25lbnRDbGFzcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluamVjdC5hcHBseShudWxsLCBhcmcxKShvYnNlcnZlcihhcmcyKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNvbXBvbmVudENsYXNzID0gYXJnMTtcblxuICAgIGlmIChjb21wb25lbnRDbGFzcy5pc01vYnhJbmplY3RvciA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJNb2J4IG9ic2VydmVyOiBZb3UgYXJlIHRyeWluZyB0byB1c2UgJ29ic2VydmVyJyBvbiBhIGNvbXBvbmVudCB0aGF0IGFscmVhZHkgaGFzICdpbmplY3QnLiBQbGVhc2UgYXBwbHkgJ29ic2VydmVyJyBiZWZvcmUgYXBwbHlpbmcgJ2luamVjdCdcIik7XG4gICAgfVxuXG4gICAgLy8gU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudDpcbiAgICAvLyBJZiBpdCBpcyBmdW5jdGlvbiBidXQgZG9lc24ndCBzZWVtIHRvIGJlIGEgcmVhY3QgY2xhc3MgY29uc3RydWN0b3IsXG4gICAgLy8gd3JhcCBpdCB0byBhIHJlYWN0IGNsYXNzIGF1dG9tYXRpY2FsbHlcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudENsYXNzID09PSBcImZ1bmN0aW9uXCIgJiYgKCFjb21wb25lbnRDbGFzcy5wcm90b3R5cGUgfHwgIWNvbXBvbmVudENsYXNzLnByb3RvdHlwZS5yZW5kZXIpICYmICFjb21wb25lbnRDbGFzcy5pc1JlYWN0Q2xhc3MgJiYgIUNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKGNvbXBvbmVudENsYXNzKSkge1xuICAgICAgICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIoKF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgICAgICAgIGluaGVyaXRzKF9jbGFzcywgX0NvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcbiAgICAgICAgICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBfY2xhc3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfY2xhc3MuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihfY2xhc3MpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3JlYXRlQ2xhc3MoX2NsYXNzLCBbe1xuICAgICAgICAgICAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Q2xhc3MuY2FsbCh0aGlzLCB0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgIHJldHVybiBfY2xhc3M7XG4gICAgICAgIH0oQ29tcG9uZW50KSwgX2NsYXNzLmRpc3BsYXlOYW1lID0gY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZSwgX2NsYXNzLmNvbnRleHRUeXBlcyA9IGNvbXBvbmVudENsYXNzLmNvbnRleHRUeXBlcywgX2NsYXNzLnByb3BUeXBlcyA9IGNvbXBvbmVudENsYXNzLnByb3BUeXBlcywgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IGNvbXBvbmVudENsYXNzLmRlZmF1bHRQcm9wcywgX3RlbXApKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbXBvbmVudENsYXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwYXNzIGEgdmFsaWQgY29tcG9uZW50IHRvICdvYnNlcnZlcidcIik7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IGNvbXBvbmVudENsYXNzLnByb3RvdHlwZSB8fCBjb21wb25lbnRDbGFzcztcbiAgICBtaXhpbkxpZmVjeWNsZUV2ZW50cyh0YXJnZXQpO1xuICAgIGNvbXBvbmVudENsYXNzLmlzTW9iWFJlYWN0T2JzZXJ2ZXIgPSB0cnVlO1xuICAgIHJldHVybiBjb21wb25lbnRDbGFzcztcbn1cblxuZnVuY3Rpb24gbWl4aW5MaWZlY3ljbGVFdmVudHModGFyZ2V0KSB7XG4gICAgcGF0Y2godGFyZ2V0LCBcImNvbXBvbmVudFdpbGxNb3VudFwiLCB0cnVlKTtbXCJjb21wb25lbnREaWRNb3VudFwiLCBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsIFwiY29tcG9uZW50RGlkVXBkYXRlXCJdLmZvckVhY2goZnVuY3Rpb24gKGZ1bmNOYW1lKSB7XG4gICAgICAgIHBhdGNoKHRhcmdldCwgZnVuY05hbWUpO1xuICAgIH0pO1xuICAgIGlmICghdGFyZ2V0LnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICB0YXJnZXQuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gcmVhY3RpdmVNaXhpbi5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgfVxufVxuXG4vLyBUT0RPOiBzdXBwb3J0IGluamVjdGlvbiBzb21laG93IGFzIHdlbGw/XG52YXIgT2JzZXJ2ZXIgPSBvYnNlcnZlcihmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIG9ic2VydmVySW5qZWN0ID0gX3JlZi5pbmplY3QsXG4gICAgICAgIHJlbmRlciA9IF9yZWYucmVuZGVyO1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IGNoaWxkcmVuIHx8IHJlbmRlcjtcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFvYnNlcnZlckluamVjdCkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50KCk7XG4gICAgfVxuICAgIHZhciBJbmplY3RDb21wb25lbnQgPSBpbmplY3Qob2JzZXJ2ZXJJbmplY3QpKGNvbXBvbmVudCk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5qZWN0Q29tcG9uZW50LCBudWxsKTtcbn0pO1xuXG5PYnNlcnZlci5kaXNwbGF5TmFtZSA9IFwiT2JzZXJ2ZXJcIjtcblxudmFyIE9ic2VydmVyUHJvcHNDaGVjayA9IGZ1bmN0aW9uIE9ic2VydmVyUHJvcHNDaGVjayhwcm9wcywga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGV4dHJhS2V5ID0ga2V5ID09PSBcImNoaWxkcmVuXCIgPyBcInJlbmRlclwiIDogXCJjaGlsZHJlblwiO1xuICAgIGlmICh0eXBlb2YgcHJvcHNba2V5XSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBwcm9wc1tleHRyYUtleV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wLGRvIG5vdCB1c2UgY2hpbGRyZW4gYW5kIHJlbmRlciBpbiB0aGUgc2FtZSB0aW1lIGluYFwiICsgY29tcG9uZW50TmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9wc1trZXldID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHByb3BzW2V4dHJhS2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBfdHlwZW9mKHByb3BzW2tleV0pICsgXCJgIHN1cHBsaWVkIHRvXCIgKyBcIiBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBgZnVuY3Rpb25gLlwiKTtcbn07XG5cbk9ic2VydmVyLnByb3BUeXBlcyA9IHtcbiAgICByZW5kZXI6IE9ic2VydmVyUHJvcHNDaGVjayxcbiAgICBjaGlsZHJlbjogT2JzZXJ2ZXJQcm9wc0NoZWNrXG59O1xuXG52YXIgX2NsYXNzO1xudmFyIF90ZW1wO1xuXG52YXIgc3BlY2lhbFJlYWN0S2V5cyA9IHsgY2hpbGRyZW46IHRydWUsIGtleTogdHJ1ZSwgcmVmOiB0cnVlIH07XG5cbnZhciBQcm92aWRlciA9IChfdGVtcCA9IF9jbGFzcyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFByb3ZpZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHJvdmlkZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhQcm92aWRlciwgW3tcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJnZXRDaGlsZENvbnRleHRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgICAgIHZhciBzdG9yZXMgPSB7fTtcbiAgICAgICAgICAgIC8vIGluaGVyaXQgc3RvcmVzXG4gICAgICAgICAgICB2YXIgYmFzZVN0b3JlcyA9IHRoaXMuY29udGV4dC5tb2J4U3RvcmVzO1xuICAgICAgICAgICAgaWYgKGJhc2VTdG9yZXMpIGZvciAodmFyIGtleSBpbiBiYXNlU3RvcmVzKSB7XG4gICAgICAgICAgICAgICAgc3RvcmVzW2tleV0gPSBiYXNlU3RvcmVzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhZGQgb3duIHN0b3Jlc1xuICAgICAgICAgICAgZm9yICh2YXIgX2tleSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzcGVjaWFsUmVhY3RLZXlzW19rZXldICYmIF9rZXkgIT09IFwic3VwcHJlc3NDaGFuZ2VkU3RvcmVXYXJuaW5nXCIpIHN0b3Jlc1tfa2V5XSA9IHRoaXMucHJvcHNbX2tleV07XG4gICAgICAgICAgICB9cmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2J4U3RvcmVzOiBzdG9yZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICAgICAgLy8gTWF5YmUgdGhpcyB3YXJuaW5nIGlzIHRvbyBhZ2dyZXNzaXZlP1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG5leHRQcm9wcykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5sZW5ndGgpIGNvbnNvbGUud2FybihcIk1vYlggUHJvdmlkZXI6IFRoZSBzZXQgb2YgcHJvdmlkZWQgc3RvcmVzIGhhcyBjaGFuZ2VkLiBQbGVhc2UgYXZvaWQgY2hhbmdpbmcgc3RvcmVzIGFzIHRoZSBjaGFuZ2UgbWlnaHQgbm90IHByb3BhZ2F0ZSB0byBhbGwgY2hpbGRyZW5cIik7XG4gICAgICAgICAgICBpZiAoIW5leHRQcm9wcy5zdXBwcmVzc0NoYW5nZWRTdG9yZVdhcm5pbmcpIGZvciAodmFyIGtleSBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNwZWNpYWxSZWFjdEtleXNba2V5XSAmJiB0aGlzLnByb3BzW2tleV0gIT09IG5leHRQcm9wc1trZXldKSBjb25zb2xlLndhcm4oXCJNb2JYIFByb3ZpZGVyOiBQcm92aWRlZCBzdG9yZSAnXCIgKyBrZXkgKyBcIicgaGFzIGNoYW5nZWQuIFBsZWFzZSBhdm9pZCByZXBsYWNpbmcgc3RvcmVzIGFzIHRoZSBjaGFuZ2UgbWlnaHQgbm90IHByb3BhZ2F0ZSB0byBhbGwgY2hpbGRyZW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFByb3ZpZGVyO1xufShDb21wb25lbnQpLCBfY2xhc3MuY29udGV4dFR5cGVzID0ge1xuICAgIG1vYnhTdG9yZXM6IG9iamVjdE9yT2JzZXJ2YWJsZU9iamVjdFxufSwgX2NsYXNzLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAgIG1vYnhTdG9yZXM6IG9iamVjdE9yT2JzZXJ2YWJsZU9iamVjdC5pc1JlcXVpcmVkXG59LCBfdGVtcCk7XG5cbmlmICghQ29tcG9uZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0IHJlcXVpcmVzIFJlYWN0IHRvIGJlIGF2YWlsYWJsZVwiKTtcbmlmICghc3B5KSB0aHJvdyBuZXcgRXJyb3IoXCJtb2J4LXJlYWN0IHJlcXVpcmVzIG1vYnggdG8gYmUgYXZhaWxhYmxlXCIpO1xuXG5pZiAodHlwZW9mIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID09PSBcImZ1bmN0aW9uXCIpIGNvbmZpZ3VyZSh7IHJlYWN0aW9uU2NoZWR1bGVyOiB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyB9KTtlbHNlIGlmICh0eXBlb2YgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMSA9PT0gXCJmdW5jdGlvblwiKSBjb25maWd1cmUoeyByZWFjdGlvblNjaGVkdWxlcjogdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMSB9KTtcblxudmFyIG9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGZuKSB7XG4gICAgcmV0dXJuIGVycm9yc1JlcG9ydGVyLm9uKGZuKTtcbn07XG5cbi8qIERldlRvb2wgc3VwcG9ydCAqL1xuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYW5keWtvZy9tb2J4LWRldnRvb2xzL2Jsb2IvZDg5NzZjMjRiOGNiNzI3ZWQ1OWY5YTBiYzkwNWEwMDlkZjc5ZTIyMS9zcmMvYmFja2VuZC9pbnN0YWxsR2xvYmFsSG9vay5qc1xuXG5pZiAoKHR5cGVvZiBfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fKSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIgbW9ieCQxID0geyBzcHk6IHNweSwgZXh0cmFzOiB7IGdldERlYnVnTmFtZTogZ2V0RGVidWdOYW1lIH0gfTtcbiAgICB2YXIgbW9ieFJlYWN0ID0geyByZW5kZXJSZXBvcnRlcjogcmVuZGVyUmVwb3J0ZXIsIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeTogY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5LCB0cmFja0NvbXBvbmVudHM6IHRyYWNrQ29tcG9uZW50cyB9O1xuICAgIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdE1vYnhSZWFjdChtb2J4UmVhY3QsIG1vYngkMSk7XG59XG5cbmV4cG9ydCB7IHByb3BUeXBlcywgcHJvcFR5cGVzIGFzIFByb3BUeXBlcywgb25FcnJvciwgb2JzZXJ2ZXIsIE9ic2VydmVyLCByZW5kZXJSZXBvcnRlciwgY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5LCB0cmFja0NvbXBvbmVudHMsIHVzZVN0YXRpY1JlbmRlcmluZywgUHJvdmlkZXIsIGluamVjdCB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbW9ieC1yZWFjdC9pbmRleC5tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pzLmZvdW5kYXRpb24vPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy41JztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nLFxuICAgICAgcmVUcmltU3RhcnQgPSAvXlxccysvLFxuICAgICAgcmVUcmltRW5kID0gL1xccyskLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezIsfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VBZ2dyZWdhdG9yYCBmb3IgYXJyYXlzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgfVxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTtcbiAgICB9XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICB2YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5maW5kS2V5YCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gXG4gICAqIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kS2V5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZWFjaEZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mV2l0aChhcnJheSwgdmFsdWUsIGZyb21JbmRleCwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lYW5gIGFuZCBgXy5tZWFuQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gbGVuZ3RoID8gKGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSAvIGxlbmd0aCkgOiBOQU47XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAgICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAgICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICAgKiB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnN1bWAgYW5kIGBfLnN1bUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBjdXJyZW50IDogKHJlc3VsdCArIGN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAgICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1BhaXJzYCBhbmQgYF8udG9QYWlyc0luYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5XG4gICAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIG9iamVjdFtrZXldXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4ga2V5ID09ICdfX3Byb3RvX18nXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgKHNyY0luZGV4ICYmIGlzRnVuY3Rpb24ob2JqVmFsdWUpKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLmxlbmd0aCA/IGl0ZXJhdGVlcyA6IFtpZGVudGl0eV0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24pIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoJ3NvdXJjZVVSTCcgaW4gb3B0aW9uc1xuICAgICAgICAgID8gb3B0aW9ucy5zb3VyY2VVUkxcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gKGxvZGFzaEZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICAgIG5hbWVzID0gcmVhbE5hbWVzW2tleV0gfHwgKHJlYWxOYW1lc1trZXldID0gW10pO1xuXG4gICAgICAgIG5hbWVzLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuMycgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogTW9iWCAtIChjKSBNaWNoZWwgV2VzdHN0cmF0ZSAyMDE1LCAyMDE2IC0gTUlUIExpY2Vuc2VkICovXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxudmFyIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxuXG52YXIgZW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSA9IHt9O1xudmFyIG5vbkVudW1lcmFibGVEZXNjcmlwdG9yQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNyZWF0ZVByb3BlcnR5SW5pdGlhbGl6ZXJEZXNjcmlwdG9yKHByb3AsIGVudW1lcmFibGUpIHtcbiAgICB2YXIgY2FjaGUgPSBlbnVtZXJhYmxlID8gZW51bWVyYWJsZURlc2NyaXB0b3JDYWNoZSA6IG5vbkVudW1lcmFibGVEZXNjcmlwdG9yQ2FjaGU7XG4gICAgcmV0dXJuIChjYWNoZVtwcm9wXSB8fFxuICAgICAgICAoY2FjaGVbcHJvcF0gPSB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBlbnVtZXJhYmxlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3Byb3BdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xufVxuZnVuY3Rpb24gaW5pdGlhbGl6ZUluc3RhbmNlKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuX19tb2J4RGlkUnVuTGF6eUluaXRpYWxpemVycyA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBkZWNvcmF0b3JzID0gdGFyZ2V0Ll9fbW9ieERlY29yYXRvcnM7XG4gICAgaWYgKGRlY29yYXRvcnMpIHtcbiAgICAgICAgYWRkSGlkZGVuUHJvcCh0YXJnZXQsIFwiX19tb2J4RGlkUnVuTGF6eUluaXRpYWxpemVyc1wiLCB0cnVlKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRlY29yYXRvcnMpIHtcbiAgICAgICAgICAgIHZhciBkID0gZGVjb3JhdG9yc1trZXldO1xuICAgICAgICAgICAgZC5wcm9wZXJ0eUNyZWF0b3IodGFyZ2V0LCBkLnByb3AsIGQuZGVzY3JpcHRvciwgZC5kZWNvcmF0b3JUYXJnZXQsIGQuZGVjb3JhdG9yQXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3BEZWNvcmF0b3IocHJvcGVydHlJbml0aWFsbHlFbnVtZXJhYmxlLCBwcm9wZXJ0eUNyZWF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yRmFjdG9yeSgpIHtcbiAgICAgICAgdmFyIGRlY29yYXRvckFyZ3VtZW50cztcbiAgICAgICAgdmFyIGRlY29yYXRvciA9IGZ1bmN0aW9uIGRlY29yYXRlKHRhcmdldCwgcHJvcCwgZGVzY3JpcHRvciwgYXBwbHlJbW1lZGlhdGVseVxuICAgICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBwYXJhbWV0ZXIgdG8gc2lnbmFsIHRoZSBkaXJlY3QgYXBwbGljYXRpb24gb2YgYSBkZWNvcmF0b3IsIGFsbG93IGV4dGVuZE9ic2VydmFibGUgdG8gc2tpcCB0aGUgZW50aXJlIHR5cGUgZGVjb3JhdGlvbiBwYXJ0LFxuICAgICAgICAvLyBhcyB0aGUgaW5zdGFuY2UgdG8gYXBwbHkgdGhlIGRlb3JhdG9yIHRvIGVxdWFscyB0aGUgdGFyZ2V0XG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGFwcGx5SW1tZWRpYXRlbHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNyZWF0b3IodGFyZ2V0LCBwcm9wLCBkZXNjcmlwdG9yLCB0YXJnZXQsIGRlY29yYXRvckFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFxdWFja3NMaWtlQURlY29yYXRvcihhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgIGZhaWwkMShcIlRoaXMgZnVuY3Rpb24gaXMgYSBkZWNvcmF0b3IsIGJ1dCBpdCB3YXNuJ3QgaW52b2tlZCBsaWtlIGEgZGVjb3JhdG9yXCIpO1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBcIl9fbW9ieERlY29yYXRvcnNcIikpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkRGVjb3JhdG9ycyA9IHRhcmdldC5fX21vYnhEZWNvcmF0b3JzO1xuICAgICAgICAgICAgICAgIGFkZEhpZGRlblByb3AodGFyZ2V0LCBcIl9fbW9ieERlY29yYXRvcnNcIiwgX19hc3NpZ24oe30sIGluaGVyaXRlZERlY29yYXRvcnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhcmdldC5fX21vYnhEZWNvcmF0b3JzW3Byb3BdID0ge1xuICAgICAgICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDcmVhdG9yOiBwcm9wZXJ0eUNyZWF0b3IsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgICAgICAgICAgICBkZWNvcmF0b3JUYXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgICBkZWNvcmF0b3JBcmd1bWVudHM6IGRlY29yYXRvckFyZ3VtZW50c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVQcm9wZXJ0eUluaXRpYWxpemVyRGVzY3JpcHRvcihwcm9wLCBwcm9wZXJ0eUluaXRpYWxseUVudW1lcmFibGUpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocXVhY2tzTGlrZUFEZWNvcmF0b3IoYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgLy8gQGRlY29yYXRvclxuICAgICAgICAgICAgZGVjb3JhdG9yQXJndW1lbnRzID0gRU1QVFlfQVJSQVk7XG4gICAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBAZGVjb3JhdG9yKGFyZ3MpXG4gICAgICAgICAgICBkZWNvcmF0b3JBcmd1bWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgcmV0dXJuIGRlY29yYXRvcjtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBxdWFja3NMaWtlQURlY29yYXRvcihhcmdzKSB7XG4gICAgcmV0dXJuICgoKGFyZ3MubGVuZ3RoID09PSAyIHx8IGFyZ3MubGVuZ3RoID09PSAzKSAmJiB0eXBlb2YgYXJnc1sxXSA9PT0gXCJzdHJpbmdcIikgfHxcbiAgICAgICAgKGFyZ3MubGVuZ3RoID09PSA0ICYmIGFyZ3NbM10gPT09IHRydWUpKTtcbn1cblxuZnVuY3Rpb24gaXNTcHlFbmFibGVkKCkge1xuICAgIHJldHVybiAhIWdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5sZW5ndGg7XG59XG5mdW5jdGlvbiBzcHlSZXBvcnQoZXZlbnQpIHtcbiAgICBpZiAoIWdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5sZW5ndGgpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgbGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgICAgbGlzdGVuZXJzW2ldKGV2ZW50KTtcbn1cbmZ1bmN0aW9uIHNweVJlcG9ydFN0YXJ0KGV2ZW50KSB7XG4gICAgdmFyIGNoYW5nZSA9IF9fYXNzaWduKHt9LCBldmVudCwgeyBzcHlSZXBvcnRTdGFydDogdHJ1ZSB9KTtcbiAgICBzcHlSZXBvcnQoY2hhbmdlKTtcbn1cbnZhciBFTkRfRVZFTlQgPSB7IHNweVJlcG9ydEVuZDogdHJ1ZSB9O1xuZnVuY3Rpb24gc3B5UmVwb3J0RW5kKGNoYW5nZSkge1xuICAgIGlmIChjaGFuZ2UpXG4gICAgICAgIHNweVJlcG9ydChfX2Fzc2lnbih7fSwgY2hhbmdlLCB7IHNweVJlcG9ydEVuZDogdHJ1ZSB9KSk7XG4gICAgZWxzZVxuICAgICAgICBzcHlSZXBvcnQoRU5EX0VWRU5UKTtcbn1cbmZ1bmN0aW9uIHNweShsaXN0ZW5lcikge1xuICAgIGdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZHggPSBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgIGlmIChpZHggIT09IC0xKVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLnNwbGljZShpZHgsIDEpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiwgXCJgYWN0aW9uYCBjYW4gb25seSBiZSBpbnZva2VkIG9uIGZ1bmN0aW9uc1wiKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25OYW1lICE9PSBcInN0cmluZ1wiIHx8ICFhY3Rpb25OYW1lKVxuICAgICAgICAgICAgZmFpbChcImFjdGlvbnMgc2hvdWxkIGhhdmUgdmFsaWQgbmFtZXMsIGdvdDogJ1wiICsgYWN0aW9uTmFtZSArIFwiJ1wiKTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgZm4sIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICByZXMuaXNNb2J4QWN0aW9uID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZXhlY3V0ZUFjdGlvbihhY3Rpb25OYW1lLCBmbiwgc2NvcGUsIGFyZ3MpIHtcbiAgICB2YXIgcnVuSW5mbyA9IHN0YXJ0QWN0aW9uKGFjdGlvbk5hbWUsIGZuLCBzY29wZSwgYXJncyk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHNjb3BlLCBhcmdzKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGVuZEFjdGlvbihydW5JbmZvKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdGFydEFjdGlvbihhY3Rpb25OYW1lLCBmbiwgc2NvcGUsIGFyZ3MpIHtcbiAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCkgJiYgISFhY3Rpb25OYW1lO1xuICAgIHZhciBzdGFydFRpbWUgPSAwO1xuICAgIGlmIChub3RpZnlTcHkpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIGwgPSAoYXJncyAmJiBhcmdzLmxlbmd0aCkgfHwgMDtcbiAgICAgICAgdmFyIGZsYXR0ZW5kQXJncyA9IG5ldyBBcnJheShsKTtcbiAgICAgICAgaWYgKGwgPiAwKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICAgICAgZmxhdHRlbmRBcmdzW2ldID0gYXJnc1tpXTtcbiAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgdHlwZTogXCJhY3Rpb25cIixcbiAgICAgICAgICAgIG5hbWU6IGFjdGlvbk5hbWUsXG4gICAgICAgICAgICBvYmplY3Q6IHNjb3BlLFxuICAgICAgICAgICAgYXJndW1lbnRzOiBmbGF0dGVuZEFyZ3NcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBwcmV2RGVyaXZhdGlvbiA9IHVudHJhY2tlZFN0YXJ0KCk7XG4gICAgc3RhcnRCYXRjaCgpO1xuICAgIHZhciBwcmV2QWxsb3dTdGF0ZUNoYW5nZXMgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KHRydWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZXZEZXJpdmF0aW9uOiBwcmV2RGVyaXZhdGlvbixcbiAgICAgICAgcHJldkFsbG93U3RhdGVDaGFuZ2VzOiBwcmV2QWxsb3dTdGF0ZUNoYW5nZXMsXG4gICAgICAgIG5vdGlmeVNweTogbm90aWZ5U3B5LFxuICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZVxuICAgIH07XG59XG5mdW5jdGlvbiBlbmRBY3Rpb24ocnVuSW5mbykge1xuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHJ1bkluZm8ucHJldkFsbG93U3RhdGVDaGFuZ2VzKTtcbiAgICBlbmRCYXRjaCgpO1xuICAgIHVudHJhY2tlZEVuZChydW5JbmZvLnByZXZEZXJpdmF0aW9uKTtcbiAgICBpZiAocnVuSW5mby5ub3RpZnlTcHkpXG4gICAgICAgIHNweVJlcG9ydEVuZCh7IHRpbWU6IERhdGUubm93KCkgLSBydW5JbmZvLnN0YXJ0VGltZSB9KTtcbn1cbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzKGFsbG93U3RhdGVDaGFuZ2VzLCBmdW5jKSB7XG4gICAgdmFyIHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGFsbG93U3RhdGVDaGFuZ2VzKTtcbiAgICB2YXIgcmVzO1xuICAgIHRyeSB7XG4gICAgICAgIHJlcyA9IGZ1bmMoKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydChhbGxvd1N0YXRlQ2hhbmdlcykge1xuICAgIHZhciBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXM7XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBhbGxvd1N0YXRlQ2hhbmdlcztcbiAgICByZXR1cm4gcHJldjtcbn1cbmZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpIHtcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IHByZXY7XG59XG5cbmZ1bmN0aW9uIGRvbnRSZWFzc2lnbkZpZWxkcygpIHtcbiAgICBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQGFjdGlvbiBmaWVsZHMgYXJlIG5vdCByZWFzc2lnbmFibGVcIik7XG59XG5mdW5jdGlvbiBuYW1lZEFjdGlvbkRlY29yYXRvcihuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3AsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgZGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWlsJDEoXCJAYWN0aW9uIGNhbm5vdCBiZSB1c2VkIHdpdGggZ2V0dGVyc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJhYmVsIC8gdHlwZXNjcmlwdFxuICAgICAgICAgICAgLy8gQGFjdGlvbiBtZXRob2QoKSB7IH1cbiAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gdHlwZXNjcmlwdFxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjcmVhdGVBY3Rpb24obmFtZSwgZGVzY3JpcHRvci52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSAvLyBmb3IgdHlwZXNjcmlwdCwgdGhpcyBtdXN0IGJlIHdyaXRhYmxlLCBvdGhlcndpc2UgaXQgY2Fubm90IGluaGVyaXQgOi8gKHNlZSBpbmhlcml0YWJsZSBhY3Rpb25zIHRlc3QpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJhYmVsIG9ubHk6IEBhY3Rpb24gbWV0aG9kID0gKCkgPT4ge31cbiAgICAgICAgICAgIHZhciBpbml0aWFsaXplcl8xID0gZGVzY3JpcHRvci5pbml0aWFsaXplcjtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiLFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE4uQjogd2UgY2FuJ3QgaW1tZWRpYXRlbHkgaW52b2tlIGluaXRpYWxpemVyOyB0aGlzIHdvdWxkIGJlIHdyb25nXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVBY3Rpb24obmFtZSwgaW5pdGlhbGl6ZXJfMS5jYWxsKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGJvdW5kIGluc3RhbmNlIG1ldGhvZHNcbiAgICAgICAgcmV0dXJuIGFjdGlvbkZpZWxkRGVjb3JhdG9yKG5hbWUpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFjdGlvbkZpZWxkRGVjb3JhdG9yKG5hbWUpIHtcbiAgICAvLyBTaW1wbGUgcHJvcGVydHkgdGhhdCB3cml0ZXMgb24gZmlyc3QgaW52b2NhdGlvbiB0byB0aGUgY3VycmVudCBpbnN0YW5jZVxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZEhpZGRlbkZpbmFsUHJvcCh0aGlzLCBwcm9wLCBhY3Rpb24obmFtZSwgdmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJvdW5kQWN0aW9uRGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLCBhcHBseVRvSW5zdGFuY2UpIHtcbiAgICBpZiAoYXBwbHlUb0luc3RhbmNlID09PSB0cnVlKSB7XG4gICAgICAgIGRlZmluZUJvdW5kQWN0aW9uKHRhcmdldCwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgIC8vIGlmIChkZXNjcmlwdG9yLnZhbHVlKVxuICAgICAgICAvLyBUeXBlc2NyaXB0IC8gQmFiZWw6IEBhY3Rpb24uYm91bmQgbWV0aG9kKCkgeyB9XG4gICAgICAgIC8vIGFsc286IGJhYmVsIEBhY3Rpb24uYm91bmQgbWV0aG9kID0gKCkgPT4ge31cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lQm91bmRBY3Rpb24odGhpcywgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLnZhbHVlIHx8IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGRvbnRSZWFzc2lnbkZpZWxkc1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBmaWVsZCBkZWNvcmF0b3IgVHlwZXNjcmlwdCBAYWN0aW9uLmJvdW5kIG1ldGhvZCA9ICgpID0+IHt9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgZGVmaW5lQm91bmRBY3Rpb24odGhpcywgcHJvcGVydHlOYW1lLCB2KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxudmFyIGFjdGlvbiA9IGZ1bmN0aW9uIGFjdGlvbihhcmcxLCBhcmcyLCBhcmczLCBhcmc0KSB7XG4gICAgLy8gYWN0aW9uKGZuKCkge30pXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZzEgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFjdGlvbihhcmcxLm5hbWUgfHwgXCI8dW5uYW1lZCBhY3Rpb24+XCIsIGFyZzEpO1xuICAgIC8vIGFjdGlvbihcIm5hbWVcIiwgZm4oKSB7fSlcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgYXJnMiA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gY3JlYXRlQWN0aW9uKGFyZzEsIGFyZzIpO1xuICAgIC8vIEBhY3Rpb24oXCJuYW1lXCIpIGZuKCkge31cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnMSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIG5hbWVkQWN0aW9uRGVjb3JhdG9yKGFyZzEpO1xuICAgIC8vIEBhY3Rpb24gZm4oKSB7fVxuICAgIGlmIChhcmc0ID09PSB0cnVlKSB7XG4gICAgICAgIC8vIGFwcGx5IHRvIGluc3RhbmNlIGltbWVkaWF0ZWx5XG4gICAgICAgIGFyZzFbYXJnMl0gPSBjcmVhdGVBY3Rpb24oYXJnMS5uYW1lIHx8IGFyZzIsIGFyZzMudmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5hbWVkQWN0aW9uRGVjb3JhdG9yKGFyZzIpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxufTtcbmFjdGlvbi5ib3VuZCA9IGJvdW5kQWN0aW9uRGVjb3JhdG9yO1xuZnVuY3Rpb24gcnVuSW5BY3Rpb24oYXJnMSwgYXJnMikge1xuICAgIC8vIFRPRE86IGRlcHJlY2F0ZT9cbiAgICB2YXIgYWN0aW9uTmFtZSA9IHR5cGVvZiBhcmcxID09PSBcInN0cmluZ1wiID8gYXJnMSA6IGFyZzEubmFtZSB8fCBcIjx1bm5hbWVkIGFjdGlvbj5cIjtcbiAgICB2YXIgZm4gPSB0eXBlb2YgYXJnMSA9PT0gXCJmdW5jdGlvblwiID8gYXJnMSA6IGFyZzI7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgJiYgZm4ubGVuZ3RoID09PSAwLCBcImBydW5JbkFjdGlvbmAgZXhwZWN0cyBhIGZ1bmN0aW9uIHdpdGhvdXQgYXJndW1lbnRzXCIpO1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbk5hbWUgIT09IFwic3RyaW5nXCIgfHwgIWFjdGlvbk5hbWUpXG4gICAgICAgICAgICBmYWlsJDEoXCJhY3Rpb25zIHNob3VsZCBoYXZlIHZhbGlkIG5hbWVzLCBnb3Q6ICdcIiArIGFjdGlvbk5hbWUgKyBcIidcIik7XG4gICAgfVxuICAgIHJldHVybiBleGVjdXRlQWN0aW9uKGFjdGlvbk5hbWUsIGZuLCB0aGlzLCB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gaXNBY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSBcImZ1bmN0aW9uXCIgJiYgdGhpbmcuaXNNb2J4QWN0aW9uID09PSB0cnVlO1xufVxuZnVuY3Rpb24gZGVmaW5lQm91bmRBY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGZuKSB7XG4gICAgYWRkSGlkZGVuUHJvcCh0YXJnZXQsIHByb3BlcnR5TmFtZSwgY3JlYXRlQWN0aW9uKHByb3BlcnR5TmFtZSwgZm4uYmluZCh0YXJnZXQpKSk7XG59XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbn1cbi8vIENvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9ibG9iLzVjMjM3YTdjNjgyZmI2OGZkNTM3ODIwM2YwYmYyMmRjZTE2MjQ4NTQvdW5kZXJzY29yZS5qcyNMMTE4Ni1MMTI4OVxuLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbmZ1bmN0aW9uIGVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgIGlmIChhICE9PSBhKVxuICAgICAgICByZXR1cm4gYiAhPT0gYjtcbiAgICAvLyBFeGhhdXN0IHByaW1pdGl2ZSBjaGVja3NcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmICh0eXBlICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiAhPSBcIm9iamVjdFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGRlZXBFcShhLCBiLCBhU3RhY2ssIGJTdGFjayk7XG59XG4vLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuZnVuY3Rpb24gZGVlcEVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgYSA9IHVud3JhcChhKTtcbiAgICBiID0gdW53cmFwKGIpO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgICBjYXNlIFwiW29iamVjdCBSZWdFeHBdXCI6XG4gICAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFN0cmluZ11cIjpcbiAgICAgICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIGEgPT09IFwiXCIgKyBiO1xuICAgICAgICBjYXNlIFwiW29iamVjdCBOdW1iZXJdXCI6XG4gICAgICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXG4gICAgICAgICAgICBpZiAoK2EgIT09ICthKVxuICAgICAgICAgICAgICAgIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcbiAgICAgICAgY2FzZSBcIltvYmplY3QgRGF0ZV1cIjpcbiAgICAgICAgY2FzZSBcIltvYmplY3QgQm9vbGVhbl1cIjpcbiAgICAgICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgICAgIHJldHVybiArYSA9PT0gK2I7XG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFN5bWJvbF1cIjpcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudmFsdWVPZi5jYWxsKGEpID09PSBTeW1ib2wudmFsdWVPZi5jYWxsKGIpKTtcbiAgICB9XG4gICAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYSAhPSBcIm9iamVjdFwiIHx8IHR5cGVvZiBiICE9IFwib2JqZWN0XCIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcyBvciBgQXJyYXlgc1xuICAgICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiZcbiAgICAgICAgICAgICEodHlwZW9mIGFDdG9yID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGJDdG9yID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKSAmJlxuICAgICAgICAgICAgKFwiY29uc3RydWN0b3JcIiBpbiBhICYmIFwiY29uc3RydWN0b3JcIiBpbiBiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSlcbiAgICAgICAgICAgIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpO1xuICAgIGJTdGFjay5wdXNoKGIpO1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICAgICAgdmFyIGtleXMkJDEgPSBPYmplY3Qua2V5cyhhKSwga2V5O1xuICAgICAgICBsZW5ndGggPSBrZXlzJCQxLmxlbmd0aDtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgICAgICBrZXkgPSBrZXlzJCQxW2xlbmd0aF07XG4gICAgICAgICAgICBpZiAoIShoYXMkJDEoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVud3JhcChhKSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KGEpKVxuICAgICAgICByZXR1cm4gYS5wZWVrKCk7XG4gICAgaWYgKGlzRVM2TWFwKGEpIHx8IGlzT2JzZXJ2YWJsZU1hcChhKSlcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheShhLmVudHJpZXMoKSk7XG4gICAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBoYXMkJDEoYSwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBrZXkpO1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eUNvbXBhcmVyKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbn1cbmZ1bmN0aW9uIHN0cnVjdHVyYWxDb21wYXJlcihhLCBiKSB7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlcihhLCBiKSB7XG4gICAgcmV0dXJuIGFyZUJvdGhOYU4oYSwgYikgfHwgaWRlbnRpdHlDb21wYXJlcihhLCBiKTtcbn1cbnZhciBjb21wYXJlciA9IHtcbiAgICBpZGVudGl0eTogaWRlbnRpdHlDb21wYXJlcixcbiAgICBzdHJ1Y3R1cmFsOiBzdHJ1Y3R1cmFsQ29tcGFyZXIsXG4gICAgZGVmYXVsdDogZGVmYXVsdENvbXBhcmVyXG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuYW1lZCByZWFjdGl2ZSB2aWV3IGFuZCBrZWVwcyBpdCBhbGl2ZSwgc28gdGhhdCB0aGUgdmlldyBpcyBhbHdheXNcbiAqIHVwZGF0ZWQgaWYgb25lIG9mIHRoZSBkZXBlbmRlbmNpZXMgY2hhbmdlcywgZXZlbiB3aGVuIHRoZSB2aWV3IGlzIG5vdCBmdXJ0aGVyIHVzZWQgYnkgc29tZXRoaW5nIGVsc2UuXG4gKiBAcGFyYW0gdmlldyBUaGUgcmVhY3RpdmUgdmlld1xuICogQHJldHVybnMgZGlzcG9zZXIgZnVuY3Rpb24sIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHN0b3AgdGhlIHZpZXcgZnJvbSBiZWluZyB1cGRhdGVkIGluIHRoZSBmdXR1cmUuXG4gKi9cbmZ1bmN0aW9uIGF1dG9ydW4odmlldywgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IEVNUFRZX09CSkVDVDsgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB2aWV3ID09PSBcImZ1bmN0aW9uXCIsIFwiQXV0b3J1biBleHBlY3RzIGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcIik7XG4gICAgICAgIGludmFyaWFudChpc0FjdGlvbih2aWV3KSA9PT0gZmFsc2UsIFwiQXV0b3J1biBkb2VzIG5vdCBhY2NlcHQgYWN0aW9ucyBzaW5jZSBhY3Rpb25zIGFyZSB1bnRyYWNrYWJsZVwiKTtcbiAgICB9XG4gICAgdmFyIG5hbWUgPSAob3B0cyAmJiBvcHRzLm5hbWUpIHx8IHZpZXcubmFtZSB8fCBcIkF1dG9ydW5AXCIgKyBnZXROZXh0SWQoKTtcbiAgICB2YXIgcnVuU3luYyA9ICFvcHRzLnNjaGVkdWxlciAmJiAhb3B0cy5kZWxheTtcbiAgICB2YXIgcmVhY3Rpb247XG4gICAgaWYgKHJ1blN5bmMpIHtcbiAgICAgICAgLy8gbm9ybWFsIGF1dG9ydW5cbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24obmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy50cmFjayhyZWFjdGlvblJ1bm5lcik7XG4gICAgICAgIH0sIG9wdHMub25FcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgc2NoZWR1bGVyXzEgPSBjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyhvcHRzKTtcbiAgICAgICAgLy8gZGVib3VuY2VkIGF1dG9ydW5cbiAgICAgICAgdmFyIGlzU2NoZWR1bGVkXzEgPSBmYWxzZTtcbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24obmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFpc1NjaGVkdWxlZF8xKSB7XG4gICAgICAgICAgICAgICAgaXNTY2hlZHVsZWRfMSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyXzEoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpc1NjaGVkdWxlZF8xID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVhY3Rpb24uaXNEaXNwb3NlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0aW9uLnRyYWNrKHJlYWN0aW9uUnVubmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0cy5vbkVycm9yKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhY3Rpb25SdW5uZXIoKSB7XG4gICAgICAgIHZpZXcocmVhY3Rpb24pO1xuICAgIH1cbiAgICByZWFjdGlvbi5zY2hlZHVsZSgpO1xuICAgIHJldHVybiByZWFjdGlvbi5nZXREaXNwb3NlcigpO1xufVxudmFyIHJ1biA9IGZ1bmN0aW9uIChmKSB7IHJldHVybiBmKCk7IH07XG5mdW5jdGlvbiBjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyhvcHRzKSB7XG4gICAgcmV0dXJuIG9wdHMuc2NoZWR1bGVyXG4gICAgICAgID8gb3B0cy5zY2hlZHVsZXJcbiAgICAgICAgOiBvcHRzLmRlbGF5ID8gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHNldFRpbWVvdXQoZiwgb3B0cy5kZWxheSk7IH0gOiBydW47XG59XG5mdW5jdGlvbiByZWFjdGlvbihleHByZXNzaW9uLCBlZmZlY3QsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSBFTVBUWV9PQkpFQ1Q7IH1cbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIG9wdHMgPSB7IGZpcmVJbW1lZGlhdGVseTogb3B0cyB9O1xuICAgICAgICBkZXByZWNhdGVkKFwiVXNpbmcgZmlyZUltbWVkaWF0ZWx5IGFzIGFyZ3VtZW50IGlzIGRlcHJlY2F0ZWQuIFVzZSAneyBmaXJlSW1tZWRpYXRlbHk6IHRydWUgfScgaW5zdGVhZFwiKTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGV4cHJlc3Npb24gPT09IFwiZnVuY3Rpb25cIiwgXCJGaXJzdCBhcmd1bWVudCB0byByZWFjdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBvcHRzID09PSBcIm9iamVjdFwiLCBcIlRoaXJkIGFyZ3VtZW50IG9mIHJlYWN0aW9ucyBzaG91bGQgYmUgYW4gb2JqZWN0XCIpO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IG9wdHMubmFtZSB8fCBcIlJlYWN0aW9uQFwiICsgZ2V0TmV4dElkKCk7XG4gICAgdmFyIGVmZmVjdEFjdGlvbiA9IGFjdGlvbihuYW1lLCBvcHRzLm9uRXJyb3IgPyB3cmFwRXJyb3JIYW5kbGVyKG9wdHMub25FcnJvciwgZWZmZWN0KSA6IGVmZmVjdCk7XG4gICAgdmFyIHJ1blN5bmMgPSAhb3B0cy5zY2hlZHVsZXIgJiYgIW9wdHMuZGVsYXk7XG4gICAgdmFyIHNjaGVkdWxlciA9IGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHMpO1xuICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuICAgIHZhciBpc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YXIgZXF1YWxzID0gb3B0cy5jb21wYXJlU3RydWN0dXJhbFxuICAgICAgICA/IGNvbXBhcmVyLnN0cnVjdHVyYWxcbiAgICAgICAgOiBvcHRzLmVxdWFscyB8fCBjb21wYXJlci5kZWZhdWx0O1xuICAgIHZhciByID0gbmV3IFJlYWN0aW9uKG5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGZpcnN0VGltZSB8fCBydW5TeW5jKSB7XG4gICAgICAgICAgICByZWFjdGlvblJ1bm5lcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpc1NjaGVkdWxlZCkge1xuICAgICAgICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2NoZWR1bGVyKHJlYWN0aW9uUnVubmVyKTtcbiAgICAgICAgfVxuICAgIH0sIG9wdHMub25FcnJvcik7XG4gICAgZnVuY3Rpb24gcmVhY3Rpb25SdW5uZXIoKSB7XG4gICAgICAgIGlzU2NoZWR1bGVkID0gZmFsc2U7IC8vIFE6IG1vdmUgaW50byByZWFjdGlvbiBydW5uZXI/XG4gICAgICAgIGlmIChyLmlzRGlzcG9zZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHIudHJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IGV4cHJlc3Npb24ocik7XG4gICAgICAgICAgICBjaGFuZ2VkID0gZmlyc3RUaW1lIHx8ICFlcXVhbHModmFsdWUsIG5leHRWYWx1ZSk7XG4gICAgICAgICAgICB2YWx1ZSA9IG5leHRWYWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmaXJzdFRpbWUgJiYgb3B0cy5maXJlSW1tZWRpYXRlbHkpXG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24odmFsdWUsIHIpO1xuICAgICAgICBpZiAoIWZpcnN0VGltZSAmJiBjaGFuZ2VkID09PSB0cnVlKVxuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKHZhbHVlLCByKTtcbiAgICAgICAgaWYgKGZpcnN0VGltZSlcbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgIH1cbiAgICByLnNjaGVkdWxlKCk7XG4gICAgcmV0dXJuIHIuZ2V0RGlzcG9zZXIoKTtcbn1cbmZ1bmN0aW9uIHdyYXBFcnJvckhhbmRsZXIoZXJyb3JIYW5kbGVyLCBiYXNlRm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGJhc2VGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qKlxuICogQSBub2RlIGluIHRoZSBzdGF0ZSBkZXBlbmRlbmN5IHJvb3QgdGhhdCBvYnNlcnZlcyBvdGhlciBub2RlcywgYW5kIGNhbiBiZSBvYnNlcnZlZCBpdHNlbGYuXG4gKlxuICogQ29tcHV0ZWRWYWx1ZSB3aWxsIHJlbWVtYmVyIHRoZSByZXN1bHQgb2YgdGhlIGNvbXB1dGF0aW9uIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGJhdGNoLCBvclxuICogd2hpbGUgYmVpbmcgb2JzZXJ2ZWQuXG4gKlxuICogRHVyaW5nIHRoaXMgdGltZSBpdCB3aWxsIHJlY29tcHV0ZSBvbmx5IHdoZW4gb25lIG9mIGl0cyBkaXJlY3QgZGVwZW5kZW5jaWVzIGNoYW5nZWQsXG4gKiBidXQgb25seSB3aGVuIGl0IGlzIGJlaW5nIGFjY2Vzc2VkIHdpdGggYENvbXB1dGVkVmFsdWUuZ2V0KClgLlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGRlc2NyaXB0aW9uOlxuICogMS4gRmlyc3QgdGltZSBpdCdzIGJlaW5nIGFjY2Vzc2VkIGl0IHdpbGwgY29tcHV0ZSBhbmQgcmVtZW1iZXIgcmVzdWx0XG4gKiAgICBnaXZlIGJhY2sgcmVtZW1iZXJlZCByZXN1bHQgdW50aWwgMi4gaGFwcGVuc1xuICogMi4gRmlyc3QgdGltZSBhbnkgZGVlcCBkZXBlbmRlbmN5IGNoYW5nZSwgcHJvcGFnYXRlIFBPU1NJQkxZX1NUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHdhaXQgZm9yIDMuXG4gKiAzLiBXaGVuIGl0J3MgYmVpbmcgYWNjZXNzZWQsIHJlY29tcHV0ZSBpZiBhbnkgc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWQuXG4gKiAgICBpZiByZXN1bHQgY2hhbmdlZDogcHJvcGFnYXRlIFNUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHRoYXQgd2VyZSBQT1NTSUJMWV9TVEFMRSBmcm9tIHRoZSBsYXN0IHN0ZXAuXG4gKiAgICBnbyB0byBzdGVwIDIuIGVpdGhlciB3YXlcbiAqXG4gKiBJZiBhdCBhbnkgcG9pbnQgaXQncyBvdXRzaWRlIGJhdGNoIGFuZCBpdCBpc24ndCBvYnNlcnZlZDogcmVzZXQgZXZlcnl0aGluZyBhbmQgZ28gdG8gMS5cbiAqL1xudmFyIENvbXB1dGVkVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNvbXB1dGVkIHZhbHVlIGJhc2VkIG9uIGEgZnVuY3Rpb24gZXhwcmVzc2lvbi5cbiAgICAgKlxuICAgICAqIFRoZSBgbmFtZWAgcHJvcGVydHkgaXMgZm9yIGRlYnVnIHB1cnBvc2VzIG9ubHkuXG4gICAgICpcbiAgICAgKiBUaGUgYGVxdWFsc2AgcHJvcGVydHkgc3BlY2lmaWVzIHRoZSBjb21wYXJlciBmdW5jdGlvbiB0byB1c2UgdG8gZGV0ZXJtaW5lIGlmIGEgbmV3bHkgcHJvZHVjZWRcbiAgICAgKiB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHByZXZpb3VzIHZhbHVlLiBUd28gY29tcGFyZXJzIGFyZSBwcm92aWRlZCBpbiB0aGUgbGlicmFyeTsgYGRlZmF1bHRDb21wYXJlcmBcbiAgICAgKiBjb21wYXJlcyBiYXNlZCBvbiBpZGVudGl0eSBjb21wYXJpc29uICg9PT0pLCBhbmQgYHN0cnVjdHVhbENvbXBhcmVyYCBkZWVwbHkgY29tcGFyZXMgdGhlIHN0cnVjdHVyZS5cbiAgICAgKiBTdHJ1Y3R1cmFsIGNvbXBhcmlzb24gY2FuIGJlIGNvbnZlbmllbnQgaWYgeW91IGFsd2F5cyBwcm9kdWNlIGFuIG5ldyBhZ2dyZWdhdGVkIG9iamVjdCBhbmRcbiAgICAgKiBkb24ndCB3YW50IHRvIG5vdGlmeSBvYnNlcnZlcnMgaWYgaXQgaXMgc3RydWN0dXJhbGx5IHRoZSBzYW1lLlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciB3b3JraW5nIHdpdGggdmVjdG9ycywgbW91c2UgY29vcmRpbmF0ZXMgZXRjLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENvbXB1dGVkVmFsdWUob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llc1N0YXRlID0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XG4gICAgICAgIHRoaXMub2JzZXJ2aW5nID0gW107IC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xuICAgICAgICB0aGlzLm5ld09ic2VydmluZyA9IG51bGw7IC8vIGR1cmluZyB0cmFja2luZyBpdCdzIGFuIGFycmF5IHdpdGggbmV3IG9ic2VydmVkIG9ic2VydmVyc1xuICAgICAgICB0aGlzLmlzQmVpbmdPYnNlcnZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnNJbmRleGVzID0ge307XG4gICAgICAgIHRoaXMuZGlmZlZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5ydW5JZCA9IDA7XG4gICAgICAgIHRoaXMubGFzdEFjY2Vzc2VkQnkgPSAwO1xuICAgICAgICB0aGlzLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEU7XG4gICAgICAgIHRoaXMudW5ib3VuZERlcHNDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX19tYXBpZCA9IFwiI1wiICsgZ2V0TmV4dElkKCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKG51bGwpO1xuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nID0gZmFsc2U7IC8vIHRvIGNoZWNrIGZvciBjeWNsZXNcbiAgICAgICAgdGhpcy5pc1J1bm5pbmdTZXR0ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1RyYWNpbmcgPSBUcmFjZU1vZGUuTk9ORTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiAmJiAhb3B0aW9ucy5nZXQpXG4gICAgICAgICAgICByZXR1cm4gZmFpbCQxKFwibWlzc2luZyBvcHRpb24gZm9yIGNvbXB1dGVkOiBnZXRcIik7XG4gICAgICAgIHRoaXMuZGVyaXZhdGlvbiA9IG9wdGlvbnMuZ2V0O1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgXCJDb21wdXRlZFZhbHVlQFwiICsgZ2V0TmV4dElkKCk7XG4gICAgICAgIGlmIChvcHRpb25zLnNldClcbiAgICAgICAgICAgIHRoaXMuc2V0dGVyID0gY3JlYXRlQWN0aW9uKHRoaXMubmFtZSArIFwiLXNldHRlclwiLCBvcHRpb25zLnNldCk7XG4gICAgICAgIHRoaXMuZXF1YWxzID1cbiAgICAgICAgICAgIG9wdGlvbnMuZXF1YWxzIHx8XG4gICAgICAgICAgICAgICAgKG9wdGlvbnMuY29tcGFyZVN0cnVjdHVyYWwgfHwgb3B0aW9ucy5zdHJ1Y3RcbiAgICAgICAgICAgICAgICAgICAgPyBjb21wYXJlci5zdHJ1Y3R1cmFsXG4gICAgICAgICAgICAgICAgICAgIDogY29tcGFyZXIuZGVmYXVsdCk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBvcHRpb25zLmNvbnRleHQ7XG4gICAgICAgIHRoaXMucmVxdWlyZXNSZWFjdGlvbiA9ICEhb3B0aW9ucy5yZXF1aXJlc1JlYWN0aW9uO1xuICAgICAgICBpZiAob3B0aW9ucy5rZWVwQWxpdmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIGRhbmdlcm91czogbmV2ZXIgZXhwb3NlZCwgc28gdGhpcyBjbXB1dGVkIHZhbHVlIHNob3VsZCBub3QgZGVwZW5kIG9uIG9ic2VydmFibGVzXG4gICAgICAgICAgICAvLyB0aGF0IGxpdmUgZ2xvYmFsbHksIG9yIGl0IHdpbGwgbmV2ZXIgZ2V0IGRpc3Bvc2VkISAobm9yIGFueXRoaW5nIGF0dGFjaGVkIHRvIGl0KVxuICAgICAgICAgICAgYXV0b3J1bihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5nZXQoKTsgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUub25CZWNvbWVTdGFsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKHRoaXMpO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUub25CZWNvbWVVbm9ic2VydmVkID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLm9uQmVjb21lT2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGlzIGNvbXB1dGVkIHZhbHVlLlxuICAgICAqIFdpbGwgZXZhbHVhdGUgaXRzIGNvbXB1dGF0aW9uIGZpcnN0IGlmIG5lZWRlZC5cbiAgICAgKi9cbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ29tcHV0aW5nKVxuICAgICAgICAgICAgZmFpbCQxKFwiQ3ljbGUgZGV0ZWN0ZWQgaW4gY29tcHV0YXRpb24gXCIgKyB0aGlzLm5hbWUgKyBcIjogXCIgKyB0aGlzLmRlcml2YXRpb24pO1xuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuaW5CYXRjaCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5BYm91dFVudHJhY2tlZFJlYWQoKTtcbiAgICAgICAgICAgICAgICBzdGFydEJhdGNoKCk7IC8vIFNlZSBwZXJmIHRlc3QgJ2NvbXB1dGVkIG1lbW9pemF0aW9uJ1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNvbXB1dGVWYWx1ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcG9ydE9ic2VydmVkKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tBbmRDb21wdXRlKCkpXG4gICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKGlzQ2F1Z2h0RXhjZXB0aW9uKHJlc3VsdCkpXG4gICAgICAgICAgICB0aHJvdyByZXN1bHQuY2F1c2U7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzID0gdGhpcy5jb21wdXRlVmFsdWUoZmFsc2UpO1xuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzKSlcbiAgICAgICAgICAgIHRocm93IHJlcy5jYXVzZTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zZXR0ZXIpIHtcbiAgICAgICAgICAgIGludmFyaWFudCghdGhpcy5pc1J1bm5pbmdTZXR0ZXIsIFwiVGhlIHNldHRlciBvZiBjb21wdXRlZCB2YWx1ZSAnXCIgKyB0aGlzXG4gICAgICAgICAgICAgICAgLm5hbWUgKyBcIicgaXMgdHJ5aW5nIHRvIHVwZGF0ZSBpdHNlbGYuIERpZCB5b3UgaW50ZW5kIHRvIHVwZGF0ZSBhbiBfb2JzZXJ2YWJsZV8gdmFsdWUsIGluc3RlYWQgb2YgdGhlIGNvbXB1dGVkIHByb3BlcnR5P1wiKTtcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nU2V0dGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0ZXIuY2FsbCh0aGlzLnNjb3BlLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVubmluZ1NldHRlciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGludmFyaWFudChmYWxzZSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICAgICAgXCJbQ29tcHV0ZWRWYWx1ZSAnXCIgKyB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC5uYW1lICsgXCInXSBJdCBpcyBub3QgcG9zc2libGUgdG8gYXNzaWduIGEgbmV3IHZhbHVlIHRvIGEgY29tcHV0ZWQgdmFsdWUuXCIpO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudHJhY2tBbmRDb21wdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnNjb3BlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiY29tcHV0ZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgdmFyIHdhc1N1c3BlbmRlZCA9IFxuICAgICAgICAvKiBzZWUgIzEyMDggKi8gdGhpcy5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9ICh0aGlzLnZhbHVlID0gdGhpcy5jb21wdXRlVmFsdWUodHJ1ZSkpO1xuICAgICAgICByZXR1cm4gKHdhc1N1c3BlbmRlZCB8fFxuICAgICAgICAgICAgaXNDYXVnaHRFeGNlcHRpb24ob2xkVmFsdWUpIHx8XG4gICAgICAgICAgICBpc0NhdWdodEV4Y2VwdGlvbihuZXdWYWx1ZSkgfHxcbiAgICAgICAgICAgICF0aGlzLmVxdWFscyhvbGRWYWx1ZSwgbmV3VmFsdWUpKTtcbiAgICB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLmNvbXB1dGVWYWx1ZSA9IGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nID0gdHJ1ZTtcbiAgICAgICAgZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aCsrO1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIHJlcyA9IHRyYWNrRGVyaXZlZEZ1bmN0aW9uKHRoaXMsIHRoaXMuZGVyaXZhdGlvbiwgdGhpcy5zY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMuZGVyaXZhdGlvbi5jYWxsKHRoaXMuc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gdGhpcy5kZXJpdmF0aW9uLmNhbGwodGhpcy5zY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IG5ldyBDYXVnaHRFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFN0YXRlLmNvbXB1dGF0aW9uRGVwdGgtLTtcbiAgICAgICAgdGhpcy5pc0NvbXB1dGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUuc3VzcGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcyk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7IC8vIGRvbid0IGhvbGQgb24gdG8gY29tcHV0ZWQgdmFsdWUhXG4gICAgfTtcbiAgICBDb21wdXRlZFZhbHVlLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBhdXRvcnVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IF90aGlzLmdldCgpO1xuICAgICAgICAgICAgaWYgKCFmaXJzdFRpbWUgfHwgZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZVID0gdW50cmFja2VkU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogX3RoaXMsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHByZXZWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHByZXZWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLndhcm5BYm91dFVudHJhY2tlZFJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnJlcXVpcmVzUmVhY3Rpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGZhaWwkMShcIlttb2J4XSBDb21wdXRlZCB2YWx1ZSBcIiArIHRoaXMubmFtZSArIFwiIGlzIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNUcmFjaW5nICE9PSBUcmFjZU1vZGUuTk9ORSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbbW9ieC50cmFjZV0gJ1wiICsgdGhpc1xuICAgICAgICAgICAgICAgIC5uYW1lICsgXCInIGlzIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuIERvaW5nIGEgZnVsbCByZWNvbXB1dGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIENvbXB1dGVkIHZhbHVlIFwiICsgdGhpc1xuICAgICAgICAgICAgICAgIC5uYW1lICsgXCIgaXMgYmVpbmcgcmVhZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dC4gRG9pbmcgYSBmdWxsIHJlY29tcHV0ZVwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoKTtcbiAgICB9O1xuICAgIENvbXB1dGVkVmFsdWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCJbXCIgKyB0aGlzLmRlcml2YXRpb24udG9TdHJpbmcoKSArIFwiXVwiO1xuICAgIH07XG4gICAgQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXB1dGVkVmFsdWU7XG59KCkpO1xuQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGVbcHJpbWl0aXZlU3ltYm9sKCldID0gQ29tcHV0ZWRWYWx1ZS5wcm90b3R5cGUudmFsdWVPZjtcbnZhciBpc0NvbXB1dGVkVmFsdWUgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiQ29tcHV0ZWRWYWx1ZVwiLCBDb21wdXRlZFZhbHVlKTtcblxuZnVuY3Rpb24gaGFzSW50ZXJjZXB0b3JzKGludGVyY2VwdGFibGUpIHtcbiAgICByZXR1cm4gaW50ZXJjZXB0YWJsZS5pbnRlcmNlcHRvcnMgIT09IHVuZGVmaW5lZCAmJiBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9ycy5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJJbnRlcmNlcHRvcihpbnRlcmNlcHRhYmxlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGludGVyY2VwdG9ycyA9IGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzIHx8IChpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9ycyA9IFtdKTtcbiAgICBpbnRlcmNlcHRvcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZHggPSBpbnRlcmNlcHRvcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpXG4gICAgICAgICAgICBpbnRlcmNlcHRvcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpbnRlcmNlcHRDaGFuZ2UoaW50ZXJjZXB0YWJsZSwgY2hhbmdlKSB7XG4gICAgdmFyIHByZXZVID0gdW50cmFja2VkU3RhcnQoKTtcbiAgICB0cnkge1xuICAgICAgICB2YXIgaW50ZXJjZXB0b3JzID0gaW50ZXJjZXB0YWJsZS5pbnRlcmNlcHRvcnM7XG4gICAgICAgIGlmIChpbnRlcmNlcHRvcnMpXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGludGVyY2VwdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UgPSBpbnRlcmNlcHRvcnNbaV0oY2hhbmdlKTtcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoIWNoYW5nZSB8fCBjaGFuZ2UudHlwZSwgXCJJbnRlcmNlcHQgaGFuZGxlcnMgc2hvdWxkIHJldHVybiBub3RoaW5nIG9yIGEgY2hhbmdlIG9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB1bnRyYWNrZWRFbmQocHJldlUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFzTGlzdGVuZXJzKGxpc3RlbmFibGUpIHtcbiAgICByZXR1cm4gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycy5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcihsaXN0ZW5hYmxlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzIHx8IChsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVycyA9IFtdKTtcbiAgICBsaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZHggPSBsaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpXG4gICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMobGlzdGVuYWJsZSwgY2hhbmdlKSB7XG4gICAgdmFyIHByZXZVID0gdW50cmFja2VkU3RhcnQoKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnM7XG4gICAgaWYgKCFsaXN0ZW5lcnMpXG4gICAgICAgIHJldHVybjtcbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldKGNoYW5nZSk7XG4gICAgfVxuICAgIHVudHJhY2tlZEVuZChwcmV2VSk7XG59XG5cbnZhciBVTkNIQU5HRUQgPSB7fTtcbmRlY2xhcmVBdG9tKCk7XG52YXIgT2JzZXJ2YWJsZVZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPYnNlcnZhYmxlVmFsdWUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZVZhbHVlKHZhbHVlLCBlbmhhbmNlciwgbmFtZSwgbm90aWZ5U3B5KSB7XG4gICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiT2JzZXJ2YWJsZVZhbHVlQFwiICsgZ2V0TmV4dElkKCk7IH1cbiAgICAgICAgaWYgKG5vdGlmeVNweSA9PT0gdm9pZCAwKSB7IG5vdGlmeVNweSA9IHRydWU7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbmFtZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZW5oYW5jZXIgPSBlbmhhbmNlcjtcbiAgICAgICAgX3RoaXMuaGFzVW5yZXBvcnRlZENoYW5nZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy52YWx1ZSA9IGVuaGFuY2VyKHZhbHVlLCB1bmRlZmluZWQsIG5hbWUpO1xuICAgICAgICBpZiAobm90aWZ5U3B5ICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAvLyBvbmx5IG5vdGlmeSBzcHkgaWYgdGhpcyBpcyBhIHN0YW5kLWFsb25lIG9ic2VydmFibGVcbiAgICAgICAgICAgIHNweVJlcG9ydCh7IHR5cGU6IFwiY3JlYXRlXCIsIG5hbWU6IF90aGlzLm5hbWUsIG5ld1ZhbHVlOiBcIlwiICsgX3RoaXMudmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLmRlaGFuY2VWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBuZXdWYWx1ZSA9IHRoaXMucHJlcGFyZU5ld1ZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBVTkNIQU5HRUQpIHtcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0TmV3VmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSlcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5wcmVwYXJlTmV3VmFsdWUgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcyk7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gVU5DSEFOR0VEO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjaGFuZ2UubmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwbHkgbW9kaWZpZXJcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyKG5ld1ZhbHVlLCB0aGlzLnZhbHVlLCB0aGlzLm5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSAhPT0gbmV3VmFsdWUgPyBuZXdWYWx1ZSA6IFVOQ0hBTkdFRDtcbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUuc2V0TmV3VmFsdWUgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB0aGlzLnJlcG9ydENoYW5nZWQoKTtcbiAgICAgICAgaWYgKGhhc0xpc3RlbmVycyh0aGlzKSkge1xuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IG9sZFZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlKHRoaXMudmFsdWUpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZS5pbnRlcmNlcHQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpXG4gICAgICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIltcIiArIHRoaXMudmFsdWUgKyBcIl1cIjtcbiAgICB9O1xuICAgIE9ic2VydmFibGVWYWx1ZS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGVWYWx1ZTtcbn0oQXRvbSkpO1xuT2JzZXJ2YWJsZVZhbHVlLnByb3RvdHlwZVtwcmltaXRpdmVTeW1ib2woKV0gPSBPYnNlcnZhYmxlVmFsdWUucHJvdG90eXBlLnZhbHVlT2Y7XG52YXIgaXNPYnNlcnZhYmxlVmFsdWUgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZVZhbHVlXCIsIE9ic2VydmFibGVWYWx1ZSk7XG5cbnZhciBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKHRhcmdldCwgbmFtZSwgZGVmYXVsdEVuaGFuY2VyKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmRlZmF1bHRFbmhhbmNlciA9IGRlZmF1bHRFbmhhbmNlcjtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB7fTtcbiAgICB9XG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG93bmVyLCBrZXkpIHtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0ICE9PSBvd25lcikge1xuICAgICAgICAgICAgdGhpcy5pbGxlZ2FsQWNjZXNzKG93bmVyLCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1trZXldLmdldCgpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChvd25lciwga2V5LCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLnRhcmdldDtcbiAgICAgICAgaWYgKGluc3RhbmNlICE9PSBvd25lcikge1xuICAgICAgICAgICAgdGhpcy5pbGxlZ2FsQWNjZXNzKG93bmVyLCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpcy52YWx1ZXNba2V5XTtcbiAgICAgICAgaWYgKG9ic2VydmFibGUgaW5zdGFuY2VvZiBDb21wdXRlZFZhbHVlKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldChuZXdWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW50ZXJjZXB0XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG5ld1ZhbHVlID0gb2JzZXJ2YWJsZS5wcmVwYXJlTmV3VmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAvLyBub3RpZnkgc3B5ICYgb2JzZXJ2ZXJzXG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gVU5DSEFOR0VEKSB7XG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IG9ic2VydmFibGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkpXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oe30sIGNoYW5nZSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcbiAgICAgICAgICAgIG9ic2VydmFibGUuc2V0TmV3VmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeSlcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkpXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIXRoaXMudmFsdWVzW2tleV0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldDtcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZSh0aGlzLCB7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKCk7XG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG5vdGlmeVNweSA9IGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZXNba2V5XS5nZXQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmtleXMpXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzLnJlbW92ZShrZXkpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudmFsdWVzW2tleV07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy50YXJnZXRba2V5XTtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5KVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKHt9LCBjaGFuZ2UsIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XG4gICAgICAgICAgICBpZiAobm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSlcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVuZEJhdGNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuaWxsZWdhbEFjY2VzcyA9IGZ1bmN0aW9uIChvd25lciwgcHJvcE5hbWUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaGFwcGVucyBpZiBhIHByb3BlcnR5IGlzIGFjY2Vzc2VkIHRocm91Z2ggdGhlIHByb3RvdHlwZSBjaGFpbiwgYnV0IHRoZSBwcm9wZXJ0eSB3YXNcbiAgICAgICAgICogZGVjbGFyZWQgZGlyZWN0bHkgYXMgb3duIHByb3BlcnR5IG9uIHRoZSBwcm90b3R5cGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEUuZy46XG4gICAgICAgICAqIGNsYXNzIEEge1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGV4dGVuZE9ic2VydmFibGUoQS5wcm90b3R5cGUsIHsgeDogMSB9KVxuICAgICAgICAgKlxuICAgICAgICAgKiBjbGFzc0IgZXh0ZW5zIEEge1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGNvbnNvbGUubG9nKG5ldyBCKCkueClcbiAgICAgICAgICpcbiAgICAgICAgICogSXQgaXMgdW5jbGVhciB3aGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgY29uc2lkZXJlZCAnc3RhdGljJyBvciBpbmhlcml0ZWQuXG4gICAgICAgICAqIEVpdGhlciB1c2UgYGNvbnNvbGUubG9nKEEueClgXG4gICAgICAgICAqIG9yOiBkZWNvcmF0ZShBLCB7IHg6IG9ic2VydmFibGUgfSlcbiAgICAgICAgICpcbiAgICAgICAgICogV2hlbiB1c2luZyBkZWNvcmF0ZSwgdGhlIHByb3BlcnR5IHdpbGwgYWx3YXlzIGJlIHJlZGVjbGFyZWQgYXMgb3duIHByb3BlcnR5IG9uIHRoZSBhY3R1YWwgaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBmYWlsJDEoXCJQcm9wZXJ0eSAnXCIgKyBwcm9wTmFtZSArIFwiJyBvZiAnXCIgKyBvd25lciArIFwiJyB3YXMgYWNjZXNzZWQgdGhyb3VnaCB0aGUgcHJvdG90eXBlIGNoYWluLiBVc2UgJ2RlY29yYXRlJyBpbnN0ZWFkIHRvIGRlY2xhcmUgdGhlIHByb3Agb3IgYWNjZXNzIGl0IHN0YXRpY2FsbHkgdGhyb3VnaCBpdCdzIG93bmVyXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT2JzZXJ2ZXMgdGhpcyBvYmplY3QuIFRyaWdnZXJzIGZvciB0aGUgZXZlbnRzICdhZGQnLCAndXBkYXRlJyBhbmQgJ2RlbGV0ZScuXG4gICAgICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qvb2JzZXJ2ZVxuICAgICAqIGZvciBjYWxsYmFjayBkZXRhaWxzXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBpbnZhcmlhbnQoZmlyZUltbWVkaWF0ZWx5ICE9PSB0cnVlLCBcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgdGhlIGZpcmUgaW1tZWRpYXRlbHkgcHJvcGVydHkgZm9yIG9ic2VydmFibGUgb2JqZWN0cy5cIik7XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLmdldEtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmtleXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5rZXlzID0gbmV3IE9ic2VydmFibGVBcnJheShPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIF90aGlzLnZhbHVlc1trZXldIGluc3RhbmNlb2YgT2JzZXJ2YWJsZVZhbHVlOyB9KSwgcmVmZXJlbmNlRW5oYW5jZXIsIFwia2V5cyhcIiArIHRoaXMubmFtZSArIFwiKVwiLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5rZXlzLnNsaWNlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uO1xufSgpKTtcbmZ1bmN0aW9uIGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQsIG5hbWUsIGRlZmF1bHRFbmhhbmNlcikge1xuICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiXCI7IH1cbiAgICBpZiAoZGVmYXVsdEVuaGFuY2VyID09PSB2b2lkIDApIHsgZGVmYXVsdEVuaGFuY2VyID0gZGVlcEVuaGFuY2VyOyB9XG4gICAgdmFyIGFkbSA9IHRhcmdldC4kbW9ieDtcbiAgICBpZiAoYWRtKVxuICAgICAgICByZXR1cm4gYWRtO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBpbnZhcmlhbnQoT2JqZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpLCBcIkNhbm5vdCBtYWtlIHRoZSBkZXNpZ25hdGVkIG9iamVjdCBvYnNlcnZhYmxlOyBpdCBpcyBub3QgZXh0ZW5zaWJsZVwiKTtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodGFyZ2V0KSlcbiAgICAgICAgbmFtZSA9ICh0YXJnZXQuY29uc3RydWN0b3IubmFtZSB8fCBcIk9ic2VydmFibGVPYmplY3RcIikgKyBcIkBcIiArIGdldE5leHRJZCgpO1xuICAgIGlmICghbmFtZSlcbiAgICAgICAgbmFtZSA9IFwiT2JzZXJ2YWJsZU9iamVjdEBcIiArIGdldE5leHRJZCgpO1xuICAgIGFkbSA9IG5ldyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24odGFyZ2V0LCBuYW1lLCBkZWZhdWx0RW5oYW5jZXIpO1xuICAgIGFkZEhpZGRlbkZpbmFsUHJvcCh0YXJnZXQsIFwiJG1vYnhcIiwgYWRtKTtcbiAgICByZXR1cm4gYWRtO1xufVxuZnVuY3Rpb24gZGVmaW5lT2JzZXJ2YWJsZVByb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUsIG5ld1ZhbHVlLCBlbmhhbmNlcikge1xuICAgIHZhciBhZG0gPSBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0KTtcbiAgICBhc3NlcnRQcm9wZXJ0eUNvbmZpZ3VyYWJsZSh0YXJnZXQsIHByb3BOYW1lKTtcbiAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKGFkbSkpIHtcbiAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZShhZG0sIHtcbiAgICAgICAgICAgIG9iamVjdDogdGFyZ2V0LFxuICAgICAgICAgICAgbmFtZTogcHJvcE5hbWUsXG4gICAgICAgICAgICB0eXBlOiBcImFkZFwiLFxuICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbmV3VmFsdWUgPSBjaGFuZ2UubmV3VmFsdWU7XG4gICAgfVxuICAgIHZhciBvYnNlcnZhYmxlID0gKGFkbS52YWx1ZXNbcHJvcE5hbWVdID0gbmV3IE9ic2VydmFibGVWYWx1ZShuZXdWYWx1ZSwgZW5oYW5jZXIsIGFkbS5uYW1lICsgXCIuXCIgKyBwcm9wTmFtZSwgZmFsc2UpKTtcbiAgICBuZXdWYWx1ZSA9IG9ic2VydmFibGUudmFsdWU7IC8vIG9ic2VydmFibGVWYWx1ZSBtaWdodCBoYXZlIGNoYW5nZWQgaXRcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wTmFtZSwgZ2VuZXJhdGVPYnNlcnZhYmxlUHJvcENvbmZpZyhwcm9wTmFtZSkpO1xuICAgIGlmIChhZG0ua2V5cylcbiAgICAgICAgYWRtLmtleXMucHVzaChwcm9wTmFtZSk7XG4gICAgbm90aWZ5UHJvcGVydHlBZGRpdGlvbihhZG0sIHRhcmdldCwgcHJvcE5hbWUsIG5ld1ZhbHVlKTtcbn1cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCAvLyB3aGljaCBvYmplY3RzIGhvbGRzIHRoZSBvYnNlcnZhYmxlIGFuZCBwcm92aWRlcyBgdGhpc2AgY29udGV4dD9cbnByb3BOYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkbSA9IGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQpO1xuICAgIG9wdGlvbnMubmFtZSA9IGFkbS5uYW1lICsgXCIuXCIgKyBwcm9wTmFtZTtcbiAgICBvcHRpb25zLmNvbnRleHQgPSB0YXJnZXQ7XG4gICAgYWRtLnZhbHVlc1twcm9wTmFtZV0gPSBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRpb25zKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wTmFtZSwgZ2VuZXJhdGVDb21wdXRlZFByb3BDb25maWcocHJvcE5hbWUpKTtcbn1cbnZhciBvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzID0ge307XG52YXIgY29tcHV0ZWRQcm9wZXJ0eUNvbmZpZ3MgPSB7fTtcbmZ1bmN0aW9uIGdlbmVyYXRlT2JzZXJ2YWJsZVByb3BDb25maWcocHJvcE5hbWUpIHtcbiAgICByZXR1cm4gKG9ic2VydmFibGVQcm9wZXJ0eUNvbmZpZ3NbcHJvcE5hbWVdIHx8XG4gICAgICAgIChvYnNlcnZhYmxlUHJvcGVydHlDb25maWdzW3Byb3BOYW1lXSA9IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kbW9ieC5yZWFkKHRoaXMsIHByb3BOYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kbW9ieC53cml0ZSh0aGlzLCBwcm9wTmFtZSwgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbn1cbmZ1bmN0aW9uIGdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIob3duZXIpIHtcbiAgICB2YXIgYWRtID0gb3duZXIuJG1vYng7XG4gICAgaWYgKCFhZG0pIHtcbiAgICAgICAgLy8gYmVjYXVzZSBjb21wdXRlZCBwcm9wcyBhcmUgZGVjbGFyZWQgb24gcHJvdHksXG4gICAgICAgIC8vIHRoZSBjdXJyZW50IGluc3RhbmNlIG1pZ2h0IG5vdCBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgICAgIGluaXRpYWxpemVJbnN0YW5jZShvd25lcik7XG4gICAgICAgIHJldHVybiBvd25lci4kbW9ieDtcbiAgICB9XG4gICAgcmV0dXJuIGFkbTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlQ29tcHV0ZWRQcm9wQ29uZmlnKHByb3BOYW1lKSB7XG4gICAgcmV0dXJuIChjb21wdXRlZFByb3BlcnR5Q29uZmlnc1twcm9wTmFtZV0gfHxcbiAgICAgICAgKGNvbXB1dGVkUHJvcGVydHlDb25maWdzW3Byb3BOYW1lXSA9IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIodGhpcykucmVhZCh0aGlzLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgIGdldEFkbWluaXN0cmF0aW9uRm9yQ29tcHV0ZWRQcm9wT3duZXIodGhpcykud3JpdGUodGhpcywgcHJvcE5hbWUsIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG59XG5mdW5jdGlvbiBub3RpZnlQcm9wZXJ0eUFkZGl0aW9uKGFkbSwgb2JqZWN0LCBrZXksIG5ld1ZhbHVlKSB7XG4gICAgdmFyIG5vdGlmeSA9IGhhc0xpc3RlbmVycyhhZG0pO1xuICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcbiAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkXCIsXG4gICAgICAgICAgICBvYmplY3Q6IG9iamVjdCxcbiAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICB9XG4gICAgICAgIDogbnVsbDtcbiAgICBpZiAobm90aWZ5U3B5KVxuICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbih7fSwgY2hhbmdlLCB7IG5hbWU6IGFkbS5uYW1lLCBrZXk6IGtleSB9KSk7XG4gICAgaWYgKG5vdGlmeSlcbiAgICAgICAgbm90aWZ5TGlzdGVuZXJzKGFkbSwgY2hhbmdlKTtcbiAgICBpZiAobm90aWZ5U3B5KVxuICAgICAgICBzcHlSZXBvcnRFbmQoKTtcbn1cbnZhciBpc09ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb25cIiwgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKTtcbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZU9iamVjdCh0aGluZykge1xuICAgIGlmIChpc09iamVjdCh0aGluZykpIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZXJzIHJ1biBsYXppbHkgd2hlbiB0cmFuc3BpbGluZyB0byBiYWJlbCwgc28gbWFrZSBzdXJlIHRoZXkgYXJlIHJ1bi4uLlxuICAgICAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpbmcpO1xuICAgICAgICByZXR1cm4gaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24odGhpbmcuJG1vYngpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY29yYXRvckZvckVuaGFuY2VyKGVuaGFuY2VyKSB7XG4gICAgdmFyIGRlY29yYXRvciA9IGNyZWF0ZVByb3BEZWNvcmF0b3IodHJ1ZSwgZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLCBfZGVjb3JhdG9yVGFyZ2V0LCBkZWNvcmF0b3JBcmdzKSB7XG4gICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBkZXNjcmlwdG9yXG4gICAgICAgICAgICA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwodGFyZ2V0KSA6IGRlc2NyaXB0b3IudmFsdWVcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBkZWZpbmVPYnNlcnZhYmxlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIGluaXRpYWxWYWx1ZSwgZW5oYW5jZXIpO1xuICAgIH0pO1xuICAgIHZhciByZXMgPSBcbiAgICAvLyBFeHRyYSBwcm9jZXNzIGNoZWNrcywgYXMgdGhpcyBoYXBwZW5zIGR1cmluZyBtb2R1bGUgaW5pdGlhbGl6YXRpb25cbiAgICB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCJcbiAgICAgICAgPyBmdW5jdGlvbiBvYnNlcnZhYmxlRGVjb3JhdG9yKCkge1xuICAgICAgICAgICAgLy8gVGhpcyB3cmFwcGVyIGZ1bmN0aW9uIGlzIGp1c3QgdG8gZGV0ZWN0IGlsbGVnYWwgZGVjb3JhdG9yIGludm9jYXRpb25zLCBkZXByZWNhdGUgaW4gYSBuZXh0IHZlcnNpb25cbiAgICAgICAgICAgIC8vIGFuZCBzaW1wbHkgcmV0dXJuIHRoZSBjcmVhdGVkIHByb3AgZGVjb3JhdG9yXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwkMShcIkluY29ycmVjdCBkZWNvcmF0b3IgaW52b2NhdGlvbi4gQG9ic2VydmFibGUgZGVjb3JhdG9yIGRvZXNuJ3QgZXhwZWN0IGFueSBhcmd1bWVudHNcIik7XG4gICAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgOiBkZWNvcmF0b3I7XG4gICAgcmVzLmVuaGFuY2VyID0gZW5oYW5jZXI7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gX2lzT2JzZXJ2YWJsZSh2YWx1ZSwgcHJvcGVydHkpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIChpc09ic2VydmFibGVNYXAodmFsdWUpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHZhbHVlKSkpXG4gICAgICAgICAgICByZXR1cm4gZmFpbCQxKFwiaXNPYnNlcnZhYmxlKG9iamVjdCwgcHJvcGVydHlOYW1lKSBpcyBub3Qgc3VwcG9ydGVkIGZvciBhcnJheXMgYW5kIG1hcHMuIFVzZSBtYXAuaGFzIG9yIGFycmF5Lmxlbmd0aCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhciBvID0gdmFsdWUuJG1vYng7XG4gICAgICAgICAgICByZXR1cm4gby52YWx1ZXMgJiYgISFvLnZhbHVlc1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBGb3IgZmlyc3QgY2hlY2ssIHNlZSAjNzAxXG4gICAgcmV0dXJuIChpc09ic2VydmFibGVPYmplY3QodmFsdWUpIHx8XG4gICAgICAgICEhdmFsdWUuJG1vYnggfHxcbiAgICAgICAgaXNBdG9tKHZhbHVlKSB8fFxuICAgICAgICBpc1JlYWN0aW9uKHZhbHVlKSB8fFxuICAgICAgICBpc0NvbXB1dGVkVmFsdWUodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxuICAgICAgICBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcImlzT2JzZXJ2YWJsZSBleHBlY3RzIG9ubHkgMSBhcmd1bWVudC4gVXNlIGlzT2JzZXZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlcIik7XG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUpO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlUHJvcCh2YWx1ZSwgcHJvcE5hbWUpIHtcbiAgICBpZiAodHlwZW9mIHByb3BOYW1lICE9PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gZmFpbCQxKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcImV4cGVjdGVkIGEgcHJvcGVydHkgbmFtZSBhcyBzZWNvbmQgYXJndW1lbnRcIik7XG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BOYW1lKTtcbn1cblxuZnVuY3Rpb24gX2lzQ29tcHV0ZWQodmFsdWUsIHByb3BlcnR5KSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHZhbHVlKSA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghdmFsdWUuJG1vYngudmFsdWVzW3Byb3BlcnR5XSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGF0b20gPSBnZXRBdG9tKHZhbHVlLCBwcm9wZXJ0eSk7XG4gICAgICAgIHJldHVybiBpc0NvbXB1dGVkVmFsdWUoYXRvbSk7XG4gICAgfVxuICAgIHJldHVybiBpc0NvbXB1dGVkVmFsdWUodmFsdWUpO1xufVxuZnVuY3Rpb24gaXNDb21wdXRlZCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSlcbiAgICAgICAgcmV0dXJuIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIFwiaXNDb21wdXRlZCBleHBlY3RzIG9ubHkgMSBhcmd1bWVudC4gVXNlIGlzT2JzZXZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlcIik7XG4gICAgcmV0dXJuIF9pc0NvbXB1dGVkKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzQ29tcHV0ZWRQcm9wKHZhbHVlLCBwcm9wTmFtZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcE5hbWUgIT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcImlzQ29tcHV0ZWQgZXhwZWN0ZWQgYSBwcm9wZXJ0eSBuYW1lIGFzIHNlY29uZCBhcmd1bWVudFwiKTtcbiAgICByZXR1cm4gX2lzQ29tcHV0ZWQodmFsdWUsIHByb3BOYW1lKTtcbn1cblxudmFyIGNvbXB1dGVkRGVjb3JhdG9yID0gY3JlYXRlUHJvcERlY29yYXRvcihmYWxzZSwgZnVuY3Rpb24gKGluc3RhbmNlLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IsIGRlY29yYXRvclRhcmdldCwgZGVjb3JhdG9yQXJncykge1xuICAgIHZhciBnZXQgPSBkZXNjcmlwdG9yLmdldCwgc2V0ID0gZGVzY3JpcHRvci5zZXQ7IC8vIGluaXRpYWxWYWx1ZSBpcyB0aGUgZGVzY3JpcHRvciBmb3IgZ2V0IC8gc2V0IHByb3BzXG4gICAgLy8gT3B0aW1pemF0aW9uOiBmYXN0ZXIgb24gZGVjb3JhdG9yIHRhcmdldCBvciBpbnN0YW5jZT8gQXNzdW1pbmcgdGFyZ2V0XG4gICAgLy8gT3B0aW1pemlhdGlvbjogZmluZCBvdXQgaWYgZGVjbGFyaW5nIG9uIGluc3RhbmNlIGlzbid0IGp1c3QgZmFzdGVyLiAoYWxzbyBtYWtlcyB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciBzaW1wbGVyKS4gQnV0LCBtb3JlIG1lbW9yeSB1c2FnZS4uXG4gICAgdmFyIG9wdGlvbnMgPSBkZWNvcmF0b3JBcmdzWzBdIHx8IHt9O1xuICAgIGRlZmluZUNvbXB1dGVkUHJvcGVydHkoaW5zdGFuY2UsIHByb3BlcnR5TmFtZSwgX19hc3NpZ24oe30sIG9wdGlvbnMsIHsgZ2V0OiBnZXQsIHNldDogc2V0IH0pKTtcbn0pO1xudmFyIGNvbXB1dGVkU3RydWN0RGVjb3JhdG9yID0gY29tcHV0ZWREZWNvcmF0b3IoeyBlcXVhbHM6IGNvbXBhcmVyLnN0cnVjdHVyYWwgfSk7XG4vKipcbiAqIERlY29yYXRvciBmb3IgY2xhc3MgcHJvcGVydGllczogQGNvbXB1dGVkIGdldCB2YWx1ZSgpIHsgcmV0dXJuIGV4cHI7IH0uXG4gKiBGb3IgbGVnYWN5IHB1cnBvc2VzIGFsc28gaW52b2thYmxlIGFzIEVTNSBvYnNlcnZhYmxlIGNyZWF0ZWQ6IGBjb21wdXRlZCgoKSA9PiBleHByKWA7XG4gKi9cbnZhciBjb21wdXRlZCA9IGZ1bmN0aW9uIGNvbXB1dGVkKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAodHlwZW9mIGFyZzIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gQGNvbXB1dGVkXG4gICAgICAgIHJldHVybiBjb21wdXRlZERlY29yYXRvci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAoYXJnMSAhPT0gbnVsbCAmJiB0eXBlb2YgYXJnMSA9PT0gXCJvYmplY3RcIiAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIEBjb21wdXRlZCh7IG9wdGlvbnMgfSlcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkRGVjb3JhdG9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIC8vIGNvbXB1dGVkKGV4cHIsIG9wdGlvbnM/KVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiBhcmcxID09PSBcImZ1bmN0aW9uXCIsIFwiRmlyc3QgYXJndW1lbnQgdG8gYGNvbXB1dGVkYCBzaG91bGQgYmUgYW4gZXhwcmVzc2lvbi5cIik7XG4gICAgICAgIGludmFyaWFudChhcmd1bWVudHMubGVuZ3RoIDwgMywgXCJDb21wdXRlZCB0YWtlcyBvbmUgb3IgdHdvIGFyZ3VtZW50cyBpZiB1c2VkIGFzIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICB2YXIgb3B0cyA9IHR5cGVvZiBhcmcyID09PSBcIm9iamVjdFwiID8gYXJnMiA6IHt9O1xuICAgIG9wdHMuZ2V0ID0gYXJnMTtcbiAgICBvcHRzLnNldCA9IHR5cGVvZiBhcmcyID09PSBcImZ1bmN0aW9uXCIgPyBhcmcyIDogb3B0cy5zZXQ7XG4gICAgb3B0cy5uYW1lID0gb3B0cy5uYW1lIHx8IGFyZzEubmFtZSB8fCBcIlwiOyAvKiBmb3IgZ2VuZXJhdGVkIG5hbWUgKi9cbiAgICByZXR1cm4gbmV3IENvbXB1dGVkVmFsdWUob3B0cyk7XG59O1xuY29tcHV0ZWQuc3RydWN0ID0gY29tcHV0ZWRTdHJ1Y3REZWNvcmF0b3I7XG5cbmZ1bmN0aW9uIGV4dGVuZFNoYWxsb3dPYnNlcnZhYmxlKHRhcmdldCwgcHJvcGVydGllcywgZGVjb3JhdG9ycykge1xuICAgIGRlcHJlY2F0ZWQoXCInZXh0ZW5kU2hhbGxvd09ic2VydmFibGUnIGlzIGRlcHJlY2F0ZWQsIHVzZSAnZXh0ZW5kT2JzZXJ2YWJsZSh0YXJnZXQsIHByb3BzLCB7IGRlZXA6IGZhbHNlIH0pJyBpbnN0ZWFkXCIpO1xuICAgIHJldHVybiBleHRlbmRPYnNlcnZhYmxlKHRhcmdldCwgcHJvcGVydGllcywgZGVjb3JhdG9ycywgc2hhbGxvd0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZE9ic2VydmFibGUodGFyZ2V0LCBwcm9wZXJ0aWVzLCBkZWNvcmF0b3JzLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpbnZhcmlhbnQoYXJndW1lbnRzLmxlbmd0aCA+PSAyICYmIGFyZ3VtZW50cy5sZW5ndGggPD0gNCwgXCInZXh0ZW5kT2JzZXJ2YWJsZScgZXhwZWN0ZWQgMi00IGFyZ3VtZW50c1wiKTtcbiAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIsIFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdHMgYW4gb2JqZWN0IGFzIGZpcnN0IGFyZ3VtZW50XCIpO1xuICAgICAgICBpbnZhcmlhbnQoIWlzT2JzZXJ2YWJsZU1hcCh0YXJnZXQpLCBcIidleHRlbmRPYnNlcnZhYmxlJyBzaG91bGQgbm90IGJlIHVzZWQgb24gbWFwcywgdXNlIG1hcC5tZXJnZSBpbnN0ZWFkXCIpO1xuICAgICAgICBpbnZhcmlhbnQoIWlzT2JzZXJ2YWJsZShwcm9wZXJ0aWVzKSwgXCJFeHRlbmRpbmcgYW4gb2JqZWN0IHdpdGggYW5vdGhlciBvYnNlcnZhYmxlIChvYmplY3QpIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBjb25zdHJ1Y3QgYW4gZXhwbGljaXQgcHJvcGVydHltYXAsIHVzaW5nIGB0b0pTYCBpZiBuZWVkLiBTZWUgaXNzdWUgIzU0MFwiKTtcbiAgICAgICAgaWYgKGRlY29yYXRvcnMpXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGVjb3JhdG9ycylcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gcHJvcGVydGllcykpXG4gICAgICAgICAgICAgICAgICAgIGZhaWwkMShcIlRyeWluZyB0byBkZWNsYXJlIGEgZGVjb3JhdG9yIGZvciB1bnNwZWNpZmllZCBwcm9wZXJ0eSAnXCIgKyBrZXkgKyBcIidcIik7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xuICAgIHZhciBkZWZhdWx0RGVjb3JhdG9yID0gb3B0aW9ucy5kZWZhdWx0RGVjb3JhdG9yIHx8IChvcHRpb25zLmRlZXAgPT09IGZhbHNlID8gcmVmRGVjb3JhdG9yIDogZGVlcERlY29yYXRvcik7XG4gICAgYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucy5uYW1lLCBkZWZhdWx0RGVjb3JhdG9yLmVuaGFuY2VyKTsgLy8gbWFrZSBzdXJlIG9iamVjdCBpcyBvYnNlcnZhYmxlLCBldmVuIHdpdGhvdXQgaW5pdGlhbCBwcm9wc1xuICAgIHN0YXJ0QmF0Y2goKTtcbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3BlcnRpZXMsIGtleSk7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpKVxuICAgICAgICAgICAgICAgICAgICBmYWlsJDEoXCInZXh0ZW5kT2JzZXJ2YWJsZScgY2FuIG9ubHkgYmUgdXNlZCB0byBpbnRyb2R1Y2UgbmV3IHByb3BlcnRpZXMuIFVzZSAnc2V0JyBvciAnZGVjb3JhdGUnIGluc3RlYWQuIFRoZSBwcm9wZXJ0eSAnXCIgKyBrZXkgKyBcIicgYWxyZWFkeSBleGlzdHMgb24gJ1wiICsgdGFyZ2V0ICsgXCInXCIpO1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbXB1dGVkKGRlc2NyaXB0b3IudmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICBmYWlsJDEoXCJQYXNzaW5nIGEgJ2NvbXB1dGVkJyBhcyBpbml0aWFsIHByb3BlcnR5IHZhbHVlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgZXh0ZW5kT2JzZXJ2YWJsZS4gVXNlIGEgZ2V0dGVyIG9yIGRlY29yYXRvciBpbnN0ZWFkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnMgJiYga2V5IGluIGRlY29yYXRvcnNcbiAgICAgICAgICAgICAgICA/IGRlY29yYXRvcnNba2V5XVxuICAgICAgICAgICAgICAgIDogZGVzY3JpcHRvci5nZXQgPyBjb21wdXRlZERlY29yYXRvciA6IGRlZmF1bHREZWNvcmF0b3I7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHR5cGVvZiBkZWNvcmF0b3IgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFpbCQxKFwiTm90IGEgdmFsaWQgZGVjb3JhdG9yIGZvciAnXCIgKyBrZXkgKyBcIicsIGdvdDogXCIgKyBkZWNvcmF0b3IpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdERlc2NyaXB0b3IgPSBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IsIHRydWUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdERlc2NyaXB0b3IgLy8gb3RoZXJ3aXNlLCBhc3N1bWUgYWxyZWFkeSBhcHBsaWVkLCBkdWUgdG8gYGFwcGx5VG9JbnN0YW5jZWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHJlc3VsdERlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vLyBQcmVkZWZpbmVkIGJhZ3Mgb2YgY3JlYXRlIG9ic2VydmFibGUgb3B0aW9ucywgdG8gYXZvaWQgYWxsb2NhdGluZyB0ZW1wb3JhcmlseSBvcHRpb24gb2JqZWN0c1xuLy8gaW4gdGhlIG1ham9yaXR5IG9mIGNhc2VzXG52YXIgZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zID0ge1xuICAgIGRlZXA6IHRydWUsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHREZWNvcmF0b3I6IHVuZGVmaW5lZFxufTtcbnZhciBzaGFsbG93Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMgPSB7XG4gICAgZGVlcDogZmFsc2UsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHREZWNvcmF0b3I6IHVuZGVmaW5lZFxufTtcbk9iamVjdC5mcmVlemUoZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTtcbk9iamVjdC5mcmVlemUoc2hhbGxvd0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKTtcbmZ1bmN0aW9uIGFzc2VydFZhbGlkT3B0aW9uKGtleSkge1xuICAgIGlmICghL14oZGVlcHxuYW1lfGRlZmF1bHREZWNvcmF0b3IpJC8udGVzdChrZXkpKVxuICAgICAgICBmYWlsJDEoXCJpbnZhbGlkIG9wdGlvbiBmb3IgKGV4dGVuZClvYnNlcnZhYmxlOiBcIiArIGtleSk7XG59XG5mdW5jdGlvbiBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKHRoaW5nKSB7XG4gICAgaWYgKHRoaW5nID09PSBudWxsIHx8IHRoaW5nID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiB0aGluZyA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIHsgbmFtZTogdGhpbmcsIGRlZXA6IHRydWUgfTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpbmcgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICByZXR1cm4gZmFpbCQxKFwiZXhwZWN0ZWQgb3B0aW9ucyBvYmplY3RcIik7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaW5nKS5mb3JFYWNoKGFzc2VydFZhbGlkT3B0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xufVxuZnVuY3Rpb24gZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGVmYXVsdERlY29yYXRvclxuICAgICAgICA/IG9wdGlvbnMuZGVmYXVsdERlY29yYXRvci5lbmhhbmNlclxuICAgICAgICA6IG9wdGlvbnMuZGVlcCA9PT0gZmFsc2UgPyByZWZlcmVuY2VFbmhhbmNlciA6IGRlZXBFbmhhbmNlcjtcbn1cbnZhciBkZWVwRGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIoZGVlcEVuaGFuY2VyKTtcbnZhciBzaGFsbG93RGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIoc2hhbGxvd0VuaGFuY2VyKTtcbnZhciByZWZEZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3JGb3JFbmhhbmNlcihyZWZlcmVuY2VFbmhhbmNlcik7XG52YXIgcmVmU3RydWN0RGVjb3JhdG9yID0gY3JlYXRlRGVjb3JhdG9yRm9yRW5oYW5jZXIocmVmU3RydWN0RW5oYW5jZXIpO1xuLyoqXG4gKiBUdXJucyBhbiBvYmplY3QsIGFycmF5IG9yIGZ1bmN0aW9uIGludG8gYSByZWFjdGl2ZSBzdHJ1Y3R1cmUuXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgd2hpY2ggc2hvdWxkIGJlY29tZSBvYnNlcnZhYmxlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlKHYsIGFyZzIsIGFyZzMpIHtcbiAgICAvLyBAb2JzZXJ2YWJsZSBzb21lUHJvcDtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZGVlcERlY29yYXRvci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICAvLyBpdCBpcyBhbiBvYnNlcnZhYmxlIGFscmVhZHksIGRvbmVcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHYpKVxuICAgICAgICByZXR1cm4gdjtcbiAgICAvLyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIGFuZCBtdXRhdGVkP1xuICAgIHZhciByZXMgPSBpc1BsYWluT2JqZWN0KHYpXG4gICAgICAgID8gb2JzZXJ2YWJsZS5vYmplY3QodiwgYXJnMiwgYXJnMylcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KHYpID8gb2JzZXJ2YWJsZS5hcnJheSh2LCBhcmcyKSA6IGlzRVM2TWFwKHYpID8gb2JzZXJ2YWJsZS5tYXAodiwgYXJnMikgOiB2O1xuICAgIC8vIHRoaXMgdmFsdWUgY291bGQgYmUgY29udmVydGVkIHRvIGEgbmV3IG9ic2VydmFibGUgZGF0YSBzdHJ1Y3R1cmUsIHJldHVybiBpdFxuICAgIGlmIChyZXMgIT09IHYpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgLy8gb3RoZXJ3aXNlLCBqdXN0IGJveCBpdFxuICAgIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgXCJUaGUgcHJvdmlkZWQgdmFsdWUgY291bGQgbm90IGJlIGNvbnZlcnRlZCBpbnRvIGFuIG9ic2VydmFibGUuIElmIHlvdSB3YW50IGp1c3QgY3JlYXRlIGFuIG9ic2VydmFibGUgcmVmZXJlbmNlIHRvIHRoZSBvYmplY3QgdXNlICdvYnNlcnZhYmxlLmJveCh2YWx1ZSknXCIpO1xufVxudmFyIG9ic2VydmFibGVGYWN0b3JpZXMgPSB7XG4gICAgYm94OiBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKVxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJib3hcIik7XG4gICAgICAgIHZhciBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlVmFsdWUodmFsdWUsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSk7XG4gICAgfSxcbiAgICBzaGFsbG93Qm94OiBmdW5jdGlvbiAodmFsdWUsIG5hbWUpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKVxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJzaGFsbG93Qm94XCIpO1xuICAgICAgICBkZXByZWNhdGVkKFwib2JzZXJ2YWJsZS5zaGFsbG93Qm94XCIsIFwib2JzZXJ2YWJsZS5ib3godmFsdWUsIHsgZGVlcDogZmFsc2UgfSlcIik7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLmJveCh2YWx1ZSwgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcbiAgICB9LFxuICAgIGFycmF5OiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlcywgb3B0aW9ucykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcImFycmF5XCIpO1xuICAgICAgICB2YXIgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZUFycmF5KGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSk7XG4gICAgfSxcbiAgICBzaGFsbG93QXJyYXk6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWVzLCBuYW1lKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMilcbiAgICAgICAgICAgIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKFwic2hhbGxvd0FycmF5XCIpO1xuICAgICAgICBkZXByZWNhdGVkKFwib2JzZXJ2YWJsZS5zaGFsbG93QXJyYXlcIiwgXCJvYnNlcnZhYmxlLmFycmF5KHZhbHVlcywgeyBkZWVwOiBmYWxzZSB9KVwiKTtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuYXJyYXkoaW5pdGlhbFZhbHVlcywgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKVxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJtYXBcIik7XG4gICAgICAgIHZhciBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlTWFwKGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSk7XG4gICAgfSxcbiAgICBzaGFsbG93TWFwOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlcywgbmFtZSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcInNoYWxsb3dNYXBcIik7XG4gICAgICAgIGRlcHJlY2F0ZWQoXCJvYnNlcnZhYmxlLnNoYWxsb3dNYXBcIiwgXCJvYnNlcnZhYmxlLm1hcCh2YWx1ZXMsIHsgZGVlcDogZmFsc2UgfSlcIik7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm1hcChpbml0aWFsVmFsdWVzLCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xuICAgIH0sXG4gICAgb2JqZWN0OiBmdW5jdGlvbiAocHJvcHMsIGRlY29yYXRvcnMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICBpbmNvcnJlY3RseVVzZWRBc0RlY29yYXRvcihcIm9iamVjdFwiKTtcbiAgICAgICAgdmFyIG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gZXh0ZW5kT2JzZXJ2YWJsZSh7fSwgcHJvcHMsIGRlY29yYXRvcnMsIG8pO1xuICAgIH0sXG4gICAgc2hhbGxvd09iamVjdDogZnVuY3Rpb24gKHByb3BzLCBuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzFdID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgaW5jb3JyZWN0bHlVc2VkQXNEZWNvcmF0b3IoXCJzaGFsbG93T2JqZWN0XCIpO1xuICAgICAgICBkZXByZWNhdGVkKFwib2JzZXJ2YWJsZS5zaGFsbG93T2JqZWN0XCIsIFwib2JzZXJ2YWJsZS5vYmplY3QodmFsdWVzLCB7fSwgeyBkZWVwOiBmYWxzZSB9KVwiKTtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUub2JqZWN0KHByb3BzLCB7fSwgeyBuYW1lOiBuYW1lLCBkZWVwOiBmYWxzZSB9KTtcbiAgICB9LFxuICAgIHJlZjogcmVmRGVjb3JhdG9yLFxuICAgIHNoYWxsb3c6IHNoYWxsb3dEZWNvcmF0b3IsXG4gICAgZGVlcDogZGVlcERlY29yYXRvcixcbiAgICBzdHJ1Y3Q6IHJlZlN0cnVjdERlY29yYXRvclxufTtcbnZhciBvYnNlcnZhYmxlID0gY3JlYXRlT2JzZXJ2YWJsZTtcbi8vIHdlaXJkIHRyaWNrIHRvIGtlZXAgb3VyIHR5cGluZ3MgbmljZWx5IHdpdGggb3VyIGZ1bmNzLCBhbmQgc3RpbGwgZXh0ZW5kIHRoZSBvYnNlcnZhYmxlIGZ1bmN0aW9uXG5PYmplY3Qua2V5cyhvYnNlcnZhYmxlRmFjdG9yaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAob2JzZXJ2YWJsZVtuYW1lXSA9IG9ic2VydmFibGVGYWN0b3JpZXNbbmFtZV0pOyB9KTtcbmZ1bmN0aW9uIGluY29ycmVjdGx5VXNlZEFzRGVjb3JhdG9yKG1ldGhvZE5hbWUpIHtcbiAgICBmYWlsJDEoXG4gICAgLy8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgXCJFeHBlY3RlZCBvbmUgb3IgdHdvIGFyZ3VtZW50cyB0byBvYnNlcnZhYmxlLlwiICsgbWV0aG9kTmFtZSArIFwiLiBEaWQgeW91IGFjY2lkZW50YWxseSB0cnkgdG8gdXNlIG9ic2VydmFibGUuXCIgKyBtZXRob2ROYW1lICsgXCIgYXMgZGVjb3JhdG9yP1wiKTtcbn1cblxuZnVuY3Rpb24gZGVlcEVuaGFuY2VyKHYsIF8sIG5hbWUpIHtcbiAgICAvLyBpdCBpcyBhbiBvYnNlcnZhYmxlIGFscmVhZHksIGRvbmVcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHYpKVxuICAgICAgICByZXR1cm4gdjtcbiAgICAvLyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIGFuZCBtdXRhdGVkP1xuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKVxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5hcnJheSh2LCB7IG5hbWU6IG5hbWUgfSk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm9iamVjdCh2LCB1bmRlZmluZWQsIHsgbmFtZTogbmFtZSB9KTtcbiAgICBpZiAoaXNFUzZNYXAodikpXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCB7IG5hbWU6IG5hbWUgfSk7XG4gICAgcmV0dXJuIHY7XG59XG5mdW5jdGlvbiBzaGFsbG93RW5oYW5jZXIodiwgXywgbmFtZSkge1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2KSB8fCBpc09ic2VydmFibGVBcnJheSh2KSB8fCBpc09ic2VydmFibGVNYXAodikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKVxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5hcnJheSh2LCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHYpKVxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgdW5kZWZpbmVkLCB7IG5hbWU6IG5hbWUsIGRlZXA6IGZhbHNlIH0pO1xuICAgIGlmIChpc0VTNk1hcCh2KSlcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUubWFwKHYsIHsgbmFtZTogbmFtZSwgZGVlcDogZmFsc2UgfSk7XG4gICAgcmV0dXJuIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgXCJUaGUgc2hhbGxvdyBtb2RpZmllciAvIGRlY29yYXRvciBjYW4gb25seSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYXJyYXlzLCBvYmplY3RzIGFuZCBtYXBzXCIpO1xufVxuZnVuY3Rpb24gcmVmZXJlbmNlRW5oYW5jZXIobmV3VmFsdWUpIHtcbiAgICAvLyBuZXZlciB0dXJuIGludG8gYW4gb2JzZXJ2YWJsZVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbmZ1bmN0aW9uIHJlZlN0cnVjdEVuaGFuY2VyKHYsIG9sZFZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc09ic2VydmFibGUodikpXG4gICAgICAgIHRocm93IFwib2JzZXJ2YWJsZS5zdHJ1Y3Qgc2hvdWxkIG5vdCBiZSB1c2VkIHdpdGggb2JzZXJ2YWJsZSB2YWx1ZXNcIjtcbiAgICBpZiAoZGVlcEVxdWFsKHYsIG9sZFZhbHVlKSlcbiAgICAgICAgcmV0dXJuIG9sZFZhbHVlO1xuICAgIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBpdGVyYXRvclN5bWJvbCgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IpIHx8IFwiQEBpdGVyYXRvclwiO1xufVxuXG5mdW5jdGlvbiBkZWNsYXJlSXRlcmF0b3IocHJvdG90VHlwZSwgaXRlcmF0b3JGYWN0b3J5KSB7XG4gICAgYWRkSGlkZGVuRmluYWxQcm9wKHByb3RvdFR5cGUsIGl0ZXJhdG9yU3ltYm9sKCksIGl0ZXJhdG9yRmFjdG9yeSk7XG59XG5mdW5jdGlvbiBtYWtlSXRlcmFibGUoaXRlcmF0b3IpIHtcbiAgICBpdGVyYXRvcltpdGVyYXRvclN5bWJvbCgpXSA9IHNlbGY7XG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuZnVuY3Rpb24gc2VsZigpIHtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBEdXJpbmcgYSB0cmFuc2FjdGlvbiBubyB2aWV3cyBhcmUgdXBkYXRlZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqIFRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHJ1biBzeW5jaHJvbm91c2x5IG5vbmV0aGVsZXNzLlxuICpcbiAqIEBwYXJhbSBhY3Rpb24gYSBmdW5jdGlvbiB0aGF0IHVwZGF0ZXMgc29tZSByZWFjdGl2ZSBzdGF0ZVxuICogQHJldHVybnMgYW55IHZhbHVlIHRoYXQgd2FzIHJldHVybmVkIGJ5IHRoZSAnYWN0aW9uJyBwYXJhbWV0ZXIuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zYWN0aW9uKGFjdGlvbiwgdGhpc0FyZykge1xuICAgIGlmICh0aGlzQXJnID09PSB2b2lkIDApIHsgdGhpc0FyZyA9IHVuZGVmaW5lZDsgfVxuICAgIHN0YXJ0QmF0Y2goKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmFwcGx5KHRoaXNBcmcpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgZW5kQmF0Y2goKTtcbiAgICB9XG59XG5cbnZhciBPYnNlcnZhYmxlTWFwTWFya2VyID0ge307XG52YXIgT2JzZXJ2YWJsZU1hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlTWFwKGluaXRpYWxEYXRhLCBlbmhhbmNlciwgbmFtZSkge1xuICAgICAgICBpZiAoZW5oYW5jZXIgPT09IHZvaWQgMCkgeyBlbmhhbmNlciA9IGRlZXBFbmhhbmNlcjsgfVxuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBcIk9ic2VydmFibGVNYXBAXCIgKyBnZXROZXh0SWQoKTsgfVxuICAgICAgICB0aGlzLmVuaGFuY2VyID0gZW5oYW5jZXI7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuJG1vYnggPSBPYnNlcnZhYmxlTWFwTWFya2VyO1xuICAgICAgICB0aGlzLl9rZXlzID0gbmV3IE9ic2VydmFibGVBcnJheSh1bmRlZmluZWQsIHJlZmVyZW5jZUVuaGFuY2VyLCB0aGlzLm5hbWUgKyBcIi5rZXlzKClcIiwgdHJ1ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vYngubWFwIHJlcXVpcmVzIE1hcCBwb2x5ZmlsbCBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci4gQ2hlY2sgYmFiZWwtcG9seWZpbGwgb3IgY29yZS1qcy9lczYvbWFwLmpzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2hhc01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5tZXJnZShpbml0aWFsRGF0YSk7XG4gICAgfVxuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLl9oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmhhcyhrZXkpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodGhpcy5faGFzTWFwLmhhcyhrZXkpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01hcC5nZXQoa2V5KS5nZXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZUhhc01hcEVudHJ5KGtleSwgZmFsc2UpLmdldCgpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGhhc0tleSA9IHRoaXMuX2hhcyhrZXkpO1xuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBoYXNLZXkgPyBcInVwZGF0ZVwiIDogXCJhZGRcIixcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIHZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYWRkVmFsdWUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2UodGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWNoYW5nZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2hhcyhrZXkpKSB7XG4gICAgICAgICAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCk7XG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkZWxldGVcIixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdGhpcy5fZGF0YS5nZXQoa2V5KS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkpXG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oe30sIGNoYW5nZSwgeyBuYW1lOiB0aGlzLm5hbWUsIGtleToga2V5IH0pKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fa2V5cy5yZW1vdmUoa2V5KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlSGFzTWFwRW50cnkoa2V5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBfdGhpcy5fZGF0YS5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnNldE5ld1ZhbHVlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RhdGEuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChub3RpZnkpXG4gICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5KVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX3VwZGF0ZUhhc01hcEVudHJ5ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgLy8gb3B0aW1pemF0aW9uOyBkb24ndCBmaWxsIHRoZSBoYXNNYXAgaWYgd2UgYXJlIG5vdCBvYnNlcnZpbmcsIG9yIHJlbW92ZSBlbnRyeSBpZiB0aGVyZSBhcmUgbm8gb2JzZXJ2ZXJzIGFueW1vcmVcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5faGFzTWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGVudHJ5LnNldE5ld1ZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVudHJ5ID0gbmV3IE9ic2VydmFibGVWYWx1ZSh2YWx1ZSwgcmVmZXJlbmNlRW5oYW5jZXIsIHRoaXMubmFtZSArIFwiLlwiICsga2V5ICsgXCI/XCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX2hhc01hcC5zZXQoa2V5LCBlbnRyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuX3VwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKGtleSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGlzLl9kYXRhLmdldChrZXkpO1xuICAgICAgICBuZXdWYWx1ZSA9IG9ic2VydmFibGUucHJlcGFyZU5ld1ZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBVTkNIQU5HRUQpIHtcbiAgICAgICAgICAgIHZhciBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKTtcbiAgICAgICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvYnNlcnZhYmxlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5KVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKHt9LCBjaGFuZ2UsIHsgbmFtZTogdGhpcy5uYW1lLCBrZXk6IGtleSB9KSk7XG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldE5ld1ZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIGlmIChub3RpZnkpXG4gICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5KVxuICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5fYWRkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0cmFuc2FjdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUobmV3VmFsdWUsIF90aGlzLmVuaGFuY2VyLCBfdGhpcy5uYW1lICsgXCIuXCIgKyBrZXksIGZhbHNlKTtcbiAgICAgICAgICAgIF90aGlzLl9kYXRhLnNldChrZXksIG9ic2VydmFibGUpO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYnNlcnZhYmxlLnZhbHVlOyAvLyB2YWx1ZSBtaWdodCBoYXZlIGJlZW4gY2hhbmdlZFxuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUhhc01hcEVudHJ5KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBfdGhpcy5fa2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKCk7XG4gICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGlmIChub3RpZnlTcHkpXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydChfX2Fzc2lnbih7fSwgY2hhbmdlLCB7IG5hbWU6IHRoaXMubmFtZSwga2V5OiBrZXkgfSkpO1xuICAgICAgICBpZiAobm90aWZ5KVxuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSk7XG4gICAgICAgIGlmIChub3RpZnlTcHkpXG4gICAgICAgICAgICBzcHlSZXBvcnRFbmQoKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWUodGhpcy5fZGF0YS5nZXQoa2V5KS5nZXQoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZSh1bmRlZmluZWQpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuZGVoYW5jZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5c1tpdGVyYXRvclN5bWJvbCgpXSgpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dEluZGV4IDwgc2VsZi5fa2V5cy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBzZWxmLmdldChzZWxmLl9rZXlzW25leHRJbmRleCsrXSksIGRvbmU6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dEluZGV4IDwgc2VsZi5fa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHNlbGYuX2tleXNbbmV4dEluZGV4KytdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtrZXksIHNlbGYuZ2V0KGtleSldLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fa2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgX3RoaXMuZ2V0KGtleSksIGtleSwgX3RoaXMpOyB9KTtcbiAgICB9O1xuICAgIC8qKiBNZXJnZSBhbm90aGVyIG9iamVjdCBpbnRvIHRoaXMgb2JqZWN0LCByZXR1cm5zIHRoaXMuICovXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvdGhlcikpIHtcbiAgICAgICAgICAgIG90aGVyID0gb3RoZXIudG9KUygpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG90aGVyKSlcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhvdGhlcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBfdGhpcy5zZXQoa2V5LCBvdGhlcltrZXldKTsgfSk7XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG90aGVyKSlcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDIpLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRVM2TWFwKG90aGVyKSlcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7IHJldHVybiBfdGhpcy5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBmYWlsJDEoXCJDYW5ub3QgaW5pdGlhbGl6ZSBtYXAgZnJvbSBcIiArIG90aGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHVudHJhY2tlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2tleXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIF90aGlzLmRlbGV0ZShrZXkpOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRyYW5zYWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGdyYWIgYWxsIHRoZSBrZXlzIHRoYXQgYXJlIHByZXNlbnQgaW4gdGhlIG5ldyBtYXAgYnV0IG5vdCBwcmVzZW50IGluIHRoZSBjdXJyZW50IG1hcFxuICAgICAgICAgICAgLy8gYW5kIGRlbGV0ZSB0aGVtIGZyb20gdGhlIG1hcCwgdGhlbiBtZXJnZSB0aGUgbmV3IG1hcFxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGNhdXNlIHJlYWN0aW9ucyBvbmx5IG9uIGNoYW5nZWQgdmFsdWVzXG4gICAgICAgICAgICB2YXIgbmV3S2V5cyA9IGdldE1hcExpa2VLZXlzKHZhbHVlcyk7XG4gICAgICAgICAgICB2YXIgb2xkS2V5cyA9IF90aGlzLl9rZXlzO1xuICAgICAgICAgICAgdmFyIG1pc3NpbmdLZXlzID0gb2xkS2V5cy5maWx0ZXIoZnVuY3Rpb24gKGspIHsgcmV0dXJuIG5ld0tleXMuaW5kZXhPZihrKSA9PT0gLTE7IH0pO1xuICAgICAgICAgICAgbWlzc2luZ0tleXMuZm9yRWFjaChmdW5jdGlvbiAoaykgeyByZXR1cm4gX3RoaXMuZGVsZXRlKGspOyB9KTtcbiAgICAgICAgICAgIF90aGlzLm1lcmdlKHZhbHVlcyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlTWFwLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwbGFpbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoaXMgbWFwLlxuICAgICAqIE5vdGUgdGhhdCBhbGwgdGhlIGtleXMgYmVpbmcgc3RyaW5naWZpZWQuXG4gICAgICogSWYgdGhlcmUgYXJlIGR1cGxpY2F0aW5nIGtleXMgYWZ0ZXIgY29udmVydGluZyB0aGVtIHRvIHN0cmluZ3MsIGJlaGF2aW91ciBpcyB1bmRldGVybWluZWQuXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9QT0pPID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzID0ge307XG4gICAgICAgIHRoaXMuX2tleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAocmVzW1wiXCIgKyBrZXldID0gX3RoaXMuZ2V0KGtleSkpOyB9KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzaGFsbG93IG5vbiBvYnNlcnZhYmxlIG9iamVjdCBjbG9uZSBvZiB0aGlzIG1hcC5cbiAgICAgKiBOb3RlIHRoYXQgdGhlIHZhbHVlcyBtaWd0aCBzdGlsbCBiZSBvYnNlcnZhYmxlLiBGb3IgYSBkZWVwIGNsb25lIHVzZSBtb2J4LnRvSlMuXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9KUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fa2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHJlcy5zZXQoa2V5LCBfdGhpcy5nZXQoa2V5KSk7IH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VkIGJ5IEpTT04uc3RyaW5naWZ5XG4gICAgICAgIHJldHVybiB0aGlzLnRvUE9KTygpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZU1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiAodGhpcy5uYW1lICtcbiAgICAgICAgICAgIFwiW3sgXCIgK1xuICAgICAgICAgICAgdGhpcy5fa2V5cy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5ICsgXCI6IFwiICsgKFwiXCIgKyBfdGhpcy5nZXQoa2V5KSk7IH0pLmpvaW4oXCIsIFwiKSArXG4gICAgICAgICAgICBcIiB9XVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9ic2VydmVzIHRoaXMgb2JqZWN0LiBUcmlnZ2VycyBmb3IgdGhlIGV2ZW50cyAnYWRkJywgJ3VwZGF0ZScgYW5kICdkZWxldGUnLlxuICAgICAqIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L29ic2VydmVcbiAgICAgKiBmb3IgY2FsbGJhY2sgZGV0YWlsc1xuICAgICAqL1xuICAgIE9ic2VydmFibGVNYXAucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIGludmFyaWFudChmaXJlSW1tZWRpYXRlbHkgIT09IHRydWUsIFwiYG9ic2VydmVgIGRvZXNuJ3Qgc3VwcG9ydCBmaXJlSW1tZWRpYXRlbHk9dHJ1ZSBpbiBjb21iaW5hdGlvbiB3aXRoIG1hcHMuXCIpO1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlTWFwLnByb3RvdHlwZS5pbnRlcmNlcHQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlTWFwO1xufSgpKTtcbmRlY2xhcmVJdGVyYXRvcihPYnNlcnZhYmxlTWFwLnByb3RvdHlwZSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXMoKTtcbn0pO1xuYWRkSGlkZGVuRmluYWxQcm9wKE9ic2VydmFibGVNYXAucHJvdG90eXBlLCB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogXCJAQHRvU3RyaW5nVGFnXCIsIFwiTWFwXCIpO1xuLyogJ3ZhcicgZml4ZXMgc21hbGwtYnVpbGQgaXNzdWUgKi9cbnZhciBpc09ic2VydmFibGVNYXAgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZU1hcFwiLCBPYnNlcnZhYmxlTWFwKTtcblxuZnVuY3Rpb24gZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpIHtcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmIHRoaW5nICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc09ic2VydmFibGVBcnJheSh0aGluZykpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgXCJJdCBpcyBub3QgcG9zc2libGUgdG8gZ2V0IGluZGV4IGF0b21zIGZyb20gYXJyYXlzXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaW5nLiRtb2J4LmF0b207XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0aGluZykpIHtcbiAgICAgICAgICAgIHZhciBhbnlUaGluZyA9IHRoaW5nO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYW55VGhpbmcuX2tleXMpO1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBhbnlUaGluZy5fZGF0YS5nZXQocHJvcGVydHkpIHx8IGFueVRoaW5nLl9oYXNNYXAuZ2V0KHByb3BlcnR5KTtcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgICAgICBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICAgICAgICAgIFwidGhlIGVudHJ5ICdcIiArIHByb3BlcnR5ICsgXCInIGRvZXMgbm90IGV4aXN0IGluIHRoZSBvYnNlcnZhYmxlIG1hcCAnXCIgKyBnZXREZWJ1Z05hbWUodGhpbmcpICsgXCInXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbGl6ZXJzIHJ1biBsYXppbHkgd2hlbiB0cmFuc3BpbGluZyB0byBiYWJlbCwgc28gbWFrZSBzdXJlIHRoZXkgYXJlIHJ1bi4uLlxuICAgICAgICBpbml0aWFsaXplSW5zdGFuY2UodGhpbmcpO1xuICAgICAgICBpZiAocHJvcGVydHkgJiYgIXRoaW5nLiRtb2J4KVxuICAgICAgICAgICAgdGhpbmdbcHJvcGVydHldOyAvLyBTZWUgIzEwNzJcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh0aGluZykpIHtcbiAgICAgICAgICAgIGlmICghcHJvcGVydHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJwbGVhc2Ugc3BlY2lmeSBhIHByb3BlcnR5XCIpO1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGluZy4kbW9ieC52YWx1ZXNbcHJvcGVydHldO1xuICAgICAgICAgICAgaWYgKCFvYnNlcnZhYmxlKVxuICAgICAgICAgICAgICAgIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgXCJubyBvYnNlcnZhYmxlIHByb3BlcnR5ICdcIiArIHByb3BlcnR5ICsgXCInIGZvdW5kIG9uIHRoZSBvYnNlcnZhYmxlIG9iamVjdCAnXCIgKyBnZXREZWJ1Z05hbWUodGhpbmcpICsgXCInXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXRvbSh0aGluZykgfHwgaXNDb21wdXRlZFZhbHVlKHRoaW5nKSB8fCBpc1JlYWN0aW9uKHRoaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmIChpc1JlYWN0aW9uKHRoaW5nLiRtb2J4KSkge1xuICAgICAgICAgICAgLy8gZGlzcG9zZXIgZnVuY3Rpb25cbiAgICAgICAgICAgIHJldHVybiB0aGluZy4kbW9ieDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFpbCQxKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcIkNhbm5vdCBvYnRhaW4gYXRvbSBmcm9tIFwiICsgdGhpbmcpO1xufVxuZnVuY3Rpb24gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KSB7XG4gICAgaWYgKCF0aGluZylcbiAgICAgICAgZmFpbCQxKFwiRXhwZWN0aW5nIHNvbWUgb2JqZWN0XCIpO1xuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24oZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKTtcbiAgICBpZiAoaXNBdG9tKHRoaW5nKSB8fCBpc0NvbXB1dGVkVmFsdWUodGhpbmcpIHx8IGlzUmVhY3Rpb24odGhpbmcpKVxuICAgICAgICByZXR1cm4gdGhpbmc7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0aGluZykpXG4gICAgICAgIHJldHVybiB0aGluZztcbiAgICAvLyBJbml0aWFsaXplcnMgcnVuIGxhemlseSB3aGVuIHRyYW5zcGlsaW5nIHRvIGJhYmVsLCBzbyBtYWtlIHN1cmUgdGhleSBhcmUgcnVuLi4uXG4gICAgaW5pdGlhbGl6ZUluc3RhbmNlKHRoaW5nKTtcbiAgICBpZiAodGhpbmcuJG1vYngpXG4gICAgICAgIHJldHVybiB0aGluZy4kbW9ieDtcbiAgICBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiQ2Fubm90IG9idGFpbiBhZG1pbmlzdHJhdGlvbiBmcm9tIFwiICsgdGhpbmcpO1xufVxuZnVuY3Rpb24gZ2V0RGVidWdOYW1lKHRoaW5nLCBwcm9wZXJ0eSkge1xuICAgIHZhciBuYW1lZDtcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSk7XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSB8fCBpc09ic2VydmFibGVNYXAodGhpbmcpKVxuICAgICAgICBuYW1lZCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKTtcbiAgICBlbHNlXG4gICAgICAgIG5hbWVkID0gZ2V0QXRvbSh0aGluZyk7IC8vIHZhbGlkIGZvciBhcnJheXMgYXMgd2VsbFxuICAgIHJldHVybiBuYW1lZC5uYW1lO1xufVxuXG5mdW5jdGlvbiBvbkJlY29tZU9ic2VydmVkKHRoaW5nLCBhcmcyLCBhcmczKSB7XG4gICAgcmV0dXJuIGludGVyY2VwdEhvb2soXCJvbkJlY29tZU9ic2VydmVkXCIsIHRoaW5nLCBhcmcyLCBhcmczKTtcbn1cbmZ1bmN0aW9uIG9uQmVjb21lVW5vYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMykge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKFwib25CZWNvbWVVbm9ic2VydmVkXCIsIHRoaW5nLCBhcmcyLCBhcmczKTtcbn1cbmZ1bmN0aW9uIGludGVyY2VwdEhvb2soaG9vaywgdGhpbmcsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgYXRvbSA9IHR5cGVvZiBhcmcyID09PSBcInN0cmluZ1wiID8gZ2V0QXRvbSh0aGluZywgYXJnMikgOiBnZXRBdG9tKHRoaW5nKTtcbiAgICB2YXIgY2IgPSB0eXBlb2YgYXJnMiA9PT0gXCJzdHJpbmdcIiA/IGFyZzMgOiBhcmcyO1xuICAgIHZhciBvcmlnID0gYXRvbVtob29rXTtcbiAgICBpZiAodHlwZW9mIG9yaWcgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJOb3QgYW4gYXRvbSB0aGF0IGNhbiBiZSAodW4pb2JzZXJ2ZWRcIik7XG4gICAgYXRvbVtob29rXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb3JpZy5jYWxsKHRoaXMpO1xuICAgICAgICBjYi5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXRvbVtob29rXSA9IG9yaWc7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBBbnl0aGluZyB0aGF0IGNhbiBiZSB1c2VkIHRvIF9zdG9yZV8gc3RhdGUgaXMgYW4gQXRvbSBpbiBtb2J4LiBBdG9tcyBoYXZlIHR3byBpbXBvcnRhbnQgam9ic1xuICpcbiAqIDEpIGRldGVjdCB3aGVuIHRoZXkgYXJlIGJlaW5nIF91c2VkXyBhbmQgcmVwb3J0IHRoaXMgKHVzaW5nIHJlcG9ydE9ic2VydmVkKS4gVGhpcyBhbGxvd3MgbW9ieCB0byBtYWtlIHRoZSBjb25uZWN0aW9uIGJldHdlZW4gcnVubmluZyBmdW5jdGlvbnMgYW5kIHRoZSBkYXRhIHRoZXkgdXNlZFxuICogMikgdGhleSBzaG91bGQgbm90aWZ5IG1vYnggd2hlbmV2ZXIgdGhleSBoYXZlIF9jaGFuZ2VkXy4gVGhpcyB3YXkgbW9ieCBjYW4gcmUtcnVuIGFueSBmdW5jdGlvbnMgKGRlcml2YXRpb25zKSB0aGF0IGFyZSB1c2luZyB0aGlzIGF0b20uXG4gKi9cbnZhciBBdG9tO1xudmFyIGlzQXRvbTtcbmZ1bmN0aW9uIGRlY2xhcmVBdG9tKCkge1xuICAgIGlmIChBdG9tKVxuICAgICAgICByZXR1cm47XG4gICAgQXRvbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIG5ldyBhdG9tLiBGb3IgZGVidWdnaW5nIHB1cnBvc2VzIGl0IGlzIHJlY29tbWVuZGVkIHRvIGdpdmUgaXQgYSBuYW1lLlxuICAgICAgICAgKiBUaGUgb25CZWNvbWVPYnNlcnZlZCBhbmQgb25CZWNvbWVVbm9ic2VydmVkIGNhbGxiYWNrcyBjYW4gYmUgdXNlZCBmb3IgcmVzb3VyY2UgbWFuYWdlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEF0b21JbXBsKG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiQXRvbUBcIiArIGdldE5leHRJZCgpOyB9XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgdGhpcy5pc1BlbmRpbmdVbm9ic2VydmF0aW9uID0gZmFsc2U7IC8vIGZvciBlZmZlY3RpdmUgdW5vYnNlcnZpbmcuIEJhc2VBdG9tIGhhcyB0cnVlLCBmb3IgZXh0cmEgb3B0aW1pemF0aW9uLCBzbyBpdHMgb25CZWNvbWVVbm9ic2VydmVkIG5ldmVyIGdldHMgY2FsbGVkLCBiZWNhdXNlIGl0J3Mgbm90IG5lZWRlZFxuICAgICAgICAgICAgdGhpcy5pc0JlaW5nT2JzZXJ2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyc0luZGV4ZXMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZGlmZlZhbHVlID0gMDtcbiAgICAgICAgICAgIHRoaXMubGFzdEFjY2Vzc2VkQnkgPSAwO1xuICAgICAgICAgICAgdGhpcy5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkc7XG4gICAgICAgIH1cbiAgICAgICAgQXRvbUltcGwucHJvdG90eXBlLm9uQmVjb21lVW5vYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfTtcbiAgICAgICAgQXRvbUltcGwucHJvdG90eXBlLm9uQmVjb21lT2JzZXJ2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvKiBub29wICovXG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAqIEludm9rZSB0aGlzIG1ldGhvZCB0byBub3RpZnkgbW9ieCB0aGF0IHlvdXIgYXRvbSBoYXMgYmVlbiB1c2VkIHNvbWVob3cuXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGN1cnJlbnRseSBhIHJlYWN0aXZlIGNvbnRleHQuXG4gICAgICovXG4gICAgICAgIEF0b21JbXBsLnByb3RvdHlwZS5yZXBvcnRPYnNlcnZlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRPYnNlcnZlZCh0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIF9hZnRlcl8gdGhpcyBtZXRob2QgaGFzIGNoYW5nZWQgdG8gc2lnbmFsIG1vYnggdGhhdCBhbGwgaXRzIG9ic2VydmVycyBzaG91bGQgaW52YWxpZGF0ZS5cbiAgICAgKi9cbiAgICAgICAgQXRvbUltcGwucHJvdG90eXBlLnJlcG9ydENoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKCk7XG4gICAgICAgICAgICBwcm9wYWdhdGVDaGFuZ2VkKHRoaXMpO1xuICAgICAgICAgICAgZW5kQmF0Y2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgQXRvbUltcGwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEF0b21JbXBsO1xuICAgIH0oKSk7XG4gICAgaXNBdG9tID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIkF0b21cIiwgQXRvbSk7XG59XG5mdW5jdGlvbiBjcmVhdGVBdG9tKG5hbWUsIG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyLCBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyKSB7XG4gICAgaWYgKG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyID09PSB2b2lkIDApIHsgb25CZWNvbWVPYnNlcnZlZEhhbmRsZXIgPSBub29wOyB9XG4gICAgaWYgKG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIgPT09IHZvaWQgMCkgeyBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyID0gbm9vcDsgfVxuICAgIHZhciBhdG9tID0gbmV3IEF0b20obmFtZSk7XG4gICAgb25CZWNvbWVPYnNlcnZlZChhdG9tLCBvbkJlY29tZU9ic2VydmVkSGFuZGxlcik7XG4gICAgb25CZWNvbWVVbm9ic2VydmVkKGF0b20sIG9uQmVjb21lVW5vYnNlcnZlZEhhbmRsZXIpO1xuICAgIHJldHVybiBhdG9tO1xufVxuXG52YXIgTUFYX1NQTElDRV9TSVpFID0gMTAwMDA7IC8vIFNlZSBlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvODU5XG4vLyBEZXRlY3RzIGJ1ZyBpbiBzYWZhcmkgOS4xLjEgKG9yIGlPUyA5IHNhZmFyaSBtb2JpbGUpLiBTZWUgIzM2NFxudmFyIHNhZmFyaVByb3RvdHlwZVNldHRlckluaGVyaXRhbmNlQnVnID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdiA9IGZhbHNlO1xuICAgIHZhciBwID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiMFwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuY3JlYXRlKHApW1wiMFwiXSA9IDE7XG4gICAgcmV0dXJuIHYgPT09IGZhbHNlO1xufSkoKTtcbi8qKlxuICogVGhpcyBhcnJheSBidWZmZXIgY29udGFpbnMgdHdvIGxpc3RzIG9mIHByb3BlcnRpZXMsIHNvIHRoYXQgYWxsIGFycmF5c1xuICogY2FuIHJlY3ljbGUgdGhlaXIgcHJvcGVydHkgZGVmaW5pdGlvbnMsIHdoaWNoIHNpZ25pZmljYW50bHkgaW1wcm92ZXMgcGVyZm9ybWFuY2Ugb2YgY3JlYXRpbmdcbiAqIHByb3BlcnRpZXMgb24gdGhlIGZseS5cbiAqL1xudmFyIE9CU0VSVkFCTEVfQVJSQVlfQlVGRkVSX1NJWkUgPSAwO1xuLy8gVHlwZXNjcmlwdCB3b3JrYXJvdW5kIHRvIG1ha2Ugc3VyZSBPYnNlcnZhYmxlQXJyYXkgZXh0ZW5kcyBBcnJheVxudmFyIFN0dWJBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHViQXJyYXkoKSB7XG4gICAgfVxuICAgIHJldHVybiBTdHViQXJyYXk7XG59KCkpO1xuZnVuY3Rpb24gaW5oZXJpdChjdG9yLCBwcm90bykge1xuICAgIGlmICh0eXBlb2YgT2JqZWN0W1wic2V0UHJvdG90eXBlT2ZcIl0gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgT2JqZWN0W1wic2V0UHJvdG90eXBlT2ZcIl0oY3Rvci5wcm90b3R5cGUsIHByb3RvKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGN0b3IucHJvdG90eXBlLl9fcHJvdG9fXyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjdG9yLnByb3RvdHlwZS5fX3Byb3RvX18gPSBwcm90bztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGN0b3JbXCJwcm90b3R5cGVcIl0gPSBwcm90bztcbiAgICB9XG59XG5pbmhlcml0KFN0dWJBcnJheSwgQXJyYXkucHJvdG90eXBlKTtcbi8vIFdlZXggZnJlZXplIEFycmF5LnByb3RvdHlwZVxuLy8gTWFrZSB0aGVtIHdyaXRlYWJsZSBhbmQgY29uZmlndXJhYmxlIGluIHByb3RvdHlwZSBjaGFpblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvd2VleC9wdWxsLzE1MjlcbmlmIChPYmplY3QuaXNGcm96ZW4oQXJyYXkpKSB7XG4gICAgXG4gICAgW1xuICAgICAgICBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgIFwicHVzaFwiLFxuICAgICAgICBcInNoaWZ0XCIsXG4gICAgICAgIFwiY29uY2F0XCIsXG4gICAgICAgIFwicG9wXCIsXG4gICAgICAgIFwidW5zaGlmdFwiLFxuICAgICAgICBcInJlcGxhY2VcIixcbiAgICAgICAgXCJmaW5kXCIsXG4gICAgICAgIFwiZmluZEluZGV4XCIsXG4gICAgICAgIFwic3BsaWNlXCIsXG4gICAgICAgIFwicmV2ZXJzZVwiLFxuICAgICAgICBcInNvcnRcIlxuICAgIF0uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHViQXJyYXkucHJvdG90eXBlLCBrZXksIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IEFycmF5LnByb3RvdHlwZVtrZXldXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxudmFyIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKG5hbWUsIGVuaGFuY2VyLCBhcnJheSwgb3duZWQpIHtcbiAgICAgICAgdGhpcy5hcnJheSA9IGFycmF5O1xuICAgICAgICB0aGlzLm93bmVkID0gb3duZWQ7XG4gICAgICAgIHRoaXMudmFsdWVzID0gW107XG4gICAgICAgIHRoaXMubGFzdEtub3duTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5hdG9tID0gbmV3IEF0b20obmFtZSB8fCBcIk9ic2VydmFibGVBcnJheUBcIiArIGdldE5leHRJZCgpKTtcbiAgICAgICAgdGhpcy5lbmhhbmNlciA9IGZ1bmN0aW9uIChuZXdWLCBvbGRWKSB7IHJldHVybiBlbmhhbmNlcihuZXdWLCBvbGRWLCBuYW1lICsgXCJbLi5dXCIpOyB9O1xuICAgIH1cbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuZGVoYW5jZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5kZWhhbmNlVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkICYmIHRoaXMudmFsdWVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLm1hcCh0aGlzLmRlaGFuY2VyKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5pbnRlcmNlcHQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcih0aGlzLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSA9PT0gdm9pZCAwKSB7IGZpcmVJbW1lZGlhdGVseSA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMuYXJyYXksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcbiAgICAgICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgICAgICBhZGRlZDogdGhpcy52YWx1ZXMuc2xpY2UoKSxcbiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiB0aGlzLnZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZDogW10sXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbi5wcm90b3R5cGUuZ2V0QXJyYXlMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYXRvbS5yZXBvcnRPYnNlcnZlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMubGVuZ3RoO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLnNldEFycmF5TGVuZ3RoID0gZnVuY3Rpb24gKG5ld0xlbmd0aCkge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0xlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBuZXdMZW5ndGggPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnguYXJyYXldIE91dCBvZiByYW5nZTogXCIgKyBuZXdMZW5ndGgpO1xuICAgICAgICB2YXIgY3VycmVudExlbmd0aCA9IHRoaXMudmFsdWVzLmxlbmd0aDtcbiAgICAgICAgaWYgKG5ld0xlbmd0aCA9PT0gY3VycmVudExlbmd0aClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWxzZSBpZiAobmV3TGVuZ3RoID4gY3VycmVudExlbmd0aCkge1xuICAgICAgICAgICAgdmFyIG5ld0l0ZW1zID0gbmV3IEFycmF5KG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdMZW5ndGggLSBjdXJyZW50TGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgbmV3SXRlbXNbaV0gPSB1bmRlZmluZWQ7IC8vIE5vIEFycmF5LmZpbGwgZXZlcnl3aGVyZS4uLlxuICAgICAgICAgICAgdGhpcy5zcGxpY2VXaXRoQXJyYXkoY3VycmVudExlbmd0aCwgMCwgbmV3SXRlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlV2l0aEFycmF5KG5ld0xlbmd0aCwgY3VycmVudExlbmd0aCAtIG5ld0xlbmd0aCk7XG4gICAgfTtcbiAgICAvLyBhZGRzIC8gcmVtb3ZlcyB0aGUgbmVjZXNzYXJ5IG51bWVyaWMgcHJvcGVydGllcyB0byB0aGlzIG9iamVjdFxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS51cGRhdGVBcnJheUxlbmd0aCA9IGZ1bmN0aW9uIChvbGRMZW5ndGgsIGRlbHRhKSB7XG4gICAgICAgIGlmIChvbGRMZW5ndGggIT09IHRoaXMubGFzdEtub3duTGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnhdIE1vZGlmaWNhdGlvbiBleGNlcHRpb246IHRoZSBpbnRlcm5hbCBzdHJ1Y3R1cmUgb2YgYW4gb2JzZXJ2YWJsZSBhcnJheSB3YXMgY2hhbmdlZC4gRGlkIHlvdSB1c2UgcGVlaygpIHRvIGNoYW5nZSBpdD9cIik7XG4gICAgICAgIHRoaXMubGFzdEtub3duTGVuZ3RoICs9IGRlbHRhO1xuICAgICAgICBpZiAoZGVsdGEgPiAwICYmIG9sZExlbmd0aCArIGRlbHRhICsgMSA+IE9CU0VSVkFCTEVfQVJSQVlfQlVGRkVSX1NJWkUpXG4gICAgICAgICAgICByZXNlcnZlQXJyYXlCdWZmZXIob2xkTGVuZ3RoICsgZGVsdGEgKyAxKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLnByb3RvdHlwZS5zcGxpY2VXaXRoQXJyYXkgPSBmdW5jdGlvbiAoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b20pO1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy52YWx1ZXMubGVuZ3RoO1xuICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPiBsZW5ndGgpXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPCAwKVxuICAgICAgICAgICAgaW5kZXggPSBNYXRoLm1heCgwLCBsZW5ndGggKyBpbmRleCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBsZW5ndGggLSBpbmRleDtcbiAgICAgICAgZWxzZSBpZiAoZGVsZXRlQ291bnQgPT09IHVuZGVmaW5lZCB8fCBkZWxldGVDb3VudCA9PT0gbnVsbClcbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihkZWxldGVDb3VudCwgbGVuZ3RoIC0gaW5kZXgpKTtcbiAgICAgICAgaWYgKG5ld0l0ZW1zID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBuZXdJdGVtcyA9IEVNUFRZX0FSUkFZO1xuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMuYXJyYXksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiBkZWxldGVDb3VudCxcbiAgICAgICAgICAgICAgICBhZGRlZDogbmV3SXRlbXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0FSUkFZO1xuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBjaGFuZ2UucmVtb3ZlZENvdW50O1xuICAgICAgICAgICAgbmV3SXRlbXMgPSBjaGFuZ2UuYWRkZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbmV3SXRlbXMgPVxuICAgICAgICAgICAgbmV3SXRlbXMubGVuZ3RoID09PSAwID8gbmV3SXRlbXMgOiBuZXdJdGVtcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIF90aGlzLmVuaGFuY2VyKHYsIHVuZGVmaW5lZCk7IH0pO1xuICAgICAgICB2YXIgbGVuZ3RoRGVsdGEgPSBuZXdJdGVtcy5sZW5ndGggLSBkZWxldGVDb3VudDtcbiAgICAgICAgdGhpcy51cGRhdGVBcnJheUxlbmd0aChsZW5ndGgsIGxlbmd0aERlbHRhKTsgLy8gY3JlYXRlIG9yIHJlbW92ZSBuZXcgZW50cmllc1xuICAgICAgICB2YXIgcmVzID0gdGhpcy5zcGxpY2VJdGVtc0ludG9WYWx1ZXMoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcyk7XG4gICAgICAgIGlmIChkZWxldGVDb3VudCAhPT0gMCB8fCBuZXdJdGVtcy5sZW5ndGggIT09IDApXG4gICAgICAgICAgICB0aGlzLm5vdGlmeUFycmF5U3BsaWNlKGluZGV4LCBuZXdJdGVtcywgcmVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlcyhyZXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLnNwbGljZUl0ZW1zSW50b1ZhbHVlcyA9IGZ1bmN0aW9uIChpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKSB7XG4gICAgICAgIGlmIChuZXdJdGVtcy5sZW5ndGggPCBNQVhfU1BMSUNFX1NJWkUpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnZhbHVlcykuc3BsaWNlLmFwcGx5KF9hLCBfX3NwcmVhZChbaW5kZXgsIGRlbGV0ZUNvdW50XSwgbmV3SXRlbXMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLnZhbHVlcy5zbGljZShpbmRleCwgaW5kZXggKyBkZWxldGVDb3VudCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IHRoaXMudmFsdWVzXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5jb25jYXQobmV3SXRlbXMsIHRoaXMudmFsdWVzLnNsaWNlKGluZGV4ICsgZGVsZXRlQ291bnQpKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm5vdGlmeUFycmF5Q2hpbGRVcGRhdGUgPSBmdW5jdGlvbiAoaW5kZXgsIG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YXIgbm90aWZ5U3B5ID0gIXRoaXMub3duZWQgJiYgaXNTcHlFbmFibGVkKCk7XG4gICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMuYXJyYXksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBpZiAobm90aWZ5U3B5KVxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoX19hc3NpZ24oe30sIGNoYW5nZSwgeyBuYW1lOiB0aGlzLmF0b20ubmFtZSB9KSk7XG4gICAgICAgIHRoaXMuYXRvbS5yZXBvcnRDaGFuZ2VkKCk7XG4gICAgICAgIGlmIChub3RpZnkpXG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgaWYgKG5vdGlmeVNweSlcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24ucHJvdG90eXBlLm5vdGlmeUFycmF5U3BsaWNlID0gZnVuY3Rpb24gKGluZGV4LCBhZGRlZCwgcmVtb3ZlZCkge1xuICAgICAgICB2YXIgbm90aWZ5U3B5ID0gIXRoaXMub3duZWQgJiYgaXNTcHlFbmFibGVkKCk7XG4gICAgICAgIHZhciBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMuYXJyYXksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICAgICAgICAgICAgICBhZGRlZDogYWRkZWQsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiByZW1vdmVkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhZGRlZC5sZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgaWYgKG5vdGlmeVNweSlcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KF9fYXNzaWduKHt9LCBjaGFuZ2UsIHsgbmFtZTogdGhpcy5hdG9tLm5hbWUgfSkpO1xuICAgICAgICB0aGlzLmF0b20ucmVwb3J0Q2hhbmdlZCgpO1xuICAgICAgICAvLyBjb25mb3JtOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9vYnNlcnZlXG4gICAgICAgIGlmIChub3RpZnkpXG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKTtcbiAgICAgICAgaWYgKG5vdGlmeVNweSlcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uO1xufSgpKTtcbnZhciBPYnNlcnZhYmxlQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9ic2VydmFibGVBcnJheSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlQXJyYXkoaW5pdGlhbFZhbHVlcywgZW5oYW5jZXIsIG5hbWUsIG93bmVkKSB7XG4gICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IFwiT2JzZXJ2YWJsZUFycmF5QFwiICsgZ2V0TmV4dElkKCk7IH1cbiAgICAgICAgaWYgKG93bmVkID09PSB2b2lkIDApIHsgb3duZWQgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgYWRtID0gbmV3IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKG5hbWUsIGVuaGFuY2VyLCBfdGhpcywgb3duZWQpO1xuICAgICAgICBhZGRIaWRkZW5GaW5hbFByb3AoX3RoaXMsIFwiJG1vYnhcIiwgYWRtKTtcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZXMgJiYgaW5pdGlhbFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzLnNwbGljZVdpdGhBcnJheSgwLCAwLCBpbml0aWFsVmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2FmYXJpUHJvdG90eXBlU2V0dGVySW5oZXJpdGFuY2VCdWcpIHtcbiAgICAgICAgICAgIC8vIFNlZW1zIHRoYXQgU2FmYXJpIHdvbid0IHVzZSBudW1lcmljIHByb3RvdHlwZSBzZXR0ZXIgdW50aWxsIGFueSAqIG51bWVyaWMgcHJvcGVydHkgaXNcbiAgICAgICAgICAgIC8vIGRlZmluZWQgb24gdGhlIGluc3RhbmNlLiBBZnRlciB0aGF0IGl0IHdvcmtzIGZpbmUsIGV2ZW4gaWYgdGhpcyBwcm9wZXJ0eSBpcyBkZWxldGVkLlxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFkbS5hcnJheSwgXCIwXCIsIEVOVFJZXzApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS5pbnRlcmNlcHQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy4kbW9ieC5pbnRlcmNlcHQoaGFuZGxlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAobGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICBpZiAoZmlyZUltbWVkaWF0ZWx5ID09PSB2b2lkIDApIHsgZmlyZUltbWVkaWF0ZWx5ID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuJG1vYngub2JzZXJ2ZShsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZSgwKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJyYXlzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcnJheXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRtb2J4LmF0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkodGhpcy5wZWVrKCksIGFycmF5cy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIChpc09ic2VydmFibGVBcnJheShhKSA/IGEucGVlaygpIDogYSk7IH0pKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIChuZXdJdGVtcykge1xuICAgICAgICByZXR1cm4gdGhpcy4kbW9ieC5zcGxpY2VXaXRoQXJyYXkoMCwgdGhpcy4kbW9ieC52YWx1ZXMubGVuZ3RoLCBuZXdJdGVtcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIGFycmF5IGJhY2sgdG8gYSAoc2hhbGxvdykgamF2YXNjcmlwdCBzdHJ1Y3R1cmUuXG4gICAgICogRm9yIGEgZGVlcCBjbG9uZSB1c2UgbW9ieC50b0pTXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS50b0pTID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZWQgYnkgSlNPTi5zdHJpbmdpZnlcbiAgICAgICAgcmV0dXJuIHRoaXMudG9KUygpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLiRtb2J4LmF0b20ucmVwb3J0T2JzZXJ2ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG1vYnguZGVoYW5jZVZhbHVlcyh0aGlzLiRtb2J4LnZhbHVlcyk7XG4gICAgfTtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maW5kXG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGhpc0FyZywgZnJvbUluZGV4KSB7XG4gICAgICAgIGlmIChmcm9tSW5kZXggPT09IHZvaWQgMCkgeyBmcm9tSW5kZXggPSAwOyB9XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKVxuICAgICAgICAgICAgZGVwcmVjYXRlZChcIlRoZSBhcnJheS5maW5kIGZyb21JbmRleCBhcmd1bWVudCB0byBmaW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBhbnltb3JlIGluIHRoZSBuZXh0IG1ham9yXCIpO1xuICAgICAgICB2YXIgaWR4ID0gdGhpcy5maW5kSW5kZXguYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIGlkeCA9PT0gLTEgPyB1bmRlZmluZWQgOiB0aGlzLmdldChpZHgpO1xuICAgIH07XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmluZEluZGV4XG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS5maW5kSW5kZXggPSBmdW5jdGlvbiAocHJlZGljYXRlLCB0aGlzQXJnLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgaWYgKGZyb21JbmRleCA9PT0gdm9pZCAwKSB7IGZyb21JbmRleCA9IDA7IH1cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpXG4gICAgICAgICAgICBkZXByZWNhdGVkKFwiVGhlIGFycmF5LmZpbmRJbmRleCBmcm9tSW5kZXggYXJndW1lbnQgdG8gZmluZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgYW55bW9yZSBpbiB0aGUgbmV4dCBtYWpvclwiKTtcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5wZWVrKCksIGwgPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgaXRlbXNbaV0sIGksIHRoaXMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICAvKlxuICAgICAqIGZ1bmN0aW9ucyB0aGF0IGRvIGFsdGVyIHRoZSBpbnRlcm5hbCBzdHJ1Y3R1cmUgb2YgdGhlIGFycmF5LCAoYmFzZWQgb24gbGliLmVzNi5kLnRzKVxuICAgICAqIHNpbmNlIHRoZXNlIGZ1bmN0aW9ucyBhbHRlciB0aGUgaW5uZXIgc3RydWN0dXJlIG9mIHRoZSBhcnJheSwgdGhlIGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgICAqIEJlY2F1c2UgdGhlIGhhdmUgc2lkZSBlZmZlY3RzLCB0aGV5IHNob3VsZCBub3QgYmUgdXNlZCBpbiBjb21wdXRlZCBmdW5jdGlvbixcbiAgICAgKiBhbmQgZm9yIHRoYXQgcmVhc29uIHRoZSBkbyBub3QgY2FsbCBkZXBlbmRlbmN5U3RhdGUubm90aWZ5T2JzZXJ2ZWRcbiAgICAgKi9cbiAgICBPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLnNwbGljZSA9IGZ1bmN0aW9uIChpbmRleCwgZGVsZXRlQ291bnQpIHtcbiAgICAgICAgdmFyIG5ld0l0ZW1zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdJdGVtc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG1vYnguc3BsaWNlV2l0aEFycmF5KGluZGV4KTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kbW9ieC5zcGxpY2VXaXRoQXJyYXkoaW5kZXgsIGRlbGV0ZUNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4kbW9ieC5zcGxpY2VXaXRoQXJyYXkoaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLnNwbGljZVdpdGhBcnJheSA9IGZ1bmN0aW9uIChpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRtb2J4LnNwbGljZVdpdGhBcnJheShpbmRleCwgZGVsZXRlQ291bnQsIG5ld0l0ZW1zKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpdGVtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZG0gPSB0aGlzLiRtb2J4O1xuICAgICAgICBhZG0uc3BsaWNlV2l0aEFycmF5KGFkbS52YWx1ZXMubGVuZ3RoLCAwLCBpdGVtcyk7XG4gICAgICAgIHJldHVybiBhZG0udmFsdWVzLmxlbmd0aDtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheS5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpY2UoTWF0aC5tYXgodGhpcy4kbW9ieC52YWx1ZXMubGVuZ3RoIC0gMSwgMCksIDEpWzBdO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDAsIDEpWzBdO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGl0ZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFkbSA9IHRoaXMuJG1vYng7XG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXkoMCwgMCwgaXRlbXMpO1xuICAgICAgICByZXR1cm4gYWRtLnZhbHVlcy5sZW5ndGg7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHJldmVyc2UgYnkgZGVmYXVsdCBtdXRhdGVzIGluIHBsYWNlIGJlZm9yZSByZXR1cm5pbmcgdGhlIHJlc3VsdFxuICAgICAgICAvLyB3aGljaCBtYWtlcyBpdCBib3RoIGEgJ2Rlcml2YXRpb24nIGFuZCBhICdtdXRhdGlvbicuXG4gICAgICAgIC8vIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgZGVmYXVsdCBhbmQganVzdCBtYWtlIGl0IGFuIGRlcnZpdGF0aW9uXG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuc2xpY2UoKTtcbiAgICAgICAgcmV0dXJuIGNsb25lLnJldmVyc2UuYXBwbHkoY2xvbmUsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiAoY29tcGFyZUZuKSB7XG4gICAgICAgIC8vIHNvcnQgYnkgZGVmYXVsdCBtdXRhdGVzIGluIHBsYWNlIGJlZm9yZSByZXR1cm5pbmcgdGhlIHJlc3VsdFxuICAgICAgICAvLyB3aGljaCBnb2VzIGFnYWluc3QgYWxsIGdvb2QgcHJhY3RpY2VzLiBMZXQncyBub3QgY2hhbmdlIHRoZSBhcnJheSBpbiBwbGFjZSFcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY2xvbmUuc29ydC5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVBcnJheS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpZHggPSB0aGlzLiRtb2J4LmRlaGFuY2VWYWx1ZXModGhpcy4kbW9ieC52YWx1ZXMpLmluZGV4T2YodmFsdWUpO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbiAoZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gICAgICAgIGRlcHJlY2F0ZWQoXCJvYnNlcnZhYmxlQXJyYXkubW92ZSBpcyBkZXByZWNhdGVkLCB1c2UgLnNsaWNlKCkgJiAucmVwbGFjZSgpIGluc3RlYWRcIik7XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC5hcnJheV0gSW5kZXggb3V0IG9mIGJvdW5kczogXCIgKyBpbmRleCArIFwiIGlzIG5lZ2F0aXZlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuJG1vYngudmFsdWVzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbbW9ieC5hcnJheV0gSW5kZXggb3V0IG9mIGJvdW5kczogXCIgKyBpbmRleCArIFwiIGlzIG5vdCBzbWFsbGVyIHRoYW4gXCIgKyBsZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoZWNrSW5kZXguY2FsbCh0aGlzLCBmcm9tSW5kZXgpO1xuICAgICAgICBjaGVja0luZGV4LmNhbGwodGhpcywgdG9JbmRleCk7XG4gICAgICAgIGlmIChmcm9tSW5kZXggPT09IHRvSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2xkSXRlbXMgPSB0aGlzLiRtb2J4LnZhbHVlcztcbiAgICAgICAgdmFyIG5ld0l0ZW1zO1xuICAgICAgICBpZiAoZnJvbUluZGV4IDwgdG9JbmRleCkge1xuICAgICAgICAgICAgbmV3SXRlbXMgPSBfX3NwcmVhZChvbGRJdGVtcy5zbGljZSgwLCBmcm9tSW5kZXgpLCBvbGRJdGVtcy5zbGljZShmcm9tSW5kZXggKyAxLCB0b0luZGV4ICsgMSksIFtcbiAgICAgICAgICAgICAgICBvbGRJdGVtc1tmcm9tSW5kZXhdXG4gICAgICAgICAgICBdLCBvbGRJdGVtcy5zbGljZSh0b0luZGV4ICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdG9JbmRleCA8IGZyb21JbmRleFxuICAgICAgICAgICAgbmV3SXRlbXMgPSBfX3NwcmVhZChvbGRJdGVtcy5zbGljZSgwLCB0b0luZGV4KSwgW1xuICAgICAgICAgICAgICAgIG9sZEl0ZW1zW2Zyb21JbmRleF1cbiAgICAgICAgICAgIF0sIG9sZEl0ZW1zLnNsaWNlKHRvSW5kZXgsIGZyb21JbmRleCksIG9sZEl0ZW1zLnNsaWNlKGZyb21JbmRleCArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcGxhY2UobmV3SXRlbXMpO1xuICAgIH07XG4gICAgLy8gU2VlICM3MzQsIGluIGNhc2UgcHJvcGVydHkgYWNjZXNzb3JzIGFyZSB1bnJlbGlhYmxlLi4uXG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIGltcGwgPSB0aGlzLiRtb2J4O1xuICAgICAgICBpZiAoaW1wbCkge1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgaW1wbC52YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaW1wbC5hdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGltcGwuZGVoYW5jZVZhbHVlKGltcGwudmFsdWVzW2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbbW9ieC5hcnJheV0gQXR0ZW1wdCB0byByZWFkIGFuIGFycmF5IGluZGV4IChcIiArIGluZGV4ICsgXCIpIHRoYXQgaXMgb3V0IG9mIGJvdW5kcyAoXCIgKyBpbXBsXG4gICAgICAgICAgICAgICAgLnZhbHVlc1xuICAgICAgICAgICAgICAgIC5sZW5ndGggKyBcIikuIFBsZWFzZSBjaGVjayBsZW5ndGggZmlyc3QuIE91dCBvZiBib3VuZCBpbmRpY2VzIHdpbGwgbm90IGJlIHRyYWNrZWQgYnkgTW9iWFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLy8gU2VlICM3MzQsIGluIGNhc2UgcHJvcGVydHkgYWNjZXNzb3JzIGFyZSB1bnJlbGlhYmxlLi4uXG4gICAgT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoaW5kZXgsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBhZG0gPSB0aGlzLiRtb2J4O1xuICAgICAgICB2YXIgdmFsdWVzID0gYWRtLnZhbHVlcztcbiAgICAgICAgaWYgKGluZGV4IDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIGF0IGluZGV4IGluIHJhbmdlXG4gICAgICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZChhZG0uYXRvbSk7XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyhhZG0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGludGVyY2VwdENoYW5nZShhZG0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBjaGFuZ2UubmV3VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGFkbS5lbmhhbmNlcihuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSBuZXdWYWx1ZSAhPT0gb2xkVmFsdWU7XG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBhZG0ubm90aWZ5QXJyYXlDaGlsZFVwZGF0ZShpbmRleCwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbmRleCA9PT0gdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gYWRkIGEgbmV3IGl0ZW1cbiAgICAgICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXkoaW5kZXgsIDAsIFtuZXdWYWx1ZV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gb3V0IG9mIGJvdW5kc1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnguYXJyYXldIEluZGV4IG91dCBvZiBib3VuZHMsIFwiICsgaW5kZXggKyBcIiBpcyBsYXJnZXIgdGhhbiBcIiArIHZhbHVlcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZUFycmF5O1xufShTdHViQXJyYXkpKTtcbmRlY2xhcmVJdGVyYXRvcihPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLCBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgdGhpcy4kbW9ieC5hdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBuZXh0SW5kZXggPSAwO1xuICAgIHJldHVybiBtYWtlSXRlcmFibGUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dEluZGV4IDwgc2VsZi5sZW5ndGhcbiAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IHNlbGZbbmV4dEluZGV4KytdLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgOiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZSwgXCJsZW5ndGhcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG1vYnguZ2V0QXJyYXlMZW5ndGgoKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKG5ld0xlbmd0aCkge1xuICAgICAgICB0aGlzLiRtb2J4LnNldEFycmF5TGVuZ3RoKG5ld0xlbmd0aCk7XG4gICAgfVxufSk7XG5bXG4gICAgXCJldmVyeVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJmb3JFYWNoXCIsXG4gICAgXCJpbmRleE9mXCIsXG4gICAgXCJqb2luXCIsXG4gICAgXCJsYXN0SW5kZXhPZlwiLFxuICAgIFwibWFwXCIsXG4gICAgXCJyZWR1Y2VcIixcbiAgICBcInJlZHVjZVJpZ2h0XCIsXG4gICAgXCJzbGljZVwiLFxuICAgIFwic29tZVwiLFxuICAgIFwidG9TdHJpbmdcIixcbiAgICBcInRvTG9jYWxlU3RyaW5nXCJcbl0uZm9yRWFjaChmdW5jdGlvbiAoZnVuY05hbWUpIHtcbiAgICB2YXIgYmFzZUZ1bmMgPSBBcnJheS5wcm90b3R5cGVbZnVuY05hbWVdO1xuICAgIGludmFyaWFudCh0eXBlb2YgYmFzZUZ1bmMgPT09IFwiZnVuY3Rpb25cIiwgXCJCYXNlIGZ1bmN0aW9uIG5vdCBkZWZpbmVkIG9uIEFycmF5IHByb3RvdHlwZTogJ1wiICsgZnVuY05hbWUgKyBcIidcIik7XG4gICAgYWRkSGlkZGVuUHJvcChPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLCBmdW5jTmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYmFzZUZ1bmMuYXBwbHkodGhpcy5wZWVrKCksIGFyZ3VtZW50cyk7XG4gICAgfSk7XG59KTtcbi8qKlxuICogV2UgZG9uJ3Qgd2FudCB0aG9zZSB0byBzaG93IHVwIGluIGBmb3IgKGNvbnN0IGtleSBpbiBhcilgIC4uLlxuICovXG5tYWtlTm9uRW51bWVyYWJsZShPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLCBbXG4gICAgXCJjb25zdHJ1Y3RvclwiLFxuICAgIFwiaW50ZXJjZXB0XCIsXG4gICAgXCJvYnNlcnZlXCIsXG4gICAgXCJjbGVhclwiLFxuICAgIFwiY29uY2F0XCIsXG4gICAgXCJnZXRcIixcbiAgICBcInJlcGxhY2VcIixcbiAgICBcInRvSlNcIixcbiAgICBcInRvSlNPTlwiLFxuICAgIFwicGVla1wiLFxuICAgIFwiZmluZFwiLFxuICAgIFwiZmluZEluZGV4XCIsXG4gICAgXCJzcGxpY2VcIixcbiAgICBcInNwbGljZVdpdGhBcnJheVwiLFxuICAgIFwicHVzaFwiLFxuICAgIFwicG9wXCIsXG4gICAgXCJzZXRcIixcbiAgICBcInNoaWZ0XCIsXG4gICAgXCJ1bnNoaWZ0XCIsXG4gICAgXCJyZXZlcnNlXCIsXG4gICAgXCJzb3J0XCIsXG4gICAgXCJyZW1vdmVcIixcbiAgICBcIm1vdmVcIixcbiAgICBcInRvU3RyaW5nXCIsXG4gICAgXCJ0b0xvY2FsZVN0cmluZ1wiXG5dKTtcbi8vIFNlZSAjMzY0XG52YXIgRU5UUllfMCA9IGNyZWF0ZUFycmF5RW50cnlEZXNjcmlwdG9yKDApO1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlFbnRyeURlc2NyaXB0b3IoaW5kZXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVBcnJheUJ1ZmZlckl0ZW0oaW5kZXgpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZSwgXCJcIiArIGluZGV4LCBjcmVhdGVBcnJheUVudHJ5RGVzY3JpcHRvcihpbmRleCkpO1xufVxuZnVuY3Rpb24gcmVzZXJ2ZUFycmF5QnVmZmVyKG1heCkge1xuICAgIGZvciAodmFyIGluZGV4ID0gT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRTsgaW5kZXggPCBtYXg7IGluZGV4KyspXG4gICAgICAgIGNyZWF0ZUFycmF5QnVmZmVySXRlbShpbmRleCk7XG4gICAgT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSA9IG1heDtcbn1cbnJlc2VydmVBcnJheUJ1ZmZlcigxMDAwKTtcbnZhciBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXCIsIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKTtcbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZUFycmF5KHRoaW5nKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaW5nKSAmJiBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKHRoaW5nLiRtb2J4KTtcbn1cblxudmFyIE9CRlVTQ0FURURfRVJST1IgPSBcIkFuIGludmFyaWFudCBmYWlsZWQsIGhvd2V2ZXIgdGhlIGVycm9yIGlzIG9iZnVzY2F0ZWQgYmVjYXVzZSB0aGlzIGlzIGFuIHByb2R1Y3Rpb24gYnVpbGQuXCI7XG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbk9iamVjdC5mcmVlemUoRU1QVFlfQVJSQVkpO1xudmFyIEVNUFRZX09CSkVDVCA9IHt9O1xuT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkpFQ1QpO1xuZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogZ2xvYmFsO1xufVxuZnVuY3Rpb24gZ2V0TmV4dElkKCkge1xuICAgIHJldHVybiArK2dsb2JhbFN0YXRlLm1vYnhHdWlkO1xufVxuZnVuY3Rpb24gZmFpbCQxKG1lc3NhZ2UpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIG1lc3NhZ2UpO1xuICAgIHRocm93IFwiWFwiOyAvLyB1bnJlYWNoYWJsZVxufVxuZnVuY3Rpb24gaW52YXJpYW50KGNoZWNrLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFjaGVjaylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21vYnhdIFwiICsgKG1lc3NhZ2UgfHwgT0JGVVNDQVRFRF9FUlJPUikpO1xufVxuLyoqXG4gKiBQcmludHMgYSBkZXByZWNhdGlvbiBtZXNzYWdlLCBidXQgb25seSBvbmUgdGltZS5cbiAqIFJldHVybnMgZmFsc2UgaWYgdGhlIGRlcHJlY2F0ZWQgbWVzc2FnZSB3YXMgYWxyZWFkeSBwcmludGVkIGJlZm9yZVxuICovXG52YXIgZGVwcmVjYXRlZE1lc3NhZ2VzID0gW107XG5mdW5jdGlvbiBkZXByZWNhdGVkKG1zZywgdGhpbmcpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaW5nKSB7XG4gICAgICAgIHJldHVybiBkZXByZWNhdGVkKFwiJ1wiICsgbXNnICsgXCInLCB1c2UgJ1wiICsgdGhpbmcgKyBcIicgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGlmIChkZXByZWNhdGVkTWVzc2FnZXMuaW5kZXhPZihtc2cpICE9PSAtMSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlcHJlY2F0ZWRNZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgY29uc29sZS5lcnJvcihcIlttb2J4XSBEZXByZWNhdGVkOiBcIiArIG1zZyk7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIE1ha2VzIHN1cmUgdGhhdCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaXMgaW52b2tlZCBhdCBtb3N0IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgIHZhciBpbnZva2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGludm9rZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGludm9rZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcbmZ1bmN0aW9uIHVuaXF1ZShsaXN0KSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAocmVzLmluZGV4T2YoaXRlbSkgPT09IC0xKVxuICAgICAgICAgICAgcmVzLnB1c2goaXRlbSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICByZXR1cm4gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIG1ha2VOb25FbnVtZXJhYmxlKG9iamVjdCwgcHJvcE5hbWVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWRkSGlkZGVuUHJvcChvYmplY3QsIHByb3BOYW1lc1tpXSwgb2JqZWN0W3Byb3BOYW1lc1tpXV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZEhpZGRlblByb3Aob2JqZWN0LCBwcm9wTmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wTmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG59XG5mdW5jdGlvbiBhZGRIaWRkZW5GaW5hbFByb3Aob2JqZWN0LCBwcm9wTmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wTmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNQcm9wZXJ0eUNvbmZpZ3VyYWJsZShvYmplY3QsIHByb3ApIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wKTtcbiAgICByZXR1cm4gIWRlc2NyaXB0b3IgfHwgKGRlc2NyaXB0b3IuY29uZmlndXJhYmxlICE9PSBmYWxzZSAmJiBkZXNjcmlwdG9yLndyaXRhYmxlICE9PSBmYWxzZSk7XG59XG5mdW5jdGlvbiBhc3NlcnRQcm9wZXJ0eUNvbmZpZ3VyYWJsZShvYmplY3QsIHByb3ApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFpc1Byb3BlcnR5Q29uZmlndXJhYmxlKG9iamVjdCwgcHJvcCkpXG4gICAgICAgIGZhaWwkMShcIkNhbm5vdCBtYWtlIHByb3BlcnR5ICdcIiArIHByb3AgKyBcIicgb2JzZXJ2YWJsZSwgaXQgaXMgbm90IGNvbmZpZ3VyYWJsZSBhbmQgd3JpdGFibGUgaW4gdGhlIHRhcmdldCBvYmplY3RcIik7XG59XG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKG5hbWUsIGNsYXp6KSB7XG4gICAgdmFyIHByb3BOYW1lID0gXCJpc01vYlhcIiArIG5hbWU7XG4gICAgY2xhenoucHJvdG90eXBlW3Byb3BOYW1lXSA9IHRydWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBpc09iamVjdCh4KSAmJiB4W3Byb3BOYW1lXSA9PT0gdHJ1ZTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXJlQm90aE5hTihhLCBiKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBiID09PSBcIm51bWJlclwiICYmIGlzTmFOKGEpICYmIGlzTmFOKGIpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGFyZ3VtZW50IGlzIGFuIGFycmF5LCBkaXNyZWdhcmRpbmcgb2JzZXJ2YWJpbGl0eS5cbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UoeCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHgpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHgpO1xufVxuZnVuY3Rpb24gaXNFUzZNYXAodGhpbmcpIHtcbiAgICBpZiAoZ2V0R2xvYmFsKCkuTWFwICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgaW5zdGFuY2VvZiBnZXRHbG9iYWwoKS5NYXApXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldE1hcExpa2VLZXlzKG1hcCkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KG1hcCkpXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1hcCkpXG4gICAgICAgIHJldHVybiBtYXAubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIF9iID0gX19yZWFkKF9hLCAxKSwga2V5ID0gX2JbMF07XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9KTtcbiAgICBpZiAoaXNFUzZNYXAobWFwKSB8fCBpc09ic2VydmFibGVNYXAobWFwKSlcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheShtYXAua2V5cygpKTtcbiAgICByZXR1cm4gZmFpbCQxKFwiQ2Fubm90IGdldCBrZXlzIGZyb20gJ1wiICsgbWFwICsgXCInXCIpO1xufVxuLy8gdXNlIEFycmF5LmZyb20gaW4gTW9ieCA1XG5mdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXQpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHIgPSBpdC5uZXh0KCk7XG4gICAgICAgIGlmIChyLmRvbmUpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgcmVzLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBwcmltaXRpdmVTeW1ib2woKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLnRvUHJpbWl0aXZlKSB8fCBcIkBAdG9QcmltaXRpdmVcIjtcbn1cbmZ1bmN0aW9uIHRvUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gbnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiA/IFwiXCIgKyB2YWx1ZSA6IHZhbHVlO1xufVxuXG4vKipcbiAqIFRoZXNlIHZhbHVlcyB3aWxsIHBlcnNpc3QgaWYgZ2xvYmFsIHN0YXRlIGlzIHJlc2V0XG4gKi9cbnZhciBwZXJzaXN0ZW50S2V5cyA9IFtcbiAgICBcIm1vYnhHdWlkXCIsXG4gICAgXCJzcHlMaXN0ZW5lcnNcIixcbiAgICBcImVuZm9yY2VBY3Rpb25zXCIsXG4gICAgXCJjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb25cIixcbiAgICBcImRpc2FibGVFcnJvckJvdW5kYXJpZXNcIixcbiAgICBcInJ1bklkXCJcbl07XG52YXIgTW9iWEdsb2JhbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9iWEdsb2JhbHMoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb2JYR2xvYmFscyB2ZXJzaW9uLlxuICAgICAgICAgKiBNb2JYIGNvbXBhdGlibGl0eSB3aXRoIG90aGVyIHZlcnNpb25zIGxvYWRlZCBpbiBtZW1vcnkgYXMgbG9uZyBhcyB0aGlzIHZlcnNpb24gbWF0Y2hlcy5cbiAgICAgICAgICogSXQgaW5kaWNhdGVzIHRoYXQgdGhlIGdsb2JhbCBzdGF0ZSBzdGlsbCBzdG9yZXMgc2ltaWxhciBpbmZvcm1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZXJzaW9uID0gNTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnRseSBydW5uaW5nIGRlcml2YXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudHJhY2tpbmdEZXJpdmF0aW9uID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFyZSB3ZSBydW5uaW5nIGEgY29tcHV0YXRpb24gY3VycmVudGx5PyAobm90IGEgcmVhY3Rpb24pXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbXB1dGF0aW9uRGVwdGggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRWFjaCB0aW1lIGEgZGVyaXZhdGlvbiBpcyB0cmFja2VkLCBpdCBpcyBhc3NpZ25lZCBhIHVuaXF1ZSBydW4taWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucnVuSWQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogJ2d1aWQnIGZvciBnZW5lcmFsIHB1cnBvc2UuIFdpbGwgYmUgcGVyc2lzdGVkIGFtb25nc3QgcmVzZXRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb2J4R3VpZCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcmUgd2UgaW4gYSBiYXRjaCBibG9jaz8gKGFuZCBob3cgbWFueSBvZiB0aGVtKVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbkJhdGNoID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9ic2VydmFibGVzIHRoYXQgZG9uJ3QgaGF2ZSBvYnNlcnZlcnMgYW55bW9yZSwgYW5kIGFyZSBhYm91dCB0byBiZVxuICAgICAgICAgKiBzdXNwZW5kZWQsIHVubGVzcyBzb21lYm9keSBlbHNlIGFjY2Vzc2VzIGl0IGluIHRoZSBzYW1lIGJhdGNoXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtJT2JzZXJ2YWJsZVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wZW5kaW5nVW5vYnNlcnZhdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpc3Qgb2Ygc2NoZWR1bGVkLCBub3QgeWV0IGV4ZWN1dGVkLCByZWFjdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBlbmRpbmdSZWFjdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFyZSB3ZSBjdXJyZW50bHkgcHJvY2Vzc2luZyByZWFjdGlvbnM/XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzUnVubmluZ1JlYWN0aW9ucyA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSXMgaXQgYWxsb3dlZCB0byBjaGFuZ2Ugb2JzZXJ2YWJsZXMgYXQgdGhpcyBwb2ludD9cbiAgICAgICAgICogSW4gZ2VuZXJhbCwgTW9iWCBkb2Vzbid0IGFsbG93IHRoYXQgd2hlbiBydW5uaW5nIGNvbXB1dGF0aW9ucyBhbmQgUmVhY3QucmVuZGVyLlxuICAgICAgICAgKiBUbyBlbnN1cmUgdGhhdCB0aG9zZSBmdW5jdGlvbnMgc3RheSBwdXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbGxvd1N0YXRlQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzdHJpY3QgbW9kZSBpcyBlbmFibGVkLCBzdGF0ZSBjaGFuZ2VzIGFyZSBieSBkZWZhdWx0IG5vdCBhbGxvd2VkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVuZm9yY2VBY3Rpb25zID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcHkgY2FsbGJhY2tzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNweUxpc3RlbmVycyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2xvYmFsbHkgYXR0YWNoZWQgZXJyb3IgaGFuZGxlcnMgdGhhdCByZWFjdCBzcGVjaWZpY2FsbHkgdG8gZXJyb3JzIGluIHJlYWN0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdhcm4gaWYgY29tcHV0ZWQgdmFsdWVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgLypcbiAgICAgICAgICogRG9uJ3QgY2F0Y2ggYW5kIHJldGhyb3cgZXhjZXB0aW9ucy4gVGhpcyBpcyB1c2VmdWwgZm9yIGluc3BlY3RpbmcgdGhlIHN0YXRlIG9mXG4gICAgICAgICAqIHRoZSBzdGFjayB3aGVuIGFuIGV4Y2VwdGlvbiBvY2N1cnMgd2hpbGUgZGVidWdnaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBNb2JYR2xvYmFscztcbn0oKSk7XG52YXIgZ2xvYmFsU3RhdGUgPSBuZXcgTW9iWEdsb2JhbHMoKTtcbnZhciBydW5Jbklzb2xhdGlvbkNhbGxlZCA9IGZhbHNlO1xue1xuICAgIHZhciBnbG9iYWxfMSA9IGdldEdsb2JhbCgpO1xuICAgIGlmICghZ2xvYmFsXzEuX19tb2J4SW5zdGFuY2VDb3VudCkge1xuICAgICAgICBnbG9iYWxfMS5fX21vYnhJbnN0YW5jZUNvdW50ID0gMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdsb2JhbF8xLl9fbW9ieEluc3RhbmNlQ291bnQrKztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXJ1bkluSXNvbGF0aW9uQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgZmFpbCQxKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgICAgICAgICBcIlRoZXJlIGFyZSBtdWx0aXBsZSBtb2J4IGluc3RhbmNlcyBhY3RpdmUuIFRoaXMgbWlnaHQgbGVhZCB0byB1bmV4cGVjdGVkIHJlc3VsdHMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzEwODIgZm9yIGRldGFpbHMuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc29sYXRlR2xvYmFsU3RhdGUoKSB7XG4gICAgcnVuSW5Jc29sYXRpb25DYWxsZWQgPSB0cnVlO1xuICAgIGdldEdsb2JhbCgpLl9fbW9ieEluc3RhbmNlQ291bnQtLTtcbn1cbmZ1bmN0aW9uIGdldEdsb2JhbFN0YXRlKCkge1xuICAgIHJldHVybiBnbG9iYWxTdGF0ZTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seTsgdGhpcyB3aWxsIGJyZWFrIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBleGlzdGluZyBvYnNlcnZhYmxlcyxcbiAqIGJ1dCBjYW4gYmUgdXNlZCB0byBnZXQgYmFjayBhdCBhIHN0YWJsZSBzdGF0ZSBhZnRlciB0aHJvd2luZyBlcnJvcnNcbiAqL1xuZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHtcbiAgICB2YXIgZGVmYXVsdEdsb2JhbHMgPSBuZXcgTW9iWEdsb2JhbHMoKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdEdsb2JhbHMpXG4gICAgICAgIGlmIChwZXJzaXN0ZW50S2V5cy5pbmRleE9mKGtleSkgPT09IC0xKVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGVba2V5XSA9IGRlZmF1bHRHbG9iYWxzW2tleV07XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSAhZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY3lUcmVlKHRoaW5nLCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiBub2RlVG9EZXBlbmRlbmN5VHJlZShnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSkpO1xufVxuZnVuY3Rpb24gbm9kZVRvRGVwZW5kZW5jeVRyZWUobm9kZSkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6IG5vZGUubmFtZVxuICAgIH07XG4gICAgaWYgKG5vZGUub2JzZXJ2aW5nICYmIG5vZGUub2JzZXJ2aW5nLmxlbmd0aCA+IDApXG4gICAgICAgIHJlc3VsdC5kZXBlbmRlbmNpZXMgPSB1bmlxdWUobm9kZS5vYnNlcnZpbmcpLm1hcChub2RlVG9EZXBlbmRlbmN5VHJlZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldE9ic2VydmVyVHJlZSh0aGluZywgcHJvcGVydHkpIHtcbiAgICByZXR1cm4gbm9kZVRvT2JzZXJ2ZXJUcmVlKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSk7XG59XG5mdW5jdGlvbiBub2RlVG9PYnNlcnZlclRyZWUobm9kZSkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6IG5vZGUubmFtZVxuICAgIH07XG4gICAgaWYgKGhhc09ic2VydmVycyhub2RlKSlcbiAgICAgICAgcmVzdWx0Lm9ic2VydmVycyA9IGdldE9ic2VydmVycyhub2RlKS5tYXAobm9kZVRvT2JzZXJ2ZXJUcmVlKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBoYXNPYnNlcnZlcnMob2JzZXJ2YWJsZSkge1xuICAgIHJldHVybiBvYnNlcnZhYmxlLm9ic2VydmVycyAmJiBvYnNlcnZhYmxlLm9ic2VydmVycy5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJzKG9ic2VydmFibGUpIHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYnNlcnZlcnM7XG59XG4vLyBmdW5jdGlvbiBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbi8vICAgICBjb25zdCBsaXN0ID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnNcbi8vICAgICBjb25zdCBtYXAgPSBvYnNlcnZhYmxlLm9ic2VydmVyc0luZGV4ZXNcbi8vICAgICBjb25zdCBsID0gbGlzdC5sZW5ndGhcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuLy8gICAgICAgICBjb25zdCBpZCA9IGxpc3RbaV0uX19tYXBpZFxuLy8gICAgICAgICBpZiAoaSkge1xuLy8gICAgICAgICAgICAgaW52YXJpYW50KG1hcFtpZF0gPT09IGksIFwiSU5URVJOQUwgRVJST1IgbWFwcyBkZXJpdmF0aW9uLl9fbWFwaWQgdG8gaW5kZXggaW4gbGlzdFwiKSAvLyBmb3IgcGVyZm9ybWFuY2Vcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIGludmFyaWFudCghKGlkIGluIG1hcCksIFwiSU5URVJOQUwgRVJST1Igb2JzZXJ2ZXIgb24gaW5kZXggMCBzaG91bGRuJ3QgYmUgaGVsZCBpbiBtYXAuXCIpIC8vIGZvciBwZXJmb3JtYW5jZVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIGludmFyaWFudChcbi8vICAgICAgICAgbGlzdC5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMobWFwKS5sZW5ndGggPT09IGxpc3QubGVuZ3RoIC0gMSxcbi8vICAgICAgICAgXCJJTlRFUk5BTCBFUlJPUiB0aGVyZSBpcyBubyBqdW5rIGluIG1hcFwiXG4vLyAgICAgKVxuLy8gfVxuZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2YWJsZSwgbm9kZSkge1xuICAgIC8vIGludmFyaWFudChub2RlLmRlcGVuZGVuY2llc1N0YXRlICE9PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiwgY2FuIGFkZCBvbmx5IGRlcGVuZGVuY2llc1N0YXRlICE9PSAtMVwiKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgPT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIGFkZCBhbHJlYWR5IGFkZGVkIG5vZGVcIik7XG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuICAgIHZhciBsID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnMubGVuZ3RoO1xuICAgIGlmIChsKSB7XG4gICAgICAgIC8vIGJlY2F1c2Ugb2JqZWN0IGFzc2lnbm1lbnQgaXMgcmVsYXRpdmVseSBleHBlbnNpdmUsIGxldCdzIG5vdCBzdG9yZSBkYXRhIGFib3V0IGluZGV4IDAuXG4gICAgICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzSW5kZXhlc1tub2RlLl9fbWFwaWRdID0gbDtcbiAgICB9XG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNbbF0gPSBub2RlO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPiBub2RlLmRlcGVuZGVuY2llc1N0YXRlKVxuICAgICAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBub2RlLmRlcGVuZGVuY2llc1N0YXRlO1xuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgIT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIGRpZG4ndCBhZGQgbm9kZVwiKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZU9ic2VydmVyKG9ic2VydmFibGUsIG5vZGUpIHtcbiAgICAvLyBpbnZhcmlhbnQoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAsIFwiSU5URVJOQUwgRVJST1IsIHJlbW92ZSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgaW5zaWRlIGJhdGNoXCIpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgcmVtb3ZlIGFscmVhZHkgcmVtb3ZlZCBub2RlXCIpO1xuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcbiAgICBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIGRlbGV0aW5nIGxhc3Qgb2JzZXJ2ZXJcbiAgICAgICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gZGVsZXRpbmcgZnJvbSBfb2JzZXJ2ZXJzSW5kZXhlcyBpcyBzdHJhaWdodCBmb3J3YXJkLCB0byBkZWxldGUgZnJvbSBfb2JzZXJ2ZXJzLCBsZXQncyBzd2FwIGBub2RlYCB3aXRoIGxhc3QgZWxlbWVudFxuICAgICAgICB2YXIgbGlzdCA9IG9ic2VydmFibGUub2JzZXJ2ZXJzO1xuICAgICAgICB2YXIgbWFwID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnNJbmRleGVzO1xuICAgICAgICB2YXIgZmlsbGVyID0gbGlzdC5wb3AoKTsgLy8gZ2V0IGxhc3QgZWxlbWVudCwgd2hpY2ggc2hvdWxkIGZpbGwgdGhlIHBsYWNlIG9mIGBub2RlYCwgc28gdGhlIGFycmF5IGRvZXNuJ3QgaGF2ZSBob2xlc1xuICAgICAgICBpZiAoZmlsbGVyICE9PSBub2RlKSB7XG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugbm9kZSB3YXMgdGhlIGxhc3QgZWxlbWVudCwgd2hpY2ggYWxyZWFkeSBnb3QgcmVtb3ZlZCBmcm9tIGFycmF5XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBtYXBbbm9kZS5fX21hcGlkXSB8fCAwOyAvLyBnZXR0aW5nIGluZGV4IG9mIGBub2RlYC4gdGhpcyBpcyB0aGUgb25seSBwbGFjZSB3ZSBhY3R1YWxseSB1c2UgbWFwLlxuICAgICAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gbWFwIHN0b3JlIGFsbCBpbmRleGVzIGJ1dCAwLCBzZWUgY29tbWVudCBpbiBgYWRkT2JzZXJ2ZXJgXG4gICAgICAgICAgICAgICAgbWFwW2ZpbGxlci5fX21hcGlkXSA9IGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1hcFtmaWxsZXIuX19tYXBpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0W2luZGV4XSA9IGZpbGxlcjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgbWFwW25vZGUuX19tYXBpZF07XG4gICAgfVxuICAgIC8vIGludmFyaWFudE9ic2VydmVycyhvYnNlcnZhYmxlKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgPT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIHJlbW92ZSBhbHJlYWR5IHJlbW92ZWQgbm9kZTJcIik7XG59XG5mdW5jdGlvbiBxdWV1ZUZvclVub2JzZXJ2YXRpb24ob2JzZXJ2YWJsZSkge1xuICAgIGlmIChvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMubGVuZ3RoID09PSAwLCBcIklOVEVSTkFMIEVSUk9SLCBzaG91bGQgb25seSBxdWV1ZSBmb3IgdW5vYnNlcnZhdGlvbiB1bm9ic2VydmVkIG9ic2VydmFibGVzXCIpO1xuICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb24gPSB0cnVlO1xuICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nVW5vYnNlcnZhdGlvbnMucHVzaChvYnNlcnZhYmxlKTtcbiAgICB9XG59XG4vKipcbiAqIEJhdGNoIHN0YXJ0cyBhIHRyYW5zYWN0aW9uLCBhdCBsZWFzdCBmb3IgcHVycG9zZXMgb2YgbWVtb2l6aW5nIENvbXB1dGVkVmFsdWVzIHdoZW4gbm90aGluZyBlbHNlIGRvZXMuXG4gKiBEdXJpbmcgYSBiYXRjaCBgb25CZWNvbWVVbm9ic2VydmVkYCB3aWxsIGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UgcGVyIG9ic2VydmFibGUuXG4gKiBBdm9pZHMgdW5uZWNlc3NhcnkgcmVjYWxjdWxhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0QmF0Y2goKSB7XG4gICAgZ2xvYmFsU3RhdGUuaW5CYXRjaCsrO1xufVxuZnVuY3Rpb24gZW5kQmF0Y2goKSB7XG4gICAgaWYgKC0tZ2xvYmFsU3RhdGUuaW5CYXRjaCA9PT0gMCkge1xuICAgICAgICBydW5SZWFjdGlvbnMoKTtcbiAgICAgICAgLy8gdGhlIGJhdGNoIGlzIGFjdHVhbGx5IGFib3V0IHRvIGZpbmlzaCwgYWxsIHVub2JzZXJ2aW5nIHNob3VsZCBoYXBwZW4gaGVyZS5cbiAgICAgICAgdmFyIGxpc3QgPSBnbG9iYWxTdGF0ZS5wZW5kaW5nVW5vYnNlcnZhdGlvbnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBsaXN0W2ldO1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5pc1BlbmRpbmdVbm9ic2VydmF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgb2JzZXJ2YWJsZSBoYWQgcmVhY3RpdmUgb2JzZXJ2ZXJzLCB0cmlnZ2VyIHRoZSBob29rc1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLm9uQmVjb21lVW5vYnNlcnZlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcHV0ZWQgdmFsdWVzIGFyZSBhdXRvbWF0aWNhbGx5IHRlYXJlZCBkb3duIHdoZW4gdGhlIGxhc3Qgb2JzZXJ2ZXIgbGVhdmVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcHJvY2VzcyBoYXBwZW5zIHJlY3Vyc2l2ZWx5LCB0aGlzIGNvbXB1dGVkIG1pZ2h0IGJlIHRoZSBsYXN0IG9ic2VydmFiZSBvZiBhbm90aGVyLCBldGMuLlxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnN1c3BlbmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gcmVwb3J0T2JzZXJ2ZWQob2JzZXJ2YWJsZSkge1xuICAgIHZhciBkZXJpdmF0aW9uID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xuICAgIGlmIChkZXJpdmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaW1wbGUgb3B0aW1pemF0aW9uLCBnaXZlIGVhY2ggZGVyaXZhdGlvbiBydW4gYW4gdW5pcXVlIGlkIChydW5JZClcbiAgICAgICAgICogQ2hlY2sgaWYgbGFzdCB0aW1lIHRoaXMgb2JzZXJ2YWJsZSB3YXMgYWNjZXNzZWQgdGhlIHNhbWUgcnVuSWQgaXMgdXNlZFxuICAgICAgICAgKiBpZiB0aGlzIGlzIHRoZSBjYXNlLCB0aGUgcmVsYXRpb24gaXMgYWxyZWFkeSBrbm93blxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGRlcml2YXRpb24ucnVuSWQgIT09IG9ic2VydmFibGUubGFzdEFjY2Vzc2VkQnkpIHtcbiAgICAgICAgICAgIG9ic2VydmFibGUubGFzdEFjY2Vzc2VkQnkgPSBkZXJpdmF0aW9uLnJ1bklkO1xuICAgICAgICAgICAgZGVyaXZhdGlvbi5uZXdPYnNlcnZpbmdbZGVyaXZhdGlvbi51bmJvdW5kRGVwc0NvdW50KytdID0gb2JzZXJ2YWJsZTtcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWQpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5vbkJlY29tZU9ic2VydmVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9ic2VydmFibGUub2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCAmJiBnbG9iYWxTdGF0ZS5pbkJhdGNoID4gMCkge1xuICAgICAgICBxdWV1ZUZvclVub2JzZXJ2YXRpb24ob2JzZXJ2YWJsZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIGZ1bmN0aW9uIGludmFyaWFudExPUyhvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSwgbXNnOiBzdHJpbmcpIHtcbi8vICAgICAvLyBpdCdzIGV4cGVuc2l2ZSBzbyBiZXR0ZXIgbm90IHJ1biBpdCBpbiBwcm9kdWNpdG9uLiBidXQgdGVtcG9yYXJpbHkgaGVscGZ1bCBmb3IgdGVzdGluZ1xuLy8gICAgIGNvbnN0IG1pbiA9IGdldE9ic2VydmVycyhvYnNlcnZhYmxlKS5yZWR1Y2UoKGEsIGIpID0+IE1hdGgubWluKGEsIGIuZGVwZW5kZW5jaWVzU3RhdGUpLCAyKVxuLy8gICAgIGlmIChtaW4gPj0gb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlKSByZXR1cm4gLy8gPC0gdGhlIG9ubHkgYXNzdW1wdGlvbiBhYm91dCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWBcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoXG4vLyAgICAgICAgIFwibG93ZXN0T2JzZXJ2ZXJTdGF0ZSBpcyB3cm9uZyBmb3IgXCIgK1xuLy8gICAgICAgICAgICAgbXNnICtcbi8vICAgICAgICAgICAgIFwiIGJlY2F1c2UgXCIgK1xuLy8gICAgICAgICAgICAgbWluICtcbi8vICAgICAgICAgICAgIFwiIDwgXCIgK1xuLy8gICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXG4vLyAgICAgKVxuLy8gfVxuLyoqXG4gKiBOT1RFOiBjdXJyZW50IHByb3BhZ2F0aW9uIG1lY2hhbmlzbSB3aWxsIGluIGNhc2Ugb2Ygc2VsZiByZXJ1bmluZyBhdXRvcnVucyBiZWhhdmUgdW5leHBlY3RlZGx5XG4gKiBJdCB3aWxsIHByb3BhZ2F0ZSBjaGFuZ2VzIHRvIG9ic2VydmVycyBmcm9tIHByZXZpb3VzIHJ1blxuICogSXQncyBoYXJkIG9yIG1heWJlIGltcG9zc2libGUgKHdpdGggcmVhc29uYWJsZSBwZXJmKSB0byBnZXQgaXQgcmlnaHQgd2l0aCBjdXJyZW50IGFwcHJvYWNoXG4gKiBIb3BlZnVsbHkgc2VsZiByZXJ1bmluZyBhdXRvcnVucyBhcmVuJ3QgYSBmZWF0dXJlIHBlb3BsZSBzaG91bGQgZGVwZW5kIG9uXG4gKiBBbHNvIG1vc3QgYmFzaWMgdXNlIGNhc2VzIHNob3VsZCBiZSBva1xuICovXG4vLyBDYWxsZWQgYnkgQXRvbSB3aGVuIGl0cyB2YWx1ZSBjaGFuZ2VzXG5mdW5jdGlvbiBwcm9wYWdhdGVDaGFuZ2VkKG9ic2VydmFibGUpIHtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjaGFuZ2VkIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuU1RBTEUpXG4gICAgICAgIHJldHVybjtcbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFO1xuICAgIHZhciBvYnNlcnZlcnMgPSBvYnNlcnZhYmxlLm9ic2VydmVycztcbiAgICB2YXIgaSA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YXIgZCA9IG9ic2VydmVyc1tpXTtcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xuICAgICAgICAgICAgaWYgKGQuaXNUcmFjaW5nICE9PSBUcmFjZU1vZGUuTk9ORSkge1xuICAgICAgICAgICAgICAgIGxvZ1RyYWNlSW5mbyhkLCBvYnNlcnZhYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGQub25CZWNvbWVTdGFsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFO1xuICAgIH1cbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjaGFuZ2VkIGVuZFwiKTtcbn1cbi8vIENhbGxlZCBieSBDb21wdXRlZFZhbHVlIHdoZW4gaXQgcmVjYWxjdWxhdGUgYW5kIGl0cyB2YWx1ZSBjaGFuZ2VkXG5mdW5jdGlvbiBwcm9wYWdhdGVDaGFuZ2VDb25maXJtZWQob2JzZXJ2YWJsZSkge1xuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNvbmZpcm1lZCBzdGFydFwiKTtcbiAgICBpZiAob2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFKVxuICAgICAgICByZXR1cm47XG4gICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5TVEFMRTtcbiAgICB2YXIgb2JzZXJ2ZXJzID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnM7XG4gICAgdmFyIGkgPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIGQgPSBvYnNlcnZlcnNbaV07XG4gICAgICAgIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlID09PSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFKVxuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuU1RBTEU7XG4gICAgICAgIGVsc2UgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSAvLyB0aGlzIGhhcHBlbnMgZHVyaW5nIGNvbXB1dGluZyBvZiBgZGAsIGp1c3Qga2VlcCBsb3dlc3RPYnNlcnZlclN0YXRlIHVwIHRvIGRhdGUuXG4gICAgICAgIClcbiAgICAgICAgICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcbiAgICB9XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIGVuZFwiKTtcbn1cbi8vIFVzZWQgYnkgY29tcHV0ZWQgd2hlbiBpdHMgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgd2UgZG9uJ3Qgd2FuJ3QgdG8gaW1tZWRpYXRlbHkgcmVjb21wdXRlLlxuZnVuY3Rpb24gcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKG9ic2VydmFibGUpIHtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJtYXliZSBzdGFydFwiKTtcbiAgICBpZiAob2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlICE9PSBJRGVyaXZhdGlvblN0YXRlLlVQX1RPX0RBVEUpXG4gICAgICAgIHJldHVybjtcbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLlBPU1NJQkxZX1NUQUxFO1xuICAgIHZhciBvYnNlcnZlcnMgPSBvYnNlcnZhYmxlLm9ic2VydmVycztcbiAgICB2YXIgaSA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YXIgZCA9IG9ic2VydmVyc1tpXTtcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGUgPT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuUE9TU0lCTFlfU1RBTEU7XG4gICAgICAgICAgICBpZiAoZC5pc1RyYWNpbmcgIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZC5vbkJlY29tZVN0YWxlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwibWF5YmUgZW5kXCIpO1xufVxuZnVuY3Rpb24gbG9nVHJhY2VJbmZvKGRlcml2YXRpb24sIG9ic2VydmFibGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIlttb2J4LnRyYWNlXSAnXCIgKyBkZXJpdmF0aW9uLm5hbWUgKyBcIicgaXMgaW52YWxpZGF0ZWQgZHVlIHRvIGEgY2hhbmdlIGluOiAnXCIgKyBvYnNlcnZhYmxlLm5hbWUgKyBcIidcIik7XG4gICAgaWYgKGRlcml2YXRpb24uaXNUcmFjaW5nID09PSBUcmFjZU1vZGUuQlJFQUspIHtcbiAgICAgICAgdmFyIGxpbmVzID0gW107XG4gICAgICAgIHByaW50RGVwVHJlZShnZXREZXBlbmRlbmN5VHJlZShkZXJpdmF0aW9uKSwgbGluZXMsIDEpO1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgbmV3IEZ1bmN0aW9uKFwiZGVidWdnZXI7XFxuLypcXG5UcmFjaW5nICdcIiArIGRlcml2YXRpb24ubmFtZSArIFwiJ1xcblxcbllvdSBhcmUgZW50ZXJpbmcgdGhpcyBicmVhayBwb2ludCBiZWNhdXNlIGRlcml2YXRpb24gJ1wiICsgZGVyaXZhdGlvbi5uYW1lICsgXCInIGlzIGJlaW5nIHRyYWNlZCBhbmQgJ1wiICsgb2JzZXJ2YWJsZS5uYW1lICsgXCInIGlzIG5vdyBmb3JjaW5nIGl0IHRvIHVwZGF0ZS5cXG5KdXN0IGZvbGxvdyB0aGUgc3RhY2t0cmFjZSB5b3Ugc2hvdWxkIG5vdyBzZWUgaW4gdGhlIGRldnRvb2xzIHRvIHNlZSBwcmVjaXNlbHkgd2hhdCBwaWVjZSBvZiB5b3VyIGNvZGUgaXMgY2F1c2luZyB0aGlzIHVwZGF0ZVxcblRoZSBzdGFja2ZyYW1lIHlvdSBhcmUgbG9va2luZyBmb3IgaXMgYXQgbGVhc3QgfjYtOCBzdGFjay1mcmFtZXMgdXAuXFxuXFxuXCIgKyAoZGVyaXZhdGlvbiBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUgPyBkZXJpdmF0aW9uLmRlcml2YXRpb24udG9TdHJpbmcoKSA6IFwiXCIpICsgXCJcXG5cXG5UaGUgZGVwZW5kZW5jaWVzIGZvciB0aGlzIGRlcml2YXRpb24gYXJlOlxcblxcblwiICsgbGluZXMuam9pbihcIlxcblwiKSArIFwiXFxuKi9cXG4gICAgXCIpKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcHJpbnREZXBUcmVlKHRyZWUsIGxpbmVzLCBkZXB0aCkge1xuICAgIGlmIChsaW5lcy5sZW5ndGggPj0gMTAwMCkge1xuICAgICAgICBsaW5lcy5wdXNoKFwiKGFuZCBtYW55IG1vcmUpXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxpbmVzLnB1c2goXCJcIiArIG5ldyBBcnJheShkZXB0aCkuam9pbihcIlxcdFwiKSArIHRyZWUubmFtZSk7IC8vIE1XRTogbm90IHRoZSBmYXN0ZXN0LCBidXQgdGhlIGVhc2llc3Qgd2F5IDopXG4gICAgaWYgKHRyZWUuZGVwZW5kZW5jaWVzKVxuICAgICAgICB0cmVlLmRlcGVuZGVuY2llcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gcHJpbnREZXBUcmVlKGNoaWxkLCBsaW5lcywgZGVwdGggKyAxKTsgfSk7XG59XG5cbnZhciBJRGVyaXZhdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChJRGVyaXZhdGlvblN0YXRlKSB7XG4gICAgLy8gYmVmb3JlIGJlaW5nIHJ1biBvciAob3V0c2lkZSBiYXRjaCBhbmQgbm90IGJlaW5nIG9ic2VydmVkKVxuICAgIC8vIGF0IHRoaXMgcG9pbnQgZGVyaXZhdGlvbiBpcyBub3QgaG9sZGluZyBhbnkgZGF0YSBhYm91dCBkZXBlbmRlbmN5IHRyZWVcbiAgICBJRGVyaXZhdGlvblN0YXRlW0lEZXJpdmF0aW9uU3RhdGVbXCJOT1RfVFJBQ0tJTkdcIl0gPSAtMV0gPSBcIk5PVF9UUkFDS0lOR1wiO1xuICAgIC8vIG5vIHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkIHNpbmNlIGxhc3QgY29tcHV0YXRpb25cbiAgICAvLyB3b24ndCByZWNhbGN1bGF0ZSBkZXJpdmF0aW9uXG4gICAgLy8gdGhpcyBpcyB3aGF0IG1ha2VzIG1vYnggZmFzdFxuICAgIElEZXJpdmF0aW9uU3RhdGVbSURlcml2YXRpb25TdGF0ZVtcIlVQX1RPX0RBVEVcIl0gPSAwXSA9IFwiVVBfVE9fREFURVwiO1xuICAgIC8vIHNvbWUgZGVlcCBkZXBlbmRlbmN5IGNoYW5nZWQsIGJ1dCBkb24ndCBrbm93IGlmIHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkXG4gICAgLy8gd2lsbCByZXF1aXJlIHRvIGNoZWNrIGZpcnN0IGlmIFVQX1RPX0RBVEUgb3IgUE9TU0lCTFlfU1RBTEVcbiAgICAvLyBjdXJyZW50bHkgb25seSBDb21wdXRlZFZhbHVlIHdpbGwgcHJvcGFnYXRlIFBPU1NJQkxZX1NUQUxFXG4gICAgLy9cbiAgICAvLyBoYXZpbmcgdGhpcyBzdGF0ZSBpcyBzZWNvbmQgYmlnIG9wdGltaXphdGlvbjpcbiAgICAvLyBkb24ndCBoYXZlIHRvIHJlY29tcHV0ZSBvbiBldmVyeSBkZXBlbmRlbmN5IGNoYW5nZSwgYnV0IG9ubHkgd2hlbiBpdCdzIG5lZWRlZFxuICAgIElEZXJpdmF0aW9uU3RhdGVbSURlcml2YXRpb25TdGF0ZVtcIlBPU1NJQkxZX1NUQUxFXCJdID0gMV0gPSBcIlBPU1NJQkxZX1NUQUxFXCI7XG4gICAgLy8gQSBzaGFsbG93IGRlcGVuZGVuY3kgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCBjb21wdXRhdGlvbiBhbmQgdGhlIGRlcml2YXRpb25cbiAgICAvLyB3aWxsIG5lZWQgdG8gcmVjb21wdXRlIHdoZW4gaXQncyBuZWVkZWQgbmV4dC5cbiAgICBJRGVyaXZhdGlvblN0YXRlW0lEZXJpdmF0aW9uU3RhdGVbXCJTVEFMRVwiXSA9IDJdID0gXCJTVEFMRVwiO1xufSkoSURlcml2YXRpb25TdGF0ZSB8fCAoSURlcml2YXRpb25TdGF0ZSA9IHt9KSk7XG52YXIgVHJhY2VNb2RlO1xuKGZ1bmN0aW9uIChUcmFjZU1vZGUpIHtcbiAgICBUcmFjZU1vZGVbVHJhY2VNb2RlW1wiTk9ORVwiXSA9IDBdID0gXCJOT05FXCI7XG4gICAgVHJhY2VNb2RlW1RyYWNlTW9kZVtcIkxPR1wiXSA9IDFdID0gXCJMT0dcIjtcbiAgICBUcmFjZU1vZGVbVHJhY2VNb2RlW1wiQlJFQUtcIl0gPSAyXSA9IFwiQlJFQUtcIjtcbn0pKFRyYWNlTW9kZSB8fCAoVHJhY2VNb2RlID0ge30pKTtcbnZhciBDYXVnaHRFeGNlcHRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2F1Z2h0RXhjZXB0aW9uKGNhdXNlKSB7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICAgICAgLy8gRW1wdHlcbiAgICB9XG4gICAgcmV0dXJuIENhdWdodEV4Y2VwdGlvbjtcbn0oKSk7XG5mdW5jdGlvbiBpc0NhdWdodEV4Y2VwdGlvbihlKSB7XG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDYXVnaHRFeGNlcHRpb247XG59XG4vKipcbiAqIEZpbmRzIG91dCB3aGV0aGVyIGFueSBkZXBlbmRlbmN5IG9mIHRoZSBkZXJpdmF0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICogSWYgZGVwZW5kZW5jaWVzU3RhdGUgaXMgMSB0aGVuIGl0IHdpbGwgcmVjYWxjdWxhdGUgZGVwZW5kZW5jaWVzLFxuICogaWYgYW55IGRlcGVuZGVuY3kgY2hhbmdlZCBpdCB3aWxsIHByb3BhZ2F0ZSBpdCBieSBjaGFuZ2luZyBkZXBlbmRlbmNpZXNTdGF0ZSB0byAyLlxuICpcbiAqIEJ5IGl0ZXJhdGluZyBvdmVyIHRoZSBkZXBlbmRlbmNpZXMgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IHdlcmUgcmVwb3J0ZWQgYW5kXG4gKiBzdG9wcGluZyBvbiB0aGUgZmlyc3QgY2hhbmdlLCBhbGwgdGhlIHJlY2FsY3VsYXRpb25zIGFyZSBvbmx5IGNhbGxlZCBmb3IgQ29tcHV0ZWRWYWx1ZXNcbiAqIHRoYXQgd2lsbCBiZSB0cmFja2VkIGJ5IGRlcml2YXRpb24uIFRoYXQgaXMgYmVjYXVzZSB3ZSBhc3N1bWUgdGhhdCBpZiB0aGUgZmlyc3QgeFxuICogZGVwZW5kZW5jaWVzIG9mIHRoZSBkZXJpdmF0aW9uIGRvZXNuJ3QgY2hhbmdlIHRoZW4gdGhlIGRlcml2YXRpb24gc2hvdWxkIHJ1biB0aGUgc2FtZSB3YXlcbiAqIHVwIHVudGlsIGFjY2Vzc2luZyB4LXRoIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHNob3VsZENvbXB1dGUoZGVyaXZhdGlvbikge1xuICAgIHN3aXRjaCAoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSkge1xuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORzpcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlLlNUQUxFOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZS5QT1NTSUJMWV9TVEFMRToge1xuICAgICAgICAgICAgdmFyIHByZXZVbnRyYWNrZWQgPSB1bnRyYWNrZWRTdGFydCgpOyAvLyBubyBuZWVkIGZvciB0aG9zZSBjb21wdXRlZHMgdG8gYmUgcmVwb3J0ZWQsIHRoZXkgd2lsbCBiZSBwaWNrZWQgdXAgaW4gdHJhY2tEZXJpdmVkRnVuY3Rpb24uXG4gICAgICAgICAgICB2YXIgb2JzID0gZGVyaXZhdGlvbi5vYnNlcnZpbmcsIGwgPSBvYnMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gb2JzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbXB1dGVkVmFsdWUob2JqKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgaW50ZXJlc3RlZCBpbiB0aGUgdmFsdWUgKm9yKiBleGNlcHRpb24gYXQgdGhpcyBtb21lbnQsIGJ1dCBpZiB0aGVyZSBpcyBvbmUsIG5vdGlmeSBhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgQ29tcHV0ZWRWYWx1ZSBgb2JqYCBhY3R1YWxseSBjaGFuZ2VkIGl0IHdpbGwgYmUgY29tcHV0ZWQgYW5kIHByb3BhZ2F0ZWQgdG8gaXRzIG9ic2VydmVycy5cbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGBkZXJpdmF0aW9uYCBpcyBhbiBvYnNlcnZlciBvZiBgb2JqYFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5TVEFMRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uKTtcbiAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VW50cmFja2VkKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzQ29tcHV0aW5nRGVyaXZhdGlvbigpIHtcbiAgICByZXR1cm4gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uICE9PSBudWxsOyAvLyBmaWx0ZXIgb3V0IGFjdGlvbnMgaW5zaWRlIGNvbXB1dGF0aW9uc1xufVxuZnVuY3Rpb24gY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQoYXRvbSkge1xuICAgIHZhciBoYXNPYnNlcnZlcnMkJDEgPSBhdG9tLm9ic2VydmVycy5sZW5ndGggPiAwO1xuICAgIC8vIFNob3VsZCBuZXZlciBiZSBwb3NzaWJsZSB0byBjaGFuZ2UgYW4gb2JzZXJ2ZWQgb2JzZXJ2YWJsZSBmcm9tIGluc2lkZSBjb21wdXRlZCwgc2VlICM3OThcbiAgICBpZiAoZ2xvYmFsU3RhdGUuY29tcHV0YXRpb25EZXB0aCA+IDAgJiYgaGFzT2JzZXJ2ZXJzJCQxKVxuICAgICAgICBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcIkNvbXB1dGVkIHZhbHVlcyBhcmUgbm90IGFsbG93ZWQgdG8gY2F1c2Ugc2lkZSBlZmZlY3RzIGJ5IGNoYW5naW5nIG9ic2VydmFibGVzIHRoYXQgYXJlIGFscmVhZHkgYmVpbmcgb2JzZXJ2ZWQuIFRyaWVkIHRvIG1vZGlmeTogXCIgKyBhdG9tLm5hbWUpO1xuICAgIC8vIFNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gY2hhbmdlIG9ic2VydmVkIHN0YXRlIG91dHNpZGUgc3RyaWN0IG1vZGUsIGV4Y2VwdCBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIHNlZSAjNTYzXG4gICAgaWYgKCFnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyAmJiBoYXNPYnNlcnZlcnMkJDEpXG4gICAgICAgIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIChnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9uc1xuICAgICAgICAgICAgICAgID8gXCJTaW5jZSBzdHJpY3QtbW9kZSBpcyBlbmFibGVkLCBjaGFuZ2luZyBvYnNlcnZlZCBvYnNlcnZhYmxlIHZhbHVlcyBvdXRzaWRlIGFjdGlvbnMgaXMgbm90IGFsbG93ZWQuIFBsZWFzZSB3cmFwIHRoZSBjb2RlIGluIGFuIGBhY3Rpb25gIGlmIHRoaXMgY2hhbmdlIGlzIGludGVuZGVkLiBUcmllZCB0byBtb2RpZnk6IFwiXG4gICAgICAgICAgICAgICAgOiBcIlNpZGUgZWZmZWN0cyBsaWtlIGNoYW5naW5nIHN0YXRlIGFyZSBub3QgYWxsb3dlZCBhdCB0aGlzIHBvaW50LiBBcmUgeW91IHRyeWluZyB0byBtb2RpZnkgc3RhdGUgZnJvbSwgZm9yIGV4YW1wbGUsIHRoZSByZW5kZXIgZnVuY3Rpb24gb2YgYSBSZWFjdCBjb21wb25lbnQ/IFRyaWVkIHRvIG1vZGlmeTogXCIpICtcbiAgICAgICAgICAgICAgICBhdG9tLm5hbWUpO1xufVxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gYGZgIGFuZCB0cmFja3Mgd2hpY2ggb2JzZXJ2YWJsZXMgYXJlIGJlaW5nIGFjY2Vzc2VkLlxuICogVGhlIHRyYWNraW5nIGluZm9ybWF0aW9uIGlzIHN0b3JlZCBvbiB0aGUgYGRlcml2YXRpb25gIG9iamVjdCBhbmQgdGhlIGRlcml2YXRpb24gaXMgcmVnaXN0ZXJlZFxuICogYXMgb2JzZXJ2ZXIgb2YgYW55IG9mIHRoZSBhY2Nlc3NlZCBvYnNlcnZhYmxlcy5cbiAqL1xuZnVuY3Rpb24gdHJhY2tEZXJpdmVkRnVuY3Rpb24oZGVyaXZhdGlvbiwgZiwgY29udGV4dCkge1xuICAgIC8vIHByZSBhbGxvY2F0ZSBhcnJheSBhbGxvY2F0aW9uICsgcm9vbSBmb3IgdmFyaWF0aW9uIGluIGRlcHNcbiAgICAvLyBhcnJheSB3aWxsIGJlIHRyaW1tZWQgYnkgYmluZERlcGVuZGVuY2llc1xuICAgIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb24pO1xuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nID0gbmV3IEFycmF5KGRlcml2YXRpb24ub2JzZXJ2aW5nLmxlbmd0aCArIDEwMCk7XG4gICAgZGVyaXZhdGlvbi51bmJvdW5kRGVwc0NvdW50ID0gMDtcbiAgICBkZXJpdmF0aW9uLnJ1bklkID0gKytnbG9iYWxTdGF0ZS5ydW5JZDtcbiAgICB2YXIgcHJldlRyYWNraW5nID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IGRlcml2YXRpb247XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSBmLmNhbGwoY29udGV4dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZi5jYWxsKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IHByZXZUcmFja2luZztcbiAgICBiaW5kRGVwZW5kZW5jaWVzKGRlcml2YXRpb24pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIGRpZmZzIG5ld09ic2VydmluZyB3aXRoIG9ic2VydmluZy5cbiAqIHVwZGF0ZSBvYnNlcnZpbmcgdG8gYmUgbmV3T2JzZXJ2aW5nIHdpdGggdW5pcXVlIG9ic2VydmFibGVzXG4gKiBub3RpZnkgb2JzZXJ2ZXJzIHRoYXQgYmVjb21lIG9ic2VydmVkL3Vub2JzZXJ2ZWRcbiAqL1xuZnVuY3Rpb24gYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgIT09IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HLCBcIklOVEVSTkFMIEVSUk9SIGJpbmREZXBlbmRlbmNpZXMgZXhwZWN0cyBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlICE9PSAtMVwiKTtcbiAgICB2YXIgcHJldk9ic2VydmluZyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nO1xuICAgIHZhciBvYnNlcnZpbmcgPSAoZGVyaXZhdGlvbi5vYnNlcnZpbmcgPSBkZXJpdmF0aW9uLm5ld09ic2VydmluZyk7XG4gICAgdmFyIGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBuZXcgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKHRoaXMgbGlzdCBjYW4gY29udGFpbiBkdXBsaWNhdGVzKTpcbiAgICAvLyAgIDA6IGZpcnN0IG9jY3VycmVuY2UsIGNoYW5nZSB0byAxIGFuZCBrZWVwIGl0XG4gICAgLy8gICAxOiBleHRyYSBvY2N1cnJlbmNlLCBkcm9wIGl0XG4gICAgdmFyIGkwID0gMCwgbCA9IGRlcml2YXRpb24udW5ib3VuZERlcHNDb3VudDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgZGVwID0gb2JzZXJ2aW5nW2ldO1xuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgZGVwLmRpZmZWYWx1ZSA9IDE7XG4gICAgICAgICAgICBpZiAoaTAgIT09IGkpXG4gICAgICAgICAgICAgICAgb2JzZXJ2aW5nW2kwXSA9IGRlcDtcbiAgICAgICAgICAgIGkwKys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBjYXN0IGlzICdzYWZlJyBoZXJlLCBiZWNhdXNlIGlmIGRlcCBpcyBJT2JzZXJ2YWJsZSwgYGRlcGVuZGVuY2llc1N0YXRlYCB3aWxsIGJlIHVuZGVmaW5lZCxcbiAgICAgICAgLy8gbm90IGhpdHRpbmcgdGhlIGNvbmRpdGlvblxuICAgICAgICBpZiAoZGVwLmRlcGVuZGVuY2llc1N0YXRlID4gbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlKSB7XG4gICAgICAgICAgICBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgPSBkZXAuZGVwZW5kZW5jaWVzU3RhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JzZXJ2aW5nLmxlbmd0aCA9IGkwO1xuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nID0gbnVsbDsgLy8gbmV3T2JzZXJ2aW5nIHNob3VsZG4ndCBiZSBuZWVkZWQgb3V0c2lkZSB0cmFja2luZyAoc3RhdGVtZW50IG1vdmVkIGRvd24gdG8gd29yayBhcm91bmQgRkYgYnVnLCBzZWUgIzYxNClcbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBvbGQgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKGl0IGlzIHVuaXF1ZSBhZnRlciBsYXN0IGJpbmREZXBlbmRlbmNpZXMpXG4gICAgLy8gICAwOiBpdCdzIG5vdCBpbiBuZXcgb2JzZXJ2YWJsZXMsIHVub2JzZXJ2ZSBpdFxuICAgIC8vICAgMTogaXQga2VlcHMgYmVpbmcgb2JzZXJ2ZWQsIGRvbid0IHdhbnQgdG8gbm90aWZ5IGl0LiBjaGFuZ2UgdG8gMFxuICAgIGwgPSBwcmV2T2JzZXJ2aW5nLmxlbmd0aDtcbiAgICB3aGlsZSAobC0tKSB7XG4gICAgICAgIHZhciBkZXAgPSBwcmV2T2JzZXJ2aW5nW2xdO1xuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmVtb3ZlT2JzZXJ2ZXIoZGVwLCBkZXJpdmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBkZXAuZGlmZlZhbHVlID0gMDtcbiAgICB9XG4gICAgLy8gR28gdGhyb3VnaCBhbGwgbmV3IG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6IChub3cgaXQgc2hvdWxkIGJlIHVuaXF1ZSlcbiAgICAvLyAgIDA6IGl0IHdhcyBzZXQgdG8gMCBpbiBsYXN0IGxvb3AuIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcuXG4gICAgLy8gICAxOiBpdCB3YXNuJ3Qgb2JzZXJ2ZWQsIGxldCdzIG9ic2VydmUgaXQuIHNldCBiYWNrIHRvIDBcbiAgICB3aGlsZSAoaTAtLSkge1xuICAgICAgICB2YXIgZGVwID0gb2JzZXJ2aW5nW2kwXTtcbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgIGRlcC5kaWZmVmFsdWUgPSAwO1xuICAgICAgICAgICAgYWRkT2JzZXJ2ZXIoZGVwLCBkZXJpdmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTb21lIG5ldyBvYnNlcnZlZCBkZXJpdmF0aW9ucyBtYXkgYmVjb21lIHN0YWxlIGR1cmluZyB0aGlzIGRlcml2YXRpb24gY29tcHV0YXRpb25cbiAgICAvLyBzbyB0aGV5IGhhdmUgaGFkIG5vIGNoYW5jZSB0byBwcm9wYWdhdGUgc3RhbGVuZXNzICgjOTE2KVxuICAgIGlmIChsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgIT09IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURSkge1xuICAgICAgICBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlID0gbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlO1xuICAgICAgICBkZXJpdmF0aW9uLm9uQmVjb21lU3RhbGUoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhck9ic2VydmluZyhkZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SIGNsZWFyT2JzZXJ2aW5nIHNob3VsZCBiZSBjYWxsZWQgb25seSBpbnNpZGUgYmF0Y2hcIik7XG4gICAgdmFyIG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nO1xuICAgIGRlcml2YXRpb24ub2JzZXJ2aW5nID0gW107XG4gICAgdmFyIGkgPSBvYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIHJlbW92ZU9ic2VydmVyKG9ic1tpXSwgZGVyaXZhdGlvbik7XG4gICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HO1xufVxuZnVuY3Rpb24gdW50cmFja2VkKGFjdGlvbikge1xuICAgIHZhciBwcmV2ID0gdW50cmFja2VkU3RhcnQoKTtcbiAgICB2YXIgcmVzID0gYWN0aW9uKCk7XG4gICAgdW50cmFja2VkRW5kKHByZXYpO1xuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiB1bnRyYWNrZWRTdGFydCgpIHtcbiAgICB2YXIgcHJldiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbjtcbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBudWxsO1xuICAgIHJldHVybiBwcmV2O1xufVxuZnVuY3Rpb24gdW50cmFja2VkRW5kKHByZXYpIHtcbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBwcmV2O1xufVxuLyoqXG4gKiBuZWVkZWQgdG8ga2VlcCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWAgY29ycmVjdC4gd2hlbiBjaGFuZ2luZyBmcm9tICgyIG9yIDEpIHRvIDBcbiAqXG4gKi9cbmZ1bmN0aW9uIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb24pIHtcbiAgICBpZiAoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9PT0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFKVxuICAgICAgICByZXR1cm47XG4gICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGUuVVBfVE9fREFURTtcbiAgICB2YXIgb2JzID0gZGVyaXZhdGlvbi5vYnNlcnZpbmc7XG4gICAgdmFyIGkgPSBvYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIG9ic1tpXS5sb3dlc3RPYnNlcnZlclN0YXRlID0gSURlcml2YXRpb25TdGF0ZS5VUF9UT19EQVRFO1xufVxuXG5mdW5jdGlvbiB0cmFjZSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGVudGVyQnJlYWtQb2ludCA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgZW50ZXJCcmVha1BvaW50ID0gYXJncy5wb3AoKTtcbiAgICB2YXIgZGVyaXZhdGlvbiA9IGdldEF0b21Gcm9tQXJncyhhcmdzKTtcbiAgICBpZiAoIWRlcml2YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIFwiJ3RyYWNlKGJyZWFrPyknIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIGEgdHJhY2tlZCBjb21wdXRlZCB2YWx1ZSBvciBhIFJlYWN0aW9uLiBDb25zaWRlciBwYXNzaW5nIGluIHRoZSBjb21wdXRlZCB2YWx1ZSBvciByZWFjdGlvbiBleHBsaWNpdGx5XCIpO1xuICAgIH1cbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmcgPT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW21vYngudHJhY2VdICdcIiArIGRlcml2YXRpb24ubmFtZSArIFwiJyB0cmFjaW5nIGVuYWJsZWRcIik7XG4gICAgfVxuICAgIGRlcml2YXRpb24uaXNUcmFjaW5nID0gZW50ZXJCcmVha1BvaW50ID8gVHJhY2VNb2RlLkJSRUFLIDogVHJhY2VNb2RlLkxPRztcbn1cbmZ1bmN0aW9uIGdldEF0b21Gcm9tQXJncyhhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXRvbShhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgfVxufVxuXG52YXIgUmVhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVhY3Rpb24obmFtZSwgb25JbnZhbGlkYXRlLCBlcnJvckhhbmRsZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gXCJSZWFjdGlvbkBcIiArIGdldE5leHRJZCgpOyB9XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMub25JbnZhbGlkYXRlID0gb25JbnZhbGlkYXRlO1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlcjtcbiAgICAgICAgdGhpcy5vYnNlcnZpbmcgPSBbXTsgLy8gbm9kZXMgd2UgYXJlIGxvb2tpbmcgYXQuIE91ciB2YWx1ZSBkZXBlbmRzIG9uIHRoZXNlIG5vZGVzXG4gICAgICAgIHRoaXMubmV3T2JzZXJ2aW5nID0gW107XG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzU3RhdGUgPSBJRGVyaXZhdGlvblN0YXRlLk5PVF9UUkFDS0lORztcbiAgICAgICAgdGhpcy5kaWZmVmFsdWUgPSAwO1xuICAgICAgICB0aGlzLnJ1bklkID0gMDtcbiAgICAgICAgdGhpcy51bmJvdW5kRGVwc0NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fX21hcGlkID0gXCIjXCIgKyBnZXROZXh0SWQoKTtcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzVHJhY2tQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzVHJhY2luZyA9IFRyYWNlTW9kZS5OT05FO1xuICAgIH1cbiAgICBSZWFjdGlvbi5wcm90b3R5cGUub25CZWNvbWVTdGFsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgIH07XG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgICAgICBydW5SZWFjdGlvbnMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLmlzU2NoZWR1bGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTY2hlZHVsZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBpbnRlcm5hbCwgdXNlIHNjaGVkdWxlKCkgaWYgeW91IGludGVuZCB0byBraWNrIG9mZiBhIHJlYWN0aW9uXG4gICAgICovXG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnJ1blJlYWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpO1xuICAgICAgICAgICAgdGhpcy5faXNTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzaG91bGRDb21wdXRlKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNUcmFja1BlbmRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMub25JbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzVHJhY2tQZW5kaW5nICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uSW52YWxpZGF0ZSBkaWRuJ3QgdHJpZ2dlciB0cmFjayByaWdodCBhd2F5Li5cbiAgICAgICAgICAgICAgICAgICAgc3B5UmVwb3J0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2NoZWR1bGVkLXJlYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5kQmF0Y2goKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnRyYWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHN0YXJ0QmF0Y2goKTtcbiAgICAgICAgdmFyIG5vdGlmeSA9IGlzU3B5RW5hYmxlZCgpO1xuICAgICAgICB2YXIgc3RhcnRUaW1lO1xuICAgICAgICBpZiAobm90aWZ5KSB7XG4gICAgICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlYWN0aW9uXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cmFja0Rlcml2ZWRGdW5jdGlvbih0aGlzLCBmbiwgdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzVHJhY2tQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIC8vIGRpc3Bvc2VkIGR1cmluZyBsYXN0IHJ1bi4gQ2xlYW4gdXAgZXZlcnl0aGluZyB0aGF0IHdhcyBib3VuZCBhZnRlciB0aGUgZGlzcG9zZSBjYWxsLlxuICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2F1Z2h0RXhjZXB0aW9uKHJlc3VsdCkpXG4gICAgICAgICAgICB0aGlzLnJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbihyZXN1bHQuY2F1c2UpO1xuICAgICAgICBpZiAobm90aWZ5KSB7XG4gICAgICAgICAgICBzcHlSZXBvcnRFbmQoe1xuICAgICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVuZEJhdGNoKCk7XG4gICAgfTtcbiAgICBSZWFjdGlvbi5wcm90b3R5cGUucmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIoZXJyb3IsIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZXNzYWdlID0gXCJbbW9ieF0gRW5jb3VudGVyZWQgYW4gdW5jYXVnaHQgZXhjZXB0aW9uIHRoYXQgd2FzIHRocm93biBieSBhIHJlYWN0aW9uIG9yIG9ic2VydmVyIGNvbXBvbmVudCwgaW46ICdcIiArIHRoaXM7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXJyb3IpO1xuICAgICAgICAvKiogSWYgZGVidWdnaW5nIGJyb3VnaHQgeW91IGhlcmUsIHBsZWFzZSwgcmVhZCB0aGUgYWJvdmUgbWVzc2FnZSA6LSkuIFRueCEgKi9cbiAgICAgICAgaWYgKGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogXCJcIiArIGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoZikgeyByZXR1cm4gZihlcnJvciwgX3RoaXMpOyB9KTtcbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNSdW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgZGlzcG9zZWQgd2hpbGUgcnVubmluZywgY2xlYW4gdXAgbGF0ZXIuIE1heWJlIG5vdCBvcHRpbWFsLCBidXQgcmFyZSBjYXNlXG4gICAgICAgICAgICAgICAgc3RhcnRCYXRjaCgpO1xuICAgICAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpO1xuICAgICAgICAgICAgICAgIGVuZEJhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0aW9uLnByb3RvdHlwZS5nZXREaXNwb3NlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLmRpc3Bvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgci4kbW9ieCA9IHRoaXM7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJSZWFjdGlvbltcIiArIHRoaXMubmFtZSArIFwiXVwiO1xuICAgIH07XG4gICAgUmVhY3Rpb24ucHJvdG90eXBlLnRyYWNlID0gZnVuY3Rpb24gKGVudGVyQnJlYWtQb2ludCkge1xuICAgICAgICBpZiAoZW50ZXJCcmVha1BvaW50ID09PSB2b2lkIDApIHsgZW50ZXJCcmVha1BvaW50ID0gZmFsc2U7IH1cbiAgICAgICAgdHJhY2UodGhpcywgZW50ZXJCcmVha1BvaW50KTtcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdGlvbjtcbn0oKSk7XG5mdW5jdGlvbiBvblJlYWN0aW9uRXJyb3IoaGFuZGxlcikge1xuICAgIGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZHggPSBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuICAgIH07XG59XG4vKipcbiAqIE1hZ2ljIG51bWJlciBhbGVydCFcbiAqIERlZmluZXMgd2l0aGluIGhvdyBtYW55IHRpbWVzIGEgcmVhY3Rpb24gaXMgYWxsb3dlZCB0byByZS10cmlnZ2VyIGl0c2VsZlxuICogdW50aWwgaXQgaXMgYXNzdW1lZCB0aGF0IHRoaXMgaXMgZ29ubmEgYmUgYSBuZXZlciBlbmRpbmcgbG9vcC4uLlxuICovXG52YXIgTUFYX1JFQUNUSU9OX0lURVJBVElPTlMgPSAxMDA7XG52YXIgcmVhY3Rpb25TY2hlZHVsZXIgPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZigpOyB9O1xuZnVuY3Rpb24gcnVuUmVhY3Rpb25zKCkge1xuICAgIC8vIFRyYW1wb2xpbmluZywgaWYgcnVuUmVhY3Rpb25zIGFyZSBhbHJlYWR5IHJ1bm5pbmcsIG5ldyByZWFjdGlvbnMgd2lsbCBiZSBwaWNrZWQgdXBcbiAgICBpZiAoZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDAgfHwgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zKVxuICAgICAgICByZXR1cm47XG4gICAgcmVhY3Rpb25TY2hlZHVsZXIocnVuUmVhY3Rpb25zSGVscGVyKTtcbn1cbmZ1bmN0aW9uIHJ1blJlYWN0aW9uc0hlbHBlcigpIHtcbiAgICBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMgPSB0cnVlO1xuICAgIHZhciBhbGxSZWFjdGlvbnMgPSBnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zO1xuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAvLyBXaGlsZSBydW5uaW5nIHJlYWN0aW9ucywgbmV3IHJlYWN0aW9ucyBtaWdodCBiZSB0cmlnZ2VyZWQuXG4gICAgLy8gSGVuY2Ugd2Ugd29yayB3aXRoIHR3byB2YXJpYWJsZXMgYW5kIGNoZWNrIHdoZXRoZXJcbiAgICAvLyB3ZSBjb252ZXJnZSB0byBubyByZW1haW5pbmcgcmVhY3Rpb25zIGFmdGVyIGEgd2hpbGUuXG4gICAgd2hpbGUgKGFsbFJlYWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICgrK2l0ZXJhdGlvbnMgPT09IE1BWF9SRUFDVElPTl9JVEVSQVRJT05TKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUmVhY3Rpb24gZG9lc24ndCBjb252ZXJnZSB0byBhIHN0YWJsZSBzdGF0ZSBhZnRlciBcIiArIE1BWF9SRUFDVElPTl9JVEVSQVRJT05TICsgXCIgaXRlcmF0aW9ucy5cIiArXG4gICAgICAgICAgICAgICAgKFwiIFByb2JhYmx5IHRoZXJlIGlzIGEgY3ljbGUgaW4gdGhlIHJlYWN0aXZlIGZ1bmN0aW9uOiBcIiArIGFsbFJlYWN0aW9uc1swXSkpO1xuICAgICAgICAgICAgYWxsUmVhY3Rpb25zLnNwbGljZSgwKTsgLy8gY2xlYXIgcmVhY3Rpb25zXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlbWFpbmluZ1JlYWN0aW9ucyA9IGFsbFJlYWN0aW9ucy5zcGxpY2UoMCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVtYWluaW5nUmVhY3Rpb25zLmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgICAgICAgIHJlbWFpbmluZ1JlYWN0aW9uc1tpXS5ydW5SZWFjdGlvbigpO1xuICAgIH1cbiAgICBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMgPSBmYWxzZTtcbn1cbnZhciBpc1JlYWN0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIlJlYWN0aW9uXCIsIFJlYWN0aW9uKTtcbmZ1bmN0aW9uIHNldFJlYWN0aW9uU2NoZWR1bGVyKGZuKSB7XG4gICAgdmFyIGJhc2VTY2hlZHVsZXIgPSByZWFjdGlvblNjaGVkdWxlcjtcbiAgICByZWFjdGlvblNjaGVkdWxlciA9IGZ1bmN0aW9uIChmKSB7IHJldHVybiBmbihmdW5jdGlvbiAoKSB7IHJldHVybiBiYXNlU2NoZWR1bGVyKGYpOyB9KTsgfTtcbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZSh0aGluZywgcHJvcE9yQ2IsIGNiT3JGaXJlLCBmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICBpZiAodHlwZW9mIGNiT3JGaXJlID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBvYnNlcnZlT2JzZXJ2YWJsZVByb3BlcnR5KHRoaW5nLCBwcm9wT3JDYiwgY2JPckZpcmUsIGZpcmVJbW1lZGlhdGVseSk7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gb2JzZXJ2ZU9ic2VydmFibGUodGhpbmcsIHByb3BPckNiLCBjYk9yRmlyZSk7XG59XG5mdW5jdGlvbiBvYnNlcnZlT2JzZXJ2YWJsZSh0aGluZywgbGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSkge1xuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZykub2JzZXJ2ZShsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KTtcbn1cbmZ1bmN0aW9uIG9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkodGhpbmcsIHByb3BlcnR5LCBsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wZXJ0eSkub2JzZXJ2ZShsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5KTtcbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0KHRoaW5nLCBwcm9wT3JIYW5kbGVyLCBoYW5kbGVyKSB7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBpbnRlcmNlcHRQcm9wZXJ0eSh0aGluZywgcHJvcE9ySGFuZGxlciwgaGFuZGxlcik7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gaW50ZXJjZXB0SW50ZXJjZXB0YWJsZSh0aGluZywgcHJvcE9ySGFuZGxlcik7XG59XG5mdW5jdGlvbiBpbnRlcmNlcHRJbnRlcmNlcHRhYmxlKHRoaW5nLCBoYW5kbGVyKSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKS5pbnRlcmNlcHQoaGFuZGxlcik7XG59XG5mdW5jdGlvbiBpbnRlcmNlcHRQcm9wZXJ0eSh0aGluZywgcHJvcGVydHksIGhhbmRsZXIpIHtcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KS5pbnRlcmNlcHQoaGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIHdoZW4ocHJlZGljYXRlLCBhcmcxLCBhcmcyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgfHwgKGFyZzEgJiYgdHlwZW9mIGFyZzEgPT09IFwib2JqZWN0XCIpKVxuICAgICAgICByZXR1cm4gd2hlblByb21pc2UocHJlZGljYXRlLCBhcmcxKTtcbiAgICByZXR1cm4gX3doZW4ocHJlZGljYXRlLCBhcmcxLCBhcmcyIHx8IHt9KTtcbn1cbmZ1bmN0aW9uIF93aGVuKHByZWRpY2F0ZSwgZWZmZWN0LCBvcHRzKSB7XG4gICAgdmFyIHRpbWVvdXRIYW5kbGU7XG4gICAgaWYgKHR5cGVvZiBvcHRzLnRpbWVvdXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFkaXNwb3Nlci4kbW9ieC5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJXSEVOX1RJTUVPVVRcIik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMub25FcnJvcilcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRzLnRpbWVvdXQpO1xuICAgIH1cbiAgICBvcHRzLm5hbWUgPSBvcHRzLm5hbWUgfHwgXCJXaGVuQFwiICsgZ2V0TmV4dElkKCk7XG4gICAgdmFyIGVmZmVjdEFjdGlvbiA9IGNyZWF0ZUFjdGlvbihvcHRzLm5hbWUgKyBcIi1lZmZlY3RcIiwgZWZmZWN0KTtcbiAgICB2YXIgZGlzcG9zZXIgPSBhdXRvcnVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoKSkge1xuICAgICAgICAgICAgci5kaXNwb3NlKCk7XG4gICAgICAgICAgICBpZiAodGltZW91dEhhbmRsZSlcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH0sIG9wdHMpO1xuICAgIHJldHVybiBkaXNwb3Nlcjtcbn1cbmZ1bmN0aW9uIHdoZW5Qcm9taXNlKHByZWRpY2F0ZSwgb3B0cykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgb3B0cyAmJiBvcHRzLm9uRXJyb3IpXG4gICAgICAgIHJldHVybiBmYWlsJDEoXCJ0aGUgb3B0aW9ucyAnb25FcnJvcicgYW5kICdwcm9taXNlJyBjYW5ub3QgYmUgY29tYmluZWRcIik7XG4gICAgdmFyIGNhbmNlbDtcbiAgICB2YXIgcmVzID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgZGlzcG9zZXIgPSBfd2hlbihwcmVkaWNhdGUsIHJlc29sdmUsIF9fYXNzaWduKHt9LCBvcHRzLCB7IG9uRXJyb3I6IHJlamVjdCB9KSk7XG4gICAgICAgIGNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRpc3Bvc2VyKCk7XG4gICAgICAgICAgICByZWplY3QoXCJXSEVOX0NBTkNFTExFRFwiKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXMuY2FuY2VsID0gY2FuY2VsO1xuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGtleXMob2JqKSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouJG1vYnguZ2V0S2V5cygpO1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5fa2V5cy5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZmFpbCQxKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBcIidrZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzIGFuZCBtYXBzXCIpO1xufVxuZnVuY3Rpb24gdmFsdWVzKG9iaikge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvYmpba2V5XTsgfSk7XG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvYmouZ2V0KGtleSk7IH0pO1xuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIFwiJ3ZhbHVlcygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIpO1xufVxuZnVuY3Rpb24gc2V0KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHN0YXJ0QmF0Y2goKTtcbiAgICAgICAgdmFyIHZhbHVlc18xID0ga2V5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5XzEgaW4gdmFsdWVzXzEpXG4gICAgICAgICAgICAgICAgc2V0KG9iaiwga2V5XzEsIHZhbHVlc18xW2tleV8xXSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHZhciBhZG0gPSBvYmouJG1vYng7XG4gICAgICAgIHZhciBleGlzdGluZ09ic2VydmFibGUgPSBhZG0udmFsdWVzW2tleV07XG4gICAgICAgIGlmIChleGlzdGluZ09ic2VydmFibGUpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nT2JzZXJ2YWJsZS5zZXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVmaW5lT2JzZXJ2YWJsZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSwgYWRtLmRlZmF1bHRFbmhhbmNlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgb2JqLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIGtleSA9IHBhcnNlSW50KGtleSwgMTApO1xuICAgICAgICBpbnZhcmlhbnQoa2V5ID49IDAsIFwiTm90IGEgdmFsaWQgaW5kZXg6ICdcIiArIGtleSArIFwiJ1wiKTtcbiAgICAgICAgc3RhcnRCYXRjaCgpO1xuICAgICAgICBpZiAoa2V5ID49IG9iai5sZW5ndGgpXG4gICAgICAgICAgICBvYmoubGVuZ3RoID0ga2V5ICsgMTtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgZW5kQmF0Y2goKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcIidzZXQoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmUob2JqLCBrZXkpIHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgXG4gICAgICAgIG9iai4kbW9ieC5yZW1vdmUoa2V5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgb2JqLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAga2V5ID0gcGFyc2VJbnQoa2V5LCAxMCk7XG4gICAgICAgIGludmFyaWFudChrZXkgPj0gMCwgXCJOb3QgYSB2YWxpZCBpbmRleDogJ1wiICsga2V5ICsgXCInXCIpO1xuICAgICAgICBvYmouc3BsaWNlKGtleSwgMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFpbCQxKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCIncmVtb3ZlKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzJDEob2JqLCBrZXkpIHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgLy8gcmV0dXJuIGtleXMob2JqKS5pbmRleE9mKGtleSkgPj0gMFxuICAgICAgICB2YXIgYWRtID0gZ2V0QWRtaW5pc3RyYXRpb24ob2JqKTtcbiAgICAgICAgYWRtLmdldEtleXMoKTsgLy8gbWFrZSBzdXJlIHdlIGdldCBub3RpZmllZCBvZiBrZXkgY2hhbmdlcywgYnV0IGZvciBwZXJmb3JtYW5jZSwgdXNlIHRoZSB2YWx1ZXMgbWFwIHRvIGxvb2sgdXAgZXhpc3RlbmNlXG4gICAgICAgIHJldHVybiBhZG0udmFsdWVzW2tleV0gaW5zdGFuY2VvZiBPYnNlcnZhYmxlVmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouaGFzKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGtleSA+PSAwICYmIGtleSA8IG9iai5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFpbCQxKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCInaGFzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0KG9iaiwga2V5KSB7XG4gICAgaWYgKCFoYXMkMShvYmosIGtleSkpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5nZXQoa2V5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFpbCQxKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgXCInZ2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZSh0aGluZywgZGVjb3JhdG9ycykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICBpbnZhcmlhbnQoaXNQbGFpbk9iamVjdChkZWNvcmF0b3JzKSwgXCJEZWNvcmF0b3JzIHNob3VsZCBiZSBhIGtleSB2YWx1ZSBtYXBcIik7XG4gICAgdmFyIHRhcmdldCA9IHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiID8gdGhpbmcucHJvdG90eXBlIDogdGhpbmc7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBkZWNvcmF0b3JzKSB7XG4gICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW3Byb3BdO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiZcbiAgICAgICAgICAgIGludmFyaWFudCh0eXBlb2YgZGVjb3JhdG9yID09PSBcImZ1bmN0aW9uXCIsIFwiRGVjb3JhdGU6IGV4cGVjdGVkIGEgZGVjb3JhdG9yIGZ1bmN0aW9uIGZvciAnXCIgKyBwcm9wICsgXCInXCIpO1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKTtcbiAgICAgICAgdmFyIG5ld0Rlc2NyaXB0b3IgPSBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgaWYgKG5ld0Rlc2NyaXB0b3IpXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCBuZXdEZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xufVxuXG5mdW5jdGlvbiBjb25maWd1cmUob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmVuZm9yY2VBY3Rpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnMgPSAhIW9wdGlvbnMuZW5mb3JjZUFjdGlvbnM7XG4gICAgICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzID0gIW9wdGlvbnMuZW5mb3JjZUFjdGlvbnM7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLmNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiA9ICEhb3B0aW9ucy5jb21wdXRlZFJlcXVpcmVzUmVhY3Rpb247XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmlzb2xhdGVHbG9iYWxTdGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBpc29sYXRlR2xvYmFsU3RhdGUoKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZGlzYWJsZUVycm9yQm91bmRhcmllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPT09IHRydWUpXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJXQVJOSU5HOiBEZWJ1ZyBmZWF0dXJlIG9ubHkuIE1vYlggd2lsbCBOT1QgcmVjb3ZlciBmcm9tIGVycm9ycyBpZiB0aGlzIGlzIG9uLlwiKTtcbiAgICAgICAgZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9ICEhb3B0aW9ucy5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuYXJyYXlCdWZmZXIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmVzZXJ2ZUFycmF5QnVmZmVyKG9wdGlvbnMuYXJyYXlCdWZmZXIpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5yZWFjdGlvblNjaGVkdWxlcikge1xuICAgICAgICBzZXRSZWFjdGlvblNjaGVkdWxlcihvcHRpb25zLnJlYWN0aW9uU2NoZWR1bGVyKTtcbiAgICB9XG59XG5cbnZhciBnZW5lcmF0b3JJZCA9IDA7XG5mdW5jdGlvbiBmbG93KGdlbmVyYXRvcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxuICAgICAgICBmYWlsKHByb2Nlc3MuZW52Lk5PREVfRU5WICYmIFwiRmxvdyBleHBlY3RzIG9uZSAxIGFyZ3VtZW50IGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBkZWNvcmF0b3JcIik7XG4gICAgdmFyIG5hbWUgPSBnZW5lcmF0b3IubmFtZSB8fCBcIjx1bm5hbWVkIGZsb3c+XCI7XG4gICAgLy8gSW1wbGVtZW50YXRpb24gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RqL2NvL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICB2YXIgcnVuSWQgPSArK2dlbmVyYXRvcklkO1xuICAgICAgICB2YXIgZ2VuID0gYWN0aW9uKG5hbWUgKyBcIiAtIHJ1bmlkOiBcIiArIHJ1bklkICsgXCIgLSBpbml0XCIsIGdlbmVyYXRvcikuYXBwbHkoY3R4LCBhcmdzKTtcbiAgICAgICAgdmFyIHJlamVjdG9yO1xuICAgICAgICB2YXIgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciByZXMgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3RlcElkID0gMDtcbiAgICAgICAgICAgIHJlamVjdG9yID0gcmVqZWN0O1xuICAgICAgICAgICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIHJldDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXQgPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIHlpZWxkIFwiICsgc3RlcElkKyssIGdlbi5uZXh0KS5jYWxsKGdlbiwgcmVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dChyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gb25SZWplY3RlZChlcnIpIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgcmV0O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGFjdGlvbihuYW1lICsgXCIgLSBydW5pZDogXCIgKyBydW5JZCArIFwiIC0geWllbGQgXCIgKyBzdGVwSWQrKywgZ2VuLnRocm93KS5jYWxsKGdlbiwgZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dChyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbmV4dChyZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0ICYmIHR5cGVvZiByZXQudGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFzeW5jIGl0ZXJhdG9yXG4gICAgICAgICAgICAgICAgICAgIHJldC50aGVuKG5leHQsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJldC5kb25lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBlbmRpbmdQcm9taXNlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25GdWxmaWxsZWQodW5kZWZpbmVkKTsgLy8ga2ljayBvZmYgdGhlIHByb2Nlc3NcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5jYW5jZWwgPSBhY3Rpb24obmFtZSArIFwiIC0gcnVuaWQ6IFwiICsgcnVuSWQgKyBcIiAtIGNhbmNlbFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nUHJvbWlzZSlcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsUHJvbWlzZShwZW5kaW5nUHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSBibG9jayBjYW4gcmV0dXJuIChvciB5aWVsZCkgc3R1ZmYuLlxuICAgICAgICAgICAgICAgIHZhciByZXNfMSA9IGdlbi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAvLyBlYXQgYW55dGhpbmcgdGhhdCBwcm9taXNlIHdvdWxkIGRvLCBpdCdzIGNhbmNlbGxlZCFcbiAgICAgICAgICAgICAgICB2YXIgeWllbGRlZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUocmVzXzEudmFsdWUpO1xuICAgICAgICAgICAgICAgIHlpZWxkZWRQcm9taXNlLnRoZW4obm9vcCwgbm9vcCk7XG4gICAgICAgICAgICAgICAgY2FuY2VsUHJvbWlzZSh5aWVsZGVkUHJvbWlzZSk7IC8vIG1heWJlIGl0IGNhbiBiZSBjYW5jZWxsZWQgOilcbiAgICAgICAgICAgICAgICAvLyByZWplY3Qgb3VyIG9yaWdpbmFsIHByb21pc2VcbiAgICAgICAgICAgICAgICByZWplY3RvcihuZXcgRXJyb3IoXCJGTE9XX0NBTkNFTExFRFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdG9yKGUpOyAvLyB0aGVyZSBjb3VsZCBiZSBhIHRocm93aW5nIGZpbmFsbHkgYmxvY2tcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNhbmNlbFByb21pc2UocHJvbWlzZSkge1xuICAgIGlmICh0eXBlb2YgcHJvbWlzZS5jYW5jZWwgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcHJvbWlzZS5jYW5jZWwoKTtcbn1cblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGRldGVjdEN5Y2xlczogdHJ1ZSxcbiAgICBleHBvcnRNYXBzQXNPYmplY3RzOiB0cnVlXG59O1xuZnVuY3Rpb24gdG9KUyhzb3VyY2UsIG9wdGlvbnMsIF9fYWxyZWFkeVNlZW4pIHtcbiAgICBpZiAoX19hbHJlYWR5U2VlbiA9PT0gdm9pZCAwKSB7IF9fYWxyZWFkeVNlZW4gPSBbXTsgfVxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiYm9vbGVhblwiKVxuICAgICAgICBvcHRpb25zID0geyBkZXRlY3RDeWNsZXM6IG9wdGlvbnMgfTtcbiAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB2YXIgZGV0ZWN0Q3ljbGVzID0gb3B0aW9ucy5kZXRlY3RDeWNsZXMgPT09IHRydWU7XG4gICAgLy8gb3B0aW1pemF0aW9uOiB1c2luZyBFUzYgbWFwIHdvdWxkIGJlIG1vcmUgZWZmaWNpZW50IVxuICAgIC8vIG9wdGltaXphdGlvbjogbGlmdCB0aGlzIGZ1bmN0aW9uIG91dHNpZGUgdG9KUywgdGhpcyBtYWtlcyByZWN1cnNpb24gZXhwZW5zaXZlXG4gICAgZnVuY3Rpb24gY2FjaGUodmFsdWUpIHtcbiAgICAgICAgaWYgKGRldGVjdEN5Y2xlcylcbiAgICAgICAgICAgIF9fYWxyZWFkeVNlZW4ucHVzaChbc291cmNlLCB2YWx1ZV0pO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGUoc291cmNlKSkge1xuICAgICAgICBpZiAoZGV0ZWN0Q3ljbGVzICYmIF9fYWxyZWFkeVNlZW4gPT09IG51bGwpXG4gICAgICAgICAgICBfX2FscmVhZHlTZWVuID0gW107XG4gICAgICAgIGlmIChkZXRlY3RDeWNsZXMgJiYgc291cmNlICE9PSBudWxsICYmIHR5cGVvZiBzb3VyY2UgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gX19hbHJlYWR5U2Vlbi5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKF9fYWxyZWFkeVNlZW5baV1bMF0gPT09IHNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYWxyZWFkeVNlZW5baV1bMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHZhciByZXMgPSBjYWNoZShbXSk7XG4gICAgICAgICAgICB2YXIgdG9BZGQgPSBzb3VyY2UubWFwKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdG9KUyh2YWx1ZSwgb3B0aW9ucywgX19hbHJlYWR5U2Vlbik7IH0pO1xuICAgICAgICAgICAgcmVzLmxlbmd0aCA9IHRvQWRkLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKVxuICAgICAgICAgICAgICAgIHJlc1tpXSA9IHRvQWRkW2ldO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHZhciByZXMgPSBjYWNoZSh7fSk7XG4gICAgICAgICAgICBrZXlzKHNvdXJjZSk7IC8vIG1ha2Ugc3VyZSB3ZSB0cmFjayB0aGUga2V5cyBvZiB0aGUgb2JqZWN0XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmVzW2tleV0gPSB0b0pTKHNvdXJjZVtrZXldLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChzb3VyY2UpKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5leHBvcnRNYXBzQXNPYmplY3RzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXNfMSA9IGNhY2hlKG5ldyBNYXAoKSk7XG4gICAgICAgICAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzXzEuc2V0KGtleSwgdG9KUyh2YWx1ZSwgb3B0aW9ucywgX19hbHJlYWR5U2VlbikpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciByZXNfMiA9IGNhY2hlKHt9KTtcbiAgICAgICAgICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXNfMltrZXldID0gdG9KUyh2YWx1ZSwgb3B0aW9ucywgX19hbHJlYWR5U2Vlbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc18yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc09ic2VydmFibGVWYWx1ZShzb3VyY2UpKVxuICAgICAgICAgICAgcmV0dXJuIHRvSlMoc291cmNlLmdldCgpLCBvcHRpb25zLCBfX2FscmVhZHlTZWVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0UmVhZHModGhpbmcsIHByb3BPckhhbmRsZXIsIGhhbmRsZXIpIHtcbiAgICB2YXIgdGFyZ2V0O1xuICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHRoaW5nKSB8fCBpc09ic2VydmFibGVWYWx1ZSh0aGluZykpIHtcbiAgICAgICAgdGFyZ2V0ID0gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09ic2VydmFibGVPYmplY3QodGhpbmcpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcE9ySGFuZGxlciAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHJldHVybiBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICAgICAgXCJJbnRlcmNlcHRSZWFkcyBjYW4gb25seSBiZSB1c2VkIHdpdGggYSBzcGVjaWZpYyBwcm9wZXJ0eSwgbm90IHdpdGggYW4gb2JqZWN0IGluIGdlbmVyYWxcIik7XG4gICAgICAgIHRhcmdldCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wT3JIYW5kbGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWlsJDEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgICAgICBcIkV4cGVjdGVkIG9ic2VydmFibGUgbWFwLCBvYmplY3Qgb3IgYXJyYXkgYXMgZmlyc3QgYXJyYXlcIik7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuZGVoYW5jZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGZhaWwkMShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJBbiBpbnRlcmNlcHQgcmVhZGVyIHdhcyBhbHJlYWR5IGVzdGFibGlzaGVkXCIpO1xuICAgIHRhcmdldC5kZWhhbmNlciA9IHR5cGVvZiBwcm9wT3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wT3JIYW5kbGVyIDogaGFuZGxlcjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB0YXJnZXQuZGVoYW5jZXIgPSB1bmRlZmluZWQ7XG4gICAgfTtcbn1cblxuLyoqXG4gKiAoYykgTWljaGVsIFdlc3RzdHJhdGUgMjAxNSAtIDIwMTZcbiAqIE1JVCBMaWNlbnNlZFxuICpcbiAqIFdlbGNvbWUgdG8gdGhlIG1vYnggc291cmNlcyEgVG8gZ2V0IGFuIGdsb2JhbCBvdmVydmlldyBvZiBob3cgTW9iWCBpbnRlcm5hbGx5IHdvcmtzLFxuICogdGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gc3RhcnQ6XG4gKiBodHRwczovL21lZGl1bS5jb20vQG13ZXN0c3RyYXRlL2JlY29taW5nLWZ1bGx5LXJlYWN0aXZlLWFuLWluLWRlcHRoLWV4cGxhbmF0aW9uLW9mLW1vYnNlcnZhYmxlLTU1OTk1MjYyYTI1NCMueHZiaDZxZDc0XG4gKlxuICogU291cmNlIGZvbGRlcnM6XG4gKiA9PT09PT09PT09PT09PT1cbiAqXG4gKiAtIGFwaS8gICAgIE1vc3Qgb2YgdGhlIHB1YmxpYyBzdGF0aWMgbWV0aG9kcyBleHBvc2VkIGJ5IHRoZSBtb2R1bGUgY2FuIGJlIGZvdW5kIGhlcmUuXG4gKiAtIGNvcmUvICAgIEltcGxlbWVudGF0aW9uIG9mIHRoZSBNb2JYIGFsZ29yaXRobTsgYXRvbXMsIGRlcml2YXRpb25zLCByZWFjdGlvbnMsIGRlcGVuZGVuY3kgdHJlZXMsIG9wdGltaXphdGlvbnMuIENvb2wgc3R1ZmYgY2FuIGJlIGZvdW5kIGhlcmUuXG4gKiAtIHR5cGVzLyAgIEFsbCB0aGUgbWFnaWMgdGhhdCBpcyBuZWVkIHRvIGhhdmUgb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIHZhbHVlcyBpcyBpbiB0aGlzIGZvbGRlci4gSW5jbHVkaW5nIHRoZSBtb2RpZmllcnMgbGlrZSBgYXNGbGF0YC5cbiAqIC0gdXRpbHMvICAgVXRpbGl0eSBzdHVmZi5cbiAqXG4gKi9cbnRyeSB7XG4gICAgLy8gZGVmaW5lIHByb2Nlc3MuZW52IGlmIG5lZWRlZFxuICAgIC8vIGlmIHRoaXMgaXMgbm90IGEgcHJvZHVjdGlvbiBidWlsZCBpbiB0aGUgZmlyc3QgcGxhY2VcbiAgICAvLyAoaW4gd2hpY2ggY2FzZSB0aGUgZXhwcmVzc2lvbiBiZWxvdyB3b3VsZCBiZSBzdWJzdGl0dXRlZCB3aXRoICdwcm9kdWN0aW9uJylcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOVjtcbn1cbmNhdGNoIChlKSB7XG4gICAgdmFyIGcgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogZ2xvYmFsO1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgZy5wcm9jZXNzID0ge307XG4gICAgZy5wcm9jZXNzLmVudiA9IHt9O1xufVxuXG4oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHRlc3RDb2RlTWluaWZpY2F0aW9uKCkgeyB9XG4gICAgaWYgKHRlc3RDb2RlTWluaWZpY2F0aW9uLm5hbWUgIT09IFwidGVzdENvZGVNaW5pZmljYXRpb25cIiAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW21vYnhdIHlvdSBhcmUgcnVubmluZyBhIG1pbmlmaWVkIGJ1aWxkLCBidXQgJ3Byb2Nlc3MuZW52Lk5PREVfRU5WJyB3YXMgbm90IHNldCB0byAncHJvZHVjdGlvbicgaW4geW91ciBidW5kbGVyLiBUaGlzIHJlc3VsdHMgaW4gYW4gdW5uZWNlc3NhcmlseSBsYXJnZSBhbmQgc2xvdyBidW5kbGVcIik7XG4gICAgfVxufSkoKTtcbi8vIFRoaXMgbGluZSBzaG91bGQgY29tZSBhZnRlciBhbGwgdGhlIGltcG9ydHMgYXMgd2VsbCwgZm9yIHRoZSBzYW1lIHJlYXNvblxuLy8gYXMgbm90ZWQgYWJvdmUuIEkgd2lsbCBmaWxlIGEgYnVnIHdpdGggcm9sbHVwanMgLSBAcm9zc2lwZWRpYVxuLy8gRGV2dG9vbHMgc3VwcG9ydFxuaWYgKHR5cGVvZiBfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gXCJvYmplY3RcIikge1xuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZHlrb2cvbW9ieC1kZXZ0b29scy9cbiAgICBfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3RNb2J4KHtcbiAgICAgICAgc3B5OiBzcHksXG4gICAgICAgIGV4dHJhczoge1xuICAgICAgICAgICAgZ2V0RGVidWdOYW1lOiBnZXREZWJ1Z05hbWVcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8gVE9ETzogcmVtb3ZlIGluIHNvbWUgZnV0dXJlIGJ1aWxkXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgdHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIFxuICAgIFtcbiAgICAgICAgXCJleHRyYXNcIixcbiAgICAgICAgXCJkZWZhdWx0XCIsXG4gICAgICAgIFwiQXRvbVwiLFxuICAgICAgICBcIkJhc2VBdG9tXCIsXG4gICAgICAgIFwiT2JzZXJ2YWJsZU1hcFwiLFxuICAgICAgICBcImFzRmxhdFwiLFxuICAgICAgICBcImFzTWFwXCIsXG4gICAgICAgIFwiYXNSZWZlcmVuY2VcIixcbiAgICAgICAgXCJhc1N0cnVjdHVyZVwiLFxuICAgICAgICBcImF1dG9ydW5Bc3luY1wiLFxuICAgICAgICBcImNyZWF0ZVRyYW5mb3JtZXJcIixcbiAgICAgICAgXCJleHByXCIsXG4gICAgICAgIFwiaXNNb2RpZmllckRlc2NyaXB0b3JcIixcbiAgICAgICAgXCJpc1N0cmljdE1vZGVFbmFibGVkXCIsXG4gICAgICAgIFwibWFwXCIsXG4gICAgICAgIFwidXNlU3RyaWN0XCIsXG4gICAgICAgIFwid2h5UnVuXCJcbiAgICBdLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCBwcm9wLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZhaWwkMShcIidcIiArIHByb3AgKyBcIicgaXMgbm8gbG9uZ2VyIHBhcnQgb2YgdGhlIHB1YmxpYyBNb2JYIGFwaS4gUGxlYXNlIGNvbnN1bHQgdGhlIGNoYW5nZWxvZyB0byBmaW5kIG91dCB3aGVyZSB0aGlzIGZ1bmN0aW9uYWxpdHkgd2VudFwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHsgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgUmVhY3Rpb24sIHVudHJhY2tlZCwgSURlcml2YXRpb25TdGF0ZSwgY3JlYXRlQXRvbSwgc3B5LCBjb21wYXJlciwgaXNPYnNlcnZhYmxlT2JqZWN0LCBpc09ic2VydmFibGVWYWx1ZSBhcyBpc0JveGVkT2JzZXJ2YWJsZSwgaXNPYnNlcnZhYmxlQXJyYXksIE9ic2VydmFibGVNYXAsIGlzT2JzZXJ2YWJsZU1hcCwgdHJhbnNhY3Rpb24sIG9ic2VydmFibGUsIGNvbXB1dGVkLCBpc09ic2VydmFibGUsIGlzT2JzZXJ2YWJsZVByb3AsIGlzQ29tcHV0ZWQsIGlzQ29tcHV0ZWRQcm9wLCBleHRlbmRPYnNlcnZhYmxlLCBleHRlbmRTaGFsbG93T2JzZXJ2YWJsZSwgb2JzZXJ2ZSwgaW50ZXJjZXB0LCBhdXRvcnVuLCByZWFjdGlvbiwgd2hlbiwgYWN0aW9uLCBpc0FjdGlvbiwgcnVuSW5BY3Rpb24sIGtleXMsIHZhbHVlcywgc2V0LCByZW1vdmUsIGhhcyQxIGFzIGhhcywgZ2V0LCBkZWNvcmF0ZSwgY29uZmlndXJlLCBvbkJlY29tZU9ic2VydmVkLCBvbkJlY29tZVVub2JzZXJ2ZWQsIGZsb3csIHRvSlMsIHRyYWNlLCBnZXREZXBlbmRlbmN5VHJlZSwgZ2V0T2JzZXJ2ZXJUcmVlLCByZXNldEdsb2JhbFN0YXRlIGFzIF9yZXNldEdsb2JhbFN0YXRlLCBnZXRHbG9iYWxTdGF0ZSBhcyBfZ2V0R2xvYmFsU3RhdGUsIGdldERlYnVnTmFtZSwgZ2V0QXRvbSwgZ2V0QWRtaW5pc3RyYXRpb24gYXMgX2dldEFkbWluaXN0cmF0aW9uLCBhbGxvd1N0YXRlQ2hhbmdlcyBhcyBfYWxsb3dTdGF0ZUNoYW5nZXMsIGlzQXJyYXlMaWtlLCBpc0NvbXB1dGluZ0Rlcml2YXRpb24gYXMgX2lzQ29tcHV0aW5nRGVyaXZhdGlvbiwgb25SZWFjdGlvbkVycm9yLCBpbnRlcmNlcHRSZWFkcyBhcyBfaW50ZXJjZXB0UmVhZHMgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL21vYngvbGliL21vYngubW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgQ29va2llcyBmcm9tICd1bml2ZXJzYWwtY29va2llJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcXVlcnlTdHJpbmcgZnJvbSAncXVlcnktc3RyaW5nJztcblxuXG5cbmNvbnN0IGNvb2tpZXMgPSBuZXcgQ29va2llcygpO1xuXG5jb25zdCBjaGFuZ2VBeGlvc0luc3RhbmNlWEFjY2Vzc1Rva2VuSGVhZGVyID0gKHRva2VuKSA9PiB7XG4gIGNvbnN0IHsgYXhpb3MgfSA9ICByZXF1aXJlKCcuLi9hcGkvX2F4aW9zJyk7XG4gICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVyc1sneC1hY2Nlc3MtdG9rZW4nXSA9IHRva2VuO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFhBY2Nlc3NUb2tlbkZyb21Db29raWUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNvb2tpZXMuZ2V0KCd4LWFjY2Vzcy10b2tlbicpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFhBY2Nlc3NUb2tlbiA9ICh0b2tlbikgPT4ge1xuICAgIGlmIChfLmlzTmlsKHRva2VuKSkge1xuICAgICAgICBjb29raWVzLnJlbW92ZSgneC1hY2Nlc3MtdG9rZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb29raWVzLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbik7XG4gICAgfVxuXG4gICAgY2hhbmdlQXhpb3NJbnN0YW5jZVhBY2Nlc3NUb2tlbkhlYWRlcih0b2tlbik7XG59O1xuXG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVVzZXJVUkkgPSAodXNlcklkLCB1cmkpID0+IHtcbiAgICByZXR1cm4gXy5yZXBsYWNlKHVyaSwgJzp1c2VySWQnLCB1c2VySWQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlTW92aWVVUkkgPSAobW92aWVJZCwgdXJpKSA9PiB7XG4gICAgcmV0dXJuIF8ucmVwbGFjZSh1cmksICc6bW92aWVJZCcsIG1vdmllSWQpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlsL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0ICogYXMgYXhpb3NDbGFzcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBBUElfRU5EUE9JTlQsIE9NREJfQVBJIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldFhBY2Nlc3NUb2tlbkZyb21Db29raWUgfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGNvbnN0IGF4aW9zID0gYXhpb3NDbGFzcy5jcmVhdGUoe1xuICBiYXNlVVJMOiBBUElfRU5EUE9JTlQsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ3gtYWNjZXNzLXRva2VuJzogZ2V0WEFjY2Vzc1Rva2VuRnJvbUNvb2tpZSgpLFxuICAgIH1cbn0pO1xuXG5leHBvcnQgY29uc3Qgb21kYl9heGlvcyA9IGF4aW9zQ2xhc3MuY3JlYXRlKHtcbiAgYmFzZVVSTDogT01EQl9BUEksXG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcGkvX2F4aW9zLmpzIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiY29uc3QgQVBJID0gJy9hcGknO1xuXG5leHBvcnQgY29uc3QgU0lHTlVQX0FQSSA9IEFQSSArICcvdXNlcnMvcmVnaXN0ZXInO1xuZXhwb3J0IGNvbnN0IFNJR05JTl9BUEkgPSBBUEkgKyAnL3VzZXJzL2xvZ2luJztcbmV4cG9ydCBjb25zdCBTRUFSQ0hfVVNFUl9BUEkgPSBBUEkgKyAnL3VzZXJzL3NlYXJjaCc7XG5cbmV4cG9ydCBjb25zdCBQUk9GSUxFX01FX0FQSSA9IEFQSSArICcvcHJvZmlsZXMvbWUnO1xuXG5leHBvcnQgY29uc3QgUE9TVF9NT1ZJRV9BUEkgPSBBUEkgKyAnL21vdmllcy8nO1xuZXhwb3J0IGNvbnN0IE1PVklFX0xJU1RfQVBJID0gQVBJICsgJy9tb3ZpZXMvJztcblxuZXhwb3J0IGNvbnN0IExJS0VfTU9WSUVfQVBJID0gQVBJICsgJy9saWtlcy9saWtlJztcbmV4cG9ydCBjb25zdCBVTkxJS0VfTU9WSUVfQVBJID0gQVBJICsgJy9saWtlcy91bmxpa2UnO1xuZXhwb3J0IGNvbnN0IENVUlJFTlRfVVNFUl9MSUtFRF9NT1ZJRVNfQVBJID0gQVBJICsgJy9saWtlcy9tb3ZpZXMvbXknO1xuZXhwb3J0IGNvbnN0IE1PVklFU19MSUtFRF9CWV9VU0VSSURfQVBJID0gQVBJICsgJy9saWtlcy9tb3ZpZXMvOnVzZXJJZCc7XG5leHBvcnQgY29uc3QgVVNFUlNfTElLRV9NT1ZJRUlEX0FQSSA9IEFQSSArICcvbGlrZXMvdXNlcnMvOm1vdmllSWQnO1xuZXhwb3J0IGNvbnN0IFVTRVJTX0xFTkdUSF9MSUtFX01PVklFSURfQVBJID0gQVBJICsgJy9saWtlcy91c2Vycy86bW92aWVJZC9sZW5ndGgnO1xuXG5leHBvcnQgY29uc3QgUFJPRklMRV9VU0VSX0lORk8gPSBBUEkgKyAnL3Byb2ZpbGVzLzp1c2VySWQnO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcGkvY29uc3RhbnRzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBjb25zdCBTRUFSQ0hfUkVTVUxUX1VSSSA9ICcvc2VhcmNoJztcblxuZXhwb3J0IGNvbnN0IFNJR05fVVBfVVJJID0gJy9hY2NvdW50L3NpZ25VcCc7XG5leHBvcnQgY29uc3QgU0lHTl9JTl9VUkkgPSAnL2FjY291bnQvc2lnbkluJztcblxuLy8gTW92aWUgUm91dGUgVVJJXG5leHBvcnQgY29uc3QgTU9WSUVfVVJJID0gJy9tb3ZpZSc7XG5leHBvcnQgY29uc3QgTU9WSUVfTElTVF9VUkkgPSBNT1ZJRV9VUkkgKyAnL2xpc3QnO1xuZXhwb3J0IGNvbnN0IE1PVklFX0RFVEFJTF9VUkkgPSBNT1ZJRV9VUkkgKyAnLzptb3ZpZUlkL2RldGFpbCc7XG5leHBvcnQgY29uc3QgTU9WSUVfTElLRURfQllfVVJJID0gTU9WSUVfVVJJICsgJy86bW92aWVJZC9saWtlZEJ5JztcblxuLy8gUHJvZmlsZSBSb3V0ZSBVUklcbmV4cG9ydCBjb25zdCBVU0VSX1VSSSA9ICcvdXNlci86dXNlcklkJztcbmV4cG9ydCBjb25zdCBVU0VSX0xJS0VTX1VSSSA9IFVTRVJfVVJJICsgJy9saWtlcyc7XG5leHBvcnQgY29uc3QgVVNFUl9QUk9GSUxFX1VSSSA9IFVTRVJfVVJJICsgJy9wcm9maWxlcyc7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGFpbmVycy9yb3V0ZXNDb250YWluZXIvdXJpQ29uc3RhbnRzLmpzIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSA1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgYWRkTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5hZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxudmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG52YXIgaGFzQmFzZW5hbWUgPSBleHBvcnRzLmhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZXhwb3J0cy5zdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG52YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxudmFyIHBhcnNlUGF0aCA9IGV4cG9ydHMucGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgY3JlYXRlUGF0aCA9IGV4cG9ydHMuY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgdmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxuZXhwb3J0IHZhciBjcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qc1xuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanNcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIsIGluamVjdCB9IGZyb20gXCJtb2J4LXJlYWN0XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBNT1ZJRV9ERVRBSUxfVVJJIH0gZnJvbSBcIi4uL2NvbnRhaW5lcnMvcm91dGVzQ29udGFpbmVyL3VyaUNvbnN0YW50c1wiO1xuaW1wb3J0IE1vdmllTGlrZUJ1dHRvbiBmcm9tICcuL0J1dHRvbi9Nb3ZpZUxpa2VCdXR0b24nO1xuaW1wb3J0ICcuLi9zdHlsZXMvTW92aWVJdGVtLmNzcyc7XG5pbXBvcnQgQ291bnRMaWtlQnV0dG9uIGZyb20gXCIuL0J1dHRvbi9Db3VudExpa2VCdXR0b25cIjtcbmltcG9ydCB7IGdlbmVyYXRlTW92aWVVUkkgfSBmcm9tICcuLi91dGlsJ1xuXG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgbGV0IHsgb21kYiB9ID0gc3RvcmVzO1xuICByZXR1cm4ge1xuICAgIGdldE1vdmllQnlJZDogb21kYi5nZXRNb3ZpZUJ5SWQsXG4gIH1cbn0pQG9ic2VydmVyXG5jbGFzcyBNb3ZpZUl0ZW0gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmdldE1vdmllID0gdGhpcy5nZXRNb3ZpZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgcmVzdWx0OiBudWxsLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmdldE1vdmllKCk7XG4gIH1cblxuICBhc3luYyBnZXRNb3ZpZSgpe1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGdldE1vdmllQnlJZCwgaW1kYklEIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgbW92aWVJbmZvID0gYXdhaXQgZ2V0TW92aWVCeUlkKGltZGJJRCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcmVzdWx0OiBtb3ZpZUluZm8sXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyByZXN1bHQsIGxvYWRpbmcsIGVycm9yIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGxvYWRpbmcpIHtcbiAgICAgIHJldHVybiAoPGRpdj48L2Rpdj4pO1xuICAgIH1cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiAoPGRpdj48L2Rpdj4pO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IENhcmRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1zbS00XCI+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImltZy1mbHVpZFwiIGFsdD1cIlJlc3BvbnNpdmUgaW1hZ2VcIiBzcmM9e3Jlc3VsdC5Qb3N0ZXJ9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtc20tOCBjYXJkLXJpZ2h0IGNhcmQtdGl0bGVcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW92aWVCdXR0b25zXCI+XG4gICAgICAgICAgICAgICAgPE1vdmllTGlrZUJ1dHRvbiBpbWRiSUQ9e3Jlc3VsdC5pbWRiSUR9Lz5cbiAgICAgICAgICAgICAgICA8Q291bnRMaWtlQnV0dG9uIGltZGJJRD17cmVzdWx0LmltZGJJRH0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGg1PlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtnZW5lcmF0ZU1vdmllVVJJKHJlc3VsdC5pbWRiSUQsIE1PVklFX0RFVEFJTF9VUkkpfT5cbiAgICAgICAgICAgICAgICAgIFRpdGxlOiB7cmVzdWx0LlRpdGxlfVxuICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgPC9oNT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHA+WWVhcjoge3Jlc3VsdC5ZZWFyfTwvcD5cbiAgICAgICAgICAgIDxwPntyZXN1bHQuUGxvdH08L3A+XG4gICAgICAgICAgICA8ZGl2PntyZXN1bHQuUmF0aW5ncy5tYXAoKHJhdGUsIGlkKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiA8ZGl2IGtleT17aWR9PiB7cmF0ZS5Tb3VyY2V9OiB7cmF0ZS5WYWx1ZX0gPC9kaXY+XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICA8bGk+R2VucmU6XHR7cmVzdWx0LkdlbnJlfTwvbGk+XG4gICAgICAgICAgICAgIDxsaT5EaXJlY3RlZCBCeTpcdHtyZXN1bHQuRGlyZWN0b3J9PC9saT5cbiAgICAgICAgICAgICAgPGxpPldyaXR0ZW4gQnk6XHR7cmVzdWx0LldyaXRlcn08L2xpPlxuICAgICAgICAgICAgICA8bGk+UmVsZWFzZWQ6IHtyZXN1bHQuUmVsZWFzZWR9PC9saT5cbiAgICAgICAgICAgICAgPGxpPkJveCBPZmZpY2U6IHtyZXN1bHQuQm94T2ZmaWNlfTwvbGk+XG4gICAgICAgICAgICAgIDxsaT5SdW50aW1lOiB7cmVzdWx0LlJ1bnRpbWV9PC9saT5cbiAgICAgICAgICAgICAgPGxpPlByb2R1Y3Rpb246XHR7cmVzdWx0LlByb2R1Y3Rpb259PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5cbk1vdmllSXRlbS5wcm9wVHlwZXMgPSB7XG4gIGltZGJJRDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTW92aWVJdGVtO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9Nb3ZpZUl0ZW0uanMiLCJpbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4J1xuXG5pbXBvcnQgeyBheGlvcyB9IGZyb20gJy4uL2FwaS9fYXhpb3MnO1xuaW1wb3J0IHsgUFJPRklMRV9NRV9BUEkgfSBmcm9tICcuLi9hcGkvY29uc3RhbnRzJztcbmltcG9ydCB7IHNldFhBY2Nlc3NUb2tlbiB9IGZyb20gXCIuLi91dGlsL2luZGV4XCI7XG5cbmNsYXNzIFNlc3Npb24ge1xuICAgIEBvYnNlcnZhYmxlIHVzZXJJbmZvID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5nZXRVc2VySW5mbygpO1xuICAgIH1cblxuICAgIEBhY3Rpb24gbG9nb3V0KCkge1xuICAgICAgICBzZXRYQWNjZXNzVG9rZW4obnVsbCk7XG4gICAgICAgIHNlbGYudXNlckluZm8gPSBudWxsO1xuICAgIH1cbiAgICBAYWN0aW9uIGFzeW5jIGdldFVzZXJJbmZvKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KFBST0ZJTEVfTUVfQVBJKTtcbiAgICAgICAgICAgIHNlbGYudXNlckluZm8gPSByZXMuZGF0YTtcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIHNldFhBY2Nlc3NUb2tlbihudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3Qgc2VsZiA9IG5ldyBTZXNzaW9uKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGY7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JlL3Nlc3Npb24uanMiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qc1xuLy8gbW9kdWxlIGlkID0gODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanNcbi8vIG1vZHVsZSBpZCA9IDkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzXG4vLyBtb2R1bGUgaWQgPSA5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzXG4vLyBtb2R1bGUgaWQgPSA5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanNcbi8vIG1vZHVsZSBpZCA9IDk2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gKCFCVUdHWSAmJiAkbmF0aXZlKSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanNcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qc1xuLy8gbW9kdWxlIGlkID0gMTA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanNcbi8vIG1vZHVsZSBpZCA9IDEwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanNcbi8vIG1vZHVsZSBpZCA9IDEwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDExMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvTG9jYXRpb25VdGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiAnLycsXG4gICAgICB1cmw6ICcvJyxcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gJy8nXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsICdBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnQnKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgJ1lvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT4nKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gJycgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIHBhdGggPSBfb3B0aW9ucyRwYXRoID09PSB1bmRlZmluZWQgPyAnLycgOiBfb3B0aW9ucyRwYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gJy8nICYmIHVybCA9PT0gJycgPyAnLycgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMTE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuLy8gbW9kdWxlIGlkID0gMTIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanNcbi8vIG1vZHVsZSBpZCA9IDEyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDEzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanNcbi8vIG1vZHVsZSBpZCA9IDEzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanNcbi8vIG1vZHVsZSBpZCA9IDEzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qc1xuLy8gbW9kdWxlIGlkID0gMTM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDE0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qc1xuLy8gbW9kdWxlIGlkID0gMTQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDE0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qc1xuLy8gbW9kdWxlIGlkID0gMTQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDE0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMTQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMTUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanNcbi8vIG1vZHVsZSBpZCA9IDE1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhVHlwZSA9IHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKTtcbiAgdmFyIGJUeXBlID0gdHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpO1xuXG4gIGlmIChhVHlwZSAhPT0gYlR5cGUpIHJldHVybiBmYWxzZTtcblxuICBpZiAoYVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IGEudmFsdWVPZigpO1xuICAgIHZhciBiVmFsdWUgPSBiLnZhbHVlT2YoKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L0RPTVV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSByaWdodCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsncmVwbGFjZScsICd0bycsICdpbm5lclJlZiddKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgdmFyIGhyZWYgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuY3JlYXRlSHJlZih0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8geyBwYXRobmFtZTogdG8gfSA6IHRvKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanNcbi8vIG1vZHVsZSBpZCA9IDE1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanNcbi8vIG1vZHVsZSBpZCA9IDE2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvciB3aXRoUm91dGVyKCkgb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgocGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgc3RyaWN0OiBzdHJpY3QsIGV4YWN0OiBleGFjdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSkgOiByb3V0ZS5tYXRjaDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWQnKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMucmVuZGVyICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIHJldHVybiBjb21wb25lbnQgPyAvLyBjb21wb25lbnQgcHJvcCBnZXRzIGZpcnN0IHByaW9yaXR5LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsIDogcmVuZGVyID8gLy8gcmVuZGVyIHByb3AgaXMgbmV4dCwgb25seSBjYWxsZWQgaWYgdGhlcmUncyBhIG1hdGNoXG4gICAgbWF0Y2ggPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IGNoaWxkcmVuID8gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4ocHJvcHMpIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGwgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0RPTVV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMTYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDE2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanNcbi8vIG1vZHVsZSBpZCA9IDE2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDE2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibGV0IGFwaUVuZHBvaW50O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBhcGlFbmRwb2ludCA9ICcnO1xufSBlbHNlIHtcbiAgYXBpRW5kcG9pbnQgPSAnaHR0cDovL2xvY2FsaG9zdDo4MDgwLyc7XG59XG5cbmV4cG9ydCBjb25zdCBBUElfRU5EUE9JTlQgPSBhcGlFbmRwb2ludDtcbmV4cG9ydCBjb25zdCBPTURCX0FQSSA9ICdodHRwczovL3d3dy5vbWRiYXBpLmNvbSc7XG5leHBvcnQgY29uc3QgT01EQl9BUElfS0VZID0gJy8/YXBpa2V5PWUwNWUwNDRiJnM9JztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb25zdGFudHMvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgJy4uL3N0eWxlcy9TZWFyY2hCYXIuY3NzJztcblxuY2xhc3MgU2VhcmNoQmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gIH07XG5cbiAgaGFuZGxlU3VibWl0ID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgc2VhcmNoQ29udGVudCA9IGUudGFyZ2V0LmVsZW1lbnRzLnNlYXJjaENvbnRlbnQudmFsdWUudHJpbSgpO1xuICAgIGlmIChzZWFyY2hDb250ZW50KSB7XG4gICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgIHBhdGhuYW1lOiAnL3NlYXJjaCcsXG4gICAgICAgIHNlYXJjaDogJz9xdWVyeT0nK3NlYXJjaENvbnRlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInNlYXJjaEJhclwiIG9uU3VibWl0PXsgdGhpcy5oYW5kbGVTdWJtaXQgfT5cbiAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwic2VhcmNoVGV4dFwiIHR5cGU9XCJzZWFyY2hcIiBuYW1lPVwic2VhcmNoQ29udGVudFwiPjwvaW5wdXQ+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnkgc2VhcmNoQnV0dG9uIFwiPnNlYXJjaDwvYnV0dG9uPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoU2VhcmNoQmFyKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL1NlYXJjaEJhci5qcyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL1NlYXJjaEJhci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vU2VhcmNoQmFyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vU2VhcmNoQmFyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3N0eWxlcy9TZWFyY2hCYXIuY3NzXG4vLyBtb2R1bGUgaWQgPSAxNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdtb2J4JyksIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3JlYWN0LWRvbScpKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnLCAnbW9ieCcsICdyZWFjdCcsICdyZWFjdC1kb20nXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLm1vYnhSZWFjdCA9IHt9KSxnbG9iYWwubW9ieCxnbG9iYWwuUmVhY3QsZ2xvYmFsLlJlYWN0RE9NKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cyxtb2J4LFJlYWN0LHJlYWN0RG9tKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0X19kZWZhdWx0ID0gJ2RlZmF1bHQnIGluIFJlYWN0ID8gUmVhY3RbJ2RlZmF1bHQnXSA6IFJlYWN0O1xuXG4vLyBUaGVzZSBmdW5jdGlvbnMgY2FuIGJlIHN0dWJiZWQgb3V0IGluIHNwZWNpZmljIGVudmlyb25tZW50c1xudmFyIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDEgPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG5cblxuXG5cbnZhciBhc3luY0dlbmVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXdhaXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFzeW5jR2VuZXJhdG9yKGdlbikge1xuICAgIHZhciBmcm9udCwgYmFjaztcblxuICAgIGZ1bmN0aW9uIHNlbmQoa2V5LCBhcmcpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIGFyZzogYXJnLFxuICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0OiByZWplY3QsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChiYWNrKSB7XG4gICAgICAgICAgYmFjayA9IGJhY2submV4dCA9IHJlcXVlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJvbnQgPSBiYWNrID0gcmVxdWVzdDtcbiAgICAgICAgICByZXN1bWUoa2V5LCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUoa2V5LCBhcmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXdhaXRWYWx1ZSkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZS52YWx1ZSkudGhlbihmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXN1bWUoXCJuZXh0XCIsIGFyZyk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmVzdW1lKFwidGhyb3dcIiwgYXJnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXR0bGUocmVzdWx0LmRvbmUgPyBcInJldHVyblwiIDogXCJub3JtYWxcIiwgcmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNldHRsZShcInRocm93XCIsIGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dGxlKHR5cGUsIHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ0aHJvd1wiOlxuICAgICAgICAgIGZyb250LnJlamVjdCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGZyb250ID0gZnJvbnQubmV4dDtcblxuICAgICAgaWYgKGZyb250KSB7XG4gICAgICAgIHJlc3VtZShmcm9udC5rZXksIGZyb250LmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbnZva2UgPSBzZW5kO1xuXG4gICAgaWYgKHR5cGVvZiBnZW4ucmV0dXJuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMucmV0dXJuID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfVxuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJuZXh0XCIsIGFyZyk7XG4gIH07XG5cbiAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJ0aHJvd1wiLCBhcmcpO1xuICB9O1xuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcInJldHVyblwiLCBhcmcpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgd3JhcDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFzeW5jR2VuZXJhdG9yKGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGF3YWl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXcgQXdhaXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxuXG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG52YXIgRXZlbnRFbWl0dGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRFbWl0dGVyKTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhFdmVudEVtaXR0ZXIsIFt7XG4gICAgICAgIGtleTogXCJvblwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb24oY2IpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goY2IpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBfdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihjYik7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkgX3RoaXMubGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZW1pdFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbihkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG59KCk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkkMSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG5cbnZhciBob2lzdE5vblJlYWN0U3RhdGljcyA9IGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkkMSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn07XG5cbi8vIENvcGllZCBmcm9tIFJlYWN0LlByb3BUeXBlc1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gQXJyYXkoX2xlbiA+IDYgPyBfbGVuIC0gNiA6IDApLCBfa2V5ID0gNjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgcmVzdFtfa2V5IC0gNl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9ieC51bnRyYWNrZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgXCI8PGFub255bW91cz4+XCI7XG4gICAgICAgICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0dWFsID0gcHJvcHNbcHJvcE5hbWVdID09PSBudWxsID8gXCJudWxsXCIgOiBcInVuZGVmaW5lZFwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIFwiICsgbG9jYXRpb24gKyBcIiBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgaXMgbWFya2VkIGFzIHJlcXVpcmVkIFwiICsgXCJpbiBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBidXQgaXRzIHZhbHVlIGlzIGBcIiArIGFjdHVhbCArIFwiYC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGUuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lXS5jb25jYXQocmVzdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxuLy8gQ29waWVkIGZyb20gUmVhY3QuUHJvcFR5cGVzXG5mdW5jdGlvbiBpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSB7XG4gICAgLy8gTmF0aXZlIFN5bWJvbC5cbiAgICBpZiAocHJvcFR5cGUgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSA9PT0gJ1N5bWJvbCdcbiAgICBpZiAocHJvcFZhbHVlW1wiQEB0b1N0cmluZ1RhZ1wiXSA9PT0gXCJTeW1ib2xcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcbmZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihwcm9wVmFsdWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIFwiYXJyYXlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgICAgIC8vICdvYmplY3QnIGZvciB0eXBlb2YgYSBSZWdFeHAuIFdlJ2xsIG5vcm1hbGl6ZSB0aGlzIGhlcmUgc28gdGhhdCAvYmxhL1xuICAgICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCI7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gXCJzeW1ib2xcIjtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG4vLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBDb3BpZWQgZnJvbSBSZWFjdC5Qcm9wVHlwZXNcbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJkYXRlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJyZWdleHBcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoYWxsb3dOYXRpdmVUeXBlLCBtb2J4VHlwZSkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICAgIHJldHVybiBtb2J4LnVudHJhY2tlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dOYXRpdmVUeXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldFByb3BUeXBlKHByb3BzW3Byb3BOYW1lXSkgPT09IG1vYnhUeXBlLnRvTG93ZXJDYXNlKCkpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1vYnhDaGVja2VyID0gdm9pZCAwO1xuICAgICAgICAgICAgc3dpdGNoIChtb2J4VHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJheVwiOlxuICAgICAgICAgICAgICAgICAgICBtb2J4Q2hlY2tlciA9IG1vYnguaXNPYnNlcnZhYmxlQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJPYmplY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgbW9ieENoZWNrZXIgPSBtb2J4LmlzT2JzZXJ2YWJsZU9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIk1hcFwiOlxuICAgICAgICAgICAgICAgICAgICBtb2J4Q2hlY2tlciA9IG1vYnguaXNPYnNlcnZhYmxlTWFwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1vYnhUeXBlOiBcIiArIG1vYnhUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgICBpZiAoIW1vYnhDaGVja2VyKHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhciBuYXRpdmVUeXBlRXhwZWN0YXRpb25NZXNzYWdlID0gYWxsb3dOYXRpdmVUeXBlID8gXCIgb3IgamF2YXNjcmlwdCBgXCIgKyBtb2J4VHlwZS50b0xvd2VyQ2FzZSgpICsgXCJgXCIgOiBcIlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJlY2lzZVR5cGUgKyBcImAgc3VwcGxpZWQgdG9cIiArIFwiIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBtb2J4Lk9ic2VydmFibGVcIiArIG1vYnhUeXBlICsgXCJgXCIgKyBuYXRpdmVUeXBlRXhwZWN0YXRpb25NZXNzYWdlICsgXCIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQXJyYXlPZlR5cGVDaGVja2VyKGFsbG93TmF0aXZlVHlwZSwgdHlwZUNoZWNrZXIpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBBcnJheShfbGVuMiA+IDUgPyBfbGVuMiAtIDUgOiAwKSwgX2tleTIgPSA1OyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICByZXN0W19rZXkyIC0gNV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vYngudW50cmFja2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJQcm9wZXJ0eSBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgY29tcG9uZW50IGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAgaGFzIFwiICsgXCJpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlcnJvciA9IGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoYWxsb3dOYXRpdmVUeXBlLCBcIkFycmF5XCIpKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSB0eXBlQ2hlY2tlci5hcHBseSh1bmRlZmluZWQsIFtwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyBcIltcIiArIGkgKyBcIl1cIl0uY29uY2F0KHJlc3QpKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG52YXIgb2JzZXJ2YWJsZUFycmF5ID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcihmYWxzZSwgXCJBcnJheVwiKTtcbnZhciBvYnNlcnZhYmxlQXJyYXlPZiA9IGNyZWF0ZU9ic2VydmFibGVBcnJheU9mVHlwZUNoZWNrZXIuYmluZChudWxsLCBmYWxzZSk7XG52YXIgb2JzZXJ2YWJsZU1hcCA9IGNyZWF0ZU9ic2VydmFibGVUeXBlQ2hlY2tlckNyZWF0b3IoZmFsc2UsIFwiTWFwXCIpO1xudmFyIG9ic2VydmFibGVPYmplY3QgPSBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKGZhbHNlLCBcIk9iamVjdFwiKTtcbnZhciBhcnJheU9yT2JzZXJ2YWJsZUFycmF5ID0gY3JlYXRlT2JzZXJ2YWJsZVR5cGVDaGVja2VyQ3JlYXRvcih0cnVlLCBcIkFycmF5XCIpO1xudmFyIGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZiA9IGNyZWF0ZU9ic2VydmFibGVBcnJheU9mVHlwZUNoZWNrZXIuYmluZChudWxsLCB0cnVlKTtcbnZhciBvYmplY3RPck9ic2VydmFibGVPYmplY3QgPSBjcmVhdGVPYnNlcnZhYmxlVHlwZUNoZWNrZXJDcmVhdG9yKHRydWUsIFwiT2JqZWN0XCIpO1xuXG5cblxudmFyIHByb3BUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuXHRvYnNlcnZhYmxlQXJyYXk6IG9ic2VydmFibGVBcnJheSxcblx0b2JzZXJ2YWJsZUFycmF5T2Y6IG9ic2VydmFibGVBcnJheU9mLFxuXHRvYnNlcnZhYmxlTWFwOiBvYnNlcnZhYmxlTWFwLFxuXHRvYnNlcnZhYmxlT2JqZWN0OiBvYnNlcnZhYmxlT2JqZWN0LFxuXHRhcnJheU9yT2JzZXJ2YWJsZUFycmF5OiBhcnJheU9yT2JzZXJ2YWJsZUFycmF5LFxuXHRhcnJheU9yT2JzZXJ2YWJsZUFycmF5T2Y6IGFycmF5T3JPYnNlcnZhYmxlQXJyYXlPZixcblx0b2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0OiBvYmplY3RPck9ic2VydmFibGVPYmplY3Rcbn0pO1xuXG5mdW5jdGlvbiBpc1N0YXRlbGVzcyhjb21wb25lbnQpIHtcbiAgICAvLyBgZnVuY3Rpb24oKSB7fWAgaGFzIHByb3RvdHlwZSwgYnV0IGAoKSA9PiB7fWAgZG9lc24ndFxuICAgIC8vIGAoKSA9PiB7fWAgdmlhIEJhYmVsIGhhcyBwcm90b3R5cGUgdG9vLlxuICAgIHJldHVybiAhKGNvbXBvbmVudC5wcm90b3R5cGUgJiYgY29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIpO1xufVxuXG52YXIgaW5qZWN0b3JDb250ZXh0VHlwZXMgPSB7XG4gICAgbW9ieFN0b3Jlczogb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0XG59O1xuT2JqZWN0LnNlYWwoaW5qZWN0b3JDb250ZXh0VHlwZXMpO1xuXG52YXIgcHJveGllZEluamVjdG9yUHJvcHMgPSB7XG4gICAgY29udGV4dFR5cGVzOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluamVjdG9yQ29udGV4dFR5cGVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShfKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJNb2J4IEluamVjdG9yOiB5b3UgYXJlIHRyeWluZyB0byBhdHRhY2ggYGNvbnRleHRUeXBlc2Agb24gYW4gY29tcG9uZW50IGRlY29yYXRlZCB3aXRoIGBpbmplY3RgIChvciBgb2JzZXJ2ZXJgKSBIT0MuIFBsZWFzZSBzcGVjaWZ5IHRoZSBjb250ZXh0VHlwZXMgb24gdGhlIHdyYXBwZWQgY29tcG9uZW50IGluc3RlYWQuIEl0IGlzIGFjY2Vzc2libGUgdGhyb3VnaCB0aGUgYHdyYXBwZWRDb21wb25lbnRgXCIpO1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfSxcbiAgICBpc01vYnhJbmplY3Rvcjoge1xuICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3JlIEluamVjdGlvblxuICAgICAqL1xufTtmdW5jdGlvbiBjcmVhdGVTdG9yZUluamVjdG9yKGdyYWJTdG9yZXNGbiwgY29tcG9uZW50LCBpbmplY3ROYW1lcykge1xuICAgIHZhciBfY2xhc3MsIF90ZW1wMjtcblxuICAgIHZhciBkaXNwbGF5TmFtZSA9IFwiaW5qZWN0LVwiICsgKGNvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnQubmFtZSB8fCBjb21wb25lbnQuY29uc3RydWN0b3IgJiYgY29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWUgfHwgXCJVbmtub3duXCIpO1xuICAgIGlmIChpbmplY3ROYW1lcykgZGlzcGxheU5hbWUgKz0gXCItd2l0aC1cIiArIGluamVjdE5hbWVzO1xuXG4gICAgdmFyIEluamVjdG9yID0gKF90ZW1wMiA9IF9jbGFzcyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICAgIGluaGVyaXRzKEluamVjdG9yLCBfQ29tcG9uZW50KTtcblxuICAgICAgICBmdW5jdGlvbiBJbmplY3RvcigpIHtcbiAgICAgICAgICAgIHZhciBfcmVmO1xuXG4gICAgICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBJbmplY3Rvcik7XG5cbiAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gSW5qZWN0b3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmplY3RvcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0b3JlUmVmID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMud3JhcHBlZEluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9LCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3JlYXRlQ2xhc3MoSW5qZWN0b3IsIFt7XG4gICAgICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgIC8vIE9wdGltaXphdGlvbjogaXQgbWlnaHQgYmUgbW9yZSBlZmZpY2llbnQgdG8gYXBwbHkgdGhlIG1hcHBlciBmdW5jdGlvbiAqb3V0c2lkZSogdGhlIHJlbmRlciBtZXRob2RcbiAgICAgICAgICAgICAgICAvLyAoaWYgdGhlIG1hcHBlciBpcyBhIGZ1bmN0aW9uKSwgdGhhdCBjb3VsZCBhdm9pZCBleHBlbnNpdmUoPykgcmUtcmVuZGVyaW5nIG9mIHRoZSBpbmplY3RvciBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAvLyBTZWUgdGhpcyB0ZXN0OiAndXNpbmcgYSBjdXN0b20gaW5qZWN0b3IgaXMgbm90IHRvbyByZWFjdGl2ZScgaW4gaW5qZWN0LmpzXG4gICAgICAgICAgICAgICAgdmFyIG5ld1Byb3BzID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHNba2V5XSA9IHRoaXMucHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH12YXIgYWRkaXRpb25hbFByb3BzID0gZ3JhYlN0b3Jlc0ZuKHRoaXMuY29udGV4dC5tb2J4U3RvcmVzIHx8IHt9LCBuZXdQcm9wcywgdGhpcy5jb250ZXh0KSB8fCB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfa2V5MiBpbiBhZGRpdGlvbmFsUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHNbX2tleTJdID0gYWRkaXRpb25hbFByb3BzW19rZXkyXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzU3RhdGVsZXNzKGNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHMucmVmID0gdGhpcy5zdG9yZVJlZjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIG5ld1Byb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgICAgICByZXR1cm4gSW5qZWN0b3I7XG4gICAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZSwgX3RlbXAyKTtcblxuICAgIC8vIFN0YXRpYyBmaWVsZHMgZnJvbSBjb21wb25lbnQgc2hvdWxkIGJlIHZpc2libGUgb24gdGhlIGdlbmVyYXRlZCBJbmplY3RvclxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoSW5qZWN0b3IsIGNvbXBvbmVudCk7XG5cbiAgICBJbmplY3Rvci53cmFwcGVkQ29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEluamVjdG9yLCBwcm94aWVkSW5qZWN0b3JQcm9wcyk7XG5cbiAgICByZXR1cm4gSW5qZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGdyYWJTdG9yZXNCeU5hbWUoc3RvcmVOYW1lcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYmFzZVN0b3JlcywgbmV4dFByb3BzKSB7XG4gICAgICAgIHN0b3JlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoc3RvcmVOYW1lIGluIG5leHRQcm9wcyAvLyBwcmVmZXIgcHJvcHMgb3ZlciBzdG9yZXNcbiAgICAgICAgICAgICkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCEoc3RvcmVOYW1lIGluIGJhc2VTdG9yZXMpKSB0aHJvdyBuZXcgRXJyb3IoXCJNb2JYIGluamVjdG9yOiBTdG9yZSAnXCIgKyBzdG9yZU5hbWUgKyBcIicgaXMgbm90IGF2YWlsYWJsZSEgTWFrZSBzdXJlIGl0IGlzIHByb3ZpZGVkIGJ5IHNvbWUgUHJvdmlkZXJcIik7XG4gICAgICAgICAgICBuZXh0UHJvcHNbc3RvcmVOYW1lXSA9IGJhc2VTdG9yZXNbc3RvcmVOYW1lXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXh0UHJvcHM7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBoaWdoZXIgb3JkZXIgY29tcG9uZW50IHRoYXQgaW5qZWN0cyBzdG9yZXMgdG8gYSBjaGlsZC5cbiAqIHRha2VzIGVpdGhlciBhIHZhcmFyZ3MgbGlzdCBvZiBzdHJpbmdzLCB3aGljaCBhcmUgc3RvcmVzIHJlYWQgZnJvbSB0aGUgY29udGV4dCxcbiAqIG9yIGEgZnVuY3Rpb24gdGhhdCBtYW51YWxseSBtYXBzIHRoZSBhdmFpbGFibGUgc3RvcmVzIGZyb20gdGhlIGNvbnRleHQgdG8gcHJvcHM6XG4gKiBzdG9yZXNUb1Byb3BzKG1vYnhTdG9yZXMsIHByb3BzLCBjb250ZXh0KSA9PiBuZXdQcm9wc1xuICovXG5mdW5jdGlvbiBpbmplY3QoKSAvKiBmbihzdG9yZXMsIG5leHRQcm9wcykgb3IgLi4uc3RvcmVOYW1lcyAqL3tcbiAgICB2YXIgZ3JhYlN0b3Jlc0ZuID0gdm9pZCAwO1xuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZ3JhYlN0b3Jlc0ZuID0gYXJndW1lbnRzWzBdO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICAgICAgICB2YXIgaW5qZWN0ZWQgPSBjcmVhdGVTdG9yZUluamVjdG9yKGdyYWJTdG9yZXNGbiwgY29tcG9uZW50Q2xhc3MpO1xuICAgICAgICAgICAgaW5qZWN0ZWQuaXNNb2J4SW5qZWN0b3IgPSBmYWxzZTsgLy8gc3VwcmVzcyB3YXJuaW5nXG4gICAgICAgICAgICAvLyBtYXJrIHRoZSBJbmplY3RvciBhcyBvYnNlcnZlciwgdG8gbWFrZSBpdCByZWFjdCB0byBleHByZXNzaW9ucyBpbiBgZ3JhYlN0b3Jlc0ZuYCxcbiAgICAgICAgICAgIC8vIHNlZSAjMTExXG4gICAgICAgICAgICBpbmplY3RlZCA9IG9ic2VydmVyKGluamVjdGVkKTtcbiAgICAgICAgICAgIGluamVjdGVkLmlzTW9ieEluamVjdG9yID0gdHJ1ZTsgLy8gcmVzdG9yZSB3YXJuaW5nXG4gICAgICAgICAgICByZXR1cm4gaW5qZWN0ZWQ7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHN0b3JlTmFtZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN0b3JlTmFtZXNbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1ncmFiU3RvcmVzRm4gPSBncmFiU3RvcmVzQnlOYW1lKHN0b3JlTmFtZXMpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU3RvcmVJbmplY3RvcihncmFiU3RvcmVzRm4sIGNvbXBvbmVudENsYXNzLCBzdG9yZU5hbWVzLmpvaW4oXCItXCIpKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKlxuICogZGV2IHRvb2wgc3VwcG9ydFxuICovXG52YXIgaXNEZXZ0b29sc0VuYWJsZWQgPSBmYWxzZTtcblxudmFyIGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcgPSBmYWxzZTtcblxudmFyIHdhcm5lZEFib3V0T2JzZXJ2ZXJJbmplY3REZXByZWNhdGlvbiA9IGZhbHNlO1xuXG4vLyBXZWFrTWFwPE5vZGUsIE9iamVjdD47XG52YXIgY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5ID0gdHlwZW9mIFdlYWtNYXAgIT09IFwidW5kZWZpbmVkXCIgPyBuZXcgV2Vha01hcCgpIDogdW5kZWZpbmVkO1xudmFyIHJlbmRlclJlcG9ydGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5mdW5jdGlvbiBmaW5kRE9NTm9kZSQyKGNvbXBvbmVudCkge1xuICAgIGlmIChyZWFjdERvbS5maW5kRE9NTm9kZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWN0RG9tLmZpbmRET01Ob2RlKGNvbXBvbmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGZpbmRET01Ob2RlIHdpbGwgdGhyb3cgaW4gcmVhY3QtdGVzdC1yZW5kZXJlciwgc2VlOlxuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC1yZWFjdC9pc3N1ZXMvMjE2XG4gICAgICAgICAgICAvLyBJcyB0aGVyZSBhIGJldHRlciBoZXVyaXN0aWM/XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVwb3J0UmVuZGVyaW5nKGNvbXBvbmVudCkge1xuICAgIHZhciBub2RlID0gZmluZERPTU5vZGUkMihjb21wb25lbnQpO1xuICAgIGlmIChub2RlICYmIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeSkgY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5LnNldChub2RlLCBjb21wb25lbnQpO1xuXG4gICAgcmVuZGVyUmVwb3J0ZXIuZW1pdCh7XG4gICAgICAgIGV2ZW50OiBcInJlbmRlclwiLFxuICAgICAgICByZW5kZXJUaW1lOiBjb21wb25lbnQuX18kbW9iUmVuZGVyRW5kIC0gY29tcG9uZW50Ll9fJG1vYlJlbmRlclN0YXJ0LFxuICAgICAgICB0b3RhbFRpbWU6IERhdGUubm93KCkgLSBjb21wb25lbnQuX18kbW9iUmVuZGVyU3RhcnQsXG4gICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgICBub2RlOiBub2RlXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQ29tcG9uZW50cygpIHtcbiAgICBpZiAodHlwZW9mIFdlYWtNYXAgPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIlttb2J4LXJlYWN0XSB0cmFja2luZyBjb21wb25lbnRzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyLlwiKTtcbiAgICBpZiAoIWlzRGV2dG9vbHNFbmFibGVkKSBpc0RldnRvb2xzRW5hYmxlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHVzZVN0YXRpY1JlbmRlcmluZyh1c2VTdGF0aWNSZW5kZXJpbmcpIHtcbiAgICBpc1VzaW5nU3RhdGljUmVuZGVyaW5nID0gdXNlU3RhdGljUmVuZGVyaW5nO1xufVxuXG4vKipcbiAqIEVycm9ycyByZXBvcnRlclxuICovXG5cbnZhciBlcnJvcnNSZXBvcnRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuLyoqXG4gKiBVdGlsaXRpZXNcbiAqL1xuXG5mdW5jdGlvbiBwYXRjaCh0YXJnZXQsIGZ1bmNOYW1lKSB7XG4gICAgdmFyIHJ1bk1peGluRmlyc3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgdmFyIGJhc2UgPSB0YXJnZXRbZnVuY05hbWVdO1xuICAgIHZhciBtaXhpbkZ1bmMgPSByZWFjdGl2ZU1peGluW2Z1bmNOYW1lXTtcbiAgICB2YXIgZiA9ICFiYXNlID8gbWl4aW5GdW5jIDogcnVuTWl4aW5GaXJzdCA9PT0gdHJ1ZSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbWl4aW5GdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGJhc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICBiYXNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIG1peGluRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICAvLyBNV0U6IGlkZWFsbHkgd2UgZnJlZXplIGhlcmUgdG8gcHJvdGVjdCBhZ2FpbnN0IGFjY2lkZW50YWwgb3ZlcndyaXRlcyBpbiBjb21wb25lbnQgaW5zdGFuY2VzLCBzZWUgIzE5NVxuICAgIC8vIC4uLmJ1dCB0aGF0IGJyZWFrcyByZWFjdC1ob3QtbG9hZGVyLCBzZWUgIzIzMS4uLlxuICAgIHRhcmdldFtmdW5jTmFtZV0gPSBmO1xufVxuXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICAgIC8vRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9jNjk5MDRhNTExYjkwMDI2NjkzNTE2ODIyMzA2M2RkODc3MmRmYzQwL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvc2hhbGxvd0VxdWFsLmpzXG4gICAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoKHR5cGVvZiBvYmpBID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqQSkpICE9PSBcIm9iamVjdFwiIHx8IG9iakEgPT09IG51bGwgfHwgKHR5cGVvZiBvYmpCID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqQikpICE9PSBcIm9iamVjdFwiIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIEZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvYzY5OTA0YTUxMWI5MDAyNjY5MzUxNjgyMjMwNjNkZDg3NzJkZmM0MC9wYWNrYWdlcy9mYmpzL3NyYy9jb3JlL3NoYWxsb3dFcXVhbC5qc1xuICAgIGlmICh4ID09PSB5KSB7XG4gICAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZWFjdGl2ZU1peGluXG4gKi9cbnZhciByZWFjdGl2ZU1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmIChpc1VzaW5nU3RhdGljUmVuZGVyaW5nID09PSB0cnVlKSByZXR1cm47XG4gICAgICAgIC8vIEdlbmVyYXRlIGZyaWVuZGx5IG5hbWUgZm9yIGRlYnVnZ2luZ1xuICAgICAgICB2YXIgaW5pdGlhbE5hbWUgPSB0aGlzLmRpc3BsYXlOYW1lIHx8IHRoaXMubmFtZSB8fCB0aGlzLmNvbnN0cnVjdG9yICYmICh0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IHRoaXMuY29uc3RydWN0b3IubmFtZSkgfHwgXCI8Y29tcG9uZW50PlwiO1xuICAgICAgICB2YXIgcm9vdE5vZGVJRCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAmJiB0aGlzLl9yZWFjdEludGVybmFsSW5zdGFuY2UuX3Jvb3ROb2RlSUQgfHwgdGhpcy5fcmVhY3RJbnRlcm5hbEZpYmVyICYmIHRoaXMuX3JlYWN0SW50ZXJuYWxGaWJlci5fZGVidWdJRDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgcHJvcHMgYXJlIHNoYWxsb3dseSBtb2RpZmllZCwgcmVhY3Qgd2lsbCByZW5kZXIgYW55d2F5LFxuICAgICAgICAgKiBzbyBhdG9tLnJlcG9ydENoYW5nZWQoKSBzaG91bGQgbm90IHJlc3VsdCBpbiB5ZXQgYW5vdGhlciByZS1yZW5kZXJcbiAgICAgICAgICovXG4gICAgICAgIHZhciBza2lwUmVuZGVyID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmb3JjZVVwZGF0ZSB3aWxsIHJlLWFzc2lnbiB0aGlzLnByb3BzLiBXZSBkb24ndCB3YW50IHRoYXQgdG8gY2F1c2UgYSBsb29wLFxuICAgICAgICAgKiBzbyBkZXRlY3QgdGhlc2UgY2hhbmdlc1xuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGlzRm9yY2luZ1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VQcm9wZXJ0eU9ic2VydmFibGVSZWZlcmVuY2UocHJvcE5hbWUpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZUhvbGRlciA9IHRoaXNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgdmFyIGF0b20gPSBtb2J4LmNyZWF0ZUF0b20oXCJyZWFjdGl2ZSBcIiArIHByb3BOYW1lKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wTmFtZSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICAgICAgICAgICAgICBhdG9tLnJlcG9ydE9ic2VydmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUhvbGRlcjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0ZvcmNpbmdVcGRhdGUgJiYgIXNoYWxsb3dFcXVhbCh2YWx1ZUhvbGRlciwgdikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSG9sZGVyID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBSZW5kZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXRvbS5yZXBvcnRDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwUmVuZGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUhvbGRlciA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1ha2UgdGhpcy5wcm9wcyBhbiBvYnNlcnZhYmxlIHJlZmVyZW5jZSwgc2VlICMxMjRcbiAgICAgICAgbWFrZVByb3BlcnR5T2JzZXJ2YWJsZVJlZmVyZW5jZS5jYWxsKHRoaXMsIFwicHJvcHNcIik7XG4gICAgICAgIC8vIG1ha2Ugc3RhdGUgYW4gb2JzZXJ2YWJsZSByZWZlcmVuY2VcbiAgICAgICAgbWFrZVByb3BlcnR5T2JzZXJ2YWJsZVJlZmVyZW5jZS5jYWxsKHRoaXMsIFwic3RhdGVcIik7XG5cbiAgICAgICAgLy8gd2lyZSB1cCByZWFjdGl2ZSByZW5kZXJcbiAgICAgICAgdmFyIGJhc2VSZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpO1xuICAgICAgICB2YXIgcmVhY3Rpb24gPSBudWxsO1xuICAgICAgICB2YXIgaXNSZW5kZXJpbmdQZW5kaW5nID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGluaXRpYWxSZW5kZXIgPSBmdW5jdGlvbiBpbml0aWFsUmVuZGVyKCkge1xuICAgICAgICAgICAgcmVhY3Rpb24gPSBuZXcgbW9ieC5SZWFjdGlvbihpbml0aWFsTmFtZSArIFwiI1wiICsgcm9vdE5vZGVJRCArIFwiLnJlbmRlcigpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVuZGVyaW5nUGVuZGluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBOLkIuIEdldHRpbmcgaGVyZSAqYmVmb3JlIG1vdW50aW5nKiBtZWFucyB0aGF0IGEgY29tcG9uZW50IGNvbnN0cnVjdG9yIGhhcyBzaWRlIGVmZmVjdHMgKHNlZSB0aGUgcmVsZXZhbnQgdGVzdCBpbiBtaXNjLmpzKVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHVuaWRpb21hdGljIFJlYWN0IHVzYWdlIGJ1dCBSZWFjdCB3aWxsIGNvcnJlY3RseSB3YXJuIGFib3V0IHRoaXMgc28gd2UgY29udGludWUgYXMgdXN1YWxcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlICM4NSAvIFB1bGwgIzQ0XG4gICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyaW5nUGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMuY29tcG9uZW50V2lsbFJlYWN0ID09PSBcImZ1bmN0aW9uXCIpIF90aGlzLmNvbXBvbmVudFdpbGxSZWFjdCgpOyAvLyBUT0RPOiB3cmFwIGluIGFjdGlvbj9cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9fJG1vYnhJc1VubW91bnRlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHVubW91bnRlZCBhdCB0aGlzIHBvaW50LCBjb21wb25lbnRXaWxsUmVhY3QoKSBoYWQgYSBzaWRlIGVmZmVjdCBjYXVzaW5nIHRoZSBjb21wb25lbnQgdG8gdW5tb3VudGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBjaGVjaz8gVGhlbiByZWFjdCB3aWxsIHByb3Blcmx5IHdhcm4gYWJvdXQgdGhlIGZhY3QgdGhhdCB0aGlzIHNob3VsZCBub3QgaGFwcGVuPyBTZWUgIzczXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCBwZW9wbGUgYWxzbyBjbGFpbSB0aGlzIG1pZ3RoIGhhcHBlbiBkdXJpbmcgdW5pdCB0ZXN0cy4uXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZvcmNpbmdVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcFJlbmRlcikgUmVhY3QuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZS5jYWxsKF90aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZvcmNpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHJlYWN0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhY3Rpb24ucmVhY3RDb21wb25lbnQgPSBfdGhpcztcbiAgICAgICAgICAgIHJlYWN0aXZlUmVuZGVyLiRtb2J4ID0gcmVhY3Rpb247XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXIgPSByZWFjdGl2ZVJlbmRlcjtcbiAgICAgICAgICAgIHJldHVybiByZWFjdGl2ZVJlbmRlcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZWFjdGl2ZVJlbmRlciA9IGZ1bmN0aW9uIHJlYWN0aXZlUmVuZGVyKCkge1xuICAgICAgICAgICAgaXNSZW5kZXJpbmdQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgZXhjZXB0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIHJlbmRlcmluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlYWN0aW9uLnRyYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX18kbW9iUmVuZGVyU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJpbmcgPSBtb2J4Ll9hbGxvd1N0YXRlQ2hhbmdlcyhmYWxzZSwgYmFzZVJlbmRlcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBleGNlcHRpb24gPSBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX18kbW9iUmVuZGVyRW5kID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBlcnJvcnNSZXBvcnRlci5lbWl0KGV4Y2VwdGlvbik7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcmluZztcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJlbmRlciA9IGluaXRpYWxSZW5kZXI7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcgPT09IHRydWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5yZW5kZXIuJG1vYnggJiYgdGhpcy5yZW5kZXIuJG1vYnguZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9fJG1vYnhJc1VubW91bnRlZCA9IHRydWU7XG4gICAgICAgIGlmIChpc0RldnRvb2xzRW5hYmxlZCkge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBmaW5kRE9NTm9kZSQyKHRoaXMpO1xuICAgICAgICAgICAgaWYgKG5vZGUgJiYgY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5KSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5LmRlbGV0ZShub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlclJlcG9ydGVyLmVtaXQoe1xuICAgICAgICAgICAgICAgIGV2ZW50OiBcImRlc3Ryb3lcIixcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMsXG4gICAgICAgICAgICAgICAgbm9kZTogbm9kZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoaXNEZXZ0b29sc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJlcG9ydFJlbmRlcmluZyh0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGV2dG9vbHNFbmFibGVkKSB7XG4gICAgICAgICAgICByZXBvcnRSZW5kZXJpbmcodGhpcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgaWYgKGlzVXNpbmdTdGF0aWNSZW5kZXJpbmcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlttb2J4LXJlYWN0XSBJdCBzZWVtcyB0aGF0IGEgcmUtcmVuZGVyaW5nIG9mIGEgUmVhY3QgY29tcG9uZW50IGlzIHRyaWdnZXJlZCB3aGlsZSBpbiBzdGF0aWMgKHNlcnZlci1zaWRlKSBtb2RlLiBQbGVhc2UgbWFrZSBzdXJlIGNvbXBvbmVudHMgYXJlIHJlbmRlcmVkIG9ubHkgb25jZSBzZXJ2ZXItc2lkZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXBkYXRlIG9uIGFueSBzdGF0ZSBjaGFuZ2VzIChhcyBpcyB0aGUgZGVmYXVsdClcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IG5leHRTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXBkYXRlIGlmIHByb3BzIGFyZSBzaGFsbG93bHkgbm90IGVxdWFsLCBpbnNwaXJlZCBieSBQdXJlUmVuZGVyTWl4aW5cbiAgICAgICAgLy8gd2UgY291bGQgcmV0dXJuIGp1c3QgJ2ZhbHNlJyBoZXJlLCBhbmQgYXZvaWQgdGhlIGBza2lwUmVuZGVyYCBjaGVja3MgZXRjXG4gICAgICAgIC8vIGhvd2V2ZXIsIGl0IGlzIG5pY2VyIGlmIGxpZmVjeWNsZSBldmVudHMgYXJlIHRyaWdnZXJlZCBsaWtlIHVzdWFsbHksXG4gICAgICAgIC8vIHNvIHdlIHJldHVybiB0cnVlIGhlcmUgaWYgcHJvcHMgYXJlIHNoYWxsb3dseSBtb2RpZmllZC5cbiAgICAgICAgcmV0dXJuICFzaGFsbG93RXF1YWwodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlciBmdW5jdGlvbiAvIGRlY29yYXRvclxuICAgICAqL1xufTtmdW5jdGlvbiBvYnNlcnZlcihhcmcxLCBhcmcyKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0b3JlIG5hbWVzIHNob3VsZCBiZSBwcm92aWRlZCBhcyBhcnJheVwiKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgLy8gY29tcG9uZW50IG5lZWRzIHN0b3Jlc1xuICAgICAgICBpZiAoIXdhcm5lZEFib3V0T2JzZXJ2ZXJJbmplY3REZXByZWNhdGlvbikge1xuICAgICAgICAgICAgd2FybmVkQWJvdXRPYnNlcnZlckluamVjdERlcHJlY2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTW9ieCBvYnNlcnZlcjogVXNpbmcgb2JzZXJ2ZXIgdG8gaW5qZWN0IHN0b3JlcyBpcyBkZXByZWNhdGVkIHNpbmNlIDQuMC4gVXNlIGBAaW5qZWN0KFwic3RvcmUxXCIsIFwic3RvcmUyXCIpIEBvYnNlcnZlciBDb21wb25lbnRDbGFzc2Agb3IgYGluamVjdChcInN0b3JlMVwiLCBcInN0b3JlMlwiKShvYnNlcnZlcihjb21wb25lbnRDbGFzcykpYCBpbnN0ZWFkIG9mIGBAb2JzZXJ2ZXIoW1wic3RvcmUxXCIsIFwic3RvcmUyXCJdKSBDb21wb25lbnRDbGFzc2AnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyZzIpIHtcbiAgICAgICAgICAgIC8vIGludm9rZWQgYXMgZGVjb3JhdG9yXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyKGFyZzEsIGNvbXBvbmVudENsYXNzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5qZWN0LmFwcGx5KG51bGwsIGFyZzEpKG9ic2VydmVyKGFyZzIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSBhcmcxO1xuXG4gICAgaWYgKGNvbXBvbmVudENsYXNzLmlzTW9ieEluamVjdG9yID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk1vYnggb2JzZXJ2ZXI6IFlvdSBhcmUgdHJ5aW5nIHRvIHVzZSAnb2JzZXJ2ZXInIG9uIGEgY29tcG9uZW50IHRoYXQgYWxyZWFkeSBoYXMgJ2luamVjdCcuIFBsZWFzZSBhcHBseSAnb2JzZXJ2ZXInIGJlZm9yZSBhcHBseWluZyAnaW5qZWN0J1wiKTtcbiAgICB9XG5cbiAgICAvLyBTdGF0ZWxlc3MgZnVuY3Rpb24gY29tcG9uZW50OlxuICAgIC8vIElmIGl0IGlzIGZ1bmN0aW9uIGJ1dCBkb2Vzbid0IHNlZW0gdG8gYmUgYSByZWFjdCBjbGFzcyBjb25zdHJ1Y3RvcixcbiAgICAvLyB3cmFwIGl0IHRvIGEgcmVhY3QgY2xhc3MgYXV0b21hdGljYWxseVxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MgPT09IFwiZnVuY3Rpb25cIiAmJiAoIWNvbXBvbmVudENsYXNzLnByb3RvdHlwZSB8fCAhY29tcG9uZW50Q2xhc3MucHJvdG90eXBlLnJlbmRlcikgJiYgIWNvbXBvbmVudENsYXNzLmlzUmVhY3RDbGFzcyAmJiAhUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoY29tcG9uZW50Q2xhc3MpKSB7XG4gICAgICAgIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gICAgICAgIHJldHVybiBvYnNlcnZlcigoX3RlbXAgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgICAgICAgaW5oZXJpdHMoX2NsYXNzLCBfQ29tcG9uZW50KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gX2NsYXNzKCkge1xuICAgICAgICAgICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIF9jbGFzcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9jbGFzcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKF9jbGFzcykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjcmVhdGVDbGFzcyhfY2xhc3MsIFt7XG4gICAgICAgICAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRDbGFzcy5jYWxsKHRoaXMsIHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgcmV0dXJuIF9jbGFzcztcbiAgICAgICAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBjb21wb25lbnRDbGFzcy5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnRDbGFzcy5uYW1lLCBfY2xhc3MuY29udGV4dFR5cGVzID0gY29tcG9uZW50Q2xhc3MuY29udGV4dFR5cGVzLCBfY2xhc3MucHJvcFR5cGVzID0gY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzLCBfY2xhc3MuZGVmYXVsdFByb3BzID0gY29tcG9uZW50Q2xhc3MuZGVmYXVsdFByb3BzLCBfdGVtcCkpO1xuICAgIH1cblxuICAgIGlmICghY29tcG9uZW50Q2xhc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHBhc3MgYSB2YWxpZCBjb21wb25lbnQgdG8gJ29ic2VydmVyJ1wiKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gY29tcG9uZW50Q2xhc3MucHJvdG90eXBlIHx8IGNvbXBvbmVudENsYXNzO1xuICAgIG1peGluTGlmZWN5Y2xlRXZlbnRzKHRhcmdldCk7XG4gICAgY29tcG9uZW50Q2xhc3MuaXNNb2JYUmVhY3RPYnNlcnZlciA9IHRydWU7XG4gICAgcmV0dXJuIGNvbXBvbmVudENsYXNzO1xufVxuXG5mdW5jdGlvbiBtaXhpbkxpZmVjeWNsZUV2ZW50cyh0YXJnZXQpIHtcbiAgICBwYXRjaCh0YXJnZXQsIFwiY29tcG9uZW50V2lsbE1vdW50XCIsIHRydWUpO1tcImNvbXBvbmVudERpZE1vdW50XCIsIFwiY29tcG9uZW50V2lsbFVubW91bnRcIiwgXCJjb21wb25lbnREaWRVcGRhdGVcIl0uZm9yRWFjaChmdW5jdGlvbiAoZnVuY05hbWUpIHtcbiAgICAgICAgcGF0Y2godGFyZ2V0LCBmdW5jTmFtZSk7XG4gICAgfSk7XG4gICAgaWYgKCF0YXJnZXQuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB7XG4gICAgICAgIHRhcmdldC5zaG91bGRDb21wb25lbnRVcGRhdGUgPSByZWFjdGl2ZU1peGluLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICB9XG59XG5cbi8vIFRPRE86IHN1cHBvcnQgaW5qZWN0aW9uIHNvbWVob3cgYXMgd2VsbD9cbnZhciBPYnNlcnZlciA9IG9ic2VydmVyKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgb2JzZXJ2ZXJJbmplY3QgPSBfcmVmLmluamVjdCxcbiAgICAgICAgcmVuZGVyID0gX3JlZi5yZW5kZXI7XG5cbiAgICB2YXIgY29tcG9uZW50ID0gY2hpbGRyZW4gfHwgcmVuZGVyO1xuICAgIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoIW9ic2VydmVySW5qZWN0KSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQoKTtcbiAgICB9XG4gICAgdmFyIEluamVjdENvbXBvbmVudCA9IGluamVjdChvYnNlcnZlckluamVjdCkoY29tcG9uZW50KTtcbiAgICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChJbmplY3RDb21wb25lbnQsIG51bGwpO1xufSk7XG5cbk9ic2VydmVyLmRpc3BsYXlOYW1lID0gXCJPYnNlcnZlclwiO1xuXG52YXIgT2JzZXJ2ZXJQcm9wc0NoZWNrID0gZnVuY3Rpb24gT2JzZXJ2ZXJQcm9wc0NoZWNrKHByb3BzLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgZXh0cmFLZXkgPSBrZXkgPT09IFwiY2hpbGRyZW5cIiA/IFwicmVuZGVyXCIgOiBcImNoaWxkcmVuXCI7XG4gICAgaWYgKHR5cGVvZiBwcm9wc1trZXldID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHByb3BzW2V4dHJhS2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AsZG8gbm90IHVzZSBjaGlsZHJlbiBhbmQgcmVuZGVyIGluIHRoZSBzYW1lIHRpbWUgaW5gXCIgKyBjb21wb25lbnROYW1lKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByb3BzW2tleV0gPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcHJvcHNbZXh0cmFLZXldID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBvZiB0eXBlIGBcIiArIF90eXBlb2YocHJvcHNba2V5XSkgKyBcImAgc3VwcGxpZWQgdG9cIiArIFwiIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBmdW5jdGlvbmAuXCIpO1xufTtcblxuT2JzZXJ2ZXIucHJvcFR5cGVzID0ge1xuICAgIHJlbmRlcjogT2JzZXJ2ZXJQcm9wc0NoZWNrLFxuICAgIGNoaWxkcmVuOiBPYnNlcnZlclByb3BzQ2hlY2tcbn07XG5cbnZhciBfY2xhc3M7XG52YXIgX3RlbXA7XG5cbnZhciBzcGVjaWFsUmVhY3RLZXlzID0geyBjaGlsZHJlbjogdHJ1ZSwga2V5OiB0cnVlLCByZWY6IHRydWUgfTtcblxudmFyIFByb3ZpZGVyID0gKF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBpbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuICAgICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUHJvdmlkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQcm92aWRlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIGNyZWF0ZUNsYXNzKFByb3ZpZGVyLCBbe1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICAgICAgdmFyIHN0b3JlcyA9IHt9O1xuICAgICAgICAgICAgLy8gaW5oZXJpdCBzdG9yZXNcbiAgICAgICAgICAgIHZhciBiYXNlU3RvcmVzID0gdGhpcy5jb250ZXh0Lm1vYnhTdG9yZXM7XG4gICAgICAgICAgICBpZiAoYmFzZVN0b3JlcykgZm9yICh2YXIga2V5IGluIGJhc2VTdG9yZXMpIHtcbiAgICAgICAgICAgICAgICBzdG9yZXNba2V5XSA9IGJhc2VTdG9yZXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFkZCBvd24gc3RvcmVzXG4gICAgICAgICAgICBmb3IgKHZhciBfa2V5IGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNwZWNpYWxSZWFjdEtleXNbX2tleV0gJiYgX2tleSAhPT0gXCJzdXBwcmVzc0NoYW5nZWRTdG9yZVdhcm5pbmdcIikgc3RvcmVzW19rZXldID0gdGhpcy5wcm9wc1tfa2V5XTtcbiAgICAgICAgICAgIH1yZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vYnhTdG9yZXM6IHN0b3Jlc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgICAgICAvLyBNYXliZSB0aGlzIHdhcm5pbmcgaXMgdG9vIGFnZ3Jlc3NpdmU/XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobmV4dFByb3BzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmxlbmd0aCkgY29uc29sZS53YXJuKFwiTW9iWCBQcm92aWRlcjogVGhlIHNldCBvZiBwcm92aWRlZCBzdG9yZXMgaGFzIGNoYW5nZWQuIFBsZWFzZSBhdm9pZCBjaGFuZ2luZyBzdG9yZXMgYXMgdGhlIGNoYW5nZSBtaWdodCBub3QgcHJvcGFnYXRlIHRvIGFsbCBjaGlsZHJlblwiKTtcbiAgICAgICAgICAgIGlmICghbmV4dFByb3BzLnN1cHByZXNzQ2hhbmdlZFN0b3JlV2FybmluZykgZm9yICh2YXIga2V5IGluIG5leHRQcm9wcykge1xuICAgICAgICAgICAgICAgIGlmICghc3BlY2lhbFJlYWN0S2V5c1trZXldICYmIHRoaXMucHJvcHNba2V5XSAhPT0gbmV4dFByb3BzW2tleV0pIGNvbnNvbGUud2FybihcIk1vYlggUHJvdmlkZXI6IFByb3ZpZGVkIHN0b3JlICdcIiArIGtleSArIFwiJyBoYXMgY2hhbmdlZC4gUGxlYXNlIGF2b2lkIHJlcGxhY2luZyBzdG9yZXMgYXMgdGhlIGNoYW5nZSBtaWdodCBub3QgcHJvcGFnYXRlIHRvIGFsbCBjaGlsZHJlblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gUHJvdmlkZXI7XG59KFJlYWN0LkNvbXBvbmVudCksIF9jbGFzcy5jb250ZXh0VHlwZXMgPSB7XG4gICAgbW9ieFN0b3Jlczogb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0XG59LCBfY2xhc3MuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgbW9ieFN0b3Jlczogb2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0LmlzUmVxdWlyZWRcbn0sIF90ZW1wKTtcblxuaWYgKCFSZWFjdC5Db21wb25lbnQpIHRocm93IG5ldyBFcnJvcihcIm1vYngtcmVhY3QgcmVxdWlyZXMgUmVhY3QgdG8gYmUgYXZhaWxhYmxlXCIpO1xuaWYgKCFtb2J4LnNweSkgdGhyb3cgbmV3IEVycm9yKFwibW9ieC1yZWFjdCByZXF1aXJlcyBtb2J4IHRvIGJlIGF2YWlsYWJsZVwiKTtcblxuaWYgKHR5cGVvZiByZWFjdERvbS51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyA9PT0gXCJmdW5jdGlvblwiKSBtb2J4LmNvbmZpZ3VyZSh7IHJlYWN0aW9uU2NoZWR1bGVyOiByZWFjdERvbS51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyB9KTtlbHNlIGlmICh0eXBlb2YgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMSA9PT0gXCJmdW5jdGlvblwiKSBtb2J4LmNvbmZpZ3VyZSh7IHJlYWN0aW9uU2NoZWR1bGVyOiB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQxIH0pO1xuXG52YXIgb25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZm4pIHtcbiAgICByZXR1cm4gZXJyb3JzUmVwb3J0ZXIub24oZm4pO1xufTtcblxuLyogRGV2VG9vbCBzdXBwb3J0ICovXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmR5a29nL21vYngtZGV2dG9vbHMvYmxvYi9kODk3NmMyNGI4Y2I3MjdlZDU5ZjlhMGJjOTA1YTAwOWRmNzllMjIxL3NyYy9iYWNrZW5kL2luc3RhbGxHbG9iYWxIb29rLmpzXG5cbmlmICgodHlwZW9mIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pKSA9PT0gXCJvYmplY3RcIikge1xuICAgIHZhciBtb2J4JDEgPSB7IHNweTogbW9ieC5zcHksIGV4dHJhczogeyBnZXREZWJ1Z05hbWU6IG1vYnguZ2V0RGVidWdOYW1lIH0gfTtcbiAgICB2YXIgbW9ieFJlYWN0ID0geyByZW5kZXJSZXBvcnRlcjogcmVuZGVyUmVwb3J0ZXIsIGNvbXBvbmVudEJ5Tm9kZVJlZ2lzdGVyeTogY29tcG9uZW50QnlOb2RlUmVnaXN0ZXJ5LCB0cmFja0NvbXBvbmVudHM6IHRyYWNrQ29tcG9uZW50cyB9O1xuICAgIF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdE1vYnhSZWFjdChtb2J4UmVhY3QsIG1vYngkMSk7XG59XG5cbmV4cG9ydHMucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuZXhwb3J0cy5Qcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnRzLm9uRXJyb3IgPSBvbkVycm9yO1xuZXhwb3J0cy5vYnNlcnZlciA9IG9ic2VydmVyO1xuZXhwb3J0cy5PYnNlcnZlciA9IE9ic2VydmVyO1xuZXhwb3J0cy5yZW5kZXJSZXBvcnRlciA9IHJlbmRlclJlcG9ydGVyO1xuZXhwb3J0cy5jb21wb25lbnRCeU5vZGVSZWdpc3RlcnkgPSBjb21wb25lbnRCeU5vZGVSZWdpc3Rlcnk7XG5leHBvcnRzLnRyYWNrQ29tcG9uZW50cyA9IHRyYWNrQ29tcG9uZW50cztcbmV4cG9ydHMudXNlU3RhdGljUmVuZGVyaW5nID0gdXNlU3RhdGljUmVuZGVyaW5nO1xuZXhwb3J0cy5Qcm92aWRlciA9IFByb3ZpZGVyO1xuZXhwb3J0cy5pbmplY3QgPSBpbmplY3Q7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9tb2J4LXJlYWN0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdpdGhSb3V0ZXIsIExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0ICcuLi9zdHlsZXMvU2VhcmNoQmFyLmNzcyc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG5Ab2JzZXJ2ZXJcbmNsYXNzIFNpZ25PdXRCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLmhhbmRsZVNpZ25PdXQgPSB0aGlzLmhhbmRsZVNpZ25PdXQuYmluZCh0aGlzKTtcbiAgICB9O1xuXG4gICAgaGFuZGxlU2lnbk91dCA9IChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5sb2dPdXQoKTtcblxuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPExpbmsgY2xhc3NOYW1lPSduYXYtbGluaycgdG89eycjJ30gb25DbGljaz17dGhpcy5oYW5kbGVTaWduT3V0fT5Mb2dvdXQ8L0xpbms+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5TaWduT3V0QnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgICBsb2dPdXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoU2lnbk91dEJ1dHRvbik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9TaWduT3V0QnV0dG9uLmpzIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vTmF2QmFyLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9OYXZCYXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9OYXZCYXIuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3R5bGVzL05hdkJhci5jc3Ncbi8vIG1vZHVsZSBpZCA9IDE3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9Nb3ZpZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vTW92aWUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9Nb3ZpZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zdHlsZXMvTW92aWUuY3NzXG4vLyBtb2R1bGUgaWQgPSAxNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5mc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gMTc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDE3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qc1xuLy8gbW9kdWxlIGlkID0gMTgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxODdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qc1xuLy8gbW9kdWxlIGlkID0gMTg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qc1xuLy8gbW9kdWxlIGlkID0gMTk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDE5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDE5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDIwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanNcbi8vIG1vZHVsZSBpZCA9IDIwMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanNcbi8vIG1vZHVsZSBpZCA9IDIwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDIwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanNcbi8vIG1vZHVsZSBpZCA9IDIwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanNcbi8vIG1vZHVsZSBpZCA9IDIwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanNcbi8vIG1vZHVsZSBpZCA9IDIxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMjExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMjEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanNcbi8vIG1vZHVsZSBpZCA9IDIxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanNcbi8vIG1vZHVsZSBpZCA9IDIxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qc1xuLy8gbW9kdWxlIGlkID0gMjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qc1xuLy8gbW9kdWxlIGlkID0gMjE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qc1xuLy8gbW9kdWxlIGlkID0gMjIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanNcbi8vIG1vZHVsZSBpZCA9IDIyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzXG4vLyBtb2R1bGUgaWQgPSAyMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qc1xuLy8gbW9kdWxlIGlkID0gMjI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qc1xuLy8gbW9kdWxlIGlkID0gMjI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanNcbi8vIG1vZHVsZSBpZCA9IDIyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qc1xuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qc1xuLy8gbW9kdWxlIGlkID0gMjMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanNcbi8vIG1vZHVsZSBpZCA9IDIzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzXG4vLyBtb2R1bGUgaWQgPSAyMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanNcbi8vIG1vZHVsZSBpZCA9IDIzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDIzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qc1xuLy8gbW9kdWxlIGlkID0gMjQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qc1xuLy8gbW9kdWxlIGlkID0gMjQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanNcbi8vIG1vZHVsZSBpZCA9IDI0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanNcbi8vIG1vZHVsZSBpZCA9IDI1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qc1xuLy8gbW9kdWxlIGlkID0gMjUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanNcbi8vIG1vZHVsZSBpZCA9IDI1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qc1xuLy8gbW9kdWxlIGlkID0gMjU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanNcbi8vIG1vZHVsZSBpZCA9IDI1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDI1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMjYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qc1xuLy8gbW9kdWxlIGlkID0gMjY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanNcbi8vIG1vZHVsZSBpZCA9IDI2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanNcbi8vIG1vZHVsZSBpZCA9IDI2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qc1xuLy8gbW9kdWxlIGlkID0gMjczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanNcbi8vIG1vZHVsZSBpZCA9IDI3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qc1xuLy8gbW9kdWxlIGlkID0gMjc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanNcbi8vIG1vZHVsZSBpZCA9IDI3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanNcbi8vIG1vZHVsZSBpZCA9IDI3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qc1xuLy8gbW9kdWxlIGlkID0gMjgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMjgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qc1xuLy8gbW9kdWxlIGlkID0gMjgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCkge1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJG1hdGNoXTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzXG4vLyBtb2R1bGUgaWQgPSAyODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanNcbi8vIG1vZHVsZSBpZCA9IDI4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanNcbi8vIG1vZHVsZSBpZCA9IDI4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbiAgdmFyIF9zcGxpdCA9ICRzcGxpdDtcbiAgdmFyICRwdXNoID0gW10ucHVzaDtcbiAgdmFyICRTUExJVCA9ICdzcGxpdCc7XG4gIHZhciBMRU5HVEggPSAnbGVuZ3RoJztcbiAgdmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZiAoIU5QQ0cpIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICBpZiAoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qc1xuLy8gbW9kdWxlIGlkID0gMjg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZXhpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gMjg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qc1xuLy8gbW9kdWxlIGlkID0gMjkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW5hbCA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluYWwpIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qc1xuLy8gbW9kdWxlIGlkID0gMjkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAyOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMjk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAyOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMjk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMzAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qc1xuLy8gbW9kdWxlIGlkID0gMzAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDMwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDMwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDMwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanNcbi8vIG1vZHVsZSBpZCA9IDMwN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDMwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDMwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanNcbi8vIG1vZHVsZSBpZCA9IDMxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanNcbi8vIG1vZHVsZSBpZCA9IDMxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMzEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSB8fCBjcmVhdGVEZXNjKDApO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qc1xuLy8gbW9kdWxlIGlkID0gMzE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDMxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDMxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qc1xuLy8gbW9kdWxlIGlkID0gMzE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuLmpzXG4vLyBtb2R1bGUgaWQgPSAzMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanNcbi8vIG1vZHVsZSBpZCA9IDMyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanNcbi8vIG1vZHVsZSBpZCA9IDMyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qc1xuLy8gbW9kdWxlIGlkID0gMzIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qc1xuLy8gbW9kdWxlIGlkID0gMzIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qc1xuLy8gbW9kdWxlIGlkID0gMzI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAzMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gMzI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qc1xuLy8gbW9kdWxlIGlkID0gMzI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDMyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMzMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanNcbi8vIG1vZHVsZSBpZCA9IDMzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qc1xuLy8gbW9kdWxlIGlkID0gMzM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanNcbi8vIG1vZHVsZSBpZCA9IDMzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1NldCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanNcbi8vIG1vZHVsZSBpZCA9IDMzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZi5qc1xuLy8gbW9kdWxlIGlkID0gMzM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDM0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzXG4vLyBtb2R1bGUgaWQgPSAzNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDM0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha1NldCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMzQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMzQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAzNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSAzNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanNcbi8vIG1vZHVsZSBpZCA9IDM0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZC5qc1xuLy8gbW9kdWxlIGlkID0gMzQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanNcbi8vIG1vZHVsZSBpZCA9IDM1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanNcbi8vIG1vZHVsZSBpZCA9IDM1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qc1xuLy8gbW9kdWxlIGlkID0gMzUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzXG4vLyBtb2R1bGUgaWQgPSAzNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanNcbi8vIG1vZHVsZSBpZCA9IDM1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qc1xuLy8gbW9kdWxlIGlkID0gMzU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanNcbi8vIG1vZHVsZSBpZCA9IDM1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanNcbi8vIG1vZHVsZSBpZCA9IDM1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanNcbi8vIG1vZHVsZSBpZCA9IDM1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanNcbi8vIG1vZHVsZSBpZCA9IDM1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qc1xuLy8gbW9kdWxlIGlkID0gMzYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDM2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMzY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMzY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbikge1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9ic2VydmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDM3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDM3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanNcbi8vIG1vZHVsZSBpZCA9IDM3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanNcbi8vIG1vZHVsZSBpZCA9IDM3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qc1xuLy8gbW9kdWxlIGlkID0gMzc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCAnYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5jc3MnXG5pbXBvcnQgSW5kZXhDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzJztcblxuUmVhY3RET00ucmVuZGVyKFxuICAgIDxJbmRleENvbnRhaW5lci8+LFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdC1yb290Jylcbik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYXBwLmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4yLjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0scj1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdD1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQsdT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSx2PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHc9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGM9MDtjPGI7YysrKWUrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Yj1FcnJvcihlK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7Yi5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiO2IuZnJhbWVzVG9Qb3A9MTt0aHJvdyBiO31cbnZhciB6PXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBBKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9QS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtBLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/eShcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0EucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gQihhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHx6fWZ1bmN0aW9uIEMoKXt9Qy5wcm90b3R5cGU9QS5wcm90b3R5cGU7dmFyIEQ9Qi5wcm90b3R5cGU9bmV3IEM7RC5jb25zdHJ1Y3Rvcj1CO20oRCxBLnByb3RvdHlwZSk7RC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEM7Ri5jb25zdHJ1Y3Rvcj1FO20oRixBLnByb3RvdHlwZSk7Ri51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQ9ITA7Ri5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbn07dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGUpe3ZhciBjLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsYykmJiFJLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbD0wO2w8ZjtsKyspaFtsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpyLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fWZ1bmN0aW9uIEsoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXJ9XG5mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBMPS9cXC8rL2csTT1bXTtmdW5jdGlvbiBOKGEsYixlLGMpe2lmKE0ubGVuZ3RoKXt2YXIgZD1NLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gTyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPk0ubGVuZ3RoJiZNLnB1c2goYSl9XG5mdW5jdGlvbiBQKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSByOmNhc2UgdDpjYXNlIHU6Y2FzZSB2Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1EoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrUShkLGspO2crPVAoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9XG5mLmNhbGwoYSksaz0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitRKGQsaysrKSxnKz1QKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLHkoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFIoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gUyhhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9UKGEsYyxlLHAudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKEsoYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBUKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKTtiPU4oYixnLGMsZCk7bnVsbD09YXx8UChhLFwiXCIsUyxiKTtPKGIpfVxudmFyIFU9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VChhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9TihudWxsLG51bGwsYixlKTtudWxsPT1hfHxQKGEsXCJcIixSLGIpO08oYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UChhLFwiXCIscC50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VChhLGIsbnVsbCxwLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe0soYSk/dm9pZCAwOnkoXCIxNDNcIik7cmV0dXJuIGF9fSxDb21wb25lbnQ6QSxQdXJlQ29tcG9uZW50OkIsdW5zdGFibGVfQXN5bmNDb21wb25lbnQ6RSxGcmFnbWVudDp3LGNyZWF0ZUVsZW1lbnQ6SixjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe3ZhciBjPW0oe30sYS5wcm9wcyksXG5kPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUguY2FsbChiLGgpJiYhSS5oYXNPd25Qcm9wZXJ0eShoKSYmKGNbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBsPTA7bDxoO2wrKylmW2xdPWFyZ3VtZW50c1tsKzJdO2MuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cix0eXBlOmEudHlwZSxrZXk6ZCxyZWY6Zyxwcm9wczpjLF9vd25lcjprfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0sXG5pc1ZhbGlkRWxlbWVudDpLLHZlcnNpb246XCIxNi4yLjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6Ryxhc3NpZ246bX19LFY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpVfSksVz1WJiZVfHxWO21vZHVsZS5leHBvcnRzPVdbXCJkZWZhdWx0XCJdP1dbXCJkZWZhdWx0XCJdOlc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDM4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjIuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxsPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxCPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEM9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksYmE9cmVxdWlyZShcImZianMvbGliL0V2ZW50TGlzdGVuZXJcIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGlhPXJlcXVpcmUoXCJmYmpzL2xpYi9mb2N1c05vZGVcIiksRD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBFKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YWE/dm9pZCAwOkUoXCIyMjdcIik7XG52YXIgb2E9e2NoaWxkcmVuOiEwLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiEwLGRlZmF1bHRWYWx1ZTohMCxkZWZhdWx0Q2hlY2tlZDohMCxpbm5lckhUTUw6ITAsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiEwLHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzohMCxzdHlsZTohMH07ZnVuY3Rpb24gcGEoYSxiKXtyZXR1cm4oYSZiKT09PWJ9XG52YXIgdGE9e01VU1RfVVNFX1BST1BFUlRZOjEsSEFTX0JPT0xFQU5fVkFMVUU6NCxIQVNfTlVNRVJJQ19WQUxVRTo4LEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOjI0LEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6MzIsSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFOjY0LGluamVjdERPTVByb3BlcnR5Q29uZmlnOmZ1bmN0aW9uKGEpe3ZhciBiPXRhLGM9YS5Qcm9wZXJ0aWVzfHx7fSxkPWEuRE9NQXR0cmlidXRlTmFtZXNwYWNlc3x8e30sZT1hLkRPTUF0dHJpYnV0ZU5hbWVzfHx7fTthPWEuRE9NTXV0YXRpb25NZXRob2RzfHx7fTtmb3IodmFyIGYgaW4gYyl7dWEuaGFzT3duUHJvcGVydHkoZik/RShcIjQ4XCIsZik6dm9pZCAwO3ZhciBnPWYudG9Mb3dlckNhc2UoKSxoPWNbZl07Zz17YXR0cmlidXRlTmFtZTpnLGF0dHJpYnV0ZU5hbWVzcGFjZTpudWxsLHByb3BlcnR5TmFtZTpmLG11dGF0aW9uTWV0aG9kOm51bGwsbXVzdFVzZVByb3BlcnR5OnBhKGgsYi5NVVNUX1VTRV9QUk9QRVJUWSksXG5oYXNCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19CT09MRUFOX1ZBTFVFKSxoYXNOdW1lcmljVmFsdWU6cGEoaCxiLkhBU19OVU1FUklDX1ZBTFVFKSxoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTpwYShoLGIuSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpLGhhc1N0cmluZ0Jvb2xlYW5WYWx1ZTpwYShoLGIuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFKX07MT49Zy5oYXNCb29sZWFuVmFsdWUrZy5oYXNOdW1lcmljVmFsdWUrZy5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlP3ZvaWQgMDpFKFwiNTBcIixmKTtlLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lPWVbZl0pO2QuaGFzT3duUHJvcGVydHkoZikmJihnLmF0dHJpYnV0ZU5hbWVzcGFjZT1kW2ZdKTthLmhhc093blByb3BlcnR5KGYpJiYoZy5tdXRhdGlvbk1ldGhvZD1hW2ZdKTt1YVtmXT1nfX19LHVhPXt9O1xuZnVuY3Rpb24gdmEoYSxiKXtpZihvYS5oYXNPd25Qcm9wZXJ0eShhKXx8MjxhLmxlbmd0aCYmKFwib1wiPT09YVswXXx8XCJPXCI9PT1hWzBdKSYmKFwiblwiPT09YVsxXXx8XCJOXCI9PT1hWzFdKSlyZXR1cm4hMTtpZihudWxsPT09YilyZXR1cm4hMDtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJib29sZWFuXCI6cmV0dXJuIG9hLmhhc093blByb3BlcnR5KGEpP2E9ITA6KGI9d2EoYSkpP2E9Yi5oYXNCb29sZWFuVmFsdWV8fGIuaGFzU3RyaW5nQm9vbGVhblZhbHVlfHxiLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6KGE9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSksYT1cImRhdGEtXCI9PT1hfHxcImFyaWEtXCI9PT1hKSxhO2Nhc2UgXCJ1bmRlZmluZWRcIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJvYmplY3RcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB3YShhKXtyZXR1cm4gdWEuaGFzT3duUHJvcGVydHkoYSk/dWFbYV06bnVsbH1cbnZhciB4YT10YSx5YT14YS5NVVNUX1VTRV9QUk9QRVJUWSxLPXhhLkhBU19CT09MRUFOX1ZBTFVFLHphPXhhLkhBU19OVU1FUklDX1ZBTFVFLEFhPXhhLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLEJhPXhhLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsQ2E9eGEuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFLERhPXtQcm9wZXJ0aWVzOnthbGxvd0Z1bGxTY3JlZW46Syxhc3luYzpLLGF1dG9Gb2N1czpLLGF1dG9QbGF5OkssY2FwdHVyZTpCYSxjaGVja2VkOnlhfEssY29sczpBYSxjb250ZW50RWRpdGFibGU6Q2EsY29udHJvbHM6SyxcImRlZmF1bHRcIjpLLGRlZmVyOkssZGlzYWJsZWQ6Syxkb3dubG9hZDpCYSxkcmFnZ2FibGU6Q2EsZm9ybU5vVmFsaWRhdGU6SyxoaWRkZW46Syxsb29wOkssbXVsdGlwbGU6eWF8SyxtdXRlZDp5YXxLLG5vVmFsaWRhdGU6SyxvcGVuOksscGxheXNJbmxpbmU6SyxyZWFkT25seTpLLHJlcXVpcmVkOksscmV2ZXJzZWQ6Syxyb3dzOkFhLHJvd1NwYW46emEsXG5zY29wZWQ6SyxzZWFtbGVzczpLLHNlbGVjdGVkOnlhfEssc2l6ZTpBYSxzdGFydDp6YSxzcGFuOkFhLHNwZWxsQ2hlY2s6Q2Esc3R5bGU6MCx0YWJJbmRleDowLGl0ZW1TY29wZTpLLGFjY2VwdENoYXJzZXQ6MCxjbGFzc05hbWU6MCxodG1sRm9yOjAsaHR0cEVxdWl2OjAsdmFsdWU6Q2F9LERPTUF0dHJpYnV0ZU5hbWVzOnthY2NlcHRDaGFyc2V0OlwiYWNjZXB0LWNoYXJzZXRcIixjbGFzc05hbWU6XCJjbGFzc1wiLGh0bWxGb3I6XCJmb3JcIixodHRwRXF1aXY6XCJodHRwLWVxdWl2XCJ9LERPTU11dGF0aW9uTWV0aG9kczp7dmFsdWU6ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1iKXJldHVybiBhLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1wibnVtYmVyXCIhPT1hLnR5cGV8fCExPT09YS5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9hLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitiKTphLnZhbGlkaXR5JiYhYS52YWxpZGl0eS5iYWRJbnB1dCYmYS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hJiZcbmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK2IpfX19LEVhPXhhLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSxNPXt4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIn0sR2E9e1Byb3BlcnRpZXM6e2F1dG9SZXZlcnNlOkVhLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6RWEscHJlc2VydmVBbHBoYTpFYX0sRE9NQXR0cmlidXRlTmFtZXM6e2F1dG9SZXZlcnNlOlwiYXV0b1JldmVyc2VcIixleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOlwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCJ9LERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6e3hsaW5rQWN0dWF0ZTpNLnhsaW5rLHhsaW5rQXJjcm9sZTpNLnhsaW5rLHhsaW5rSHJlZjpNLnhsaW5rLHhsaW5rUm9sZTpNLnhsaW5rLHhsaW5rU2hvdzpNLnhsaW5rLHhsaW5rVGl0bGU6TS54bGluayx4bGlua1R5cGU6TS54bGluayxcbnhtbEJhc2U6TS54bWwseG1sTGFuZzpNLnhtbCx4bWxTcGFjZTpNLnhtbH19LEhhPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBJYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4LWhlaWdodCB4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZSB4bWw6YmFzZSB4bWxuczp4bGluayB4bWw6bGFuZyB4bWw6c3BhY2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoSGEsXG5JYSk7R2EuUHJvcGVydGllc1tiXT0wO0dhLkRPTUF0dHJpYnV0ZU5hbWVzW2JdPWF9KTt4YS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhEYSk7eGEuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoR2EpO1xudmFyIFA9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbmplY3Rpb246e2luamVjdEVycm9yVXRpbHM6ZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGEuaW52b2tlR3VhcmRlZENhbGxiYWNrP0UoXCIxOTdcIik6dm9pZCAwO0phPWEuaW52b2tlR3VhcmRlZENhbGxiYWNrfX0saW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtKYS5hcHBseShQLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7UC5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFAuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHE9UC5jbGVhckNhdWdodEVycm9yKCk7UC5faGFzUmV0aHJvd0Vycm9yfHwoUC5faGFzUmV0aHJvd0Vycm9yPSEwLFAuX3JldGhyb3dFcnJvcj1cbnEpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEthLmFwcGx5KFAsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gUC5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihQLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9UC5fY2F1Z2h0RXJyb3I7UC5fY2F1Z2h0RXJyb3I9bnVsbDtQLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1FKFwiMTk4XCIpfX07ZnVuY3Rpb24gSmEoYSxiLGMsZCxlLGYsZyxoLGspe1AuX2hhc0NhdWdodEVycm9yPSExO1AuX2NhdWdodEVycm9yPW51bGw7dmFyIHE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMscSl9Y2F0Y2godil7UC5fY2F1Z2h0RXJyb3I9dixQLl9oYXNDYXVnaHRFcnJvcj0hMH19XG5mdW5jdGlvbiBLYSgpe2lmKFAuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9UC5fcmV0aHJvd0Vycm9yO1AuX3JldGhyb3dFcnJvcj1udWxsO1AuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIExhPW51bGwsTWE9e307XG5mdW5jdGlvbiBOYSgpe2lmKExhKWZvcih2YXIgYSBpbiBNYSl7dmFyIGI9TWFbYV0sYz1MYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkUoXCI5NlwiLGEpO2lmKCFPYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpFKFwiOTdcIixhKTtPYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO1BhLmhhc093blByb3BlcnR5KGgpP0UoXCI5OVwiLGgpOnZvaWQgMDtQYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZRYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oUWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpFKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gUWEoYSxiLGMpe1JhW2FdP0UoXCIxMDBcIixhKTp2b2lkIDA7UmFbYV09YjtTYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBPYT1bXSxQYT17fSxSYT17fSxTYT17fTtmdW5jdGlvbiBUYShhKXtMYT9FKFwiMTAxXCIpOnZvaWQgMDtMYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtOYSgpfWZ1bmN0aW9uIFVhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO01hLmhhc093blByb3BlcnR5KGMpJiZNYVtjXT09PWR8fChNYVtjXT9FKFwiMTAyXCIsYyk6dm9pZCAwLE1hW2NdPWQsYj0hMCl9YiYmTmEoKX1cbnZhciBWYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOk9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpQYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpSYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOlNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOlRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpVYX0pLFdhPW51bGwsWGE9bnVsbCxZYT1udWxsO2Z1bmN0aW9uIFphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9WWEoZCk7UC5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uICRhKGEsYil7bnVsbD09Yj9FKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBhYihhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgYmI9bnVsbDtcbmZ1bmN0aW9uIGNiKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKVphKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmWmEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gZGIoYSl7cmV0dXJuIGNiKGEsITApfWZ1bmN0aW9uIGdiKGEpe3JldHVybiBjYihhLCExKX12YXIgaGI9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6VGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOlVhfTtcbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9V2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIGpiKGEsYixjLGQpe2Zvcih2YXIgZSxmPTA7ZjxPYS5sZW5ndGg7ZisrKXt2YXIgZz1PYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT0kYShlLGcpKX1yZXR1cm4gZX1mdW5jdGlvbiBrYihhKXthJiYoYmI9JGEoYmIsYSkpfWZ1bmN0aW9uIGxiKGEpe3ZhciBiPWJiO2JiPW51bGw7YiYmKGE/YWIoYixkYik6YWIoYixnYiksYmI/RShcIjk1XCIpOnZvaWQgMCxQLnJldGhyb3dDYXVnaHRFcnJvcigpKX12YXIgbWI9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOmhiLGdldExpc3RlbmVyOmliLGV4dHJhY3RFdmVudHM6amIsZW5xdWV1ZUV2ZW50czprYixwcm9jZXNzRXZlbnRRdWV1ZTpsYn0pLG5iPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIituYixvYj1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK25iO1xuZnVuY3Rpb24gcGIoYSl7aWYoYVtRXSlyZXR1cm4gYVtRXTtmb3IodmFyIGI9W107IWFbUV07KWlmKGIucHVzaChhKSxhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDt2YXIgYz12b2lkIDAsZD1hW1FdO2lmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXJldHVybiBkO2Zvcig7YSYmKGQ9YVtRXSk7YT1iLnBvcCgpKWM9ZDtyZXR1cm4gY31mdW5jdGlvbiBxYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RShcIjMzXCIpfWZ1bmN0aW9uIHJiKGEpe3JldHVybiBhW29iXXx8bnVsbH1cbnZhciBzYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbUV09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6cGIsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbUV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpxYixnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOnJiLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW29iXT1ifX0pO2Z1bmN0aW9uIHRiKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiB1YihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPXRiKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfVxuZnVuY3Rpb24gdmIoYSxiLGMpe2lmKGI9aWIoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz0kYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz0kYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiB3YihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZ1YihhLl90YXJnZXRJbnN0LHZiLGEpfWZ1bmN0aW9uIHhiKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP3RiKGIpOm51bGw7dWIoYix2YixhKX19XG5mdW5jdGlvbiB5YihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1pYihhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9JGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9JGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIHpiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmeWIoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIEFiKGEpe2FiKGEsd2IpfVxuZnVuY3Rpb24gQmIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPXRiKGgpKWcrKztoPTA7Zm9yKHZhciBrPWY7aztrPXRiKGspKWgrKztmb3IoOzA8Zy1oOyllPXRiKGUpLGctLTtmb3IoOzA8aC1nOylmPXRiKGYpLGgtLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPXRiKGUpO2Y9dGIoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPXRiKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9dGIoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKyl5YihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOyl5YihjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciBDYj1PYmplY3QuZnJlZXplKHthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOkFiLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe2FiKGEseGIpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6QmIsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7YWIoYSx6Yil9fSksRGI9bnVsbDtmdW5jdGlvbiBFYigpeyFEYiYmbC5jYW5Vc2VET00mJihEYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBEYn12YXIgUz17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtcbmZ1bmN0aW9uIEZiKCl7aWYoUy5fZmFsbGJhY2tUZXh0KXJldHVybiBTLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1TLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9R2IoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO1MuX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBTLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gR2IoKXtyZXR1cm5cInZhbHVlXCJpbiBTLl9yb290P1MuX3Jvb3QudmFsdWU6Uy5fcm9vdFtFYigpXX1cbnZhciBIYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLEliPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gVChhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Qy50aGF0UmV0dXJuc1RydWU6Qy50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxuQihULnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPUMudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PUMudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Qy50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPEhiLmxlbmd0aDthKyspdGhpc1tIYlthXV09bnVsbH19KTtULkludGVyZmFjZT1JYjtULmF1Z21lbnRDbGFzcz1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9dGhpcy5wcm90b3R5cGU7dmFyIGQ9bmV3IGM7QihkLGEucHJvdG90eXBlKTthLnByb3RvdHlwZT1kO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5JbnRlcmZhY2U9Qih7fSx0aGlzLkludGVyZmFjZSxiKTthLmF1Z21lbnRDbGFzcz10aGlzLmF1Z21lbnRDbGFzcztKYihhKX07SmIoVCk7ZnVuY3Rpb24gS2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBMYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RShcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gSmIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9S2I7YS5yZWxlYXNlPUxifWZ1bmN0aW9uIE1iKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhNYix7ZGF0YTpudWxsfSk7ZnVuY3Rpb24gTmIoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKE5iLHtkYXRhOm51bGx9KTt2YXIgUGI9WzksMTMsMjcsMzJdLFZiPWwuY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxXYj1udWxsO2wuY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihXYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBYYjtcbmlmKFhiPWwuY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhV2Ipe3ZhciBZYj13aW5kb3cub3BlcmE7WGI9IShcIm9iamVjdFwiPT09dHlwZW9mIFliJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgWWIudmVyc2lvbiYmMTI+PXBhcnNlSW50KFliLnZlcnNpb24oKSwxMCkpfVxudmFyIFpiPVhiLCRiPWwuY2FuVXNlRE9NJiYoIVZifHxXYiYmODxXYiYmMTE+PVdiKSxhYz1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxiYz17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxjYz0hMTtcbmZ1bmN0aW9uIGRjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09UGIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBlYyhhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBmYz0hMTtmdW5jdGlvbiBnYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gZWMoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2NjPSEwO3JldHVybiBhYztjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1hYyYmY2M/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gaGMoYSxiKXtpZihmYylyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhVmImJmRjKGEsYik/KGE9RmIoKSxTLl9yb290PW51bGwsUy5fc3RhcnRUZXh0PW51bGwsUy5fZmFsbGJhY2tUZXh0PW51bGwsZmM9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuICRiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGljPXtldmVudFR5cGVzOmJjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoVmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6dmFyIGY9YmMuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOmY9YmMuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjpmPWJjLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBmYz9kYyhhLGMpJiYoZj1iYy5jb21wb3NpdGlvbkVuZCk6XCJ0b3BLZXlEb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPWJjLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KCRiJiYoZmN8fGYhPT1iYy5jb21wb3NpdGlvblN0YXJ0P2Y9PT1iYy5jb21wb3NpdGlvbkVuZCYmZmMmJihlPUZiKCkpOihTLl9yb290PWQsUy5fc3RhcnRUZXh0PUdiKCksZmM9ITApKSxmPU1iLmdldFBvb2xlZChmLGIsYyxkKSxlP2YuZGF0YT1cbmU6KGU9ZWMoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLEFiKGYpLGU9Zik6ZT1udWxsOyhhPVpiP2djKGEsYyk6aGMoYSxjKSk/KGI9TmIuZ2V0UG9vbGVkKGJjLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxBYihiKSk6Yj1udWxsO3JldHVybltlLGJdfX0samM9bnVsbCxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYoYT1YYShhKSl7amMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBqYy5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpFKFwiMTk0XCIpO3ZhciBiPVdhKGEuc3RhdGVOb2RlKTtqYy5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19dmFyIG5jPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe2pjPWF9fTtmdW5jdGlvbiBvYyhhKXtrYz9sYz9sYy5wdXNoKGEpOmxjPVthXTprYz1hfVxuZnVuY3Rpb24gcGMoKXtpZihrYyl7dmFyIGE9a2MsYj1sYztsYz1rYz1udWxsO21jKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKyltYyhiW2FdKX19dmFyIHFjPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpuYyxlbnF1ZXVlU3RhdGVSZXN0b3JlOm9jLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOnBjfSk7ZnVuY3Rpb24gcmMoYSxiKXtyZXR1cm4gYShiKX12YXIgc2M9ITE7ZnVuY3Rpb24gdGMoYSxiKXtpZihzYylyZXR1cm4gcmMoYSxiKTtzYz0hMDt0cnl7cmV0dXJuIHJjKGEsYil9ZmluYWxseXtzYz0hMSxwYygpfX12YXIgdWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXVjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiB3YyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHhjO2wuY2FuVXNlRE9NJiYoeGM9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24mJmRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUmJiEwIT09ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcIlwiLFwiXCIpKTtcbmZ1bmN0aW9uIHljKGEsYil7aWYoIWwuY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2I9XCJvblwiK2E7dmFyIGM9YiBpbiBkb2N1bWVudDtjfHwoYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGMuc2V0QXR0cmlidXRlKGIsXCJyZXR1cm47XCIpLGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNbYl0pOyFjJiZ4YyYmXCJ3aGVlbFwiPT09YSYmKGM9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcIkV2ZW50cy53aGVlbFwiLFwiMy4wXCIpKTtyZXR1cm4gY31mdW5jdGlvbiB6YyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gQWMoYSl7dmFyIGI9emMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBCYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9QWMoYSkpfWZ1bmN0aW9uIENjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD16YyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBEYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtcbmZ1bmN0aW9uIEVjKGEsYixjKXthPVQuZ2V0UG9vbGVkKERjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7b2MoYyk7QWIoYSk7cmV0dXJuIGF9dmFyIEZjPW51bGwsR2M9bnVsbDtmdW5jdGlvbiBIYyhhKXtrYihhKTtsYighMSl9ZnVuY3Rpb24gSWMoYSl7dmFyIGI9cWIoYSk7aWYoQ2MoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSmMoYSxiKXtpZihcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgS2M9ITE7bC5jYW5Vc2VET00mJihLYz15YyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBMYygpe0ZjJiYoRmMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsTWMpLEdjPUZjPW51bGwpfWZ1bmN0aW9uIE1jKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZJYyhHYykmJihhPUVjKEdjLGEsd2MoYSkpLHRjKEhjLGEpKX1cbmZ1bmN0aW9uIE5jKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhMYygpLEZjPWIsR2M9YyxGYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixNYykpOlwidG9wQmx1clwiPT09YSYmTGMoKX1mdW5jdGlvbiBPYyhhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBJYyhHYyl9ZnVuY3Rpb24gUGMoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBJYyhiKX1mdW5jdGlvbiAkYyhhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBJYyhiKX1cbnZhciBhZD17ZXZlbnRUeXBlczpEYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOktjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9xYihiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUpjO2Vsc2UgaWYodmMoZSkpaWYoS2MpZz0kYztlbHNle2c9T2M7dmFyIGg9TmN9ZWxzZSBmPWUubm9kZU5hbWUsIWZ8fFwiaW5wdXRcIiE9PWYudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChnPVBjKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiBFYyhnLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmKGE9XCJcIitlLnZhbHVlLGUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikhPT1cbmEmJmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIixhKSl9fTtmdW5jdGlvbiBiZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoYmQse3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pO3ZhciBjZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gZGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1jZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGVkKCl7cmV0dXJuIGRkfWZ1bmN0aW9uIGZkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1cbmJkLmF1Z21lbnRDbGFzcyhmZCx7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTplZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KTtcbnZhciBnZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSxoZD17ZXZlbnRUeXBlczpnZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe2lmKFwidG9wTW91c2VPdmVyXCI9PT1hJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8XCJ0b3BNb3VzZU91dFwiIT09YSYmXCJ0b3BNb3VzZU92ZXJcIiE9PWEpcmV0dXJuIG51bGw7dmFyIGU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7XCJ0b3BNb3VzZU91dFwiPT09YT8oYT1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/cGIoYik6bnVsbCk6YT1udWxsO2lmKGE9PT1cbmIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOnFiKGEpO2U9bnVsbD09Yj9lOnFiKGIpO3ZhciBnPWZkLmdldFBvb2xlZChnZC5tb3VzZUxlYXZlLGEsYyxkKTtnLnR5cGU9XCJtb3VzZWxlYXZlXCI7Zy50YXJnZXQ9ZjtnLnJlbGF0ZWRUYXJnZXQ9ZTtjPWZkLmdldFBvb2xlZChnZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9ZjtCYihnLGMsYSxiKTtyZXR1cm5bZyxjXX19LGlkPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyO2Z1bmN0aW9uIGpkKGEpe2E9YS50eXBlO3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuZGlzcGxheU5hbWV8fGEubmFtZTpudWxsfVxuZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBsZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1rZChhKTohMX1mdW5jdGlvbiBtZChhKXsyIT09a2QoYSk/RShcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBuZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1rZChhKSwzPT09Yj9FKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIG1kKGUpLGE7aWYoZz09PWQpcmV0dXJuIG1kKGUpLGI7Zz1nLnNpYmxpbmd9RShcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDpFKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RShcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0UoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gb2QoYSl7YT1uZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHBkKGEpe2E9bmQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgcWQ9W107XG5mdW5jdGlvbiByZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1wYihjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLHNkKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCx3YyhhLm5hdGl2ZUV2ZW50KSl9dmFyIHRkPSEwLHNkPXZvaWQgMDtmdW5jdGlvbiB1ZChhKXt0ZD0hIWF9ZnVuY3Rpb24gVShhLGIsYyl7cmV0dXJuIGM/YmEubGlzdGVuKGMsYix2ZC5iaW5kKG51bGwsYSkpOm51bGx9ZnVuY3Rpb24gd2QoYSxiLGMpe3JldHVybiBjP2JhLmNhcHR1cmUoYyxiLHZkLmJpbmQobnVsbCxhKSk6bnVsbH1cbmZ1bmN0aW9uIHZkKGEsYil7aWYodGQpe3ZhciBjPXdjKGIpO2M9cGIoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1rZChjKXx8KGM9bnVsbCk7aWYocWQubGVuZ3RoKXt2YXIgZD1xZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXt0YyhyZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnFkLmxlbmd0aCYmcWQucHVzaChhKX19fVxudmFyIHhkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiB0ZH0sZ2V0IF9oYW5kbGVUb3BMZXZlbCgpe3JldHVybiBzZH0sc2V0SGFuZGxlVG9wTGV2ZWw6ZnVuY3Rpb24oYSl7c2Q9YX0sc2V0RW5hYmxlZDp1ZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGR9LHRyYXBCdWJibGVkRXZlbnQ6VSx0cmFwQ2FwdHVyZWRFdmVudDp3ZCxkaXNwYXRjaEV2ZW50OnZkfSk7ZnVuY3Rpb24geWQoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciB6ZD17YW5pbWF0aW9uZW5kOnlkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOnlkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6eWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6eWQoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxBZD17fSxCZD17fTtsLmNhblVzZURPTSYmKEJkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIHpkLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIHpkLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIHpkLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIHpkLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBDZChhKXtpZihBZFthXSlyZXR1cm4gQWRbYV07aWYoIXpkW2FdKXJldHVybiBhO3ZhciBiPXpkW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEJkKXJldHVybiBBZFthXT1iW2NdO3JldHVyblwiXCJ9XG52YXIgRGQ9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BBbmltYXRpb25FbmQ6Q2QoXCJhbmltYXRpb25lbmRcIil8fFwiYW5pbWF0aW9uZW5kXCIsdG9wQW5pbWF0aW9uSXRlcmF0aW9uOkNkKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpfHxcImFuaW1hdGlvbml0ZXJhdGlvblwiLHRvcEFuaW1hdGlvblN0YXJ0OkNkKFwiYW5pbWF0aW9uc3RhcnRcIil8fFwiYW5pbWF0aW9uc3RhcnRcIix0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLFxudG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsdG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLFxudG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOkNkKFwidHJhbnNpdGlvbmVuZFwiKXx8XCJ0cmFuc2l0aW9uZW5kXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIix0b3BXaGVlbDpcIndoZWVsXCJ9LEVkPXt9LEZkPTAsR2Q9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIEhkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEdkKXx8KGFbR2RdPUZkKyssRWRbYVtHZF1dPXt9KTtyZXR1cm4gRWRbYVtHZF1dfWZ1bmN0aW9uIElkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpkKGEsYil7dmFyIGM9SWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SWQoYyl9fWZ1bmN0aW9uIEtkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBMZD1sLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLE1kPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sTmQ9bnVsbCxPZD1udWxsLFBkPW51bGwsUWQ9ITE7XG5mdW5jdGlvbiBSZChhLGIpe2lmKFFkfHxudWxsPT1OZHx8TmQhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPU5kO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJktkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gUGQmJmVhKFBkLGMpP251bGw6KFBkPWMsYT1ULmdldFBvb2xlZChNZC5zZWxlY3QsT2QsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1OZCxBYihhKSxhKX1cbnZhciBTZD17ZXZlbnRUeXBlczpNZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1IZChlKTtmPVNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/cWIoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwidG9wRm9jdXNcIjppZih2YyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlOZD1lLE9kPWIsUGQ9bnVsbDticmVhaztjYXNlIFwidG9wQmx1clwiOlBkPU9kPU5kPW51bGw7YnJlYWs7Y2FzZSBcInRvcE1vdXNlRG93blwiOlFkPSEwO2JyZWFrO2Nhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIFFkPSExLFJkKGMsZCk7Y2FzZSBcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKExkKWJyZWFrO1xuY2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gUmQoYyxkKX1yZXR1cm4gbnVsbH19O2Z1bmN0aW9uIFRkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhUZCx7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSk7ZnVuY3Rpb24gVWQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKFVkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSk7ZnVuY3Rpb24gVmQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWJkLmF1Z21lbnRDbGFzcyhWZCx7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBXZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBYZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sWWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9O2Z1bmN0aW9uIFpkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1cbmJkLmF1Z21lbnRDbGFzcyhaZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1YZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1XZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/WWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmVkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9XZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP1dkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSk7ZnVuY3Rpb24gJGQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWZkLmF1Z21lbnRDbGFzcygkZCx7ZGF0YVRyYW5zZmVyOm51bGx9KTtmdW5jdGlvbiBhZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9YmQuYXVnbWVudENsYXNzKGFlLHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWR9KTtmdW5jdGlvbiBiZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoYmUse3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSk7XG5mdW5jdGlvbiBjZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9ZmQuYXVnbWVudENsYXNzKGNlLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pO3ZhciBkZT17fSxlZT17fTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBibHVyIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgc2Nyb2xsIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hNb3ZlIHRvdWNoU3RhcnQgdHJhbnNpdGlvbkVuZCB2b2x1bWVDaGFuZ2Ugd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKStcbmEuc2xpY2UoMSksYz1cIm9uXCIrYjtiPVwidG9wXCIrYjtjPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpjLGNhcHR1cmVkOmMrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbYl19O2RlW2FdPWM7ZWVbYl09Y30pO1xudmFyIGZlPXtldmVudFR5cGVzOmRlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZWVbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1XZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9WmQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPVZkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9ZmQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1cbiRkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9YWU7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPVRkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1iZTticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1iZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPWNlO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9VWQ7YnJlYWs7ZGVmYXVsdDphPVR9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtBYihiKTtyZXR1cm4gYn19O3NkPWZ1bmN0aW9uKGEsYixjLGQpe2E9amIoYSxiLGMsZCk7a2IoYSk7bGIoITEpfTtoYi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO1xuV2E9c2IuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTtYYT1zYi5nZXRJbnN0YW5jZUZyb21Ob2RlO1lhPXNiLmdldE5vZGVGcm9tSW5zdGFuY2U7aGIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpmZSxFbnRlckxlYXZlRXZlbnRQbHVnaW46aGQsQ2hhbmdlRXZlbnRQbHVnaW46YWQsU2VsZWN0RXZlbnRQbHVnaW46U2QsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjppY30pO3ZhciBnZT1bXSxoZT0tMTtmdW5jdGlvbiBWKGEpezA+aGV8fChhLmN1cnJlbnQ9Z2VbaGVdLGdlW2hlXT1udWxsLGhlLS0pfWZ1bmN0aW9uIFcoYSxiKXtoZSsrO2dlW2hlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9bmV3IFNldDt2YXIgaWU9e2N1cnJlbnQ6RH0sWD17Y3VycmVudDohMX0samU9RDtmdW5jdGlvbiBrZShhKXtyZXR1cm4gbGUoYSk/amU6aWUuY3VycmVudH1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gRDt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBsZShhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gbmUoYSl7bGUoYSkmJihWKFgsYSksVihpZSxhKSl9XG5mdW5jdGlvbiBvZShhLGIsYyl7bnVsbCE9aWUuY3Vyc29yP0UoXCIxNjhcIik6dm9pZCAwO1coaWUsYixhKTtXKFgsYyxhKX1mdW5jdGlvbiBwZShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpFKFwiMTA4XCIsamQoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBCKHt9LGIsYyl9ZnVuY3Rpb24gcWUoYSl7aWYoIWxlKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8RDtqZT1pZS5jdXJyZW50O1coaWUsYixhKTtXKFgsWC5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gcmUoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpFKFwiMTY5XCIpO2lmKGIpe3ZhciBkPXBlKGEsamUpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZDtWKFgsYSk7VihpZSxhKTtXKGllLGQsYSl9ZWxzZSBWKFgsYSk7VyhYLGIsYSl9XG5mdW5jdGlvbiBZKGEsYixjKXt0aGlzLnRhZz1hO3RoaXMua2V5PWI7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9dGhpcy5wZW5kaW5nUHJvcHM9dGhpcy5yZWY9bnVsbDt0aGlzLmludGVybmFsQ29udGV4dFRhZz1jO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiBzZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IFkoYS50YWcsYS5rZXksYS5pbnRlcm5hbENvbnRleHRUYWcpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLnBlbmRpbmdQcm9wcz1iO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gdGUoYSxiLGMpe3ZhciBkPXZvaWQgMCxlPWEudHlwZSxmPWEua2V5O1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlPyhkPWUucHJvdG90eXBlJiZlLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50P25ldyBZKDIsZixiKTpuZXcgWSgwLGYsYiksZC50eXBlPWUsZC5wZW5kaW5nUHJvcHM9YS5wcm9wcyk6XCJzdHJpbmdcIj09PXR5cGVvZiBlPyhkPW5ldyBZKDUsZixiKSxkLnR5cGU9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcIm51bWJlclwiPT09dHlwZW9mIGUudGFnPyhkPWUsZC5wZW5kaW5nUHJvcHM9YS5wcm9wcyk6RShcIjEzMFwiLG51bGw9PWU/ZTp0eXBlb2YgZSxcIlwiKTtkLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGR9ZnVuY3Rpb24gdWUoYSxiLGMsZCl7Yj1uZXcgWSgxMCxkLGIpO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifVxuZnVuY3Rpb24gdmUoYSxiLGMpe2I9bmV3IFkoNixudWxsLGIpO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIHdlKGEsYixjKXtiPW5ldyBZKDcsYS5rZXksYik7Yi50eXBlPWEuaGFuZGxlcjtiLnBlbmRpbmdQcm9wcz1hO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiB4ZShhLGIsYyl7YT1uZXcgWSg5LG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHllKGEsYixjKXtiPW5ldyBZKDQsYS5rZXksYik7Yi5wZW5kaW5nUHJvcHM9YS5jaGlsZHJlbnx8W107Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn12YXIgemU9bnVsbCxBZT1udWxsO1xuZnVuY3Rpb24gQmUoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBDZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTt6ZT1CZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7QWU9QmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBEZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgemUmJnplKGEpfWZ1bmN0aW9uIEVlKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBBZSYmQWUoYSl9XG5mdW5jdGlvbiBGZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExfX1mdW5jdGlvbiBHZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9XG5mdW5jdGlvbiBIZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1GZShudWxsKSk7bnVsbCE9PWM/KGE9Yy51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yy51cGRhdGVRdWV1ZT1GZShudWxsKSkpOmE9bnVsbDthPWEhPT1kP2E6bnVsbDtudWxsPT09YT9HZShkLGIpOm51bGw9PT1kLmxhc3R8fG51bGw9PT1hLmxhc3Q/KEdlKGQsYiksR2UoYSxiKSk6KEdlKGQsYiksYS5sYXN0PWIpfWZ1bmN0aW9uIEllKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gSmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGc9ITAsaD1jLmZpcnN0LGs9ITE7bnVsbCE9PWg7KXt2YXIgcT1oLmV4cGlyYXRpb25UaW1lO2lmKHE+Zil7dmFyIHY9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09dnx8dj5xKWMuZXhwaXJhdGlvblRpbWU9cTtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fChjLmZpcnN0PWgubmV4dCxudWxsPT09XG5jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihoLmlzUmVwbGFjZSlhPUllKGgsZCxhLGUpLGc9ITA7ZWxzZSBpZihxPUllKGgsZCxhLGUpKWE9Zz9CKHt9LGEscSk6QihhLHEpLGc9ITE7aC5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1oLmNhbGxiYWNrJiYocT1jLmNhbGxiYWNrTGlzdCxudWxsPT09cSYmKHE9Yy5jYWxsYmFja0xpc3Q9W10pLHEucHVzaChoKSl9aD1oLm5leHR9bnVsbCE9PWMuY2FsbGJhY2tMaXN0P2IuZWZmZWN0VGFnfD0zMjpudWxsIT09Yy5maXJzdHx8Yy5oYXNGb3JjZVVwZGF0ZXx8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9FKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBMZShhLGIsYyxkKXtmdW5jdGlvbiBlKGEsYil7Yi51cGRhdGVyPWY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX12YXIgZj17aXNNb3VudGVkOmxkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihjLGQsZSl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZz1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmcscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7YShjLGcpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGMsZCxlKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBnPWIoYyk7SGUoYyx7ZXhwaXJhdGlvblRpbWU6ZyxwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTtcbmEoYyxnKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGMsZCl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZT1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6ZCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7YShjLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTplLGNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1rZShhKSxmPTI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNvbnRleHRUeXBlcyxnPWY/bWUoYSxkKTpEO2I9bmV3IGMoYixnKTtlKGEsYik7ZiYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWQsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1nKTtyZXR1cm4gYn0sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsXG5iKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuc3RhdGVOb2RlLGU9ZC5zdGF0ZXx8bnVsbCxnPWEucGVuZGluZ1Byb3BzO2c/dm9pZCAwOkUoXCIxNThcIik7dmFyIGg9a2UoYSk7ZC5wcm9wcz1nO2Quc3RhdGU9YS5tZW1vaXplZFN0YXRlPWU7ZC5yZWZzPUQ7ZC5jb250ZXh0PW1lKGEsaCk7bnVsbCE9YS50eXBlJiZudWxsIT1hLnR5cGUucHJvdG90eXBlJiYhMD09PWEudHlwZS5wcm90b3R5cGUudW5zdGFibGVfaXNBc3luY1JlYWN0Q29tcG9uZW50JiYoYS5pbnRlcm5hbENvbnRleHRUYWd8PTEpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmKGU9ZC5zdGF0ZSxkLmNvbXBvbmVudFdpbGxNb3VudCgpLGUhPT1kLnN0YXRlJiZmLmVucXVldWVSZXBsYWNlU3RhdGUoZCxkLnN0YXRlLG51bGwpLGU9YS51cGRhdGVRdWV1ZSxudWxsIT09ZSYmKGQuc3RhdGU9SmUoYyxhLGUsZCxnLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KX0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsZSl7dmFyIGc9Yi5zdGF0ZU5vZGU7Zy5wcm9wcz1iLm1lbW9pemVkUHJvcHM7Zy5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHM7a3x8KGs9aCxudWxsPT1rP0UoXCIxNTlcIik6dm9pZCAwKTt2YXIgdT1nLmNvbnRleHQsej1rZShiKTt6PW1lKGIseik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8aD09PWsmJnU9PT16fHwodT1nLnN0YXRlLGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhrLHopLGcuc3RhdGUhPT11JiZmLmVucXVldWVSZXBsYWNlU3RhdGUoZyxnLnN0YXRlLG51bGwpKTt1PWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP0plKGEsYixiLnVwZGF0ZVF1ZXVlLGcsayxlKTp1O2lmKCEoaCE9PWt8fHUhPT1lfHxYLmN1cnJlbnR8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSwhMTt2YXIgRz1rO2lmKG51bGw9PT1ofHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlHPSEwO2Vsc2V7dmFyIEk9Yi5zdGF0ZU5vZGUsTD1iLnR5cGU7Rz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgSS5zaG91bGRDb21wb25lbnRVcGRhdGU/SS5zaG91bGRDb21wb25lbnRVcGRhdGUoRyxlLHopOkwucHJvdG90eXBlJiZMLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoaCxHKXx8IWVhKHUsZSk6ITB9Rz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGssZSx6KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxjKGIsayksZChiLGUpKTtnLnByb3BzPWs7Zy5zdGF0ZT1lO2cuY29udGV4dD16O3JldHVybiBHfX19dmFyIFFlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxSZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFNlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQsVGU9UWU/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LFVlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixWZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxXZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBYZShhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9V2UmJmFbV2VdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIFllPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBaZShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGwhPT1jJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl7aWYoYi5fb3duZXIpe2I9Yi5fb3duZXI7dmFyIGQ9dm9pZCAwO2ImJigyIT09Yi50YWc/RShcIjExMFwiKTp2b2lkIDAsZD1iLnN0YXRlTm9kZSk7ZD92b2lkIDA6RShcIjE0N1wiLGMpO3ZhciBlPVwiXCIrYztpZihudWxsIT09YSYmbnVsbCE9PWEucmVmJiZhLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYS5yZWY7YT1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1EP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTthLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYX1cInN0cmluZ1wiIT09dHlwZW9mIGM/RShcIjE0OFwiKTp2b2lkIDA7Yi5fb3duZXI/dm9pZCAwOkUoXCIxNDlcIixjKX1yZXR1cm4gY31cbmZ1bmN0aW9uICRlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZFKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBhZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXNlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9dmUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9WmUoYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPXRlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCk7ZC5yZWY9WmUoYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gcShhLGIsYyxkKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPXdlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtcbmJbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw5IT09Yi50YWcpcmV0dXJuIGI9eGUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiLnR5cGU9Yy52YWx1ZSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixudWxsLGQpO2IudHlwZT1jLnZhbHVlO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB5KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj15ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9dWUoYyxhLmludGVybmFsQ29udGV4dFRhZyxcbmQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dmUoXCJcIitiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFJlOmlmKGIudHlwZT09PVZlKXJldHVybiBiPXVlKGIucHJvcHMuY2hpbGRyZW4sYS5pbnRlcm5hbENvbnRleHRUYWcsYyxiLmtleSksYltcInJldHVyblwiXT1hLGI7Yz10ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpO2MucmVmPVplKG51bGwsYik7Y1tcInJldHVyblwiXT1hO3JldHVybiBjO2Nhc2UgU2U6cmV0dXJuIGI9d2UoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYjtjYXNlIFRlOnJldHVybiBjPXhlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5jKSxjLnR5cGU9Yi52YWx1ZSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIFVlOnJldHVybiBiPXllKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGJ9aWYoWWUoYil8fFhlKGIpKXJldHVybiBiPXVlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjskZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIEcoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgUmU6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1WZT91KGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgU2U6cmV0dXJuIGMua2V5PT09ZT9xKGEsYixjLGQpOm51bGw7Y2FzZSBUZTpyZXR1cm4gbnVsbD09PVxuZT92KGEsYixjLGQpOm51bGw7Y2FzZSBVZTpyZXR1cm4gYy5rZXk9PT1lP3koYSxiLGMsZCk6bnVsbH1pZihZZShjKXx8WGUoYykpcmV0dXJuIG51bGwhPT1lP251bGw6dShhLGIsYyxkLG51bGwpOyRlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBSZTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09VmU/dShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgU2U6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHEoYixhLGQsZSk7Y2FzZSBUZTpyZXR1cm4gYT1hLmdldChjKXx8bnVsbCx2KGIsYSxkLGUpO2Nhc2UgVWU6cmV0dXJuIGE9XG5hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwseShiLGEsZCxlKX1pZihZZShkKXx8WGUoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsdShiLGEsZCxlLG51bGwpOyRlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChlLGcsbSxBKXtmb3IodmFyIGg9bnVsbCxyPW51bGwsbj1nLHc9Zz0wLGs9bnVsbDtudWxsIT09biYmdzxtLmxlbmd0aDt3Kyspe24uaW5kZXg+dz8oaz1uLG49bnVsbCk6az1uLnNpYmxpbmc7dmFyIHg9RyhlLG4sbVt3XSxBKTtpZihudWxsPT09eCl7bnVsbD09PW4mJihuPWspO2JyZWFrfWEmJm4mJm51bGw9PT14LmFsdGVybmF0ZSYmYihlLG4pO2c9Zih4LGcsdyk7bnVsbD09PXI/aD14OnIuc2libGluZz14O3I9eDtuPWt9aWYodz09PW0ubGVuZ3RoKXJldHVybiBjKGUsbiksaDtpZihudWxsPT09bil7Zm9yKDt3PG0ubGVuZ3RoO3crKylpZihuPXooZSxtW3ddLEEpKWc9ZihuLGcsdyksbnVsbD09PXI/aD1uOnIuc2libGluZz1uLHI9bjtyZXR1cm4gaH1mb3Iobj1cbmQoZSxuKTt3PG0ubGVuZ3RoO3crKylpZihrPUkobixlLHcsbVt3XSxBKSl7aWYoYSYmbnVsbCE9PWsuYWx0ZXJuYXRlKW5bXCJkZWxldGVcIl0obnVsbD09PWsua2V5P3c6ay5rZXkpO2c9ZihrLGcsdyk7bnVsbD09PXI/aD1rOnIuc2libGluZz1rO3I9a31hJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBofWZ1bmN0aW9uIE4oZSxnLG0sQSl7dmFyIGg9WGUobSk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGg/RShcIjE1MFwiKTp2b2lkIDA7bT1oLmNhbGwobSk7bnVsbD09bT9FKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIHI9aD1udWxsLG49Zyx3PWc9MCxrPW51bGwseD1tLm5leHQoKTtudWxsIT09biYmIXguZG9uZTt3KysseD1tLm5leHQoKSl7bi5pbmRleD53PyhrPW4sbj1udWxsKTprPW4uc2libGluZzt2YXIgSj1HKGUsbix4LnZhbHVlLEEpO2lmKG51bGw9PT1KKXtufHwobj1rKTticmVha31hJiZuJiZudWxsPT09Si5hbHRlcm5hdGUmJmIoZSxuKTtnPWYoSixcbmcsdyk7bnVsbD09PXI/aD1KOnIuc2libGluZz1KO3I9SjtuPWt9aWYoeC5kb25lKXJldHVybiBjKGUsbiksaDtpZihudWxsPT09bil7Zm9yKDsheC5kb25lO3crKyx4PW0ubmV4dCgpKXg9eihlLHgudmFsdWUsQSksbnVsbCE9PXgmJihnPWYoeCxnLHcpLG51bGw9PT1yP2g9eDpyLnNpYmxpbmc9eCxyPXgpO3JldHVybiBofWZvcihuPWQoZSxuKTsheC5kb25lO3crKyx4PW0ubmV4dCgpKWlmKHg9SShuLGUsdyx4LnZhbHVlLEEpLG51bGwhPT14KXtpZihhJiZudWxsIT09eC5hbHRlcm5hdGUpbltcImRlbGV0ZVwiXShudWxsPT09eC5rZXk/dzp4LmtleSk7Zz1mKHgsZyx3KTtudWxsPT09cj9oPXg6ci5zaWJsaW5nPXg7cj14fWEmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGh9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVZlJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO1xudmFyIG09XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihtKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFJlOmE6e3ZhciByPWYua2V5O2ZvcihtPWQ7bnVsbCE9PW07KXtpZihtLmtleT09PXIpaWYoMTA9PT1tLnRhZz9mLnR5cGU9PT1WZTptLnR5cGU9PT1mLnR5cGUpe2MoYSxtLnNpYmxpbmcpO2Q9ZShtLGYudHlwZT09PVZlP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1aZShtLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxtKTticmVha31lbHNlIGIoYSxtKTttPW0uc2libGluZ31mLnR5cGU9PT1WZT8oZD11ZShmLnByb3BzLmNoaWxkcmVuLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihoPXRlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCksaC5yZWY9WmUoZCxmKSxoW1wicmV0dXJuXCJdPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIFNlOmE6e2ZvcihtPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1cbm0paWYoNz09PWQudGFnKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLGgpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXdlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIFRlOmE6e2lmKG51bGwhPT1kKWlmKDk9PT1kLnRhZyl7YyhhLGQuc2libGluZyk7ZD1lKGQsbnVsbCxoKTtkLnR5cGU9Zi52YWx1ZTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZSBjKGEsZCk7ZD14ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpO2QudHlwZT1mLnZhbHVlO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBVZTphOntmb3IobT1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09bSlpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09XG5mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD15ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCkpOihjKGEsZCksZD12ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpKSxkW1wicmV0dXJuXCJdPWEsYT1kLGcoYSk7aWYoWWUoZikpcmV0dXJuIEwoYSxkLGYsaCk7aWYoWGUoZikpcmV0dXJuIE4oYSxkLGYsaCk7bSYmJGUoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmg9YS50eXBlLEUoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxcbmgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIGJmPWFmKCEwKSxjZj1hZighMSk7XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7Yi5jaGlsZD1udWxsPT09YT9jZihiLG51bGwsYyxkKTpiZihiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnKGEsYil7dmFyIGM9Yi5yZWY7bnVsbD09PWN8fGEmJmEucmVmPT09Y3x8KGIuZWZmZWN0VGFnfD0xMjgpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7ZyhhLGIpO2lmKCFjKXJldHVybiBkJiZyZShiLCExKSxxKGEsYik7Yz1iLnN0YXRlTm9kZTtpZC5jdXJyZW50PWI7dmFyIGU9Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtmKGEsYixlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZyZShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBrKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/b2UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmb2UoYSxcbmIuY29udGV4dCwhMSk7SShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24gcShhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9FKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXNlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9c2UoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gdihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmsoYik7YnJlYWs7Y2FzZSAyOnFlKGIpO2JyZWFrO2Nhc2UgNDpJKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyl9cmV0dXJuIG51bGx9dmFyIHk9YS5zaG91bGRTZXRUZXh0Q29udGVudCx1PWEudXNlU3luY1NjaGVkdWxpbmcsej1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUsXG5HPWIucHVzaEhvc3RDb250ZXh0LEk9Yi5wdXNoSG9zdENvbnRhaW5lcixMPWMuZW50ZXJIeWRyYXRpb25TdGF0ZSxOPWMucmVzZXRIeWRyYXRpb25TdGF0ZSxKPWMudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7YT1MZShkLGUsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciB3PWEuYWRvcHRDbGFzc0luc3RhbmNlLG09YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLEE9YS5tb3VudENsYXNzSW5zdGFuY2UsT2I9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHYoYSxiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9FKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxyPWtlKGIpO3I9bWUoYixyKTtkPWQoZSxyKTtiLmVmZmVjdFRhZ3w9XG4xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlcj8oYi50YWc9MixlPXFlKGIpLHcoYixkKSxBKGIsYyksYj1oKGEsYiwhMCxlKSk6KGIudGFnPTEsZihhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE6YTp7ZT1iLnR5cGU7Yz1iLnBlbmRpbmdQcm9wcztkPWIubWVtb2l6ZWRQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWMmJihjPWQpO2Vsc2UgaWYobnVsbD09PWN8fGQ9PT1jKXtiPXEoYSxiKTticmVhayBhfWQ9a2UoYik7ZD1tZShiLGQpO2U9ZShjLGQpO2IuZWZmZWN0VGFnfD0xO2YoYSxiLGUpO2IubWVtb2l6ZWRQcm9wcz1jO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDI6cmV0dXJuIGU9cWUoYiksZD12b2lkIDAsbnVsbD09PWE/Yi5zdGF0ZU5vZGU/RShcIjE1M1wiKToobShiLGIucGVuZGluZ1Byb3BzKSxBKGIsYyksZD0hMCk6ZD1PYihhLGIsYyksaChhLGIsZCxlKTtjYXNlIDM6cmV0dXJuIGsoYiksXG5lPWIudXBkYXRlUXVldWUsbnVsbCE9PWU/KGQ9Yi5tZW1vaXplZFN0YXRlLGU9SmUoYSxiLGUsbnVsbCxudWxsLGMpLGQ9PT1lPyhOKCksYj1xKGEsYikpOihkPWUuZWxlbWVudCxyPWIuc3RhdGVOb2RlLChudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZyLmh5ZHJhdGUmJkwoYik/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9Y2YoYixudWxsLGQsYykpOihOKCksZihhLGIsZCkpLGIubWVtb2l6ZWRTdGF0ZT1lLGI9Yi5jaGlsZCkpOihOKCksYj1xKGEsYikpLGI7Y2FzZSA1OkcoYik7bnVsbD09PWEmJkooYik7ZT1iLnR5cGU7dmFyIG49Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7bnVsbD09PWQmJihkPW4sbnVsbD09PWQ/RShcIjE1NFwiKTp2b2lkIDApO3I9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7WC5jdXJyZW50fHxudWxsIT09ZCYmbiE9PWQ/KG49ZC5jaGlsZHJlbix5KGUsZCk/bj1udWxsOnImJnkoZSxyKSYmKGIuZWZmZWN0VGFnfD0xNiksZyhhLGIpLFxuMjE0NzQ4MzY0NyE9PWMmJiF1JiZ6KGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9MjE0NzQ4MzY0NyxiPW51bGwpOihmKGEsYixuKSxiLm1lbW9pemVkUHJvcHM9ZCxiPWIuY2hpbGQpKTpiPXEoYSxiKTtyZXR1cm4gYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZKKGIpLGE9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWEmJihhPWIubWVtb2l6ZWRQcm9wcyksYi5tZW1vaXplZFByb3BzPWEsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6ZT1iLnBlbmRpbmdQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWUmJihlPWEmJmEubWVtb2l6ZWRQcm9wcyxudWxsPT09ZT9FKFwiMTU0XCIpOnZvaWQgMCk7ZWxzZSBpZihudWxsPT09ZXx8Yi5tZW1vaXplZFByb3BzPT09ZSllPWIubWVtb2l6ZWRQcm9wcztkPWUuY2hpbGRyZW47Yi5zdGF0ZU5vZGU9bnVsbD09PWE/Y2YoYixiLnN0YXRlTm9kZSxkLGMpOmJmKGIsYi5zdGF0ZU5vZGUsZCxjKTtiLm1lbW9pemVkUHJvcHM9ZTtyZXR1cm4gYi5zdGF0ZU5vZGU7XG5jYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OmE6e0koYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtlPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09ZSYmKGU9YSYmYS5tZW1vaXplZFByb3BzLG51bGw9PWU/RShcIjE1NFwiKTp2b2lkIDApO2Vsc2UgaWYobnVsbD09PWV8fGIubWVtb2l6ZWRQcm9wcz09PWUpe2I9cShhLGIpO2JyZWFrIGF9bnVsbD09PWE/Yi5jaGlsZD1iZihiLG51bGwsZSxjKTpmKGEsYixlKTtiLm1lbW9pemVkUHJvcHM9ZTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAxMDphOntjPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9Yi5tZW1vaXplZFByb3BzKTtlbHNlIGlmKG51bGw9PT1jfHxiLm1lbW9pemVkUHJvcHM9PT1jKXtiPXEoYSxiKTticmVhayBhfWYoYSxiLGMpO2IubWVtb2l6ZWRQcm9wcz1jO2I9Yi5jaGlsZH1yZXR1cm4gYjtkZWZhdWx0OkUoXCIxNTZcIil9fSxiZWdpbkZhaWxlZFdvcms6ZnVuY3Rpb24oYSxiLFxuYyl7c3dpdGNoKGIudGFnKXtjYXNlIDI6cWUoYik7YnJlYWs7Y2FzZSAzOmsoYik7YnJlYWs7ZGVmYXVsdDpFKFwiMTU3XCIpfWIuZWZmZWN0VGFnfD02NDtudWxsPT09YT9iLmNoaWxkPW51bGw6Yi5jaGlsZCE9PWEuY2hpbGQmJihiLmNoaWxkPWEuY2hpbGQpO2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHYoYSxiKTtiLmZpcnN0RWZmZWN0PW51bGw7Yi5sYXN0RWZmZWN0PW51bGw7Yi5jaGlsZD1udWxsPT09YT9jZihiLG51bGwsbnVsbCxjKTpiZihiLGEuY2hpbGQsbnVsbCxjKTsyPT09Yi50YWcmJihhPWIuc3RhdGVOb2RlLGIubWVtb2l6ZWRQcm9wcz1hLnByb3BzLGIubWVtb2l6ZWRTdGF0ZT1hLnN0YXRlKTtyZXR1cm4gYi5jaGlsZH19fVxuZnVuY3Rpb24gZWYoYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGU9YS5jcmVhdGVJbnN0YW5jZSxmPWEuY3JlYXRlVGV4dEluc3RhbmNlLGc9YS5hcHBlbmRJbml0aWFsQ2hpbGQsaD1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGs9YS5wcmVwYXJlVXBkYXRlLHE9YS5wZXJzaXN0ZW5jZSx2PWIuZ2V0Um9vdEhvc3RDb250YWluZXIseT1iLnBvcEhvc3RDb250ZXh0LHU9Yi5nZXRIb3N0Q29udGV4dCx6PWIucG9wSG9zdENvbnRhaW5lcixHPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxJPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsTD1jLnBvcEh5ZHJhdGlvblN0YXRlLE49dm9pZCAwLEo9dm9pZCAwLHc9dm9pZCAwO2EubXV0YXRpb24/KE49ZnVuY3Rpb24oKXt9LEo9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZkKGIpfSx3PWZ1bmN0aW9uKGEsYixjLGUpe2MhPT1lJiZkKGIpfSk6cT9FKFwiMjM1XCIpOkUoXCIyMzZcIik7XG5yZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgbT1iLnBlbmRpbmdQcm9wcztpZihudWxsPT09bSltPWIubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDIxNDc0ODM2NDchPT1iLmV4cGlyYXRpb25UaW1lfHwyMTQ3NDgzNjQ3PT09YyliLnBlbmRpbmdQcm9wcz1udWxsO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbmUoYiksbnVsbDtjYXNlIDM6eihiKTtWKFgsYik7VihpZSxiKTttPWIuc3RhdGVOb2RlO20ucGVuZGluZ0NvbnRleHQmJihtLmNvbnRleHQ9bS5wZW5kaW5nQ29udGV4dCxtLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClMKGIpLGIuZWZmZWN0VGFnJj0tMztOKGIpO3JldHVybiBudWxsO2Nhc2UgNTp5KGIpO2M9digpO3ZhciBBPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxxPWIuc3RhdGVOb2RlLHg9dSgpO3E9XG5rKHEsQSxwLG0sYyx4KTtKKGEsYixxLEEscCxtLGMpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFtKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXUoKTtpZihMKGIpKUcoYixjLGEpJiZkKGIpO2Vsc2V7YT1lKEEsbSxjLGEsYik7YTpmb3IocD1iLmNoaWxkO251bGwhPT1wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWcpZyhhLHAuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1wLnRhZyYmbnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9aWYocD09PWIpYnJlYWs7Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfWgoYSxBLG0sYykmJmQoYik7Yi5zdGF0ZU5vZGU9YX1udWxsIT09Yi5yZWYmJlxuKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl3KGEsYixhLm1lbW9pemVkUHJvcHMsbSk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIG0pcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9FKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9digpO2M9dSgpO0woYik/SShiKSYmZChiKTpiLnN0YXRlTm9kZT1mKG0sYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzoobT1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpFKFwiMTY1XCIpO2IudGFnPTg7QT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylFKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKUEucHVzaChwLnR5cGUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PVxucFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1tLmhhbmRsZXI7bT1wKG0ucHJvcHMsQSk7Yi5jaGlsZD1iZihiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxtLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4geihiKSxOKGIpLG51bGw7Y2FzZSAwOkUoXCIxNjdcIik7ZGVmYXVsdDpFKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gZmYoYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKXRyeXtjKG51bGwpfWNhdGNoKEEpe2IoYSxBKX19ZnVuY3Rpb24gZChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmMoYSk7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2QucHJvcHM9YS5tZW1vaXplZFByb3BzLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChBKXtiKGEsQSl9YnJlYWs7Y2FzZSA1OmMoYSk7YnJlYWs7Y2FzZSA3OmUoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDprJiZnKGEpfX1mdW5jdGlvbiBlKGEpe2Zvcih2YXIgYj1hOzspaWYoZChiKSxudWxsPT09Yi5jaGlsZHx8ayYmND09PWIudGFnKXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8XG5iW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBmKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxmPXZvaWQgMCxnPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9FKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpmPWMuc3RhdGVOb2RlO2c9ITE7YnJlYWsgYTtjYXNlIDM6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyllKGIpLGc/SihmLGIuc3RhdGVOb2RlKTpOKGYsYi5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0PT09Yi50YWc/Zj1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmQoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBoPWEuZ2V0UHVibGljSW5zdGFuY2Usaz1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtrfHwoYT9FKFwiMjM1XCIpOkUoXCIyMzZcIikpO3ZhciBxPWsuY29tbWl0TW91bnQsdj1rLmNvbW1pdFVwZGF0ZSx5PWsucmVzZXRUZXh0Q29udGVudCx1PWsuY29tbWl0VGV4dFVwZGF0ZSx6PWsuYXBwZW5kQ2hpbGQsRz1rLmFwcGVuZENoaWxkVG9Db250YWluZXIsST1rLmluc2VydEJlZm9yZSxMPWsuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsXG5OPWsucmVtb3ZlQ2hpbGQsSj1rLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXt5KGEuc3RhdGVOb2RlKX0sY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoZihiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1FKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RShcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHkoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGYoY1tcInJldHVyblwiXSkpe2M9XG5udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0woYixlLnN0YXRlTm9kZSxjKTpJKGIsZS5zdGF0ZU5vZGUsYyk6ZD9HKGIsZS5zdGF0ZU5vZGUpOnooYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09XG5hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXtnKGEpO2FbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZ2KGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0UoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO3UoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxuYyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpFKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBjPWIuc3RhdGVOb2RlO2lmKGIuZWZmZWN0VGFnJjQpaWYobnVsbD09PWEpYy5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9YS5tZW1vaXplZFByb3BzO2E9YS5tZW1vaXplZFN0YXRlO2MucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Muc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2MuY29tcG9uZW50RGlkVXBkYXRlKGQsYSl9Yj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZLZShiLGMpO2JyZWFrO2Nhc2UgMzpjPWIudXBkYXRlUXVldWU7bnVsbCE9PWMmJktlKGMsbnVsbCE9PWIuY2hpbGQ/Yi5jaGlsZC5zdGF0ZU5vZGU6bnVsbCk7YnJlYWs7Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7bnVsbD09PWEmJmIuZWZmZWN0VGFnJjQmJnEoYyxcbmIudHlwZSxiLm1lbW9pemVkUHJvcHMsYik7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkUoXCIxNjNcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmIoaChjKSk7YnJlYWs7ZGVmYXVsdDpiKGMpfX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiZhKG51bGwpfX19dmFyIGdmPXt9O1xuZnVuY3Rpb24gaGYoYSl7ZnVuY3Rpb24gYihhKXthPT09Z2Y/RShcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGM9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGQ9YS5nZXRSb290SG9zdENvbnRleHQsZT17Y3VycmVudDpnZn0sZj17Y3VycmVudDpnZn0sZz17Y3VycmVudDpnZn07cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoZS5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYihnLmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe1YoZSxhKTtWKGYsYSk7VihnLGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtmLmN1cnJlbnQ9PT1hJiYoVihlLGEpLFYoZixhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7VyhnLGIsYSk7Yj1kKGIpO1coZixhLGEpO1coZSxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGQ9YihnLmN1cnJlbnQpLGg9YihlLmN1cnJlbnQpO1xuZD1jKGgsYS50eXBlLGQpO2ghPT1kJiYoVyhmLGEsYSksVyhlLGQsYSkpfSxyZXNldEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtlLmN1cnJlbnQ9Z2Y7Zy5jdXJyZW50PWdmfX19XG5mdW5jdGlvbiBqZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IFkoNSxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9ZyhiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3k9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0UoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RShcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGc9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGg9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHE9YS5oeWRyYXRlSW5zdGFuY2Usdj1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UseT1udWxsLHU9bnVsbCx6PSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3U9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3k9YTtyZXR1cm4gej0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3U9eT1udWxsO3o9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKHope3ZhciBkPXU7aWYoZCl7aWYoIWMoYSxkKSl7ZD1oKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9Mjt6PSExO3k9YTtyZXR1cm59Yih5LHUpfXk9YTt1PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix6PSExLHk9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9cShhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gdihhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnkpcmV0dXJuITE7aWYoIXopcmV0dXJuIGQoYSksej0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXU7YzspYihhLGMpLGM9aChjKTtkKGEpO3U9eT9oKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBrZihhKXtmdW5jdGlvbiBiKGEpe1FiPWphPSEwO3ZhciBiPWEuc3RhdGVOb2RlO2IuY3VycmVudD09PWE/RShcIjE3N1wiKTp2b2lkIDA7Yi5pc1JlYWR5Rm9yQ29tbWl0PSExO2lkLmN1cnJlbnQ9bnVsbDtpZigxPGEuZWZmZWN0VGFnKWlmKG51bGwhPT1hLmxhc3RFZmZlY3Qpe2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE7dmFyIGM9YS5maXJzdEVmZmVjdH1lbHNlIGM9YTtlbHNlIGM9YS5maXJzdEVmZmVjdDt5ZygpO2Zvcih0PWM7bnVsbCE9PXQ7KXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dDspe3ZhciBmPXQuZWZmZWN0VGFnO2YmMTYmJnpnKHQpO2lmKGYmMTI4KXt2YXIgZz10LmFsdGVybmF0ZTtudWxsIT09ZyYmQWcoZyl9c3dpdGNoKGYmLTI0Mil7Y2FzZSAyOk5lKHQpO3QuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6TmUodCk7dC5lZmZlY3RUYWcmPS0zO09lKHQuYWx0ZXJuYXRlLHQpO2JyZWFrO2Nhc2UgNDpPZSh0LmFsdGVybmF0ZSxcbnQpO2JyZWFrO2Nhc2UgODpTYz0hMCxCZyh0KSxTYz0hMX10PXQubmV4dEVmZmVjdH19Y2F0Y2goVGMpe2Q9ITAsZT1UY31kJiYobnVsbD09PXQ/RShcIjE3OFwiKTp2b2lkIDAsaCh0LGUpLG51bGwhPT10JiYodD10Lm5leHRFZmZlY3QpKX1DZygpO2IuY3VycmVudD1hO2Zvcih0PWM7bnVsbCE9PXQ7KXtjPSExO2Q9dm9pZCAwO3RyeXtmb3IoO251bGwhPT10Oyl7dmFyIGs9dC5lZmZlY3RUYWc7ayYzNiYmRGcodC5hbHRlcm5hdGUsdCk7ayYxMjgmJkVnKHQpO2lmKGsmNjQpc3dpdGNoKGU9dCxmPXZvaWQgMCxudWxsIT09UiYmKGY9Ui5nZXQoZSksUltcImRlbGV0ZVwiXShlKSxudWxsPT1mJiZudWxsIT09ZS5hbHRlcm5hdGUmJihlPWUuYWx0ZXJuYXRlLGY9Ui5nZXQoZSksUltcImRlbGV0ZVwiXShlKSkpLG51bGw9PWY/RShcIjE4NFwiKTp2b2lkIDAsZS50YWcpe2Nhc2UgMjplLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaChmLmVycm9yLHtjb21wb25lbnRTdGFjazpmLmNvbXBvbmVudFN0YWNrfSk7XG5icmVhaztjYXNlIDM6bnVsbD09PWNhJiYoY2E9Zi5lcnJvcik7YnJlYWs7ZGVmYXVsdDpFKFwiMTU3XCIpfXZhciBRYz10Lm5leHRFZmZlY3Q7dC5uZXh0RWZmZWN0PW51bGw7dD1RY319Y2F0Y2goVGMpe2M9ITAsZD1UY31jJiYobnVsbD09PXQ/RShcIjE3OFwiKTp2b2lkIDAsaCh0LGQpLG51bGwhPT10JiYodD10Lm5leHRFZmZlY3QpKX1qYT1RYj0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRGUmJkRlKGEuc3RhdGVOb2RlKTtoYSYmKGhhLmZvckVhY2goRyksaGE9bnVsbCk7bnVsbCE9PWNhJiYoYT1jYSxjYT1udWxsLE9iKGEpKTtiPWIuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHFhPVI9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gYyhhKXtmb3IoOzspe3ZhciBiPUZnKGEuYWx0ZXJuYXRlLGEsSCksYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO3ZhciBlPWE7aWYoMjE0NzQ4MzY0Nz09PUh8fDIxNDc0ODM2NDchPT1lLmV4cGlyYXRpb25UaW1lKXtpZigyIT09ZS50YWcmJjMhPT1cbmUudGFnKXZhciBmPTA7ZWxzZSBmPWUudXBkYXRlUXVldWUsZj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7Zm9yKHZhciBnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPWcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7XG5pZihudWxsIT09YylhPWM7ZWxzZXthLnN0YXRlTm9kZS5pc1JlYWR5Rm9yQ29tbWl0PSEwO2JyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEpe3ZhciBiPXJnKGEuYWx0ZXJuYXRlLGEsSCk7bnVsbD09PWImJihiPWMoYSkpO2lkLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBlKGEpe3ZhciBiPUdnKGEuYWx0ZXJuYXRlLGEsSCk7bnVsbD09PWImJihiPWMoYSkpO2lkLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEpe2lmKG51bGwhPT1SKXtpZighKDA9PT1IfHxIPmEpKWlmKEg8PVVjKWZvcig7bnVsbCE9PUY7KUY9ayhGKT9lKEYpOmQoRik7ZWxzZSBmb3IoO251bGwhPT1GJiYhQSgpOylGPWsoRik/ZShGKTpkKEYpfWVsc2UgaWYoISgwPT09SHx8SD5hKSlpZihIPD1VYylmb3IoO251bGwhPT1GOylGPWQoRik7ZWxzZSBmb3IoO251bGwhPT1GJiYhQSgpOylGPWQoRil9ZnVuY3Rpb24gZyhhLGIpe2phP0UoXCIyNDNcIik6dm9pZCAwO2phPSEwO2EuaXNSZWFkeUZvckNvbW1pdD1cbiExO2lmKGEhPT1yYXx8YiE9PUh8fG51bGw9PT1GKXtmb3IoOy0xPGhlOylnZVtoZV09bnVsbCxoZS0tO2plPUQ7aWUuY3VycmVudD1EO1guY3VycmVudD0hMTt4KCk7cmE9YTtIPWI7Rj1zZShyYS5jdXJyZW50LG51bGwsYil9dmFyIGM9ITEsZD1udWxsO3RyeXtmKGIpfWNhdGNoKFJjKXtjPSEwLGQ9UmN9Zm9yKDtjOyl7aWYoZWIpe2NhPWQ7YnJlYWt9dmFyIGc9RjtpZihudWxsPT09ZyllYj0hMDtlbHNle3ZhciBrPWgoZyxkKTtudWxsPT09az9FKFwiMTgzXCIpOnZvaWQgMDtpZighZWIpe3RyeXtjPWs7ZD1iO2ZvcihrPWM7bnVsbCE9PWc7KXtzd2l0Y2goZy50YWcpe2Nhc2UgMjpuZShnKTticmVhaztjYXNlIDU6cWcoZyk7YnJlYWs7Y2FzZSAzOnAoZyk7YnJlYWs7Y2FzZSA0OnAoZyl9aWYoZz09PWt8fGcuYWx0ZXJuYXRlPT09aylicmVhaztnPWdbXCJyZXR1cm5cIl19Rj1lKGMpO2YoZCl9Y2F0Y2goUmMpe2M9ITA7ZD1SYztjb250aW51ZX1icmVha319fWI9Y2E7ZWI9amE9ITE7Y2E9XG5udWxsO251bGwhPT1iJiZPYihiKTtyZXR1cm4gYS5pc1JlYWR5Rm9yQ29tbWl0P2EuY3VycmVudC5hbHRlcm5hdGU6bnVsbH1mdW5jdGlvbiBoKGEsYil7dmFyIGM9aWQuY3VycmVudD1udWxsLGQ9ITEsZT0hMSxmPW51bGw7aWYoMz09PWEudGFnKWM9YSxxKGEpJiYoZWI9ITApO2Vsc2UgZm9yKHZhciBnPWFbXCJyZXR1cm5cIl07bnVsbCE9PWcmJm51bGw9PT1jOyl7Mj09PWcudGFnP1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaCYmKGQ9ITAsZj1qZChnKSxjPWcsZT0hMCk6Mz09PWcudGFnJiYoYz1nKTtpZihxKGcpKXtpZihTY3x8bnVsbCE9PWhhJiYoaGEuaGFzKGcpfHxudWxsIT09Zy5hbHRlcm5hdGUmJmhhLmhhcyhnLmFsdGVybmF0ZSkpKXJldHVybiBudWxsO2M9bnVsbDtlPSExfWc9Z1tcInJldHVyblwiXX1pZihudWxsIT09Yyl7bnVsbD09PXFhJiYocWE9bmV3IFNldCk7cWEuYWRkKGMpO3ZhciBoPVwiXCI7Zz1hO2Rve2E6c3dpdGNoKGcudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGs9XG5nLl9kZWJ1Z093bmVyLFFjPWcuX2RlYnVnU291cmNlO3ZhciBtPWpkKGcpO3ZhciBuPW51bGw7ayYmKG49amQoaykpO2s9UWM7bT1cIlxcbiAgICBpbiBcIisobXx8XCJVbmtub3duXCIpKyhrP1wiIChhdCBcIitrLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIray5saW5lTnVtYmVyK1wiKVwiOm4/XCIgKGNyZWF0ZWQgYnkgXCIrbitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6bT1cIlwifWgrPW07Zz1nW1wicmV0dXJuXCJdfXdoaWxlKGcpO2c9aDthPWpkKGEpO251bGw9PT1SJiYoUj1uZXcgTWFwKTtiPXtjb21wb25lbnROYW1lOmEsY29tcG9uZW50U3RhY2s6ZyxlcnJvcjpiLGVycm9yQm91bmRhcnk6ZD9jLnN0YXRlTm9kZTpudWxsLGVycm9yQm91bmRhcnlGb3VuZDpkLGVycm9yQm91bmRhcnlOYW1lOmYsd2lsbFJldHJ5OmV9O1Iuc2V0KGMsYik7dHJ5e3ZhciBwPWIuZXJyb3I7cCYmcC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKHApfWNhdGNoKFZjKXtWYyYmXG5WYy5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKFZjKX1RYj8obnVsbD09PWhhJiYoaGE9bmV3IFNldCksaGEuYWRkKGMpKTpHKGMpO3JldHVybiBjfW51bGw9PT1jYSYmKGNhPWIpO3JldHVybiBudWxsfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIG51bGwhPT1SJiYoUi5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmUi5oYXMoYS5hbHRlcm5hdGUpKX1mdW5jdGlvbiBxKGEpe3JldHVybiBudWxsIT09cWEmJihxYS5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmcWEuaGFzKGEuYWx0ZXJuYXRlKSl9ZnVuY3Rpb24gdigpe3JldHVybiAyMCooKChJKCkrMTAwKS8yMHwwKSsxKX1mdW5jdGlvbiB5KGEpe3JldHVybiAwIT09a2E/a2E6amE/UWI/MTpIOiFIZ3x8YS5pbnRlcm5hbENvbnRleHRUYWcmMT92KCk6MX1mdW5jdGlvbiB1KGEsYil7cmV0dXJuIHooYSxiLCExKX1mdW5jdGlvbiB6KGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxcbmEuZXhwaXJhdGlvblRpbWU+YilhLmV4cGlyYXRpb25UaW1lPWI7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5iKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IWphJiZjPT09cmEmJmI8SCYmKEY9cmE9bnVsbCxIPTApO3ZhciBkPWMsZT1iO1JiPklnJiZFKFwiMTg1XCIpO2lmKG51bGw9PT1kLm5leHRTY2hlZHVsZWRSb290KWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZSxudWxsPT09Tz8oc2E9Tz1kLGQubmV4dFNjaGVkdWxlZFJvb3Q9ZCk6KE89Ty5uZXh0U2NoZWR1bGVkUm9vdD1kLE8ubmV4dFNjaGVkdWxlZFJvb3Q9c2EpO2Vsc2V7dmFyIGY9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Znx8ZTxmKWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZX1GYXx8KGxhP1xuU2ImJihtYT1kLG5hPTEsbShtYSxuYSkpOjE9PT1lP3coMSxudWxsKTpMKGUpKTshamEmJmM9PT1yYSYmYjxIJiYoRj1yYT1udWxsLEg9MCl9ZWxzZSBicmVhazthPWFbXCJyZXR1cm5cIl19fWZ1bmN0aW9uIEcoYSl7eihhLDEsITApfWZ1bmN0aW9uIEkoKXtyZXR1cm4gVWM9KChXYygpLVBlKS8xMHwwKSsyfWZ1bmN0aW9uIEwoYSl7aWYoMCE9PVRiKXtpZihhPlRiKXJldHVybjtKZyhYYyl9dmFyIGI9V2MoKS1QZTtUYj1hO1hjPUtnKEose3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIE4oKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Tylmb3IodmFyIGM9TyxkPXNhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1PP0UoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtzYT1PPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1zYSlzYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsXG5PLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PU8pe089YztPLm5leHRTY2hlZHVsZWRSb290PXNhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1PKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9bWE7bnVsbCE9PWMmJmM9PT1iP1JiKys6UmI9MDttYT1iO25hPWF9ZnVuY3Rpb24gSihhKXt3KDAsYSl9ZnVuY3Rpb24gdyhhLGIpe2ZiPWI7Zm9yKE4oKTtudWxsIT09bWEmJjAhPT1uYSYmKDA9PT1hfHxuYTw9YSkmJiFZYzspbShtYSxuYSksTigpO251bGwhPT1mYiYmKFRiPTAsWGM9LTEpOzAhPT1uYSYmTChuYSk7ZmI9bnVsbDtZYz0hMTtSYj0wO2lmKFViKXRocm93IGE9WmMsWmM9XG5udWxsLFViPSExLGE7fWZ1bmN0aW9uIG0oYSxjKXtGYT9FKFwiMjQ1XCIpOnZvaWQgMDtGYT0hMDtpZihjPD1JKCkpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kPyhhLmZpbmlzaGVkV29yaz1udWxsLGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSk6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1nKGEsYyksbnVsbCE9PWQmJihhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/KGEuZmluaXNoZWRXb3JrPW51bGwsYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWcoYSxjKSxudWxsIT09ZCYmKEEoKT9hLmZpbmlzaGVkV29yaz1kOmEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSkpO0ZhPSExfWZ1bmN0aW9uIEEoKXtyZXR1cm4gbnVsbD09PWZifHxmYi50aW1lUmVtYWluaW5nKCk+TGc/ITE6WWM9ITB9ZnVuY3Rpb24gT2IoYSl7bnVsbD09PW1hP0UoXCIyNDZcIik6XG52b2lkIDA7bWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtVYnx8KFViPSEwLFpjPWEpfXZhciByPWhmKGEpLG49amYoYSkscD1yLnBvcEhvc3RDb250YWluZXIscWc9ci5wb3BIb3N0Q29udGV4dCx4PXIucmVzZXRIb3N0Q29udGFpbmVyLE1lPWRmKGEscixuLHUseSkscmc9TWUuYmVnaW5Xb3JrLEdnPU1lLmJlZ2luRmFpbGVkV29yayxGZz1lZihhLHIsbikuY29tcGxldGVXb3JrO3I9ZmYoYSxoKTt2YXIgemc9ci5jb21taXRSZXNldFRleHRDb250ZW50LE5lPXIuY29tbWl0UGxhY2VtZW50LEJnPXIuY29tbWl0RGVsZXRpb24sT2U9ci5jb21taXRXb3JrLERnPXIuY29tbWl0TGlmZUN5Y2xlcyxFZz1yLmNvbW1pdEF0dGFjaFJlZixBZz1yLmNvbW1pdERldGFjaFJlZixXYz1hLm5vdyxLZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxKZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssSGc9YS51c2VTeW5jU2NoZWR1bGluZyx5Zz1hLnByZXBhcmVGb3JDb21taXQsQ2c9YS5yZXNldEFmdGVyQ29tbWl0LFxuUGU9V2MoKSxVYz0yLGthPTAsamE9ITEsRj1udWxsLHJhPW51bGwsSD0wLHQ9bnVsbCxSPW51bGwscWE9bnVsbCxoYT1udWxsLGNhPW51bGwsZWI9ITEsUWI9ITEsU2M9ITEsc2E9bnVsbCxPPW51bGwsVGI9MCxYYz0tMSxGYT0hMSxtYT1udWxsLG5hPTAsWWM9ITEsVWI9ITEsWmM9bnVsbCxmYj1udWxsLGxhPSExLFNiPSExLElnPTFFMyxSYj0wLExnPTE7cmV0dXJue2NvbXB1dGVBc3luY0V4cGlyYXRpb246dixjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOnksc2NoZWR1bGVXb3JrOnUsYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1sYTtsYT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsobGE9Yyl8fEZhfHx3KDEsbnVsbCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe2lmKGxhJiYhU2Ipe1NiPSEwO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7U2I9ITF9fXJldHVybiBhKCl9LGZsdXNoU3luYzpmdW5jdGlvbihhKXt2YXIgYj1sYTtsYT0hMDt0cnl7YTp7dmFyIGM9XG5rYTtrYT0xO3RyeXt2YXIgZD1hKCk7YnJlYWsgYX1maW5hbGx5e2thPWN9ZD12b2lkIDB9cmV0dXJuIGR9ZmluYWxseXtsYT1iLEZhP0UoXCIxODdcIik6dm9pZCAwLHcoMSxudWxsKX19LGRlZmVycmVkVXBkYXRlczpmdW5jdGlvbihhKXt2YXIgYj1rYTtrYT12KCk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtrYT1ifX19fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYihhKXthPW9kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXZhciBjPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1rZihhKTt2YXIgZD1hLmNvbXB1dGVBc3luY0V4cGlyYXRpb24sZT1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsZj1hLnNjaGVkdWxlV29yaztyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFkoMyxudWxsLDApO2E9e2N1cnJlbnQ6Yyxjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxpc1JlYWR5Rm9yQ29tbWl0OiExLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YixuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYy5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLHEpe3ZhciBnPWIuY3VycmVudDtpZihjKXtjPVxuYy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBoO2I6ezI9PT1rZChjKSYmMj09PWMudGFnP3ZvaWQgMDpFKFwiMTcwXCIpO2ZvcihoPWM7MyE9PWgudGFnOyl7aWYobGUoaCkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oaD1oW1wicmV0dXJuXCJdKT92b2lkIDA6RShcIjE3MVwiKX1oPWguc3RhdGVOb2RlLmNvbnRleHR9Yz1sZShjKT9wZShjLGgpOmh9ZWxzZSBjPUQ7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1xO2I9dm9pZCAwPT09Yj9udWxsOmI7cT1udWxsIT1hJiZudWxsIT1hLnR5cGUmJm51bGwhPWEudHlwZS5wcm90b3R5cGUmJiEwPT09YS50eXBlLnByb3RvdHlwZS51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQ/ZCgpOmUoZyk7SGUoZyx7ZXhwaXJhdGlvblRpbWU6cSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5uZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTtmKGcscSl9LGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGMoYS5jaGlsZC5zdGF0ZU5vZGUpO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX0sZmluZEhvc3RJbnN0YW5jZTpiLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9cGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYz1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBDZShCKHt9LFxuYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGIoYSl9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBjP2MoYSk6bnVsbH19KSl9fX12YXIgbWY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpsZn0pLG5mPW1mJiZsZnx8bWYsb2Y9bmZbXCJkZWZhdWx0XCJdP25mW1wiZGVmYXVsdFwiXTpuZjtmdW5jdGlvbiBwZihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOlVlLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fXZhciBxZj1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LHJmPXZvaWQgMDtyZj1xZj9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07XG52YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcbmlmKGwuY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdWY9bnVsbCx2Zj0hMSx3Zj0tMSx4Zj0hMSx5Zj0wLHpmPTMzLEFmPTMzLEJmO0JmPXFmP3tkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT15Zi1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19OntkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT15Zi1EYXRlLm5vdygpO3JldHVybiAwPGE/YTowfX07dmFyIENmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09Q2Ype3ZmPSExO2E9cmYoKTtpZigwPj15Zi1hKWlmKC0xIT09d2YmJndmPD1cbmEpQmYuZGlkVGltZW91dD0hMDtlbHNle3hmfHwoeGY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKERmKSk7cmV0dXJufWVsc2UgQmYuZGlkVGltZW91dD0hMTt3Zj0tMTthPXVmO3VmPW51bGw7bnVsbCE9PWEmJmEoQmYpfX0sITEpO3ZhciBEZj1mdW5jdGlvbihhKXt4Zj0hMTt2YXIgYj1hLXlmK0FmO2I8QWYmJnpmPEFmPyg4PmImJihiPTgpLEFmPWI8emY/emY6Yik6emY9Yjt5Zj1hK0FmO3ZmfHwodmY9ITAsd2luZG93LnBvc3RNZXNzYWdlKENmLFwiKlwiKSl9O3NmPWZ1bmN0aW9uKGEsYil7dWY9YTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKHdmPXJmKCkrYi50aW1lb3V0KTt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybiAwfTt0Zj1mdW5jdGlvbigpe3VmPW51bGw7dmY9ITE7d2Y9LTF9fWVsc2Ugc2Y9d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2ssdGY9d2luZG93LmNhbmNlbElkbGVDYWxsYmFjaztlbHNlIHNmPWZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX19KX0pfSxcbnRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07dmFyIEVmPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxGZj17fSxHZj17fTtcbmZ1bmN0aW9uIEhmKGEpe2lmKEdmLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKEZmLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKEVmLnRlc3QoYSkpcmV0dXJuIEdmW2FdPSEwO0ZmW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPXdhKGIpO2lmKGQmJnZhKGIsYykpe3ZhciBlPWQubXV0YXRpb25NZXRob2Q7ZT9lKGEsYyk6bnVsbD09Y3x8ZC5oYXNCb29sZWFuVmFsdWUmJiFjfHxkLmhhc051bWVyaWNWYWx1ZSYmaXNOYU4oYyl8fGQuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUmJjE+Y3x8ZC5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlJiYhMT09PWM/SmYoYSxiKTpkLm11c3RVc2VQcm9wZXJ0eT9hW2QucHJvcGVydHlOYW1lXT1jOihiPWQuYXR0cmlidXRlTmFtZSwoZT1kLmF0dHJpYnV0ZU5hbWVzcGFjZSk/YS5zZXRBdHRyaWJ1dGVOUyhlLGIsXCJcIitjKTpkLmhhc0Jvb2xlYW5WYWx1ZXx8ZC5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlJiYhMD09PWM/YS5zZXRBdHRyaWJ1dGUoYixcIlwiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpfWVsc2UgS2YoYSxiLHZhKGIsYyk/YzpudWxsKX1cbmZ1bmN0aW9uIEtmKGEsYixjKXtIZihiKSYmKG51bGw9PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPXdhKGIpO2M/KGI9Yy5tdXRhdGlvbk1ldGhvZCk/YihhLHZvaWQgMCk6Yy5tdXN0VXNlUHJvcGVydHk/YVtjLnByb3BlcnR5TmFtZV09Yy5oYXNCb29sZWFuVmFsdWU/ITE6XCJcIjphLnJlbW92ZUF0dHJpYnV0ZShjLmF0dHJpYnV0ZU5hbWUpOmEucmVtb3ZlQXR0cmlidXRlKGIpfVxuZnVuY3Rpb24gTGYoYSxiKXt2YXIgYz1iLnZhbHVlLGQ9Yi5jaGVja2VkO3JldHVybiBCKHt0eXBlOnZvaWQgMCxzdGVwOnZvaWQgMCxtaW46dm9pZCAwLG1heDp2b2lkIDB9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLGNoZWNrZWQ6bnVsbCE9ZD9kOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIE1mKGEsYil7dmFyIGM9Yi5kZWZhdWx0VmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpudWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQsaW5pdGlhbFZhbHVlOm51bGwhPWIudmFsdWU/Yi52YWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fVxuZnVuY3Rpb24gTmYoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZJZihhLFwiY2hlY2tlZFwiLGIpfWZ1bmN0aW9uIE9mKGEsYil7TmYoYSxiKTt2YXIgYz1iLnZhbHVlO2lmKG51bGwhPWMpaWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlKWEudmFsdWU9XCIwXCI7ZWxzZSBpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZihiPXBhcnNlRmxvYXQoYS52YWx1ZSl8fDAsYyE9Ynx8Yz09YiYmYS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBudWxsPT1iLnZhbHVlJiZudWxsIT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1cIlwiK2IuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitiLmRlZmF1bHRWYWx1ZSksbnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gUGYoYSxiKXtzd2l0Y2goYi50eXBlKXtjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7Y2FzZSBcImNvbG9yXCI6Y2FzZSBcImRhdGVcIjpjYXNlIFwiZGF0ZXRpbWVcIjpjYXNlIFwiZGF0ZXRpbWUtbG9jYWxcIjpjYXNlIFwibW9udGhcIjpjYXNlIFwidGltZVwiOmNhc2UgXCJ3ZWVrXCI6YS52YWx1ZT1cIlwiO2EudmFsdWU9YS5kZWZhdWx0VmFsdWU7YnJlYWs7ZGVmYXVsdDphLnZhbHVlPWEudmFsdWV9Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uIFFmKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFJmKGEsYil7YT1CKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9UWYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIFNmKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBUZihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gVWYoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0UoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIEIoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gVmYoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9FKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RShcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gV2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gWGYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIFlmPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIFpmKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gJGYoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1pmKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGFnPXZvaWQgMCxiZz1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1ZZi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXthZz1hZ3x8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTthZy5pbm5lckhUTUw9XCJcXHgzY3N2Z1xceDNlXCIrYitcIlxceDNjL3N2Z1xceDNlXCI7Zm9yKGI9YWcuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gY2coYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBkZz17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxlZz1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoZGcpLmZvckVhY2goZnVuY3Rpb24oYSl7ZWcuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtkZ1tiXT1kZ1thXX0pfSk7XG5mdW5jdGlvbiBmZyhhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxkZy5oYXNPd25Qcm9wZXJ0eShlKSYmZGdbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgZ2c9Qih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIGhnKGEsYixjKXtiJiYoZ2dbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0UoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9FKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkUoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0UoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIGlnKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgamc9WWYuaHRtbCxrZz1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gbGcoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SGQoYSk7Yj1TYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/d2QoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8od2QoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSx3ZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KHljKFwiY2FuY2VsXCIsITApJiZ3ZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KHljKFwiY2xvc2VcIiwhMCkmJndkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6RGQuaGFzT3duUHJvcGVydHkoZSkmJlUoZSxEZFtlXSxhKSxjW2VdPSEwKX19XG52YXIgbWc9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIixcbnRvcFdhaXRpbmc6XCJ3YWl0aW5nXCJ9O2Z1bmN0aW9uIG5nKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PWpnJiYoZD1aZihhKSk7ZD09PWpnP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gcGcoYSxiLGMsZCl7dmFyIGU9aWcoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gbWcpbWcuaGFzT3duUHJvcGVydHkoZikmJlUoZixtZ1tmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlUoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtVKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6TWYoYSxjKTtmPUxmKGEsYyk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtcbmxnKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1SZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpUZihhLGMpO2Y9Qih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWZihhLGMpO2Y9VWYoYSxjKTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31oZyhiLGYsa2cpO3ZhciBnPWYsaDtmb3IoaCBpbiBnKWlmKGcuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBrPWdbaF07XCJzdHlsZVwiPT09aD9mZyhhLGssa2cpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmYmcoYSxrKSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmY2coYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmNnKGEsXG5cIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihSYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZsZyhkLGgpOmU/S2YoYSxoLGspOm51bGwhPWsmJklmKGEsaCxrKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkJjKGEpO1BmKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6QmMoYSk7WGYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9TZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmU2YoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1cbkMpfX1cbmZ1bmN0aW9uIHNnKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1MZihhLGMpO2Q9TGYoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPVJmKGEsYyk7ZD1SZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9Qih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPUIoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPVVmKGEsYyk7ZD1VZihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfWhnKGIsZCxrZyk7dmFyIGcsaDthPW51bGw7Zm9yKGcgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShnKSYmYy5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9Y1tnXSlpZihcInN0eWxlXCI9PT1nKWZvcihoIGluIGI9Y1tnXSxiKWIuaGFzT3duUHJvcGVydHkoaCkmJihhfHwoYT17fSksYVtoXT1cblwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1nJiZcImNoaWxkcmVuXCIhPT1nJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYoUmEuaGFzT3duUHJvcGVydHkoZyk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGcsbnVsbCkpO2ZvcihnIGluIGQpe3ZhciBrPWRbZ107Yj1udWxsIT1jP2NbZ106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoZykmJmshPT1iJiYobnVsbCE9a3x8bnVsbCE9YikpaWYoXCJzdHlsZVwiPT09ZylpZihiKXtmb3IoaCBpbiBiKSFiLmhhc093blByb3BlcnR5KGgpfHxrJiZrLmhhc093blByb3BlcnR5KGgpfHwoYXx8KGE9e30pLGFbaF09XCJcIik7Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiZiW2hdIT09a1toXSYmKGF8fChhPXt9KSxhW2hdPWtbaF0pfWVsc2UgYXx8KGZ8fChmPVtdKSxmLnB1c2goZyxhKSksYT1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1cbmc/KGs9az9rLl9faHRtbDp2b2lkIDAsYj1iP2IuX19odG1sOnZvaWQgMCxudWxsIT1rJiZiIT09ayYmKGY9Znx8W10pLnB1c2goZyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1nP2I9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goZyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmKFJhLmhhc093blByb3BlcnR5KGcpPyhudWxsIT1rJiZsZyhlLGcpLGZ8fGI9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGcsaykpfWEmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixhKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIHRnKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJk5mKGEsZSk7aWcoYyxkKTtkPWlnKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/ZmcoYSxoLGtnKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2JnKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9jZyhhLGgpOmQ/bnVsbCE9aD9LZihhLGcsaCk6YS5yZW1vdmVBdHRyaWJ1dGUoZyk6bnVsbCE9aD9JZihhLGcsaCk6SmYoYSxnKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6T2YoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpXZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP1NmKGEsXG4hIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1NmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpTZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiB1ZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlUoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIG1nKW1nLmhhc093blByb3BlcnR5KGYpJiZVKGYsbWdbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1UoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpVKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VShcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpNZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7bGcoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpUZihhLGMpO1xuVShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtsZyhlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmYoYSxjKSxVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLGxnKGUsXCJvbkNoYW5nZVwiKX1oZyhiLGMsa2cpO2Q9bnVsbDtmb3IodmFyIGcgaW4gYyljLmhhc093blByb3BlcnR5KGcpJiYoZj1jW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6UmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWYmJmxnKGUsZykpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpCYyhhKTtQZihhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkJjKGEpO1hmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiB2ZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgd2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpuZyxjcmVhdGVUZXh0Tm9kZTpvZyxzZXRJbml0aWFsUHJvcGVydGllczpwZyxkaWZmUHJvcGVydGllczpzZyx1cGRhdGVQcm9wZXJ0aWVzOnRnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6dWcsZGlmZkh5ZHJhdGVkVGV4dDp2Zyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpPZihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPXJiKGQpO2U/dm9pZCAwOkUoXCI5MFwiKTtDYyhkKTtPZihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6V2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJlNmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtuYy5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KHdnKTt2YXIgeGc9bnVsbCxNZz1udWxsO2Z1bmN0aW9uIE5nKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIE9nKGEpe2E9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbDtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZXx8IWEuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpfVxudmFyIFo9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTokZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9JGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiAkZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3hnPXRkO3ZhciBhPWRhKCk7aWYoS2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goeil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsaz0wLHE9MCx2PWEseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7diE9PWJ8fDAhPT1kJiYzIT09di5ub2RlVHlwZXx8KGc9ZitkKTt2IT09ZXx8MCE9PWMmJjMhPT12Lm5vZGVUeXBlfHwoaD1mK2MpOzM9PT12Lm5vZGVUeXBlJiYoZis9di5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9di5maXJzdENoaWxkKSlicmVhazt5PXY7dj11fWZvcig7Oyl7aWYodj09PWEpYnJlYWsgYjt5PT09YiYmKytrPT09ZCYmKGc9Zik7eT09PWUmJisrcT09PWMmJihoPWYpO2lmKG51bGwhPT0odT12Lm5leHRTaWJsaW5nKSlicmVhazt2PXk7eT12LnBhcmVudE5vZGV9dj11fWI9LTE9PT1nfHwtMT09PWg/bnVsbDpcbntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtNZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTt1ZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1NZyxiPWRhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmZmEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihLZChjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbRWIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPUpkKGMsYSk7dmFyIGY9SmQoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGc9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtnLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoZyksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGcuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShnKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2lhKGMpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPVxuYS50b3B9TWc9bnVsbDt1ZCh4Zyk7eGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPW5nKGEsYixjLGQpO2FbUV09ZTthW29iXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtwZyhhLGIsYyxkKTthOntzd2l0Y2goYil7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjphPSEhYy5hdXRvRm9jdXM7YnJlYWsgYX1hPSExfXJldHVybiBhfSxwcmVwYXJlVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIHNnKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT1cbnR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0sc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZTpmdW5jdGlvbihhLGIpe3JldHVybiEhYi5oaWRkZW59LGNyZWF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkKXthPW9nKGEsYik7YVtRXT1kO3JldHVybiBhfSxub3c6cmYsbXV0YXRpb246e2NvbW1pdE1vdW50OmZ1bmN0aW9uKGEpe2EuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtvYl09ZTt0ZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe2EudGV4dENvbnRlbnQ9XCJcIn0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsXG5iKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLFxuYil7cmV0dXJuXCJcIj09PWJ8fDMhPT1hLm5vZGVUeXBlP251bGw6YX0sZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOmZ1bmN0aW9uKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW1FdPWY7YVtvYl09YztyZXR1cm4gdWcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtRXT1jO3JldHVybiB2ZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxcbmRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6c2YsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp0Zix1c2VTeW5jU2NoZWR1bGluZzohMH0pO3JjPVouYmF0Y2hlZFVwZGF0ZXM7XG5mdW5jdGlvbiBQZyhhLGIsYyxkLGUpe05nKGMpP3ZvaWQgMDpFKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKVoudXBkYXRlQ29udGFpbmVyKGIsZixhLGUpO2Vsc2V7ZD1kfHxPZyhjKTtpZighZClmb3IoZj12b2lkIDA7Zj1jLmxhc3RDaGlsZDspYy5yZW1vdmVDaGlsZChmKTt2YXIgZz1aLmNyZWF0ZUNvbnRhaW5lcihjLGQpO2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWc7Wi51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7Wi51cGRhdGVDb250YWluZXIoYixnLGEsZSl9KX1yZXR1cm4gWi5nZXRQdWJsaWNSb290SW5zdGFuY2UoZil9ZnVuY3Rpb24gUWcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtOZyhiKT92b2lkIDA6RShcIjIwMFwiKTtyZXR1cm4gcGYoYSxiLG51bGwsYyl9XG5mdW5jdGlvbiBSZyhhLGIpe3RoaXMuX3JlYWN0Um9vdENvbnRhaW5lcj1aLmNyZWF0ZUNvbnRhaW5lcihhLGIpfVJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXtaLnVwZGF0ZUNvbnRhaW5lcihhLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGIpfTtSZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXtaLnVwZGF0ZUNvbnRhaW5lcihudWxsLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGEpfTtcbnZhciBTZz17Y3JlYXRlUG9ydGFsOlFnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFouZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RShcIjE4OFwiKTpFKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUGcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFBnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RShcIjM4XCIpOnZvaWQgMDtyZXR1cm4gUGcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7TmcoYSk/dm9pZCAwOlxuRShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFoudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe1BnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOlFnLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOnRjLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpaLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6Wi5mbHVzaFN5bmMsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOm1iLEV2ZW50UGx1Z2luUmVnaXN0cnk6VmEsRXZlbnRQcm9wYWdhdG9yczpDYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6cWMsUmVhY3RET01Db21wb25lbnRUcmVlOnNiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjp4ZH19O1xuWi5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnBiLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFRnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6U2d9KSxVZz1UZyYmU2d8fFRnO21vZHVsZS5leHBvcnRzPVVnW1wiZGVmYXVsdFwiXT9VZ1tcImRlZmF1bHRcIl06VWc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuLy8gbW9kdWxlIGlkID0gMzgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1xuLy8gbW9kdWxlIGlkID0gMzgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3Rlbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24gY2FwdHVyZSh0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHRlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZSBvbiBhICcgKyAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArICd3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICByZWdpc3RlckRlZmF1bHQ6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdCgpIHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50TGlzdGVuZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXZlbnRMaXN0ZW5lci5qc1xuLy8gbW9kdWxlIGlkID0gMzgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qc1xuLy8gbW9kdWxlIGlkID0gMzg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qc1xuLy8gbW9kdWxlIGlkID0gMzg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAzODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAzODdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAzODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBpbnB1dC90ZXh0YXJlYSB0byBmb2N1c1xuICovXG5cbmZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG4gIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuICAvLyBub3QgZW5hYmxlZCwgb3Igb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWNjZXB0IHRoZSBmb2N1cy5cIiBmb3IgYWxsIGtpbmRzIG9mXG4gIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuICB0cnkge1xuICAgIG5vZGUuZm9jdXMoKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZm9jdXNOb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAzODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib290c3RyYXAuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib290c3RyYXAuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9jc3MvYm9vdHN0cmFwLmNzc1xuLy8gbW9kdWxlIGlkID0gMzkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiFcXG4gKiBCb290c3RyYXAgdjQuMC4wIChodHRwczovL2dldGJvb3RzdHJhcC5jb20pXFxuICogQ29weXJpZ2h0IDIwMTEtMjAxOCBUaGUgQm9vdHN0cmFwIEF1dGhvcnNcXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE4IFR3aXR0ZXIsIEluYy5cXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxcbiAqL1xcbjpyb290IHtcXG4gIC0tYmx1ZTogIzAwN2JmZjtcXG4gIC0taW5kaWdvOiAjNjYxMGYyO1xcbiAgLS1wdXJwbGU6ICM2ZjQyYzE7XFxuICAtLXBpbms6ICNlODNlOGM7XFxuICAtLXJlZDogI2RjMzU0NTtcXG4gIC0tb3JhbmdlOiAjZmQ3ZTE0O1xcbiAgLS15ZWxsb3c6ICNmZmMxMDc7XFxuICAtLWdyZWVuOiAjMjhhNzQ1O1xcbiAgLS10ZWFsOiAjMjBjOTk3O1xcbiAgLS1jeWFuOiAjMTdhMmI4O1xcbiAgLS13aGl0ZTogI2ZmZjtcXG4gIC0tZ3JheTogIzZjNzU3ZDtcXG4gIC0tZ3JheS1kYXJrOiAjMzQzYTQwO1xcbiAgLS1wcmltYXJ5OiAjMDA3YmZmO1xcbiAgLS1zZWNvbmRhcnk6ICM2Yzc1N2Q7XFxuICAtLXN1Y2Nlc3M6ICMyOGE3NDU7XFxuICAtLWluZm86ICMxN2EyYjg7XFxuICAtLXdhcm5pbmc6ICNmZmMxMDc7XFxuICAtLWRhbmdlcjogI2RjMzU0NTtcXG4gIC0tbGlnaHQ6ICNmOGY5ZmE7XFxuICAtLWRhcms6ICMzNDNhNDA7XFxuICAtLWJyZWFrcG9pbnQteHM6IDA7XFxuICAtLWJyZWFrcG9pbnQtc206IDU3NnB4O1xcbiAgLS1icmVha3BvaW50LW1kOiA3NjhweDtcXG4gIC0tYnJlYWtwb2ludC1sZzogOTkycHg7XFxuICAtLWJyZWFrcG9pbnQteGw6IDEyMDBweDtcXG4gIC0tZm9udC1mYW1pbHktc2Fucy1zZXJpZjogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIjtcXG4gIC0tZm9udC1mYW1pbHktbW9ub3NwYWNlOiBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLCBcXFwiQ291cmllciBOZXdcXFwiLCBtb25vc3BhY2U7XFxufVxcblxcbiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmh0bWwge1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBsaW5lLWhlaWdodDogMS4xNTtcXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBzY3JvbGxiYXI7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG5ALW1zLXZpZXdwb3J0IHtcXG4gIHdpZHRoOiBkZXZpY2Utd2lkdGg7XFxufVxcblxcbmFydGljbGUsIGFzaWRlLCBkaWFsb2csIGZpZ2NhcHRpb24sIGZpZ3VyZSwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWFpbiwgbmF2LCBzZWN0aW9uIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG5bdGFiaW5kZXg9XFxcIi0xXFxcIl06Zm9jdXMge1xcbiAgb3V0bGluZTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG5ociB7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIGhlaWdodDogMDtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxufVxcblxcbnAge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxufVxcblxcbmFiYnJbdGl0bGVdLFxcbmFiYnJbZGF0YS1vcmlnaW5hbC10aXRsZV0ge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcXG4gIGN1cnNvcjogaGVscDtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxufVxcblxcbmFkZHJlc3Mge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbn1cXG5cXG5vbCxcXG51bCxcXG5kbCB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG59XFxuXFxub2wgb2wsXFxudWwgdWwsXFxub2wgdWwsXFxudWwgb2wge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuZHQge1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxuZGQge1xcbiAgbWFyZ2luLWJvdHRvbTogLjVyZW07XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuYmxvY2txdW90ZSB7XFxuICBtYXJnaW46IDAgMCAxcmVtO1xcbn1cXG5cXG5kZm4ge1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG5cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZGVyO1xcbn1cXG5cXG5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XFxuXFxuc3ViLFxcbnN1cCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBmb250LXNpemU6IDc1JTtcXG4gIGxpbmUtaGVpZ2h0OiAwO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG5zdWIge1xcbiAgYm90dG9tOiAtLjI1ZW07XFxufVxcblxcbnN1cCB7XFxuICB0b3A6IC0uNWVtO1xcbn1cXG5cXG5hIHtcXG4gIGNvbG9yOiAjMDA3YmZmO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzO1xcbn1cXG5cXG5hOmhvdmVyIHtcXG4gIGNvbG9yOiAjMDA1NmIzO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbmE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG5hOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKTpob3ZlciwgYTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSk6Zm9jdXMge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbmE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pOmZvY3VzIHtcXG4gIG91dGxpbmU6IDA7XFxufVxcblxcbnByZSxcXG5jb2RlLFxcbmtiZCxcXG5zYW1wIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbn1cXG5cXG5wcmUge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogc2Nyb2xsYmFyO1xcbn1cXG5cXG5maWd1cmUge1xcbiAgbWFyZ2luOiAwIDAgMXJlbTtcXG59XFxuXFxuaW1nIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxufVxcblxcbnN2Zzpub3QoOnJvb3QpIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbnRhYmxlIHtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcblxcbmNhcHRpb24ge1xcbiAgcGFkZGluZy10b3A6IDAuNzVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC43NXJlbTtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGNhcHRpb24tc2lkZTogYm90dG9tO1xcbn1cXG5cXG50aCB7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbn1cXG5cXG5sYWJlbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcXG59XFxuXFxuYnV0dG9uIHtcXG4gIGJvcmRlci1yYWRpdXM6IDA7XFxufVxcblxcbmJ1dHRvbjpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggZG90dGVkO1xcbiAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO1xcbn1cXG5cXG5pbnB1dCxcXG5idXR0b24sXFxuc2VsZWN0LFxcbm9wdGdyb3VwLFxcbnRleHRhcmVhIHtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxufVxcblxcbmJ1dHRvbixcXG5pbnB1dCB7XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG59XFxuXFxuYnV0dG9uLFxcbnNlbGVjdCB7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG59XFxuXFxuYnV0dG9uLFxcbmh0bWwgW3R5cGU9XFxcImJ1dHRvblxcXCJdLFxcblt0eXBlPVxcXCJyZXNldFxcXCJdLFxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcXG59XFxuXFxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxcblt0eXBlPVxcXCJidXR0b25cXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwicmVzZXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwic3VibWl0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJkYXRlXFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwidGltZVxcXCJdLFxcbmlucHV0W3R5cGU9XFxcImRhdGV0aW1lLWxvY2FsXFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwibW9udGhcXFwiXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGxpc3Rib3g7XFxufVxcblxcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG59XFxuXFxuZmllbGRzZXQge1xcbiAgbWluLXdpZHRoOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxubGVnZW5kIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogLjVyZW07XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbn1cXG5cXG5wcm9ncmVzcyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcblt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG5bdHlwZT1cXFwic2VhcmNoXFxcIl0ge1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcXG5bdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcXG59XFxuXFxub3V0cHV0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuc3VtbWFyeSB7XFxuICBkaXNwbGF5OiBsaXN0LWl0ZW07XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbnRlbXBsYXRlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbltoaWRkZW5dIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNixcXG4uaDEsIC5oMiwgLmgzLCAuaDQsIC5oNSwgLmg2IHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XFxuICBjb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuaDEsIC5oMSB7XFxuICBmb250LXNpemU6IDIuNXJlbTtcXG59XFxuXFxuaDIsIC5oMiB7XFxuICBmb250LXNpemU6IDJyZW07XFxufVxcblxcbmgzLCAuaDMge1xcbiAgZm9udC1zaXplOiAxLjc1cmVtO1xcbn1cXG5cXG5oNCwgLmg0IHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG5cXG5oNSwgLmg1IHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuXFxuaDYsIC5oNiB7XFxuICBmb250LXNpemU6IDFyZW07XFxufVxcblxcbi5sZWFkIHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxufVxcblxcbi5kaXNwbGF5LTEge1xcbiAgZm9udC1zaXplOiA2cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XFxufVxcblxcbi5kaXNwbGF5LTIge1xcbiAgZm9udC1zaXplOiA1LjVyZW07XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuMjtcXG59XFxuXFxuLmRpc3BsYXktMyB7XFxuICBmb250LXNpemU6IDQuNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBsaW5lLWhlaWdodDogMS4yO1xcbn1cXG5cXG4uZGlzcGxheS00IHtcXG4gIGZvbnQtc2l6ZTogMy41cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XFxufVxcblxcbmhyIHtcXG4gIG1hcmdpbi10b3A6IDFyZW07XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgYm9yZGVyOiAwO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTtcXG59XFxuXFxuc21hbGwsXFxuLnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogODAlO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxubWFyayxcXG4ubWFyayB7XFxuICBwYWRkaW5nOiAwLjJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmY2Y4ZTM7XFxufVxcblxcbi5saXN0LXVuc3R5bGVkIHtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbi5saXN0LWlubGluZSB7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4ubGlzdC1pbmxpbmUtaXRlbSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5saXN0LWlubGluZS1pdGVtOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07XFxufVxcblxcbi5pbml0aWFsaXNtIHtcXG4gIGZvbnQtc2l6ZTogOTAlO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG59XFxuXFxuLmJsb2NrcXVvdGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuXFxuLmJsb2NrcXVvdGUtZm9vdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiA4MCU7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG59XFxuXFxuLmJsb2NrcXVvdGUtZm9vdGVyOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFwyMDE0ICAgXFxcXEEwXFxcIjtcXG59XFxuXFxuLmltZy1mbHVpZCB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi5pbWctdGh1bWJuYWlsIHtcXG4gIHBhZGRpbmc6IDAuMjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZTJlNjtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi5maWd1cmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uZmlndXJlLWltZyB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG59XFxuXFxuLmZpZ3VyZS1jYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogOTAlO1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbmNvZGUsXFxua2JkLFxcbnByZSxcXG5zYW1wIHtcXG4gIGZvbnQtZmFtaWx5OiBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLCBcXFwiQ291cmllciBOZXdcXFwiLCBtb25vc3BhY2U7XFxufVxcblxcbmNvZGUge1xcbiAgZm9udC1zaXplOiA4Ny41JTtcXG4gIGNvbG9yOiAjZTgzZThjO1xcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcXG59XFxuXFxuYSA+IGNvZGUge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbmtiZCB7XFxuICBwYWRkaW5nOiAwLjJyZW0gMC40cmVtO1xcbiAgZm9udC1zaXplOiA4Ny41JTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxMjUyOTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMnJlbTtcXG59XFxuXFxua2JkIGtiZCB7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1zaXplOiAxMDAlO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxucHJlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiA4Ny41JTtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbn1cXG5cXG5wcmUgY29kZSB7XFxuICBmb250LXNpemU6IGluaGVyaXQ7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIHdvcmQtYnJlYWs6IG5vcm1hbDtcXG59XFxuXFxuLnByZS1zY3JvbGxhYmxlIHtcXG4gIG1heC1oZWlnaHQ6IDM0MHB4O1xcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbn1cXG5cXG4uY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZy1yaWdodDogMTVweDtcXG4gIHBhZGRpbmctbGVmdDogMTVweDtcXG4gIG1hcmdpbi1yaWdodDogYXV0bztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDU0MHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDcyMHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDk2MHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiAxMTQwcHg7XFxuICB9XFxufVxcblxcbi5jb250YWluZXItZmx1aWQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxufVxcblxcbi5yb3cge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC13cmFwOiB3cmFwO1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgbWFyZ2luLXJpZ2h0OiAtMTVweDtcXG4gIG1hcmdpbi1sZWZ0OiAtMTVweDtcXG59XFxuXFxuLm5vLWd1dHRlcnMge1xcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxufVxcblxcbi5uby1ndXR0ZXJzID4gLmNvbCxcXG4ubm8tZ3V0dGVycyA+IFtjbGFzcyo9XFxcImNvbC1cXFwiXSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbn1cXG5cXG4uY29sLTEsIC5jb2wtMiwgLmNvbC0zLCAuY29sLTQsIC5jb2wtNSwgLmNvbC02LCAuY29sLTcsIC5jb2wtOCwgLmNvbC05LCAuY29sLTEwLCAuY29sLTExLCAuY29sLTEyLCAuY29sLFxcbi5jb2wtYXV0bywgLmNvbC1zbS0xLCAuY29sLXNtLTIsIC5jb2wtc20tMywgLmNvbC1zbS00LCAuY29sLXNtLTUsIC5jb2wtc20tNiwgLmNvbC1zbS03LCAuY29sLXNtLTgsIC5jb2wtc20tOSwgLmNvbC1zbS0xMCwgLmNvbC1zbS0xMSwgLmNvbC1zbS0xMiwgLmNvbC1zbSxcXG4uY29sLXNtLWF1dG8sIC5jb2wtbWQtMSwgLmNvbC1tZC0yLCAuY29sLW1kLTMsIC5jb2wtbWQtNCwgLmNvbC1tZC01LCAuY29sLW1kLTYsIC5jb2wtbWQtNywgLmNvbC1tZC04LCAuY29sLW1kLTksIC5jb2wtbWQtMTAsIC5jb2wtbWQtMTEsIC5jb2wtbWQtMTIsIC5jb2wtbWQsXFxuLmNvbC1tZC1hdXRvLCAuY29sLWxnLTEsIC5jb2wtbGctMiwgLmNvbC1sZy0zLCAuY29sLWxnLTQsIC5jb2wtbGctNSwgLmNvbC1sZy02LCAuY29sLWxnLTcsIC5jb2wtbGctOCwgLmNvbC1sZy05LCAuY29sLWxnLTEwLCAuY29sLWxnLTExLCAuY29sLWxnLTEyLCAuY29sLWxnLFxcbi5jb2wtbGctYXV0bywgLmNvbC14bC0xLCAuY29sLXhsLTIsIC5jb2wteGwtMywgLmNvbC14bC00LCAuY29sLXhsLTUsIC5jb2wteGwtNiwgLmNvbC14bC03LCAuY29sLXhsLTgsIC5jb2wteGwtOSwgLmNvbC14bC0xMCwgLmNvbC14bC0xMSwgLmNvbC14bC0xMiwgLmNvbC14bCxcXG4uY29sLXhsLWF1dG8ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtaW4taGVpZ2h0OiAxcHg7XFxuICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xcbn1cXG5cXG4uY29sIHtcXG4gIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAwO1xcbiAgZmxleC1iYXNpczogMDtcXG4gIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAtbXMtZmxleC1wb3NpdGl2ZTogMTtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG59XFxuXFxuLmNvbC1hdXRvIHtcXG4gIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAtbXMtZmxleDogMCAwIGF1dG87XFxuICBmbGV4OiAwIDAgYXV0bztcXG4gIHdpZHRoOiBhdXRvO1xcbiAgbWF4LXdpZHRoOiBub25lO1xcbn1cXG5cXG4uY29sLTEge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgZmxleDogMCAwIDguMzMzMzMzJTtcXG4gIG1heC13aWR0aDogOC4zMzMzMzMlO1xcbn1cXG5cXG4uY29sLTIge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gIGZsZXg6IDAgMCAxNi42NjY2NjclO1xcbiAgbWF4LXdpZHRoOiAxNi42NjY2NjclO1xcbn1cXG5cXG4uY29sLTMge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgMjUlO1xcbiAgZmxleDogMCAwIDI1JTtcXG4gIG1heC13aWR0aDogMjUlO1xcbn1cXG5cXG4uY29sLTQge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgMzMuMzMzMzMzJTtcXG4gIGZsZXg6IDAgMCAzMy4zMzMzMzMlO1xcbiAgbWF4LXdpZHRoOiAzMy4zMzMzMzMlO1xcbn1cXG5cXG4uY29sLTUge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gIGZsZXg6IDAgMCA0MS42NjY2NjclO1xcbiAgbWF4LXdpZHRoOiA0MS42NjY2NjclO1xcbn1cXG5cXG4uY29sLTYge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgNTAlO1xcbiAgZmxleDogMCAwIDUwJTtcXG4gIG1heC13aWR0aDogNTAlO1xcbn1cXG5cXG4uY29sLTcge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgNTguMzMzMzMzJTtcXG4gIGZsZXg6IDAgMCA1OC4zMzMzMzMlO1xcbiAgbWF4LXdpZHRoOiA1OC4zMzMzMzMlO1xcbn1cXG5cXG4uY29sLTgge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gIGZsZXg6IDAgMCA2Ni42NjY2NjclO1xcbiAgbWF4LXdpZHRoOiA2Ni42NjY2NjclO1xcbn1cXG5cXG4uY29sLTkge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgNzUlO1xcbiAgZmxleDogMCAwIDc1JTtcXG4gIG1heC13aWR0aDogNzUlO1xcbn1cXG5cXG4uY29sLTEwIHtcXG4gIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAtbXMtZmxleDogMCAwIDgzLjMzMzMzMyU7XFxuICBmbGV4OiAwIDAgODMuMzMzMzMzJTtcXG4gIG1heC13aWR0aDogODMuMzMzMzMzJTtcXG59XFxuXFxuLmNvbC0xMSB7XFxuICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgLW1zLWZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgZmxleDogMCAwIDkxLjY2NjY2NyU7XFxuICBtYXgtd2lkdGg6IDkxLjY2NjY2NyU7XFxufVxcblxcbi5jb2wtMTIge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gIC1tcy1mbGV4OiAwIDAgMTAwJTtcXG4gIGZsZXg6IDAgMCAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ub3JkZXItZmlyc3Qge1xcbiAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMDtcXG4gIC1tcy1mbGV4LW9yZGVyOiAtMTtcXG4gIG9yZGVyOiAtMTtcXG59XFxuXFxuLm9yZGVyLWxhc3Qge1xcbiAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMTQ7XFxuICAtbXMtZmxleC1vcmRlcjogMTM7XFxuICBvcmRlcjogMTM7XFxufVxcblxcbi5vcmRlci0wIHtcXG4gIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDE7XFxuICAtbXMtZmxleC1vcmRlcjogMDtcXG4gIG9yZGVyOiAwO1xcbn1cXG5cXG4ub3JkZXItMSB7XFxuICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAyO1xcbiAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICBvcmRlcjogMTtcXG59XFxuXFxuLm9yZGVyLTIge1xcbiAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMztcXG4gIC1tcy1mbGV4LW9yZGVyOiAyO1xcbiAgb3JkZXI6IDI7XFxufVxcblxcbi5vcmRlci0zIHtcXG4gIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDQ7XFxuICAtbXMtZmxleC1vcmRlcjogMztcXG4gIG9yZGVyOiAzO1xcbn1cXG5cXG4ub3JkZXItNCB7XFxuICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA1O1xcbiAgLW1zLWZsZXgtb3JkZXI6IDQ7XFxuICBvcmRlcjogNDtcXG59XFxuXFxuLm9yZGVyLTUge1xcbiAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogNjtcXG4gIC1tcy1mbGV4LW9yZGVyOiA1O1xcbiAgb3JkZXI6IDU7XFxufVxcblxcbi5vcmRlci02IHtcXG4gIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDc7XFxuICAtbXMtZmxleC1vcmRlcjogNjtcXG4gIG9yZGVyOiA2O1xcbn1cXG5cXG4ub3JkZXItNyB7XFxuICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA4O1xcbiAgLW1zLWZsZXgtb3JkZXI6IDc7XFxuICBvcmRlcjogNztcXG59XFxuXFxuLm9yZGVyLTgge1xcbiAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogOTtcXG4gIC1tcy1mbGV4LW9yZGVyOiA4O1xcbiAgb3JkZXI6IDg7XFxufVxcblxcbi5vcmRlci05IHtcXG4gIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDEwO1xcbiAgLW1zLWZsZXgtb3JkZXI6IDk7XFxuICBvcmRlcjogOTtcXG59XFxuXFxuLm9yZGVyLTEwIHtcXG4gIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDExO1xcbiAgLW1zLWZsZXgtb3JkZXI6IDEwO1xcbiAgb3JkZXI6IDEwO1xcbn1cXG5cXG4ub3JkZXItMTEge1xcbiAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMTI7XFxuICAtbXMtZmxleC1vcmRlcjogMTE7XFxuICBvcmRlcjogMTE7XFxufVxcblxcbi5vcmRlci0xMiB7XFxuICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMztcXG4gIC1tcy1mbGV4LW9yZGVyOiAxMjtcXG4gIG9yZGVyOiAxMjtcXG59XFxuXFxuLm9mZnNldC0xIHtcXG4gIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMyU7XFxufVxcblxcbi5vZmZzZXQtMiB7XFxuICBtYXJnaW4tbGVmdDogMTYuNjY2NjY3JTtcXG59XFxuXFxuLm9mZnNldC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAyNSU7XFxufVxcblxcbi5vZmZzZXQtNCB7XFxuICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzJTtcXG59XFxuXFxuLm9mZnNldC01IHtcXG4gIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjclO1xcbn1cXG5cXG4ub2Zmc2V0LTYge1xcbiAgbWFyZ2luLWxlZnQ6IDUwJTtcXG59XFxuXFxuLm9mZnNldC03IHtcXG4gIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMlO1xcbn1cXG5cXG4ub2Zmc2V0LTgge1xcbiAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NyU7XFxufVxcblxcbi5vZmZzZXQtOSB7XFxuICBtYXJnaW4tbGVmdDogNzUlO1xcbn1cXG5cXG4ub2Zmc2V0LTEwIHtcXG4gIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMlO1xcbn1cXG5cXG4ub2Zmc2V0LTExIHtcXG4gIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjclO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5jb2wtc20ge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMDtcXG4gICAgZmxleC1iYXNpczogMDtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLmNvbC1zbS1hdXRvIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgd2lkdGg6IGF1dG87XFxuICAgIG1heC13aWR0aDogbm9uZTtcXG4gIH1cXG4gIC5jb2wtc20tMSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtc20tMiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDE2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtc20tMyB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMjUlO1xcbiAgICBmbGV4OiAwIDAgMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2wtc20tNCB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMzMuMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDMzLjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtc20tNSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDQxLjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtc20tNiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTAlO1xcbiAgICBmbGV4OiAwIDAgNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2wtc20tNyB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTguMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDU4LjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogNTguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtc20tOCB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDY2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtc20tOSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNzUlO1xcbiAgICBmbGV4OiAwIDAgNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2wtc20tMTAge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDgzLjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDgzLjMzMzMzMyU7XFxuICB9XFxuICAuY29sLXNtLTExIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgOTEuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC1zbS0xMiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTAwJTtcXG4gICAgZmxleDogMCAwIDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5vcmRlci1zbS1maXJzdCB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDA7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAtMTtcXG4gICAgb3JkZXI6IC0xO1xcbiAgfVxcbiAgLm9yZGVyLXNtLWxhc3Qge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxNDtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEzO1xcbiAgICBvcmRlcjogMTM7XFxuICB9XFxuICAub3JkZXItc20tMCB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDE7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAwO1xcbiAgICBvcmRlcjogMDtcXG4gIH1cXG4gIC5vcmRlci1zbS0xIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbiAgLm9yZGVyLXNtLTIge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAzO1xcbiAgICAtbXMtZmxleC1vcmRlcjogMjtcXG4gICAgb3JkZXI6IDI7XFxuICB9XFxuICAub3JkZXItc20tMyB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDQ7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAzO1xcbiAgICBvcmRlcjogMztcXG4gIH1cXG4gIC5vcmRlci1zbS00IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogNTtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDQ7XFxuICAgIG9yZGVyOiA0O1xcbiAgfVxcbiAgLm9yZGVyLXNtLTUge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA2O1xcbiAgICAtbXMtZmxleC1vcmRlcjogNTtcXG4gICAgb3JkZXI6IDU7XFxuICB9XFxuICAub3JkZXItc20tNiB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDc7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA2O1xcbiAgICBvcmRlcjogNjtcXG4gIH1cXG4gIC5vcmRlci1zbS03IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogODtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDc7XFxuICAgIG9yZGVyOiA3O1xcbiAgfVxcbiAgLm9yZGVyLXNtLTgge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA5O1xcbiAgICAtbXMtZmxleC1vcmRlcjogODtcXG4gICAgb3JkZXI6IDg7XFxuICB9XFxuICAub3JkZXItc20tOSB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDEwO1xcbiAgICAtbXMtZmxleC1vcmRlcjogOTtcXG4gICAgb3JkZXI6IDk7XFxuICB9XFxuICAub3JkZXItc20tMTAge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMTtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEwO1xcbiAgICBvcmRlcjogMTA7XFxuICB9XFxuICAub3JkZXItc20tMTEge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDExO1xcbiAgICBvcmRlcjogMTE7XFxuICB9XFxuICAub3JkZXItc20tMTIge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMztcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEyO1xcbiAgICBvcmRlcjogMTI7XFxuICB9XFxuICAub2Zmc2V0LXNtLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG4gIC5vZmZzZXQtc20tMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LXNtLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQtc20tMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAub2Zmc2V0LXNtLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQtc20tNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC1zbS02IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5vZmZzZXQtc20tNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1zbS04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LXNtLTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLm9mZnNldC1zbS0xMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1zbS0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjclO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5jb2wtbWQge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMDtcXG4gICAgZmxleC1iYXNpczogMDtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLmNvbC1tZC1hdXRvIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgd2lkdGg6IGF1dG87XFxuICAgIG1heC13aWR0aDogbm9uZTtcXG4gIH1cXG4gIC5jb2wtbWQtMSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbWQtMiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDE2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbWQtMyB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMjUlO1xcbiAgICBmbGV4OiAwIDAgMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2wtbWQtNCB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMzMuMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDMzLjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbWQtNSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDQxLjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbWQtNiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTAlO1xcbiAgICBmbGV4OiAwIDAgNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2wtbWQtNyB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTguMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDU4LjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogNTguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbWQtOCB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDY2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbWQtOSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNzUlO1xcbiAgICBmbGV4OiAwIDAgNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2wtbWQtMTAge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDgzLjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDgzLjMzMzMzMyU7XFxuICB9XFxuICAuY29sLW1kLTExIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgOTEuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC1tZC0xMiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTAwJTtcXG4gICAgZmxleDogMCAwIDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5vcmRlci1tZC1maXJzdCB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDA7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAtMTtcXG4gICAgb3JkZXI6IC0xO1xcbiAgfVxcbiAgLm9yZGVyLW1kLWxhc3Qge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxNDtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEzO1xcbiAgICBvcmRlcjogMTM7XFxuICB9XFxuICAub3JkZXItbWQtMCB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDE7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAwO1xcbiAgICBvcmRlcjogMDtcXG4gIH1cXG4gIC5vcmRlci1tZC0xIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbiAgLm9yZGVyLW1kLTIge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAzO1xcbiAgICAtbXMtZmxleC1vcmRlcjogMjtcXG4gICAgb3JkZXI6IDI7XFxuICB9XFxuICAub3JkZXItbWQtMyB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDQ7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAzO1xcbiAgICBvcmRlcjogMztcXG4gIH1cXG4gIC5vcmRlci1tZC00IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogNTtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDQ7XFxuICAgIG9yZGVyOiA0O1xcbiAgfVxcbiAgLm9yZGVyLW1kLTUge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA2O1xcbiAgICAtbXMtZmxleC1vcmRlcjogNTtcXG4gICAgb3JkZXI6IDU7XFxuICB9XFxuICAub3JkZXItbWQtNiB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDc7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA2O1xcbiAgICBvcmRlcjogNjtcXG4gIH1cXG4gIC5vcmRlci1tZC03IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogODtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDc7XFxuICAgIG9yZGVyOiA3O1xcbiAgfVxcbiAgLm9yZGVyLW1kLTgge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA5O1xcbiAgICAtbXMtZmxleC1vcmRlcjogODtcXG4gICAgb3JkZXI6IDg7XFxuICB9XFxuICAub3JkZXItbWQtOSB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDEwO1xcbiAgICAtbXMtZmxleC1vcmRlcjogOTtcXG4gICAgb3JkZXI6IDk7XFxuICB9XFxuICAub3JkZXItbWQtMTAge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMTtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEwO1xcbiAgICBvcmRlcjogMTA7XFxuICB9XFxuICAub3JkZXItbWQtMTEge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDExO1xcbiAgICBvcmRlcjogMTE7XFxuICB9XFxuICAub3JkZXItbWQtMTIge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMztcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEyO1xcbiAgICBvcmRlcjogMTI7XFxuICB9XFxuICAub2Zmc2V0LW1kLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LW1kLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAub2Zmc2V0LW1kLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC1tZC02IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5vZmZzZXQtbWQtNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1tZC04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LW1kLTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLm9mZnNldC1tZC0xMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1tZC0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjclO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5jb2wtbGcge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMDtcXG4gICAgZmxleC1iYXNpczogMDtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLmNvbC1sZy1hdXRvIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgd2lkdGg6IGF1dG87XFxuICAgIG1heC13aWR0aDogbm9uZTtcXG4gIH1cXG4gIC5jb2wtbGctMSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgOC4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbGctMiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDE2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbGctMyB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMjUlO1xcbiAgICBmbGV4OiAwIDAgMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2wtbGctNCB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMzMuMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDMzLjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbGctNSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNDEuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDQxLjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbGctNiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTAlO1xcbiAgICBmbGV4OiAwIDAgNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2wtbGctNyB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNTguMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDU4LjMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogNTguMzMzMzMzJTtcXG4gIH1cXG4gIC5jb2wtbGctOCB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNjYuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDY2LjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wtbGctOSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgNzUlO1xcbiAgICBmbGV4OiAwIDAgNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2wtbGctMTAge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDgzLjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDgzLjMzMzMzMyU7XFxuICB9XFxuICAuY29sLWxnLTExIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCA5MS42NjY2NjclO1xcbiAgICBmbGV4OiAwIDAgOTEuNjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjclO1xcbiAgfVxcbiAgLmNvbC1sZy0xMiB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgMTAwJTtcXG4gICAgZmxleDogMCAwIDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5vcmRlci1sZy1maXJzdCB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDA7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAtMTtcXG4gICAgb3JkZXI6IC0xO1xcbiAgfVxcbiAgLm9yZGVyLWxnLWxhc3Qge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxNDtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEzO1xcbiAgICBvcmRlcjogMTM7XFxuICB9XFxuICAub3JkZXItbGctMCB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDE7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAwO1xcbiAgICBvcmRlcjogMDtcXG4gIH1cXG4gIC5vcmRlci1sZy0xIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbiAgLm9yZGVyLWxnLTIge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAzO1xcbiAgICAtbXMtZmxleC1vcmRlcjogMjtcXG4gICAgb3JkZXI6IDI7XFxuICB9XFxuICAub3JkZXItbGctMyB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDQ7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAzO1xcbiAgICBvcmRlcjogMztcXG4gIH1cXG4gIC5vcmRlci1sZy00IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogNTtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDQ7XFxuICAgIG9yZGVyOiA0O1xcbiAgfVxcbiAgLm9yZGVyLWxnLTUge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA2O1xcbiAgICAtbXMtZmxleC1vcmRlcjogNTtcXG4gICAgb3JkZXI6IDU7XFxuICB9XFxuICAub3JkZXItbGctNiB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDc7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA2O1xcbiAgICBvcmRlcjogNjtcXG4gIH1cXG4gIC5vcmRlci1sZy03IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogODtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDc7XFxuICAgIG9yZGVyOiA3O1xcbiAgfVxcbiAgLm9yZGVyLWxnLTgge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA5O1xcbiAgICAtbXMtZmxleC1vcmRlcjogODtcXG4gICAgb3JkZXI6IDg7XFxuICB9XFxuICAub3JkZXItbGctOSB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDEwO1xcbiAgICAtbXMtZmxleC1vcmRlcjogOTtcXG4gICAgb3JkZXI6IDk7XFxuICB9XFxuICAub3JkZXItbGctMTAge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMTtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEwO1xcbiAgICBvcmRlcjogMTA7XFxuICB9XFxuICAub3JkZXItbGctMTEge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDExO1xcbiAgICBvcmRlcjogMTE7XFxuICB9XFxuICAub3JkZXItbGctMTIge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMztcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDEyO1xcbiAgICBvcmRlcjogMTI7XFxuICB9XFxuICAub2Zmc2V0LWxnLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG4gIC5vZmZzZXQtbGctMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LWxnLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQtbGctMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAub2Zmc2V0LWxnLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQtbGctNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC1sZy02IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5vZmZzZXQtbGctNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1sZy04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LWxnLTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLm9mZnNldC1sZy0xMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC1sZy0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjclO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuY29sLXhsIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICAgIGZsZXgtYmFzaXM6IDA7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2wteGwtYXV0byB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgYXV0bztcXG4gICAgZmxleDogMCAwIGF1dG87XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICBtYXgtd2lkdGg6IG5vbmU7XFxuICB9XFxuICAuY29sLXhsLTEge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDguMzMzMzMzJTtcXG4gICAgZmxleDogMCAwIDguMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA4LjMzMzMzMyU7XFxuICB9XFxuICAuY29sLXhsLTIge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDE2LjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCAxNi42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDE2LjY2NjY2NyU7XFxuICB9XFxuICAuY29sLXhsLTMge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDI1JTtcXG4gICAgZmxleDogMCAwIDI1JTtcXG4gICAgbWF4LXdpZHRoOiAyNSU7XFxuICB9XFxuICAuY29sLXhsLTQge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDMzLjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCAzMy4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDMzLjMzMzMzMyU7XFxuICB9XFxuICAuY29sLXhsLTUge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDQxLjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCA0MS42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDQxLjY2NjY2NyU7XFxuICB9XFxuICAuY29sLXhsLTYge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDUwJTtcXG4gICAgZmxleDogMCAwIDUwJTtcXG4gICAgbWF4LXdpZHRoOiA1MCU7XFxuICB9XFxuICAuY29sLXhsLTcge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDU4LjMzMzMzMyU7XFxuICAgIGZsZXg6IDAgMCA1OC4zMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDU4LjMzMzMzMyU7XFxuICB9XFxuICAuY29sLXhsLTgge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDY2LjY2NjY2NyU7XFxuICAgIGZsZXg6IDAgMCA2Ni42NjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDY2LjY2NjY2NyU7XFxuICB9XFxuICAuY29sLXhsLTkge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDc1JTtcXG4gICAgZmxleDogMCAwIDc1JTtcXG4gICAgbWF4LXdpZHRoOiA3NSU7XFxuICB9XFxuICAuY29sLXhsLTEwIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCA4My4zMzMzMzMlO1xcbiAgICBmbGV4OiAwIDAgODMuMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA4My4zMzMzMzMlO1xcbiAgfVxcbiAgLmNvbC14bC0xMSB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgOTEuNjY2NjY3JTtcXG4gICAgZmxleDogMCAwIDkxLjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogOTEuNjY2NjY3JTtcXG4gIH1cXG4gIC5jb2wteGwtMTIge1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgICAtbXMtZmxleDogMCAwIDEwMCU7XFxuICAgIGZsZXg6IDAgMCAxMDAlO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7XFxuICB9XFxuICAub3JkZXIteGwtZmlyc3Qge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAwO1xcbiAgICAtbXMtZmxleC1vcmRlcjogLTE7XFxuICAgIG9yZGVyOiAtMTtcXG4gIH1cXG4gIC5vcmRlci14bC1sYXN0IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMTQ7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMztcXG4gICAgb3JkZXI6IDEzO1xcbiAgfVxcbiAgLm9yZGVyLXhsLTAge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxO1xcbiAgICAtbXMtZmxleC1vcmRlcjogMDtcXG4gICAgb3JkZXI6IDA7XFxuICB9XFxuICAub3JkZXIteGwtMSB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDI7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxO1xcbiAgICBvcmRlcjogMTtcXG4gIH1cXG4gIC5vcmRlci14bC0yIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMztcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDI7XFxuICAgIG9yZGVyOiAyO1xcbiAgfVxcbiAgLm9yZGVyLXhsLTMge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA0O1xcbiAgICAtbXMtZmxleC1vcmRlcjogMztcXG4gICAgb3JkZXI6IDM7XFxuICB9XFxuICAub3JkZXIteGwtNCB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDU7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA0O1xcbiAgICBvcmRlcjogNDtcXG4gIH1cXG4gIC5vcmRlci14bC01IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogNjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDU7XFxuICAgIG9yZGVyOiA1O1xcbiAgfVxcbiAgLm9yZGVyLXhsLTYge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiA3O1xcbiAgICAtbXMtZmxleC1vcmRlcjogNjtcXG4gICAgb3JkZXI6IDY7XFxuICB9XFxuICAub3JkZXIteGwtNyB7XFxuICAgIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDg7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiA3O1xcbiAgICBvcmRlcjogNztcXG4gIH1cXG4gIC5vcmRlci14bC04IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogOTtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDg7XFxuICAgIG9yZGVyOiA4O1xcbiAgfVxcbiAgLm9yZGVyLXhsLTkge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAxMDtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDk7XFxuICAgIG9yZGVyOiA5O1xcbiAgfVxcbiAgLm9yZGVyLXhsLTEwIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMTE7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMDtcXG4gICAgb3JkZXI6IDEwO1xcbiAgfVxcbiAgLm9yZGVyLXhsLTExIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMTI7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMTtcXG4gICAgb3JkZXI6IDExO1xcbiAgfVxcbiAgLm9yZGVyLXhsLTEyIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMTM7XFxuICAgIC1tcy1mbGV4LW9yZGVyOiAxMjtcXG4gICAgb3JkZXI6IDEyO1xcbiAgfVxcbiAgLm9mZnNldC14bC0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7XFxuICB9XFxuICAub2Zmc2V0LXhsLTEge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMlO1xcbiAgfVxcbiAgLm9mZnNldC14bC0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NyU7XFxuICB9XFxuICAub2Zmc2V0LXhsLTMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcbiAgLm9mZnNldC14bC00IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMyU7XFxuICB9XFxuICAub2Zmc2V0LXhsLTUge1xcbiAgICBtYXJnaW4tbGVmdDogNDEuNjY2NjY3JTtcXG4gIH1cXG4gIC5vZmZzZXQteGwtNiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICB9XFxuICAub2Zmc2V0LXhsLTcge1xcbiAgICBtYXJnaW4tbGVmdDogNTguMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQteGwtOCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjclO1xcbiAgfVxcbiAgLm9mZnNldC14bC05IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTtcXG4gIH1cXG4gIC5vZmZzZXQteGwtMTAge1xcbiAgICBtYXJnaW4tbGVmdDogODMuMzMzMzMzJTtcXG4gIH1cXG4gIC5vZmZzZXQteGwtMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY3JTtcXG4gIH1cXG59XFxuXFxuLnRhYmxlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4udGFibGUgdGgsXFxuLnRhYmxlIHRkIHtcXG4gIHBhZGRpbmc6IDAuNzVyZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZWUyZTY7XFxufVxcblxcbi50YWJsZSB0aGVhZCB0aCB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNkZWUyZTY7XFxufVxcblxcbi50YWJsZSB0Ym9keSArIHRib2R5IHtcXG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjZGVlMmU2O1xcbn1cXG5cXG4udGFibGUgLnRhYmxlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcblxcbi50YWJsZS1zbSB0aCxcXG4udGFibGUtc20gdGQge1xcbiAgcGFkZGluZzogMC4zcmVtO1xcbn1cXG5cXG4udGFibGUtYm9yZGVyZWQge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZTJlNjtcXG59XFxuXFxuLnRhYmxlLWJvcmRlcmVkIHRoLFxcbi50YWJsZS1ib3JkZXJlZCB0ZCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGVlMmU2O1xcbn1cXG5cXG4udGFibGUtYm9yZGVyZWQgdGhlYWQgdGgsXFxuLnRhYmxlLWJvcmRlcmVkIHRoZWFkIHRkIHtcXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDJweDtcXG59XFxuXFxuLnRhYmxlLXN0cmlwZWQgdGJvZHkgdHI6bnRoLW9mLXR5cGUob2RkKSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDUpO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgdGJvZHkgdHI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxufVxcblxcbi50YWJsZS1wcmltYXJ5LFxcbi50YWJsZS1wcmltYXJ5ID4gdGgsXFxuLnRhYmxlLXByaW1hcnkgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjhkYWZmO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLXByaW1hcnk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlmY2RmZjtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1wcmltYXJ5OmhvdmVyID4gdGQsXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1wcmltYXJ5OmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzlmY2RmZjtcXG59XFxuXFxuLnRhYmxlLXNlY29uZGFyeSxcXG4udGFibGUtc2Vjb25kYXJ5ID4gdGgsXFxuLnRhYmxlLXNlY29uZGFyeSA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNmQ4ZGI7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtc2Vjb25kYXJ5OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjOGNiY2Y7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtc2Vjb25kYXJ5OmhvdmVyID4gdGQsXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1zZWNvbmRhcnk6aG92ZXIgPiB0aCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzhjYmNmO1xcbn1cXG5cXG4udGFibGUtc3VjY2VzcyxcXG4udGFibGUtc3VjY2VzcyA+IHRoLFxcbi50YWJsZS1zdWNjZXNzID4gdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2MzZTZjYjtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1zdWNjZXNzOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiMWRmYmI7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtc3VjY2Vzczpob3ZlciA+IHRkLFxcbi50YWJsZS1ob3ZlciAudGFibGUtc3VjY2Vzczpob3ZlciA+IHRoIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiMWRmYmI7XFxufVxcblxcbi50YWJsZS1pbmZvLFxcbi50YWJsZS1pbmZvID4gdGgsXFxuLnRhYmxlLWluZm8gPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmVlNWViO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWluZm86aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FiZGRlNTtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1pbmZvOmhvdmVyID4gdGQsXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1pbmZvOmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FiZGRlNTtcXG59XFxuXFxuLnRhYmxlLXdhcm5pbmcsXFxuLnRhYmxlLXdhcm5pbmcgPiB0aCxcXG4udGFibGUtd2FybmluZyA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmVlYmE7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtd2FybmluZzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlOGExO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLXdhcm5pbmc6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLXdhcm5pbmc6aG92ZXIgPiB0aCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlOGExO1xcbn1cXG5cXG4udGFibGUtZGFuZ2VyLFxcbi50YWJsZS1kYW5nZXIgPiB0aCxcXG4udGFibGUtZGFuZ2VyID4gdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1YzZjYjtcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1kYW5nZXI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YxYjBiNztcXG59XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1kYW5nZXI6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLWRhbmdlcjpob3ZlciA+IHRoIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWIwYjc7XFxufVxcblxcbi50YWJsZS1saWdodCxcXG4udGFibGUtbGlnaHQgPiB0aCxcXG4udGFibGUtbGlnaHQgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmZGZlO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWxpZ2h0OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlY2VjZjY7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtbGlnaHQ6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLWxpZ2h0OmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjZWNmNjtcXG59XFxuXFxuLnRhYmxlLWRhcmssXFxuLnRhYmxlLWRhcmsgPiB0aCxcXG4udGFibGUtZGFyayA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjNmM4Y2E7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtZGFyazpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjliYmJlO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWRhcms6aG92ZXIgPiB0ZCxcXG4udGFibGUtaG92ZXIgLnRhYmxlLWRhcms6aG92ZXIgPiB0aCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjliYmJlO1xcbn1cXG5cXG4udGFibGUtYWN0aXZlLFxcbi50YWJsZS1hY3RpdmUgPiB0aCxcXG4udGFibGUtYWN0aXZlID4gdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxufVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtYWN0aXZlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNzUpO1xcbn1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLWFjdGl2ZTpob3ZlciA+IHRkLFxcbi50YWJsZS1ob3ZlciAudGFibGUtYWN0aXZlOmhvdmVyID4gdGgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxufVxcblxcbi50YWJsZSAudGhlYWQtZGFyayB0aCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTI1Mjk7XFxuICBib3JkZXItY29sb3I6ICMzMjM4M2U7XFxufVxcblxcbi50YWJsZSAudGhlYWQtbGlnaHQgdGgge1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgYm9yZGVyLWNvbG9yOiAjZGVlMmU2O1xcbn1cXG5cXG4udGFibGUtZGFyayB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTI1Mjk7XFxufVxcblxcbi50YWJsZS1kYXJrIHRoLFxcbi50YWJsZS1kYXJrIHRkLFxcbi50YWJsZS1kYXJrIHRoZWFkIHRoIHtcXG4gIGJvcmRlci1jb2xvcjogIzMyMzgzZTtcXG59XFxuXFxuLnRhYmxlLWRhcmsudGFibGUtYm9yZGVyZWQge1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4udGFibGUtZGFyay50YWJsZS1zdHJpcGVkIHRib2R5IHRyOm50aC1vZi10eXBlKG9kZCkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KTtcXG59XFxuXFxuLnRhYmxlLWRhcmsudGFibGUtaG92ZXIgdGJvZHkgdHI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA3NSk7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA1NzUuOThweCkge1xcbiAgLnRhYmxlLXJlc3BvbnNpdmUtc20ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiAtbXMtYXV0b2hpZGluZy1zY3JvbGxiYXI7XFxuICB9XFxuICAudGFibGUtcmVzcG9uc2l2ZS1zbSA+IC50YWJsZS1ib3JkZXJlZCB7XFxuICAgIGJvcmRlcjogMDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDc2Ny45OHB4KSB7XFxuICAudGFibGUtcmVzcG9uc2l2ZS1tZCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgb3ZlcmZsb3cteDogYXV0bztcXG4gICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgICAtbXMtb3ZlcmZsb3ctc3R5bGU6IC1tcy1hdXRvaGlkaW5nLXNjcm9sbGJhcjtcXG4gIH1cXG4gIC50YWJsZS1yZXNwb25zaXZlLW1kID4gLnRhYmxlLWJvcmRlcmVkIHtcXG4gICAgYm9yZGVyOiAwO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogOTkxLjk4cHgpIHtcXG4gIC50YWJsZS1yZXNwb25zaXZlLWxnIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogLW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyO1xcbiAgfVxcbiAgLnRhYmxlLXJlc3BvbnNpdmUtbGcgPiAudGFibGUtYm9yZGVyZWQge1xcbiAgICBib3JkZXI6IDA7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMTk5Ljk4cHgpIHtcXG4gIC50YWJsZS1yZXNwb25zaXZlLXhsIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogLW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyO1xcbiAgfVxcbiAgLnRhYmxlLXJlc3BvbnNpdmUteGwgPiAudGFibGUtYm9yZGVyZWQge1xcbiAgICBib3JkZXI6IDA7XFxuICB9XFxufVxcblxcbi50YWJsZS1yZXNwb25zaXZlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiAtbXMtYXV0b2hpZGluZy1zY3JvbGxiYXI7XFxufVxcblxcbi50YWJsZS1yZXNwb25zaXZlID4gLnRhYmxlLWJvcmRlcmVkIHtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuLmZvcm0tY29udHJvbCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NlZDRkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4xNXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi5mb3JtLWNvbnRyb2w6Oi1tcy1leHBhbmQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbi5mb3JtLWNvbnRyb2w6Zm9jdXMge1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjODBiZGZmO1xcbiAgb3V0bGluZTogMDtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTtcXG59XFxuXFxuLmZvcm0tY29udHJvbDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5mb3JtLWNvbnRyb2w6Oi1tb3otcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5mb3JtLWNvbnRyb2w6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5mb3JtLWNvbnRyb2w6OnBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmZvcm0tY29udHJvbDpkaXNhYmxlZCwgLmZvcm0tY29udHJvbFtyZWFkb25seV0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbnNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pIHtcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXG59XFxuXFxuc2VsZWN0LmZvcm0tY29udHJvbDpmb2N1czo6LW1zLXZhbHVlIHtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmZvcm0tY29udHJvbC1maWxlLFxcbi5mb3JtLWNvbnRyb2wtcmFuZ2Uge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmNvbC1mb3JtLWxhYmVsIHtcXG4gIHBhZGRpbmctdG9wOiBjYWxjKDAuMzc1cmVtICsgMXB4KTtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuMzc1cmVtICsgMXB4KTtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBmb250LXNpemU6IGluaGVyaXQ7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG4uY29sLWZvcm0tbGFiZWwtbGcge1xcbiAgcGFkZGluZy10b3A6IGNhbGMoMC41cmVtICsgMXB4KTtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuNXJlbSArIDFweCk7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG4uY29sLWZvcm0tbGFiZWwtc20ge1xcbiAgcGFkZGluZy10b3A6IGNhbGMoMC4yNXJlbSArIDFweCk7XFxuICBwYWRkaW5nLWJvdHRvbTogY2FsYygwLjI1cmVtICsgMXB4KTtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG4uZm9ybS1jb250cm9sLXBsYWludGV4dCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZy10b3A6IDAuMzc1cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuMzc1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItd2lkdGg6IDFweCAwO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sLXBsYWludGV4dC5mb3JtLWNvbnRyb2wtc20sIC5pbnB1dC1ncm91cC1zbSA+IC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0LmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0LmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0LmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuZm9ybS1jb250cm9sLXBsYWludGV4dC5idG4sXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0LmJ0biwgLmZvcm0tY29udHJvbC1wbGFpbnRleHQuZm9ybS1jb250cm9sLWxnLCAuaW5wdXQtZ3JvdXAtbGcgPiAuZm9ybS1jb250cm9sLXBsYWludGV4dC5mb3JtLWNvbnRyb2wsXFxuLmlucHV0LWdyb3VwLWxnID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuZm9ybS1jb250cm9sLXBsYWludGV4dC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuZm9ybS1jb250cm9sLXBsYWludGV4dC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1wcmVwZW5kID4gLmZvcm0tY29udHJvbC1wbGFpbnRleHQuYnRuLFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuZm9ybS1jb250cm9sLXBsYWludGV4dC5idG4ge1xcbiAgcGFkZGluZy1yaWdodDogMDtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG59XFxuXFxuLmZvcm0tY29udHJvbC1zbSwgLmlucHV0LWdyb3VwLXNtID4gLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cC1zbSA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5idG4sXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5idG4ge1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMnJlbTtcXG59XFxuXFxuc2VsZWN0LmZvcm0tY29udHJvbC1zbTpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSksIC5pbnB1dC1ncm91cC1zbSA+IHNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pLFxcbi5pbnB1dC1ncm91cC1zbSA+IC5pbnB1dC1ncm91cC1wcmVwZW5kID4gc2VsZWN0LmlucHV0LWdyb3VwLXRleHQ6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pLFxcbi5pbnB1dC1ncm91cC1zbSA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiBzZWxlY3QuaW5wdXQtZ3JvdXAtdGV4dDpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSksXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiBzZWxlY3QuYnRuOm5vdChbc2l6ZV0pOm5vdChbbXVsdGlwbGVdKSxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuaW5wdXQtZ3JvdXAtYXBwZW5kID4gc2VsZWN0LmJ0bjpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xcbiAgaGVpZ2h0OiBjYWxjKDEuODEyNXJlbSArIDJweCk7XFxufVxcblxcbi5mb3JtLWNvbnRyb2wtbGcsIC5pbnB1dC1ncm91cC1sZyA+IC5mb3JtLWNvbnRyb2wsXFxuLmlucHV0LWdyb3VwLWxnID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kID4gLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLWxnID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuYnRuLFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuYnRuIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuc2VsZWN0LmZvcm0tY29udHJvbC1sZzpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSksIC5pbnB1dC1ncm91cC1sZyA+IHNlbGVjdC5mb3JtLWNvbnRyb2w6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pLFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1wcmVwZW5kID4gc2VsZWN0LmlucHV0LWdyb3VwLXRleHQ6bm90KFtzaXplXSk6bm90KFttdWx0aXBsZV0pLFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiBzZWxlY3QuaW5wdXQtZ3JvdXAtdGV4dDpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSksXFxuLmlucHV0LWdyb3VwLWxnID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiBzZWxlY3QuYnRuOm5vdChbc2l6ZV0pOm5vdChbbXVsdGlwbGVdKSxcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kID4gc2VsZWN0LmJ0bjpub3QoW3NpemVdKTpub3QoW211bHRpcGxlXSkge1xcbiAgaGVpZ2h0OiBjYWxjKDIuODc1cmVtICsgMnB4KTtcXG59XFxuXFxuLmZvcm0tZ3JvdXAge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG59XFxuXFxuLmZvcm0tdGV4dCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW07XFxufVxcblxcbi5mb3JtLXJvdyB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBtYXJnaW4tcmlnaHQ6IC01cHg7XFxuICBtYXJnaW4tbGVmdDogLTVweDtcXG59XFxuXFxuLmZvcm0tcm93ID4gLmNvbCxcXG4uZm9ybS1yb3cgPiBbY2xhc3MqPVxcXCJjb2wtXFxcIl0ge1xcbiAgcGFkZGluZy1yaWdodDogNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XFxufVxcblxcbi5mb3JtLWNoZWNrIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZy1sZWZ0OiAxLjI1cmVtO1xcbn1cXG5cXG4uZm9ybS1jaGVjay1pbnB1dCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBtYXJnaW4tdG9wOiAwLjNyZW07XFxuICBtYXJnaW4tbGVmdDogLTEuMjVyZW07XFxufVxcblxcbi5mb3JtLWNoZWNrLWlucHV0OmRpc2FibGVkIH4gLmZvcm0tY2hlY2stbGFiZWwge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5mb3JtLWNoZWNrLWxhYmVsIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5mb3JtLWNoZWNrLWlubGluZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1ib3g7XFxuICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3g7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIG1hcmdpbi1yaWdodDogMC43NXJlbTtcXG59XFxuXFxuLmZvcm0tY2hlY2staW5saW5lIC5mb3JtLWNoZWNrLWlucHV0IHtcXG4gIHBvc2l0aW9uOiBzdGF0aWM7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjMxMjVyZW07XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuLnZhbGlkLWZlZWRiYWNrIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW07XFxuICBmb250LXNpemU6IDgwJTtcXG4gIGNvbG9yOiAjMjhhNzQ1O1xcbn1cXG5cXG4udmFsaWQtdG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwMCU7XFxuICB6LWluZGV4OiA1O1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IC41cmVtO1xcbiAgbWFyZ2luLXRvcDogLjFyZW07XFxuICBmb250LXNpemU6IC44NzVyZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0MCwgMTY3LCA2OSwgMC44KTtcXG4gIGJvcmRlci1yYWRpdXM6IC4ycmVtO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOnZhbGlkLCAuZm9ybS1jb250cm9sLmlzLXZhbGlkLCAud2FzLXZhbGlkYXRlZFxcbi5jdXN0b20tc2VsZWN0OnZhbGlkLFxcbi5jdXN0b20tc2VsZWN0LmlzLXZhbGlkIHtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDp2YWxpZDpmb2N1cywgLmZvcm0tY29udHJvbC5pcy12YWxpZDpmb2N1cywgLndhcy12YWxpZGF0ZWRcXG4uY3VzdG9tLXNlbGVjdDp2YWxpZDpmb2N1cyxcXG4uY3VzdG9tLXNlbGVjdC5pcy12YWxpZDpmb2N1cyB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSg0MCwgMTY3LCA2OSwgMC4yNSk7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDp2YWxpZCB+IC52YWxpZC10b29sdGlwLCAuZm9ybS1jb250cm9sLmlzLXZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi5mb3JtLWNvbnRyb2wuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCwgLndhcy12YWxpZGF0ZWRcXG4uY3VzdG9tLXNlbGVjdDp2YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZFxcbi5jdXN0b20tc2VsZWN0OnZhbGlkIH4gLnZhbGlkLXRvb2x0aXAsXFxuLmN1c3RvbS1zZWxlY3QuaXMtdmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLmN1c3RvbS1zZWxlY3QuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6dmFsaWQgfiAuZm9ybS1jaGVjay1sYWJlbCwgLmZvcm0tY2hlY2staW5wdXQuaXMtdmFsaWQgfiAuZm9ybS1jaGVjay1sYWJlbCB7XFxuICBjb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6dmFsaWQgfiAudmFsaWQtdG9vbHRpcCwgLmZvcm0tY2hlY2staW5wdXQuaXMtdmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLmZvcm0tY2hlY2staW5wdXQuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWwge1xcbiAgY29sb3I6ICMyOGE3NDU7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDp2YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzFkZDhhO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkIH4gLnZhbGlkLXRvb2x0aXAsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkOmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkOmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzRjZTU3O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkOmZvY3VzIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICNmZmYsIDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjI1KTtcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkIH4gLmN1c3RvbS1maWxlLWxhYmVsLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQgfiAuY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWZpbGUtbGFiZWw6OmJlZm9yZSwgLmN1c3RvbS1maWxlLWlucHV0LmlzLXZhbGlkIH4gLmN1c3RvbS1maWxlLWxhYmVsOjpiZWZvcmUge1xcbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkIH4gLnZhbGlkLXRvb2x0aXAsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4uY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkOmZvY3VzIH4gLmN1c3RvbS1maWxlLWxhYmVsLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuMjUpO1xcbn1cXG5cXG4uaW52YWxpZC1mZWVkYmFjayB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtO1xcbiAgZm9udC1zaXplOiA4MCU7XFxuICBjb2xvcjogI2RjMzU0NTtcXG59XFxuXFxuLmludmFsaWQtdG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwMCU7XFxuICB6LWluZGV4OiA1O1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IC41cmVtO1xcbiAgbWFyZ2luLXRvcDogLjFyZW07XFxuICBmb250LXNpemU6IC44NzVyZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMjAsIDUzLCA2OSwgMC44KTtcXG4gIGJvcmRlci1yYWRpdXM6IC4ycmVtO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWQsIC5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZCwgLndhcy12YWxpZGF0ZWRcXG4uY3VzdG9tLXNlbGVjdDppbnZhbGlkLFxcbi5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQge1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWQ6Zm9jdXMsIC5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZDpmb2N1cywgLndhcy12YWxpZGF0ZWRcXG4uY3VzdG9tLXNlbGVjdDppbnZhbGlkOmZvY3VzLFxcbi5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQ6Zm9jdXMge1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIwLCA1MywgNjksIDAuMjUpO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLCAuZm9ybS1jb250cm9sLmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4uZm9ybS1jb250cm9sLmlzLWludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLCAud2FzLXZhbGlkYXRlZFxcbi5jdXN0b20tc2VsZWN0OmludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZFxcbi5jdXN0b20tc2VsZWN0OmludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLFxcbi5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4uY3VzdG9tLXNlbGVjdC5pcy1pbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6aW52YWxpZCB+IC5mb3JtLWNoZWNrLWxhYmVsLCAuZm9ybS1jaGVjay1pbnB1dC5pcy1pbnZhbGlkIH4gLmZvcm0tY2hlY2stbGFiZWwge1xcbiAgY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OmludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jaGVjay1pbnB1dDppbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCwgLmZvcm0tY2hlY2staW5wdXQuaXMtaW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi5mb3JtLWNoZWNrLWlucHV0LmlzLWludmFsaWQgfiAuaW52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbCwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLWludmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWwge1xcbiAgY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmYTJhOTtcXG59XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OmludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLWludmFsaWQgfiAuaW52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkOmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTQ2MDZkO1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZDpmb2N1cyB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZDpmb2N1cyB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDFweCAjZmZmLCAwIDAgMCAwLjJyZW0gcmdiYSgyMjAsIDUzLCA2OSwgMC4yNSk7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkIH4gLmN1c3RvbS1maWxlLWxhYmVsLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtaW52YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkIH4gLmN1c3RvbS1maWxlLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy1pbnZhbGlkIH4gLmN1c3RvbS1maWxlLWxhYmVsOjpiZWZvcmUge1xcbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6aW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCwgLmN1c3RvbS1maWxlLWlucHV0LmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4uY3VzdG9tLWZpbGUtaW5wdXQuaXMtaW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkOmZvY3VzIH4gLmN1c3RvbS1maWxlLWxhYmVsLCAuY3VzdG9tLWZpbGUtaW5wdXQuaXMtaW52YWxpZDpmb2N1cyB+IC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyMjAsIDUzLCA2OSwgMC4yNSk7XFxufVxcblxcbi5mb3JtLWlubGluZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZmxvdzogcm93IHdyYXA7XFxuICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZm9ybS1pbmxpbmUgLmZvcm0tY2hlY2sge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLmZvcm0taW5saW5lIGxhYmVsIHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmZvcm0tZ3JvdXAge1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgIC1tcy1mbGV4OiAwIDAgYXV0bztcXG4gICAgZmxleDogMCAwIGF1dG87XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgIC1tcy1mbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgfVxcbiAgLmZvcm0taW5saW5lIC5mb3JtLWNvbnRyb2wge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgfVxcbiAgLmZvcm0taW5saW5lIC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0IHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgfVxcbiAgLmZvcm0taW5saW5lIC5pbnB1dC1ncm91cCB7XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgfVxcbiAgLmZvcm0taW5saW5lIC5mb3JtLWNoZWNrIHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmZvcm0tY2hlY2staW5wdXQge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG1hcmdpbi10b3A6IDA7XFxuICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbTtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7XFxuICB9XFxuICAuZm9ybS1pbmxpbmUgLmN1c3RvbS1jb250cm9sIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgfVxcbiAgLmZvcm0taW5saW5lIC5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICB9XFxufVxcblxcbi5idG4ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbiAgdHJhbnNpdGlvbjogY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcXG59XFxuXFxuLmJ0bjpob3ZlciwgLmJ0bjpmb2N1cyB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5idG46Zm9jdXMsIC5idG4uZm9jdXMge1xcbiAgb3V0bGluZTogMDtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTtcXG59XFxuXFxuLmJ0bi5kaXNhYmxlZCwgLmJ0bjpkaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAwLjY1O1xcbn1cXG5cXG4uYnRuOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmJ0bjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG46bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxufVxcblxcbmEuYnRuLmRpc2FibGVkLFxcbmZpZWxkc2V0OmRpc2FibGVkIGEuYnRuIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uYnRuLXByaW1hcnkge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uYnRuLXByaW1hcnk6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2OWQ5O1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA2MmNjO1xcbn1cXG5cXG4uYnRuLXByaW1hcnk6Zm9jdXMsIC5idG4tcHJpbWFyeS5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC41KTtcXG59XFxuXFxuLmJ0bi1wcmltYXJ5LmRpc2FibGVkLCAuYnRuLXByaW1hcnk6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1wcmltYXJ5LmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDYyY2M7XFxuICBib3JkZXItY29sb3I6ICMwMDVjYmY7XFxufVxcblxcbi5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjUpO1xcbn1cXG5cXG4uYnRuLXNlY29uZGFyeSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2Yzc1N2Q7XFxuICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5idG4tc2Vjb25kYXJ5OmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVhNjI2ODtcXG4gIGJvcmRlci1jb2xvcjogIzU0NWI2MjtcXG59XFxuXFxuLmJ0bi1zZWNvbmRhcnk6Zm9jdXMsIC5idG4tc2Vjb25kYXJ5LmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDEwOCwgMTE3LCAxMjUsIDAuNSk7XFxufVxcblxcbi5idG4tc2Vjb25kYXJ5LmRpc2FibGVkLCAuYnRuLXNlY29uZGFyeTpkaXNhYmxlZCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2Yzc1N2Q7XFxuICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5idG4tc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1zZWNvbmRhcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0NWI2MjtcXG4gIGJvcmRlci1jb2xvcjogIzRlNTU1YjtcXG59XFxuXFxuLmJ0bi1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMTA4LCAxMTcsIDEyNSwgMC41KTtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxODgzODtcXG4gIGJvcmRlci1jb2xvcjogIzFlN2UzNDtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzOmZvY3VzLCAuYnRuLXN1Y2Nlc3MuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuNSk7XFxufVxcblxcbi5idG4tc3VjY2Vzcy5kaXNhYmxlZCwgLmJ0bi1zdWNjZXNzOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLmJ0bi1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tc3VjY2Vzcy5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWU3ZTM0O1xcbiAgYm9yZGVyLWNvbG9yOiAjMWM3NDMwO1xcbn1cXG5cXG4uYnRuLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1zdWNjZXNzLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSg0MCwgMTY3LCA2OSwgMC41KTtcXG59XFxuXFxuLmJ0bi1pbmZvIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODtcXG4gIGJvcmRlci1jb2xvcjogIzE3YTJiODtcXG59XFxuXFxuLmJ0bi1pbmZvOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzEzODQ5NjtcXG4gIGJvcmRlci1jb2xvcjogIzExN2E4YjtcXG59XFxuXFxuLmJ0bi1pbmZvOmZvY3VzLCAuYnRuLWluZm8uZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWluZm8uZGlzYWJsZWQsIC5idG4taW5mbzpkaXNhYmxlZCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjg7XFxuICBib3JkZXItY29sb3I6ICMxN2EyYjg7XFxufVxcblxcbi5idG4taW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4taW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuLnNob3cgPiAuYnRuLWluZm8uZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzExN2E4YjtcXG4gIGJvcmRlci1jb2xvcjogIzEwNzA3ZjtcXG59XFxuXFxuLmJ0bi1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4uc2hvdyA+IC5idG4taW5mby5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpO1xcbn1cXG5cXG4uYnRuLXdhcm5pbmcge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3O1xcbn1cXG5cXG4uYnRuLXdhcm5pbmc6aG92ZXIge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBhODAwO1xcbiAgYm9yZGVyLWNvbG9yOiAjZDM5ZTAwO1xcbn1cXG5cXG4uYnRuLXdhcm5pbmc6Zm9jdXMsIC5idG4td2FybmluZy5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyNTUsIDE5MywgNywgMC41KTtcXG59XFxuXFxuLmJ0bi13YXJuaW5nLmRpc2FibGVkLCAuYnRuLXdhcm5pbmc6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3O1xcbn1cXG5cXG4uYnRuLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi13YXJuaW5nLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkMzllMDA7XFxuICBib3JkZXItY29sb3I6ICNjNjk1MDA7XFxufVxcblxcbi5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDI1NSwgMTkzLCA3LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWRhbmdlciB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYzM1NDU7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi5idG4tZGFuZ2VyOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2M4MjMzMztcXG4gIGJvcmRlci1jb2xvcjogI2JkMjEzMDtcXG59XFxuXFxuLmJ0bi1kYW5nZXI6Zm9jdXMsIC5idG4tZGFuZ2VyLmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWRhbmdlci5kaXNhYmxlZCwgLmJ0bi1kYW5nZXI6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4uYnRuLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tZGFuZ2VyLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiZDIxMzA7XFxuICBib3JkZXItY29sb3I6ICNiMjFmMmQ7XFxufVxcblxcbi5idG4tZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1kYW5nZXIuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLWxpZ2h0IHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTtcXG59XFxuXFxuLmJ0bi1saWdodDpob3ZlciB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlMmU2ZWE7XFxuICBib3JkZXItY29sb3I6ICNkYWUwZTU7XFxufVxcblxcbi5idG4tbGlnaHQ6Zm9jdXMsIC5idG4tbGlnaHQuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTtcXG59XFxuXFxuLmJ0bi1saWdodC5kaXNhYmxlZCwgLmJ0bi1saWdodDpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XFxuICBib3JkZXItY29sb3I6ICNmOGY5ZmE7XFxufVxcblxcbi5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tbGlnaHQuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhZTBlNTtcXG4gIGJvcmRlci1jb2xvcjogI2QzZDlkZjtcXG59XFxuXFxuLmJ0bi1saWdodDpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1saWdodC5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTtcXG59XFxuXFxuLmJ0bi1kYXJrIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDtcXG4gIGJvcmRlci1jb2xvcjogIzM0M2E0MDtcXG59XFxuXFxuLmJ0bi1kYXJrOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzMjcyYjtcXG4gIGJvcmRlci1jb2xvcjogIzFkMjEyNDtcXG59XFxuXFxuLmJ0bi1kYXJrOmZvY3VzLCAuYnRuLWRhcmsuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNTIsIDU4LCA2NCwgMC41KTtcXG59XFxuXFxuLmJ0bi1kYXJrLmRpc2FibGVkLCAuYnRuLWRhcms6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcbiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwO1xcbn1cXG5cXG4uYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1kYXJrLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZDIxMjQ7XFxuICBib3JkZXItY29sb3I6ICMxNzFhMWQ7XFxufVxcblxcbi5idG4tZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLWRhcmsuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDUyLCA1OCwgNjQsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1wcmltYXJ5IHtcXG4gIGNvbG9yOiAjMDA3YmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtcHJpbWFyeTpob3ZlciB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICBib3JkZXItY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5idG4tb3V0bGluZS1wcmltYXJ5OmZvY3VzLCAuYnRuLW91dGxpbmUtcHJpbWFyeS5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXByaW1hcnkuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1wcmltYXJ5OmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjMDA3YmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS1wcmltYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gIGJvcmRlci1jb2xvcjogIzAwN2JmZjtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtcHJpbWFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1zZWNvbmRhcnkge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5idG4tb3V0bGluZS1zZWNvbmRhcnk6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xcbiAgYm9yZGVyLWNvbG9yOiAjNmM3NTdkO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc2Vjb25kYXJ5OmZvY3VzLCAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5LmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDEwOCwgMTE3LCAxMjUsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1zZWNvbmRhcnkuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1zZWNvbmRhcnk6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tb3V0bGluZS1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xcbiAgYm9yZGVyLWNvbG9yOiAjNmM3NTdkO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5LmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgxMDgsIDExNywgMTI1LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc3VjY2VzcyB7XFxuICBjb2xvcjogIzI4YTc0NTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc3VjY2Vzczpmb2N1cywgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1zdWNjZXNzLmRpc2FibGVkLCAuYnRuLW91dGxpbmUtc3VjY2VzczpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzI4YTc0NTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tb3V0bGluZS1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1zdWNjZXNzLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyOGE3NDU7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxufVxcblxcbi5idG4tb3V0bGluZS1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mbyB7XFxuICBjb2xvcjogIzE3YTJiODtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogIzE3YTJiODtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWluZm86aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xcbiAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mbzpmb2N1cywgLmJ0bi1vdXRsaW5lLWluZm8uZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mby5kaXNhYmxlZCwgLmJ0bi1vdXRsaW5lLWluZm86ZGlzYWJsZWQge1xcbiAgY29sb3I6ICMxN2EyYjg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLW91dGxpbmUtaW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtaW5mby5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xcbiAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtaW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tb3V0bGluZS1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1pbmZvLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyMywgMTYyLCAxODQsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS13YXJuaW5nIHtcXG4gIGNvbG9yOiAjZmZjMTA3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtd2FybmluZzpob3ZlciB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDc7XFxuICBib3JkZXItY29sb3I6ICNmZmMxMDc7XFxufVxcblxcbi5idG4tb3V0bGluZS13YXJuaW5nOmZvY3VzLCAuYnRuLW91dGxpbmUtd2FybmluZy5mb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyNTUsIDE5MywgNywgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXdhcm5pbmcuZGlzYWJsZWQsIC5idG4tb3V0bGluZS13YXJuaW5nOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjZmZjMTA3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS13YXJuaW5nOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNztcXG4gIGJvcmRlci1jb2xvcjogI2ZmYzEwNztcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtd2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtd2FybmluZy5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjU1LCAxOTMsIDcsIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYW5nZXIge1xcbiAgY29sb3I6ICNkYzM1NDU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYW5nZXI6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFuZ2VyOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFuZ2VyLmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFuZ2VyLmRpc2FibGVkLCAuYnRuLW91dGxpbmUtZGFuZ2VyOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjZGMzNTQ1O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLW91dGxpbmUtZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1kYW5nZXIuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLWRhbmdlci5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIwLCA1MywgNjksIDAuNSk7XFxufVxcblxcbi5idG4tb3V0bGluZS1saWdodCB7XFxuICBjb2xvcjogI2Y4ZjlmYTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0OmhvdmVyIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0OmZvY3VzLCAuYnRuLW91dGxpbmUtbGlnaHQuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0LmRpc2FibGVkLCAuYnRuLW91dGxpbmUtbGlnaHQ6ZGlzYWJsZWQge1xcbiAgY29sb3I6ICNmOGY5ZmE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4uc2hvdyA+IC5idG4tb3V0bGluZS1saWdodC5kcm9wZG93bi10b2dnbGUge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbiAgYm9yZGVyLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLWxpZ2h0LmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyNDgsIDI0OSwgMjUwLCAwLjUpO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFyayB7XFxuICBjb2xvcjogIzM0M2E0MDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1jb2xvcjogIzM0M2E0MDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhcms6aG92ZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcbiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwO1xcbn1cXG5cXG4uYnRuLW91dGxpbmUtZGFyazpmb2N1cywgLmJ0bi1vdXRsaW5lLWRhcmsuZm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNTIsIDU4LCA2NCwgMC41KTtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhcmsuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1kYXJrOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjMzQzYTQwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5idG4tb3V0bGluZS1kYXJrOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbi5zaG93ID4gLmJ0bi1vdXRsaW5lLWRhcmsuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDtcXG4gIGJvcmRlci1jb2xvcjogIzM0M2E0MDtcXG59XFxuXFxuLmJ0bi1vdXRsaW5lLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuLnNob3cgPiAuYnRuLW91dGxpbmUtZGFyay5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNTIsIDU4LCA2NCwgMC41KTtcXG59XFxuXFxuLmJ0bi1saW5rIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjb2xvcjogIzAwN2JmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uYnRuLWxpbms6aG92ZXIge1xcbiAgY29sb3I6ICMwMDU2YjM7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmJ0bi1saW5rOmZvY3VzLCAuYnRuLWxpbmsuZm9jdXMge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuXFxuLmJ0bi1saW5rOmRpc2FibGVkLCAuYnRuLWxpbmsuZGlzYWJsZWQge1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxufVxcblxcbi5idG4tbGcsIC5idG4tZ3JvdXAtbGcgPiAuYnRuIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLmJ0bi1zbSwgLmJ0bi1ncm91cC1zbSA+IC5idG4ge1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMnJlbTtcXG59XFxuXFxuLmJ0bi1ibG9jayB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uYnRuLWJsb2NrICsgLmJ0bi1ibG9jayB7XFxuICBtYXJnaW4tdG9wOiAwLjVyZW07XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInN1Ym1pdFxcXCJdLmJ0bi1ibG9jayxcXG5pbnB1dFt0eXBlPVxcXCJyZXNldFxcXCJdLmJ0bi1ibG9jayxcXG5pbnB1dFt0eXBlPVxcXCJidXR0b25cXFwiXS5idG4tYmxvY2sge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5mYWRlIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMTVzIGxpbmVhcjtcXG59XFxuXFxuLmZhZGUuc2hvdyB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uY29sbGFwc2Uge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmNvbGxhcHNlLnNob3cge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbnRyLmNvbGxhcHNlLnNob3cge1xcbiAgZGlzcGxheTogdGFibGUtcm93O1xcbn1cXG5cXG50Ym9keS5jb2xsYXBzZS5zaG93IHtcXG4gIGRpc3BsYXk6IHRhYmxlLXJvdy1ncm91cDtcXG59XFxuXFxuLmNvbGxhcHNpbmcge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiAwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRyYW5zaXRpb246IGhlaWdodCAwLjM1cyBlYXNlO1xcbn1cXG5cXG4uZHJvcHVwLFxcbi5kcm9wZG93biB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjU1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogMC4yNTVlbTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLXRvcDogMC4zZW0gc29saWQ7XFxuICBib3JkZXItcmlnaHQ6IDAuM2VtIHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWJvdHRvbTogMDtcXG4gIGJvcmRlci1sZWZ0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmRyb3Bkb3duLXRvZ2dsZTplbXB0eTo6YWZ0ZXIge1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxufVxcblxcbi5kcm9wZG93bi1tZW51IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTAwJTtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDAwO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgbWluLXdpZHRoOiAxMHJlbTtcXG4gIHBhZGRpbmc6IDAuNXJlbSAwO1xcbiAgbWFyZ2luOiAwLjEyNXJlbSAwIDA7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmRyb3B1cCAuZHJvcGRvd24tbWVudSB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMC4xMjVyZW07XFxufVxcblxcbi5kcm9wdXAgLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBtYXJnaW4tbGVmdDogMC4yNTVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjI1NWVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItdG9wOiAwO1xcbiAgYm9yZGVyLXJpZ2h0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDAuM2VtIHNvbGlkO1xcbiAgYm9yZGVyLWxlZnQ6IDAuM2VtIHNvbGlkIHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uZHJvcHVwIC5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi1tZW51IHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tbGVmdDogMC4xMjVyZW07XFxufVxcblxcbi5kcm9wcmlnaHQgLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBtYXJnaW4tbGVmdDogMC4yNTVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjI1NWVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItdG9wOiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDAuM2VtIHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWxlZnQ6IDAuM2VtIHNvbGlkO1xcbn1cXG5cXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAwO1xcbn1cXG5cXG4uZHJvcGxlZnQgLmRyb3Bkb3duLW1lbnUge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1yaWdodDogMC4xMjVyZW07XFxufVxcblxcbi5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1NWVtO1xcbiAgdmVydGljYWwtYWxpZ246IDAuMjU1ZW07XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG59XFxuXFxuLmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOjpiZWZvcmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjU1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogMC4yNTVlbTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLXRvcDogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmlnaHQ6IDAuM2VtIHNvbGlkO1xcbiAgYm9yZGVyLWJvdHRvbTogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOmVtcHR5OjphZnRlciB7XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuLmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmJlZm9yZSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogMDtcXG59XFxuXFxuLmRyb3Bkb3duLWRpdmlkZXIge1xcbiAgaGVpZ2h0OiAwO1xcbiAgbWFyZ2luOiAwLjVyZW0gMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U5ZWNlZjtcXG59XFxuXFxuLmRyb3Bkb3duLWl0ZW0ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMS41cmVtO1xcbiAgY2xlYXI6IGJvdGg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4uZHJvcGRvd24taXRlbTpob3ZlciwgLmRyb3Bkb3duLWl0ZW06Zm9jdXMge1xcbiAgY29sb3I6ICMxNjE4MWI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbn1cXG5cXG4uZHJvcGRvd24taXRlbS5hY3RpdmUsIC5kcm9wZG93bi1pdGVtOmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5kcm9wZG93bi1pdGVtLmRpc2FibGVkLCAuZHJvcGRvd24taXRlbTpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uZHJvcGRvd24tbWVudS5zaG93IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uZHJvcGRvd24taGVhZGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMC41cmVtIDEuNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG5cXG4uYnRuLWdyb3VwLFxcbi5idG4tZ3JvdXAtdmVydGljYWwge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtYm94O1xcbiAgZGlzcGxheTogLW1zLWlubGluZS1mbGV4Ym94O1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG5cXG4uYnRuLWdyb3VwID4gLmJ0bixcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0biB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgLW1zLWZsZXg6IDAgMSBhdXRvO1xcbiAgZmxleDogMCAxIGF1dG87XFxufVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOmhvdmVyLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuOmhvdmVyIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOmZvY3VzLCAuYnRuLWdyb3VwID4gLmJ0bjphY3RpdmUsIC5idG4tZ3JvdXAgPiAuYnRuLmFjdGl2ZSxcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bjpmb2N1cyxcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bjphY3RpdmUsXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4uYWN0aXZlIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5idG4tZ3JvdXAgLmJ0biArIC5idG4sXFxuLmJ0bi1ncm91cCAuYnRuICsgLmJ0bi1ncm91cCxcXG4uYnRuLWdyb3VwIC5idG4tZ3JvdXAgKyAuYnRuLFxcbi5idG4tZ3JvdXAgLmJ0bi1ncm91cCArIC5idG4tZ3JvdXAsXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCAuYnRuICsgLmJ0bixcXG4uYnRuLWdyb3VwLXZlcnRpY2FsIC5idG4gKyAuYnRuLWdyb3VwLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgLmJ0bi1ncm91cCArIC5idG4sXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCAuYnRuLWdyb3VwICsgLmJ0bi1ncm91cCB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLmJ0bi10b29sYmFyIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIC13ZWJraXQtYm94LXBhY2s6IHN0YXJ0O1xcbiAgLW1zLWZsZXgtcGFjazogc3RhcnQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5idG4tdG9vbGJhciAuaW5wdXQtZ3JvdXAge1xcbiAgd2lkdGg6IGF1dG87XFxufVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOmZpcnN0LWNoaWxkIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uYnRuLWdyb3VwID4gLmJ0bjpub3QoOmxhc3QtY2hpbGQpOm5vdCguZHJvcGRvd24tdG9nZ2xlKSxcXG4uYnRuLWdyb3VwID4gLmJ0bi1ncm91cDpub3QoOmxhc3QtY2hpbGQpID4gLmJ0biB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uYnRuLWdyb3VwID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4uYnRuLWdyb3VwID4gLmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSA+IC5idG4ge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxufVxcblxcbi5kcm9wZG93bi10b2dnbGUtc3BsaXQge1xcbiAgcGFkZGluZy1yaWdodDogMC41NjI1cmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAwLjU2MjVyZW07XFxufVxcblxcbi5kcm9wZG93bi10b2dnbGUtc3BsaXQ6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG5cXG4uYnRuLXNtICsgLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdCwgLmJ0bi1ncm91cC1zbSA+IC5idG4gKyAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuMzc1cmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAwLjM3NXJlbTtcXG59XFxuXFxuLmJ0bi1sZyArIC5kcm9wZG93bi10b2dnbGUtc3BsaXQsIC5idG4tZ3JvdXAtbGcgPiAuYnRuICsgLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjc1cmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAwLjc1cmVtO1xcbn1cXG5cXG4uYnRuLWdyb3VwLXZlcnRpY2FsIHtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBzdGFydDtcXG4gIC1tcy1mbGV4LWFsaWduOiBzdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi5idG4tZ3JvdXAtdmVydGljYWwgLmJ0bixcXG4uYnRuLWdyb3VwLXZlcnRpY2FsIC5idG4tZ3JvdXAge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuICsgLmJ0bixcXG4uYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0biArIC5idG4tZ3JvdXAsXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4tZ3JvdXAgKyAuYnRuLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuLWdyb3VwICsgLmJ0bi1ncm91cCB7XFxuICBtYXJnaW4tdG9wOiAtMXB4O1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxufVxcblxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5kcm9wZG93bi10b2dnbGUpLFxcbi5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuLWdyb3VwOm5vdCg6bGFzdC1jaGlsZCkgPiAuYnRuIHtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG59XFxuXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG46bm90KDpmaXJzdC1jaGlsZCksXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4tZ3JvdXA6bm90KDpmaXJzdC1jaGlsZCkgPiAuYnRuIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG59XFxuXFxuLmJ0bi1ncm91cC10b2dnbGUgPiAuYnRuLFxcbi5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0bi1ncm91cCA+IC5idG4ge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuLmJ0bi1ncm91cC10b2dnbGUgPiAuYnRuIGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0sXFxuLmJ0bi1ncm91cC10b2dnbGUgPiAuYnRuIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0sXFxuLmJ0bi1ncm91cC10b2dnbGUgPiAuYnRuLWdyb3VwID4gLmJ0biBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdLFxcbi5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0bi1ncm91cCA+IC5idG4gaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5pbnB1dC1ncm91cCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICAtd2Via2l0LWJveC1hbGlnbjogc3RyZXRjaDtcXG4gIC1tcy1mbGV4LWFsaWduOiBzdHJldGNoO1xcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdCxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gIC1tcy1mbGV4OiAxIDEgYXV0bztcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgd2lkdGg6IDElO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbDpmb2N1cyxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdDpmb2N1cyxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGU6Zm9jdXMge1xcbiAgei1pbmRleDogMztcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbCArIC5mb3JtLWNvbnRyb2wsXFxuLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbCArIC5jdXN0b20tc2VsZWN0LFxcbi5pbnB1dC1ncm91cCA+IC5mb3JtLWNvbnRyb2wgKyAuY3VzdG9tLWZpbGUsXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1zZWxlY3QgKyAuZm9ybS1jb250cm9sLFxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tc2VsZWN0ICsgLmN1c3RvbS1zZWxlY3QsXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1zZWxlY3QgKyAuY3VzdG9tLWZpbGUsXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlICsgLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUgKyAuY3VzdG9tLXNlbGVjdCxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUgKyAuY3VzdG9tLWZpbGUge1xcbiAgbWFyZ2luLWxlZnQ6IC0xcHg7XFxufVxcblxcbi5pbnB1dC1ncm91cCA+IC5mb3JtLWNvbnRyb2w6bm90KDpsYXN0LWNoaWxkKSxcXG4uaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxufVxcblxcbi5pbnB1dC1ncm91cCA+IC5mb3JtLWNvbnRyb2w6bm90KDpmaXJzdC1jaGlsZCksXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1zZWxlY3Q6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxufVxcblxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlOm5vdCg6bGFzdC1jaGlsZCkgLmN1c3RvbS1maWxlLWxhYmVsLFxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZTpub3QoOmxhc3QtY2hpbGQpIC5jdXN0b20tZmlsZS1sYWJlbDo6YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxufVxcblxcbi5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZTpub3QoOmZpcnN0LWNoaWxkKSAuY3VzdG9tLWZpbGUtbGFiZWwsXFxuLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlOm5vdCg6Zmlyc3QtY2hpbGQpIC5jdXN0b20tZmlsZS1sYWJlbDo6YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtcHJlcGVuZCxcXG4uaW5wdXQtZ3JvdXAtYXBwZW5kIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtcHJlcGVuZCAuYnRuLFxcbi5pbnB1dC1ncm91cC1hcHBlbmQgLmJ0biB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAyO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtcHJlcGVuZCAuYnRuICsgLmJ0bixcXG4uaW5wdXQtZ3JvdXAtcHJlcGVuZCAuYnRuICsgLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLXByZXBlbmQgLmlucHV0LWdyb3VwLXRleHQgKyAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtcHJlcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCArIC5idG4sXFxuLmlucHV0LWdyb3VwLWFwcGVuZCAuYnRuICsgLmJ0bixcXG4uaW5wdXQtZ3JvdXAtYXBwZW5kIC5idG4gKyAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtYXBwZW5kIC5pbnB1dC1ncm91cC10ZXh0ICsgLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwLWFwcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCArIC5idG4ge1xcbiAgbWFyZ2luLWxlZnQ6IC0xcHg7XFxufVxcblxcbi5pbnB1dC1ncm91cC1wcmVwZW5kIHtcXG4gIG1hcmdpbi1yaWdodDogLTFweDtcXG59XFxuXFxuLmlucHV0LWdyb3VwLWFwcGVuZCB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLmlucHV0LWdyb3VwLXRleHQge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjZWQ0ZGE7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtdGV4dCBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdLFxcbi5pbnB1dC1ncm91cC10ZXh0IGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgbWFyZ2luLXRvcDogMDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuYnRuLFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kID4gLmlucHV0LWdyb3VwLXRleHQsXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZDpub3QoOmxhc3QtY2hpbGQpID4gLmJ0bixcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kOm5vdCg6bGFzdC1jaGlsZCkgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kOmxhc3QtY2hpbGQgPiAuYnRuOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5kcm9wZG93bi10b2dnbGUpLFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1hcHBlbmQ6bGFzdC1jaGlsZCA+IC5pbnB1dC1ncm91cC10ZXh0Om5vdCg6bGFzdC1jaGlsZCkge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG59XFxuXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5idG4sXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kOm5vdCg6Zmlyc3QtY2hpbGQpID4gLmJ0bixcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZDpub3QoOmZpcnN0LWNoaWxkKSA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kOmZpcnN0LWNoaWxkID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZDpmaXJzdC1jaGlsZCA+IC5pbnB1dC1ncm91cC10ZXh0Om5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uY3VzdG9tLWNvbnRyb2wge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtaW4taGVpZ2h0OiAxLjVyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDEuNXJlbTtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlubGluZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1ib3g7XFxuICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3g7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlucHV0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IC0xO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1pbnB1dDpmb2N1cyB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDFweCAjZmZmLCAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1pbnB1dDphY3RpdmUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiM2Q3ZmY7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG59XFxuXFxuLmN1c3RvbS1jb250cm9sLWxhYmVsIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMC4yNXJlbTtcXG4gIGxlZnQ6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGVlMmU2O1xcbn1cXG5cXG4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMC4yNXJlbTtcXG4gIGxlZnQ6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogNTAlIDUwJTtcXG59XFxuXFxuLmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbnB1dDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG59XFxuXFxuLmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4IDgnJTNFJTNDcGF0aCBmaWxsPSclMjNmZmYnIGQ9J002LjU2NC43NWwtMy41OSAzLjYxMi0xLjUzOC0xLjU1TDAgNC4yNiAyLjk3NCA3LjI1IDggMi4xOTN6Jy8lM0UlM0Mvc3ZnJTNFXFxcIik7XFxufVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmluZGV0ZXJtaW5hdGUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbnB1dDppbmRldGVybWluYXRlIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNCclM0UlM0NwYXRoIHN0cm9rZT0nJTIzZmZmJyBkPSdNMCAyaDQnLyUzRSUzQy9zdmclM0VcXFwiKTtcXG59XFxuXFxuLmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6ZGlzYWJsZWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMTIzLCAyNTUsIDAuNSk7XFxufVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkOmluZGV0ZXJtaW5hdGUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDEyMywgMjU1LCAwLjUpO1xcbn1cXG5cXG4uY3VzdG9tLXJhZGlvIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG59XFxuXFxuLmN1c3RvbS1yYWRpbyAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5jdXN0b20tcmFkaW8gLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNFJTNDY2lyY2xlIHI9JzMnIGZpbGw9JyUyM2ZmZicvJTNFJTNDL3N2ZyUzRVxcXCIpO1xcbn1cXG5cXG4uY3VzdG9tLXJhZGlvIC5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxMjMsIDI1NSwgMC41KTtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3Qge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGNhbGMoMi4yNXJlbSArIDJweCk7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAxLjc1cmVtIDAuMzc1cmVtIDAuNzVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgYmFja2dyb3VuZDogI2ZmZiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNSclM0UlM0NwYXRoIGZpbGw9JyUyMzM0M2E0MCcgZD0nTTIgMEwwIDJoNHptMCA1TDAgM2g0eicvJTNFJTNDL3N2ZyUzRVxcXCIpIG5vLXJlcGVhdCByaWdodCAwLjc1cmVtIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogOHB4IDEwcHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbi5jdXN0b20tc2VsZWN0OmZvY3VzIHtcXG4gIGJvcmRlci1jb2xvcjogIzgwYmRmZjtcXG4gIG91dGxpbmU6IDA7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjA3NSksIDAgMCA1cHggcmdiYSgxMjgsIDE4OSwgMjU1LCAwLjUpO1xcbn1cXG5cXG4uY3VzdG9tLXNlbGVjdDpmb2N1czo6LW1zLXZhbHVlIHtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3RbbXVsdGlwbGVdLCAuY3VzdG9tLXNlbGVjdFtzaXplXTpub3QoW3NpemU9XFxcIjFcXFwiXSkge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgcGFkZGluZy1yaWdodDogMC43NXJlbTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxufVxcblxcbi5jdXN0b20tc2VsZWN0OmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3Q6Oi1tcy1leHBhbmQge1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3Qtc20ge1xcbiAgaGVpZ2h0OiBjYWxjKDEuODEyNXJlbSArIDJweCk7XFxuICBwYWRkaW5nLXRvcDogMC4zNzVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC4zNzVyZW07XFxuICBmb250LXNpemU6IDc1JTtcXG59XFxuXFxuLmN1c3RvbS1zZWxlY3QtbGcge1xcbiAgaGVpZ2h0OiBjYWxjKDIuODc1cmVtICsgMnB4KTtcXG4gIHBhZGRpbmctdG9wOiAwLjM3NXJlbTtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjM3NXJlbTtcXG4gIGZvbnQtc2l6ZTogMTI1JTtcXG59XFxuXFxuLmN1c3RvbS1maWxlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBjYWxjKDIuMjVyZW0gKyAycHgpO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuLmN1c3RvbS1maWxlLWlucHV0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHotaW5kZXg6IDI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXG4gIG1hcmdpbjogMDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5jdXN0b20tZmlsZS1pbnB1dDpmb2N1cyB+IC5jdXN0b20tZmlsZS1jb250cm9sIHtcXG4gIGJvcmRlci1jb2xvcjogIzgwYmRmZjtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTtcXG59XFxuXFxuLmN1c3RvbS1maWxlLWlucHV0OmZvY3VzIH4gLmN1c3RvbS1maWxlLWNvbnRyb2w6OmJlZm9yZSB7XFxuICBib3JkZXItY29sb3I6ICM4MGJkZmY7XFxufVxcblxcbi5jdXN0b20tZmlsZS1pbnB1dDpsYW5nKGVuKSB+IC5jdXN0b20tZmlsZS1sYWJlbDo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIkJyb3dzZVxcXCI7XFxufVxcblxcbi5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxO1xcbiAgaGVpZ2h0OiBjYWxjKDIuMjVyZW0gKyAycHgpO1xcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmN1c3RvbS1maWxlLWxhYmVsOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHotaW5kZXg6IDM7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogY2FsYyhjYWxjKDIuMjVyZW0gKyAycHgpIC0gMXB4ICogMik7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgY29udGVudDogXFxcIkJyb3dzZVxcXCI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjY2VkNGRhO1xcbiAgYm9yZGVyLXJhZGl1czogMCAwLjI1cmVtIDAuMjVyZW0gMDtcXG59XFxuXFxuLm5hdiB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuLm5hdi1saW5rIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMC41cmVtIDFyZW07XFxufVxcblxcbi5uYXYtbGluazpob3ZlciwgLm5hdi1saW5rOmZvY3VzIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLm5hdi1saW5rLmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbn1cXG5cXG4ubmF2LXRhYnMge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZWUyZTY7XFxufVxcblxcbi5uYXYtdGFicyAubmF2LWl0ZW0ge1xcbiAgbWFyZ2luLWJvdHRvbTogLTFweDtcXG59XFxuXFxuLm5hdi10YWJzIC5uYXYtbGluayB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLm5hdi10YWJzIC5uYXYtbGluazpob3ZlciwgLm5hdi10YWJzIC5uYXYtbGluazpmb2N1cyB7XFxuICBib3JkZXItY29sb3I6ICNlOWVjZWYgI2U5ZWNlZiAjZGVlMmU2O1xcbn1cXG5cXG4ubmF2LXRhYnMgLm5hdi1saW5rLmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ubmF2LXRhYnMgLm5hdi1saW5rLmFjdGl2ZSxcXG4ubmF2LXRhYnMgLm5hdi1pdGVtLnNob3cgLm5hdi1saW5rIHtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogI2RlZTJlNiAjZGVlMmU2ICNmZmY7XFxufVxcblxcbi5uYXYtdGFicyAuZHJvcGRvd24tbWVudSB7XFxuICBtYXJnaW4tdG9wOiAtMXB4O1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbn1cXG5cXG4ubmF2LXBpbGxzIC5uYXYtbGluayB7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4ubmF2LXBpbGxzIC5uYXYtbGluay5hY3RpdmUsXFxuLm5hdi1waWxscyAuc2hvdyA+IC5uYXYtbGluayB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5uYXYtZmlsbCAubmF2LWl0ZW0ge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gIC1tcy1mbGV4OiAxIDEgYXV0bztcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubmF2LWp1c3RpZmllZCAubmF2LWl0ZW0ge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICBmbGV4LWJhc2lzOiAwO1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xcbiAgZmxleC1ncm93OiAxO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFiLWNvbnRlbnQgPiAudGFiLXBhbmUge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYi1jb250ZW50ID4gLmFjdGl2ZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLm5hdmJhciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcbn1cXG5cXG4ubmF2YmFyID4gLmNvbnRhaW5lcixcXG4ubmF2YmFyID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuLm5hdmJhci1icmFuZCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nLXRvcDogMC4zMTI1cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuMzEyNXJlbTtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLm5hdmJhci1icmFuZDpob3ZlciwgLm5hdmJhci1icmFuZDpmb2N1cyB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5uYXZiYXItbmF2IHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbi5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbn1cXG5cXG4ubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudSB7XFxuICBwb3NpdGlvbjogc3RhdGljO1xcbiAgZmxvYXQ6IG5vbmU7XFxufVxcblxcbi5uYXZiYXItdGV4dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nLXRvcDogMC41cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuNXJlbTtcXG59XFxuXFxuLm5hdmJhci1jb2xsYXBzZSB7XFxuICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMTAwJTtcXG4gIGZsZXgtYmFzaXM6IDEwMCU7XFxuICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICBmbGV4LWdyb3c6IDE7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5uYXZiYXItdG9nZ2xlciB7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNzVyZW07XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4ubmF2YmFyLXRvZ2dsZXI6aG92ZXIsIC5uYXZiYXItdG9nZ2xlcjpmb2N1cyB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5uYXZiYXItdG9nZ2xlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5uYXZiYXItdG9nZ2xlci1pY29uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxLjVlbTtcXG4gIGhlaWdodDogMS41ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBiYWNrZ3JvdW5kOiBuby1yZXBlYXQgY2VudGVyIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO1xcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogNTc1Ljk4cHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLXNtID4gLmNvbnRhaW5lcixcXG4gIC5uYXZiYXItZXhwYW5kLXNtID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDA7XFxuICAgIHBhZGRpbmctbGVmdDogMDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAubmF2YmFyLWV4cGFuZC1zbSB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgIC1tcy1mbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLW5hdiB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudS1yaWdodCB7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXNtID4gLmNvbnRhaW5lcixcXG4gIC5uYXZiYXItZXhwYW5kLXNtID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IG5vd3JhcDtcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLWNvbGxhcHNlIHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogYXV0bztcXG4gICAgZmxleC1iYXNpczogYXV0bztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItdG9nZ2xlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1zbSAuZHJvcHVwIC5kcm9wZG93bi1tZW51IHtcXG4gICAgdG9wOiBhdXRvO1xcbiAgICBib3R0b206IDEwMCU7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA3NjcuOThweCkge1xcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLW1kIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgLW1zLWZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcXG4gICAgLW1zLWZsZXgtcGFjazogc3RhcnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51LXJpZ2h0IHtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGxlZnQ6IGF1dG87XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogbm93cmFwO1xcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItY29sbGFwc2Uge1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiBhdXRvO1xcbiAgICBmbGV4LWJhc2lzOiBhdXRvO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbWQgLm5hdmJhci10b2dnbGVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLW1kIC5kcm9wdXAgLmRyb3Bkb3duLW1lbnUge1xcbiAgICB0b3A6IGF1dG87XFxuICAgIGJvdHRvbTogMTAwJTtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDk5MS45OHB4KSB7XFxuICAubmF2YmFyLWV4cGFuZC1sZyA+IC5jb250YWluZXIsXFxuICAubmF2YmFyLWV4cGFuZC1sZyA+IC5jb250YWluZXItZmx1aWQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLm5hdmJhci1leHBhbmQtbGcge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAtbXMtZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IHN0YXJ0O1xcbiAgICAtbXMtZmxleC1wYWNrOiBzdGFydDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbGcgLm5hdmJhci1uYXYge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbGcgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUtcmlnaHQge1xcbiAgICByaWdodDogMDtcXG4gICAgbGVmdDogYXV0bztcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW07XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1sZyA+IC5jb250YWluZXIsXFxuICAubmF2YmFyLWV4cGFuZC1sZyA+IC5jb250YWluZXItZmx1aWQge1xcbiAgICAtbXMtZmxleC13cmFwOiBub3dyYXA7XFxuICAgIGZsZXgtd3JhcDogbm93cmFwO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbGcgLm5hdmJhci1jb2xsYXBzZSB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IGF1dG87XFxuICAgIGZsZXgtYmFzaXM6IGF1dG87XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLXRvZ2dsZXIge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQtbGcgLmRyb3B1cCAuZHJvcGRvd24tbWVudSB7XFxuICAgIHRvcDogYXV0bztcXG4gICAgYm90dG9tOiAxMDAlO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogMTE5OS45OHB4KSB7XFxuICAubmF2YmFyLWV4cGFuZC14bCA+IC5jb250YWluZXIsXFxuICAubmF2YmFyLWV4cGFuZC14bCA+IC5jb250YWluZXItZmx1aWQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLXhsIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgLW1zLWZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcXG4gICAgLW1zLWZsZXgtcGFjazogc3RhcnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItbmF2IHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51LXJpZ2h0IHtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGxlZnQ6IGF1dG87XFxuICB9XFxuICAubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQteGwgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQteGwgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogbm93cmFwO1xcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItY29sbGFwc2Uge1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiBhdXRvO1xcbiAgICBmbGV4LWJhc2lzOiBhdXRvO1xcbiAgfVxcbiAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci10b2dnbGVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG4gIC5uYXZiYXItZXhwYW5kLXhsIC5kcm9wdXAgLmRyb3Bkb3duLW1lbnUge1xcbiAgICB0b3A6IGF1dG87XFxuICAgIGJvdHRvbTogMTAwJTtcXG4gIH1cXG59XFxuXFxuLm5hdmJhci1leHBhbmQge1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAtbXMtZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQ7XFxuICAtbXMtZmxleC1wYWNrOiBzdGFydDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxuLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLFxcbi5uYXZiYXItZXhwYW5kID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbn1cXG5cXG4ubmF2YmFyLWV4cGFuZCAubmF2YmFyLW5hdiB7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuXFxuLm5hdmJhci1leHBhbmQgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4ubmF2YmFyLWV4cGFuZCAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudS1yaWdodCB7XFxuICByaWdodDogMDtcXG4gIGxlZnQ6IGF1dG87XFxufVxcblxcbi5uYXZiYXItZXhwYW5kIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTtcXG59XFxuXFxuLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLFxcbi5uYXZiYXItZXhwYW5kID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAtbXMtZmxleC13cmFwOiBub3dyYXA7XFxuICBmbGV4LXdyYXA6IG5vd3JhcDtcXG59XFxuXFxuLm5hdmJhci1leHBhbmQgLm5hdmJhci1jb2xsYXBzZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveCAhaW1wb3J0YW50O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3ggIWltcG9ydGFudDtcXG4gIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiBhdXRvO1xcbiAgZmxleC1iYXNpczogYXV0bztcXG59XFxuXFxuLm5hdmJhci1leHBhbmQgLm5hdmJhci10b2dnbGVyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5uYXZiYXItZXhwYW5kIC5kcm9wdXAgLmRyb3Bkb3duLW1lbnUge1xcbiAgdG9wOiBhdXRvO1xcbiAgYm90dG9tOiAxMDAlO1xcbn1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLWJyYW5kOmhvdmVyLCAubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQ6Zm9jdXMge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbms6aG92ZXIsIC5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rOmZvY3VzIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rLmRpc2FibGVkIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMyk7XFxufVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLnNob3cgPiAubmF2LWxpbmssXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAuYWN0aXZlID4gLm5hdi1saW5rLFxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rLnNob3csXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuYWN0aXZlIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOSk7XFxufVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci10b2dnbGVyIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLXRvZ2dsZXItaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHZpZXdCb3g9JzAgMCAzMCAzMCcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggc3Ryb2tlPSdyZ2JhKDAsIDAsIDAsIDAuNSknIHN0cm9rZS13aWR0aD0nMicgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbWl0ZXJsaW1pdD0nMTAnIGQ9J000IDdoMjJNNCAxNWgyMk00IDIzaDIyJy8lM0UlM0Mvc3ZnJTNFXFxcIik7XFxufVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci10ZXh0IHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxufVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci10ZXh0IGEge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTtcXG59XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLXRleHQgYTpob3ZlciwgLm5hdmJhci1saWdodCAubmF2YmFyLXRleHQgYTpmb2N1cyB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xcbn1cXG5cXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1icmFuZCB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItYnJhbmQ6aG92ZXIsIC5uYXZiYXItZGFyayAubmF2YmFyLWJyYW5kOmZvY3VzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbms6aG92ZXIsIC5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbms6Zm9jdXMge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSk7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbmsuZGlzYWJsZWQge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSk7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAuc2hvdyA+IC5uYXYtbGluayxcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLmFjdGl2ZSA+IC5uYXYtbGluayxcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rLnNob3csXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluay5hY3RpdmUge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLXRvZ2dsZXIge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG4gIGJvcmRlci1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpO1xcbn1cXG5cXG4ubmF2YmFyLWRhcmsgLm5hdmJhci10b2dnbGVyLWljb24ge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyB2aWV3Qm94PScwIDAgMzAgMzAnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NwYXRoIHN0cm9rZT0ncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyBzdHJva2Utd2lkdGg9JzInIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLW1pdGVybGltaXQ9JzEwJyBkPSdNNCA3aDIyTTQgMTVoMjJNNCAyM2gyMicvJTNFJTNDL3N2ZyUzRVxcXCIpO1xcbn1cXG5cXG4ubmF2YmFyLWRhcmsgLm5hdmJhci10ZXh0IHtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxufVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLXRleHQgYSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItdGV4dCBhOmhvdmVyLCAubmF2YmFyLWRhcmsgLm5hdmJhci10ZXh0IGE6Zm9jdXMge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5jYXJkIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgbWluLXdpZHRoOiAwO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY2xpcDogYm9yZGVyLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMjUpO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmNhcmQgPiBociB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxuICBtYXJnaW4tbGVmdDogMDtcXG59XFxuXFxuLmNhcmQgPiAubGlzdC1ncm91cDpmaXJzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxkIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmNhcmQgPiAubGlzdC1ncm91cDpsYXN0LWNoaWxkIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZCB7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5jYXJkLWJvZHkge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gIC1tcy1mbGV4OiAxIDEgYXV0bztcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgcGFkZGluZzogMS4yNXJlbTtcXG59XFxuXFxuLmNhcmQtdGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMC43NXJlbTtcXG59XFxuXFxuLmNhcmQtc3VidGl0bGUge1xcbiAgbWFyZ2luLXRvcDogLTAuMzc1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuLmNhcmQtdGV4dDpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5jYXJkLWxpbms6aG92ZXIge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uY2FyZC1saW5rICsgLmNhcmQtbGluayB7XFxuICBtYXJnaW4tbGVmdDogMS4yNXJlbTtcXG59XFxuXFxuLmNhcmQtaGVhZGVyIHtcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDMpO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMjUpO1xcbn1cXG5cXG4uY2FyZC1oZWFkZXI6Zmlyc3QtY2hpbGQge1xcbiAgYm9yZGVyLXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KSBjYWxjKDAuMjVyZW0gLSAxcHgpIDAgMDtcXG59XFxuXFxuLmNhcmQtaGVhZGVyICsgLmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbTpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItdG9wOiAwO1xcbn1cXG5cXG4uY2FyZC1mb290ZXIge1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjAzKTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTI1KTtcXG59XFxuXFxuLmNhcmQtZm9vdGVyOmxhc3QtY2hpbGQge1xcbiAgYm9yZGVyLXJhZGl1czogMCAwIGNhbGMoMC4yNXJlbSAtIDFweCkgY2FsYygwLjI1cmVtIC0gMXB4KTtcXG59XFxuXFxuLmNhcmQtaGVhZGVyLXRhYnMge1xcbiAgbWFyZ2luLXJpZ2h0OiAtMC42MjVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAtMC43NXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAtMC42MjVyZW07XFxuICBib3JkZXItYm90dG9tOiAwO1xcbn1cXG5cXG4uY2FyZC1oZWFkZXItcGlsbHMge1xcbiAgbWFyZ2luLXJpZ2h0OiAtMC42MjVyZW07XFxuICBtYXJnaW4tbGVmdDogLTAuNjI1cmVtO1xcbn1cXG5cXG4uY2FyZC1pbWctb3ZlcmxheSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICBwYWRkaW5nOiAxLjI1cmVtO1xcbn1cXG5cXG4uY2FyZC1pbWcge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXItcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpO1xcbn1cXG5cXG4uY2FyZC1pbWctdG9wIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpO1xcbn1cXG5cXG4uY2FyZC1pbWctYm90dG9tIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpO1xcbn1cXG5cXG4uY2FyZC1kZWNrIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4uY2FyZC1kZWNrIC5jYXJkIHtcXG4gIG1hcmdpbi1ib3R0b206IDE1cHg7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLmNhcmQtZGVjayB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgIC1tcy1mbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0xNXB4O1xcbiAgICBtYXJnaW4tbGVmdDogLTE1cHg7XFxuICB9XFxuICAuY2FyZC1kZWNrIC5jYXJkIHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgICAtbXMtZmxleDogMSAwIDAlO1xcbiAgICBmbGV4OiAxIDAgMCU7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcXG4gIH1cXG59XFxuXFxuLmNhcmQtZ3JvdXAge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5jYXJkLWdyb3VwID4gLmNhcmQge1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuY2FyZC1ncm91cCB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgIC1tcy1mbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZCB7XFxuICAgIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAgIC1tcy1mbGV4OiAxIDAgMCU7XFxuICAgIGZsZXg6IDEgMCAwJTtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQgKyAuY2FyZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwO1xcbiAgICBib3JkZXItbGVmdDogMDtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6Zmlyc3QtY2hpbGQge1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOmZpcnN0LWNoaWxkIC5jYXJkLWltZy10b3AsXFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOmZpcnN0LWNoaWxkIC5jYXJkLWhlYWRlciB7XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpmaXJzdC1jaGlsZCAuY2FyZC1pbWctYm90dG9tLFxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpmaXJzdC1jaGlsZCAuY2FyZC1mb290ZXIge1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6bGFzdC1jaGlsZCB7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOmxhc3QtY2hpbGQgLmNhcmQtaW1nLXRvcCxcXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6bGFzdC1jaGlsZCAuY2FyZC1oZWFkZXIge1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpsYXN0LWNoaWxkIC5jYXJkLWltZy1ib3R0b20sXFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOmxhc3QtY2hpbGQgLmNhcmQtZm9vdGVyIHtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6b25seS1jaGlsZCB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICB9XFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOm9ubHktY2hpbGQgLmNhcmQtaW1nLXRvcCxcXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6b25seS1jaGlsZCAuY2FyZC1oZWFkZXIge1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG4gIH1cXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6b25seS1jaGlsZCAuY2FyZC1pbWctYm90dG9tLFxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpvbmx5LWNoaWxkIC5jYXJkLWZvb3RlciB7XFxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCg6b25seS1jaGlsZCkge1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCg6b25seS1jaGlsZCkgLmNhcmQtaW1nLXRvcCxcXG4gIC5jYXJkLWdyb3VwID4gLmNhcmQ6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKTpub3QoOm9ubHktY2hpbGQpIC5jYXJkLWltZy1ib3R0b20sXFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCk6bm90KDpvbmx5LWNoaWxkKSAuY2FyZC1oZWFkZXIsXFxuICAuY2FyZC1ncm91cCA+IC5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCk6bm90KDpvbmx5LWNoaWxkKSAuY2FyZC1mb290ZXIge1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgfVxcbn1cXG5cXG4uY2FyZC1jb2x1bW5zIC5jYXJkIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNzVyZW07XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLmNhcmQtY29sdW1ucyB7XFxuICAgIC13ZWJraXQtY29sdW1uLWNvdW50OiAzO1xcbiAgICAtbW96LWNvbHVtbi1jb3VudDogMztcXG4gICAgY29sdW1uLWNvdW50OiAzO1xcbiAgICAtd2Via2l0LWNvbHVtbi1nYXA6IDEuMjVyZW07XFxuICAgIC1tb3otY29sdW1uLWdhcDogMS4yNXJlbTtcXG4gICAgY29sdW1uLWdhcDogMS4yNXJlbTtcXG4gIH1cXG4gIC5jYXJkLWNvbHVtbnMgLmNhcmQge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbn1cXG5cXG4uYnJlYWRjcnVtYiB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBwYWRkaW5nOiAwLjc1cmVtIDFyZW07XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4uYnJlYWRjcnVtYi1pdGVtICsgLmJyZWFkY3J1bWItaXRlbTo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTtcXG4gIHBhZGRpbmctbGVmdDogMC41cmVtO1xcbiAgY29sb3I6ICM2Yzc1N2Q7XFxuICBjb250ZW50OiBcXFwiL1xcXCI7XFxufVxcblxcbi5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOmhvdmVyOjpiZWZvcmUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbi5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOmhvdmVyOjpiZWZvcmUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uYnJlYWRjcnVtYi1pdGVtLmFjdGl2ZSB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG59XFxuXFxuLnBhZ2luYXRpb24ge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLnBhZ2UtbGluayB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDAuNXJlbSAwLjc1cmVtO1xcbiAgbWFyZ2luLWxlZnQ6IC0xcHg7XFxuICBsaW5lLWhlaWdodDogMS4yNTtcXG4gIGNvbG9yOiAjMDA3YmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZWUyZTY7XFxufVxcblxcbi5wYWdlLWxpbms6aG92ZXIge1xcbiAgY29sb3I6ICMwMDU2YjM7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgYm9yZGVyLWNvbG9yOiAjZGVlMmU2O1xcbn1cXG5cXG4ucGFnZS1saW5rOmZvY3VzIHtcXG4gIHotaW5kZXg6IDI7XFxuICBvdXRsaW5lOiAwO1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuMjUpO1xcbn1cXG5cXG4ucGFnZS1saW5rOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnBhZ2UtaXRlbTpmaXJzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5wYWdlLWl0ZW06bGFzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5wYWdlLWl0ZW0uYWN0aXZlIC5wYWdlLWxpbmsge1xcbiAgei1pbmRleDogMTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gIGJvcmRlci1jb2xvcjogIzAwN2JmZjtcXG59XFxuXFxuLnBhZ2UtaXRlbS5kaXNhYmxlZCAucGFnZS1saW5rIHtcXG4gIGNvbG9yOiAjNmM3NTdkO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBjdXJzb3I6IGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjZGVlMmU2O1xcbn1cXG5cXG4ucGFnaW5hdGlvbi1sZyAucGFnZS1saW5rIHtcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMS41cmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXFxuLnBhZ2luYXRpb24tbGcgLnBhZ2UtaXRlbTpmaXJzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuM3JlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnBhZ2luYXRpb24tbGcgLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmsge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuM3JlbTtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjNyZW07XFxufVxcblxcbi5wYWdpbmF0aW9uLXNtIC5wYWdlLWxpbmsge1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXFxuLnBhZ2luYXRpb24tc20gLnBhZ2UtaXRlbTpmaXJzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMnJlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMnJlbTtcXG59XFxuXFxuLnBhZ2luYXRpb24tc20gLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmsge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMnJlbTtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjJyZW07XFxufVxcblxcbi5iYWRnZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nOiAwLjI1ZW0gMC40ZW07XFxuICBmb250LXNpemU6IDc1JTtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4uYmFkZ2U6ZW1wdHkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmJ0biAuYmFkZ2Uge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAtMXB4O1xcbn1cXG5cXG4uYmFkZ2UtcGlsbCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjZlbTtcXG4gIHBhZGRpbmctbGVmdDogMC42ZW07XFxuICBib3JkZXItcmFkaXVzOiAxMHJlbTtcXG59XFxuXFxuLmJhZGdlLXByaW1hcnkge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbn1cXG5cXG4uYmFkZ2UtcHJpbWFyeVtocmVmXTpob3ZlciwgLmJhZGdlLXByaW1hcnlbaHJlZl06Zm9jdXMge1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2MmNjO1xcbn1cXG5cXG4uYmFkZ2Utc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZjNzU3ZDtcXG59XFxuXFxuLmJhZGdlLXNlY29uZGFyeVtocmVmXTpob3ZlciwgLmJhZGdlLXNlY29uZGFyeVtocmVmXTpmb2N1cyB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NDViNjI7XFxufVxcblxcbi5iYWRnZS1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXG59XFxuXFxuLmJhZGdlLXN1Y2Nlc3NbaHJlZl06aG92ZXIsIC5iYWRnZS1zdWNjZXNzW2hyZWZdOmZvY3VzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFlN2UzNDtcXG59XFxuXFxuLmJhZGdlLWluZm8ge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xcbn1cXG5cXG4uYmFkZ2UtaW5mb1tocmVmXTpob3ZlciwgLmJhZGdlLWluZm9baHJlZl06Zm9jdXMge1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTE3YThiO1xcbn1cXG5cXG4uYmFkZ2Utd2FybmluZyB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDc7XFxufVxcblxcbi5iYWRnZS13YXJuaW5nW2hyZWZdOmhvdmVyLCAuYmFkZ2Utd2FybmluZ1tocmVmXTpmb2N1cyB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkMzllMDA7XFxufVxcblxcbi5iYWRnZS1kYW5nZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcbn1cXG5cXG4uYmFkZ2UtZGFuZ2VyW2hyZWZdOmhvdmVyLCAuYmFkZ2UtZGFuZ2VyW2hyZWZdOmZvY3VzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JkMjEzMDtcXG59XFxuXFxuLmJhZGdlLWxpZ2h0IHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcXG59XFxuXFxuLmJhZGdlLWxpZ2h0W2hyZWZdOmhvdmVyLCAuYmFkZ2UtbGlnaHRbaHJlZl06Zm9jdXMge1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGFlMGU1O1xcbn1cXG5cXG4uYmFkZ2UtZGFyayB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDA7XFxufVxcblxcbi5iYWRnZS1kYXJrW2hyZWZdOmhvdmVyLCAuYmFkZ2UtZGFya1tocmVmXTpmb2N1cyB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZDIxMjQ7XFxufVxcblxcbi5qdW1ib3Ryb24ge1xcbiAgcGFkZGluZzogMnJlbSAxcmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLmp1bWJvdHJvbiB7XFxuICAgIHBhZGRpbmc6IDRyZW0gMnJlbTtcXG4gIH1cXG59XFxuXFxuLmp1bWJvdHJvbi1mbHVpZCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG59XFxuXFxuLmFsZXJ0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5hbGVydC1oZWFkaW5nIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4uYWxlcnQtbGluayB7XFxuICBmb250LXdlaWdodDogNzAwO1xcbn1cXG5cXG4uYWxlcnQtZGlzbWlzc2libGUge1xcbiAgcGFkZGluZy1yaWdodDogNHJlbTtcXG59XFxuXFxuLmFsZXJ0LWRpc21pc3NpYmxlIC5jbG9zZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4uYWxlcnQtcHJpbWFyeSB7XFxuICBjb2xvcjogIzAwNDA4NTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2U1ZmY7XFxuICBib3JkZXItY29sb3I6ICNiOGRhZmY7XFxufVxcblxcbi5hbGVydC1wcmltYXJ5IGhyIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICM5ZmNkZmY7XFxufVxcblxcbi5hbGVydC1wcmltYXJ5IC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjMDAyNzUyO1xcbn1cXG5cXG4uYWxlcnQtc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiAjMzgzZDQxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNTtcXG4gIGJvcmRlci1jb2xvcjogI2Q2ZDhkYjtcXG59XFxuXFxuLmFsZXJ0LXNlY29uZGFyeSBociB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjYzhjYmNmO1xcbn1cXG5cXG4uYWxlcnQtc2Vjb25kYXJ5IC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjMjAyMzI2O1xcbn1cXG5cXG4uYWxlcnQtc3VjY2VzcyB7XFxuICBjb2xvcjogIzE1NTcyNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNGVkZGE7XFxuICBib3JkZXItY29sb3I6ICNjM2U2Y2I7XFxufVxcblxcbi5hbGVydC1zdWNjZXNzIGhyIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNiMWRmYmI7XFxufVxcblxcbi5hbGVydC1zdWNjZXNzIC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjMGIyZTEzO1xcbn1cXG5cXG4uYWxlcnQtaW5mbyB7XFxuICBjb2xvcjogIzBjNTQ2MDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkMWVjZjE7XFxuICBib3JkZXItY29sb3I6ICNiZWU1ZWI7XFxufVxcblxcbi5hbGVydC1pbmZvIGhyIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNhYmRkZTU7XFxufVxcblxcbi5hbGVydC1pbmZvIC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjMDYyYzMzO1xcbn1cXG5cXG4uYWxlcnQtd2FybmluZyB7XFxuICBjb2xvcjogIzg1NjQwNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmYzY2Q7XFxuICBib3JkZXItY29sb3I6ICNmZmVlYmE7XFxufVxcblxcbi5hbGVydC13YXJuaW5nIGhyIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNmZmU4YTE7XFxufVxcblxcbi5hbGVydC13YXJuaW5nIC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjNTMzZjAzO1xcbn1cXG5cXG4uYWxlcnQtZGFuZ2VyIHtcXG4gIGNvbG9yOiAjNzIxYzI0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZDdkYTtcXG4gIGJvcmRlci1jb2xvcjogI2Y1YzZjYjtcXG59XFxuXFxuLmFsZXJ0LWRhbmdlciBociB7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjZjFiMGI3O1xcbn1cXG5cXG4uYWxlcnQtZGFuZ2VyIC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjNDkxMjE3O1xcbn1cXG5cXG4uYWxlcnQtbGlnaHQge1xcbiAgY29sb3I6ICM4MTgxODI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmZWZlO1xcbiAgYm9yZGVyLWNvbG9yOiAjZmRmZGZlO1xcbn1cXG5cXG4uYWxlcnQtbGlnaHQgaHIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2VjZWNmNjtcXG59XFxuXFxuLmFsZXJ0LWxpZ2h0IC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjNjg2ODY4O1xcbn1cXG5cXG4uYWxlcnQtZGFyayB7XFxuICBjb2xvcjogIzFiMWUyMTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNmQ4ZDk7XFxuICBib3JkZXItY29sb3I6ICNjNmM4Y2E7XFxufVxcblxcbi5hbGVydC1kYXJrIGhyIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNiOWJiYmU7XFxufVxcblxcbi5hbGVydC1kYXJrIC5hbGVydC1saW5rIHtcXG4gIGNvbG9yOiAjMDQwNTA1O1xcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgcHJvZ3Jlc3MtYmFyLXN0cmlwZXMge1xcbiAgZnJvbSB7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDFyZW0gMDtcXG4gIH1cXG4gIHRvIHtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAwO1xcbiAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIHByb2dyZXNzLWJhci1zdHJpcGVzIHtcXG4gIGZyb20ge1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAxcmVtIDA7XFxuICB9XFxuICB0byB7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMDtcXG4gIH1cXG59XFxuXFxuLnByb2dyZXNzIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG5cXG4ucHJvZ3Jlc3MtYmFyIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjZzIGVhc2U7XFxufVxcblxcbi5wcm9ncmVzcy1iYXItc3RyaXBlZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSkgMjUlLCB0cmFuc3BhcmVudCAyNSUsIHRyYW5zcGFyZW50IDUwJSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE1KSA1MCUsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSkgNzUlLCB0cmFuc3BhcmVudCA3NSUsIHRyYW5zcGFyZW50KTtcXG4gIGJhY2tncm91bmQtc2l6ZTogMXJlbSAxcmVtO1xcbn1cXG5cXG4ucHJvZ3Jlc3MtYmFyLWFuaW1hdGVkIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBwcm9ncmVzcy1iYXItc3RyaXBlcyAxcyBsaW5lYXIgaW5maW5pdGU7XFxuICBhbmltYXRpb246IHByb2dyZXNzLWJhci1zdHJpcGVzIDFzIGxpbmVhciBpbmZpbml0ZTtcXG59XFxuXFxuLm1lZGlhIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0O1xcbiAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5tZWRpYS1ib2R5IHtcXG4gIC13ZWJraXQtYm94LWZsZXg6IDE7XFxuICAtbXMtZmxleDogMTtcXG4gIGZsZXg6IDE7XFxufVxcblxcbi5saXN0LWdyb3VwIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmFjdGl2ZSB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAtMXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMjUpO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxkIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbTpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW06aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW06Zm9jdXMge1xcbiAgei1pbmRleDogMTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS5kaXNhYmxlZCwgLmxpc3QtZ3JvdXAtaXRlbTpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0uYWN0aXZlIHtcXG4gIHotaW5kZXg6IDI7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICBib3JkZXItY29sb3I6ICMwMDdiZmY7XFxufVxcblxcbi5saXN0LWdyb3VwLWZsdXNoIC5saXN0LWdyb3VwLWl0ZW0ge1xcbiAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgYm9yZGVyLWxlZnQ6IDA7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1mbHVzaDpmaXJzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxkIHtcXG4gIGJvcmRlci10b3A6IDA7XFxufVxcblxcbi5saXN0LWdyb3VwLWZsdXNoOmxhc3QtY2hpbGQgLmxpc3QtZ3JvdXAtaXRlbTpsYXN0LWNoaWxkIHtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tcHJpbWFyeSB7XFxuICBjb2xvcjogIzAwNDA4NTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiOGRhZmY7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tcHJpbWFyeS5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLXByaW1hcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzAwNDA4NTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5ZmNkZmY7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tcHJpbWFyeS5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDQwODU7XFxuICBib3JkZXItY29sb3I6ICMwMDQwODU7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiAjMzgzZDQxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q2ZDhkYjtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICBjb2xvcjogIzM4M2Q0MTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjOGNiY2Y7XFxufVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tc2Vjb25kYXJ5Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM4M2Q0MTtcXG4gIGJvcmRlci1jb2xvcjogIzM4M2Q0MTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjMTU1NzI0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2MzZTZjYjtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1zdWNjZXNzLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0tc3VjY2Vzcy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gIGNvbG9yOiAjMTU1NzI0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IxZGZiYjtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1zdWNjZXNzLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE1NTcyNDtcXG4gIGJvcmRlci1jb2xvcjogIzE1NTcyNDtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1pbmZvIHtcXG4gIGNvbG9yOiAjMGM1NDYwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JlZTVlYjtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1pbmZvLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0taW5mby5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gIGNvbG9yOiAjMGM1NDYwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FiZGRlNTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1pbmZvLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzBjNTQ2MDtcXG4gIGJvcmRlci1jb2xvcjogIzBjNTQ2MDtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nIHtcXG4gIGNvbG9yOiAjODU2NDA0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZWViYTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0td2FybmluZy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gIGNvbG9yOiAjODU2NDA0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZThhMTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg1NjQwNDtcXG4gIGJvcmRlci1jb2xvcjogIzg1NjQwNDtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1kYW5nZXIge1xcbiAgY29sb3I6ICM3MjFjMjQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVjNmNiO1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLWRhbmdlci5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLWRhbmdlci5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gIGNvbG9yOiAjNzIxYzI0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YxYjBiNztcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1kYW5nZXIubGlzdC1ncm91cC1pdGVtLWFjdGlvbi5hY3RpdmUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzIxYzI0O1xcbiAgYm9yZGVyLWNvbG9yOiAjNzIxYzI0O1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLWxpZ2h0IHtcXG4gIGNvbG9yOiAjODE4MTgyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZmRmZTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1saWdodC5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLWxpZ2h0Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMge1xcbiAgY29sb3I6ICM4MTgxODI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWNlY2Y2O1xcbn1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLWxpZ2h0Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzgxODE4MjtcXG4gIGJvcmRlci1jb2xvcjogIzgxODE4MjtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1kYXJrIHtcXG4gIGNvbG9yOiAjMWIxZTIxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2M2YzhjYTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1kYXJrLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0tZGFyay5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gIGNvbG9yOiAjMWIxZTIxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2I5YmJiZTtcXG59XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1kYXJrLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFiMWUyMTtcXG4gIGJvcmRlci1jb2xvcjogIzFiMWUyMTtcXG59XFxuXFxuLmNsb3NlIHtcXG4gIGZsb2F0OiByaWdodDtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgY29sb3I6ICMwMDA7XFxuICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmO1xcbiAgb3BhY2l0eTogLjU7XFxufVxcblxcbi5jbG9zZTpob3ZlciwgLmNsb3NlOmZvY3VzIHtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgb3BhY2l0eTogLjc1O1xcbn1cXG5cXG4uY2xvc2U6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5idXR0b24uY2xvc2Uge1xcbiAgcGFkZGluZzogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAwO1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG4ubW9kYWwtb3BlbiB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4ubW9kYWwge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTA1MDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgb3V0bGluZTogMDtcXG59XFxuXFxuLm1vZGFsLW9wZW4gLm1vZGFsIHtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxufVxcblxcbi5tb2RhbC1kaWFsb2cge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IGF1dG87XFxuICBtYXJnaW46IDAuNXJlbTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4ubW9kYWwuZmFkZSAubW9kYWwtZGlhbG9nIHtcXG4gIHRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgZWFzZS1vdXQ7XFxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyBlYXNlLW91dDtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0O1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMjUlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC0yNSUpO1xcbn1cXG5cXG4ubW9kYWwuc2hvdyAubW9kYWwtZGlhbG9nIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAwKTtcXG59XFxuXFxuLm1vZGFsLWRpYWxvZy1jZW50ZXJlZCB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1pbi1oZWlnaHQ6IGNhbGMoMTAwJSAtICgwLjVyZW0gKiAyKSk7XFxufVxcblxcbi5tb2RhbC1jb250ZW50IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwb2ludGVyLWV2ZW50czogYXV0bztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtO1xcbiAgb3V0bGluZTogMDtcXG59XFxuXFxuLm1vZGFsLWJhY2tkcm9wIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDEwNDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbn1cXG5cXG4ubW9kYWwtYmFja2Ryb3AuZmFkZSB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4ubW9kYWwtYmFja2Ryb3Auc2hvdyB7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcblxcbi5tb2RhbC1oZWFkZXIge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1hbGlnbjogc3RhcnQ7XFxuICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGp1c3RpZnk7XFxuICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllY2VmO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4zcmVtO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLm1vZGFsLWhlYWRlciAuY2xvc2Uge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIG1hcmdpbjogLTFyZW0gLTFyZW0gLTFyZW0gYXV0bztcXG59XFxuXFxuLm1vZGFsLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG4ubW9kYWwtYm9keSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgLW1zLWZsZXg6IDEgMSBhdXRvO1xcbiAgZmxleDogMSAxIGF1dG87XFxuICBwYWRkaW5nOiAxcmVtO1xcbn1cXG5cXG4ubW9kYWwtZm9vdGVyIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xcbiAgLW1zLWZsZXgtcGFjazogZW5kO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U5ZWNlZjtcXG59XFxuXFxuLm1vZGFsLWZvb3RlciA+IDpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tbGVmdDogLjI1cmVtO1xcbn1cXG5cXG4ubW9kYWwtZm9vdGVyID4gOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLXJpZ2h0OiAuMjVyZW07XFxufVxcblxcbi5tb2RhbC1zY3JvbGxiYXItbWVhc3VyZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IC05OTk5cHg7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLm1vZGFsLWRpYWxvZyB7XFxuICAgIG1heC13aWR0aDogNTAwcHg7XFxuICAgIG1hcmdpbjogMS43NXJlbSBhdXRvO1xcbiAgfVxcbiAgLm1vZGFsLWRpYWxvZy1jZW50ZXJlZCB7XFxuICAgIG1pbi1oZWlnaHQ6IGNhbGMoMTAwJSAtICgxLjc1cmVtICogMikpO1xcbiAgfVxcbiAgLm1vZGFsLXNtIHtcXG4gICAgbWF4LXdpZHRoOiAzMDBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAubW9kYWwtbGcge1xcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgfVxcbn1cXG5cXG4udG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxMDcwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHRleHQtYWxpZ246IHN0YXJ0O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxuICB3b3JkLWJyZWFrOiBub3JtYWw7XFxuICB3b3JkLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxuICBsaW5lLWJyZWFrOiBhdXRvO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi50b29sdGlwLnNob3cge1xcbiAgb3BhY2l0eTogMC45O1xcbn1cXG5cXG4udG9vbHRpcCAuYXJyb3cge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMC44cmVtO1xcbiAgaGVpZ2h0OiAwLjRyZW07XFxufVxcblxcbi50b29sdGlwIC5hcnJvdzo6YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxufVxcblxcbi5icy10b29sdGlwLXRvcCwgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIHtcXG4gIHBhZGRpbmc6IDAuNHJlbSAwO1xcbn1cXG5cXG4uYnMtdG9vbHRpcC10b3AgLmFycm93LCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93IHtcXG4gIGJvdHRvbTogMDtcXG59XFxuXFxuLmJzLXRvb2x0aXAtdG9wIC5hcnJvdzo6YmVmb3JlLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93OjpiZWZvcmUge1xcbiAgdG9wOiAwO1xcbiAgYm9yZGVyLXdpZHRoOiAwLjRyZW0gMC40cmVtIDA7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjMDAwO1xcbn1cXG5cXG4uYnMtdG9vbHRpcC1yaWdodCwgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0ge1xcbiAgcGFkZGluZzogMCAwLjRyZW07XFxufVxcblxcbi5icy10b29sdGlwLXJpZ2h0IC5hcnJvdywgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0gLmFycm93IHtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMC40cmVtO1xcbiAgaGVpZ2h0OiAwLjhyZW07XFxufVxcblxcbi5icy10b29sdGlwLXJpZ2h0IC5hcnJvdzo6YmVmb3JlLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICByaWdodDogMDtcXG4gIGJvcmRlci13aWR0aDogMC40cmVtIDAuNHJlbSAwLjRyZW0gMDtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogIzAwMDtcXG59XFxuXFxuLmJzLXRvb2x0aXAtYm90dG9tLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0ge1xcbiAgcGFkZGluZzogMC40cmVtIDA7XFxufVxcblxcbi5icy10b29sdGlwLWJvdHRvbSAuYXJyb3csIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAuYXJyb3cge1xcbiAgdG9wOiAwO1xcbn1cXG5cXG4uYnMtdG9vbHRpcC1ib3R0b20gLmFycm93OjpiZWZvcmUsIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICBib3R0b206IDA7XFxuICBib3JkZXItd2lkdGg6IDAgMC40cmVtIDAuNHJlbTtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICMwMDA7XFxufVxcblxcbi5icy10b29sdGlwLWxlZnQsIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0ge1xcbiAgcGFkZGluZzogMCAwLjRyZW07XFxufVxcblxcbi5icy10b29sdGlwLWxlZnQgLmFycm93LCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdyB7XFxuICByaWdodDogMDtcXG4gIHdpZHRoOiAwLjRyZW07XFxuICBoZWlnaHQ6IDAuOHJlbTtcXG59XFxuXFxuLmJzLXRvb2x0aXAtbGVmdCAuYXJyb3c6OmJlZm9yZSwgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICBsZWZ0OiAwO1xcbiAgYm9yZGVyLXdpZHRoOiAwLjRyZW0gMCAwLjRyZW0gMC40cmVtO1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6ICMwMDA7XFxufVxcblxcbi50b29sdGlwLWlubmVyIHtcXG4gIG1heC13aWR0aDogMjAwcHg7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5wb3BvdmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDYwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXgtd2lkdGg6IDI3NnB4O1xcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgc2Fucy1zZXJpZiwgXFxcIkFwcGxlIENvbG9yIEVtb2ppXFxcIiwgXFxcIlNlZ29lIFVJIEVtb2ppXFxcIiwgXFxcIlNlZ29lIFVJIFN5bWJvbFxcXCI7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICB0ZXh0LWFsaWduOiBzdGFydDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIHRleHQtc2hhZG93OiBub25lO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgd29yZC1icmVhazogbm9ybWFsO1xcbiAgd29yZC1zcGFjaW5nOiBub3JtYWw7XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbiAgbGluZS1icmVhazogYXV0bztcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG59XFxuXFxuLnBvcG92ZXIgLmFycm93IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDFyZW07XFxuICBoZWlnaHQ6IDAuNXJlbTtcXG4gIG1hcmdpbjogMCAwLjNyZW07XFxufVxcblxcbi5wb3BvdmVyIC5hcnJvdzo6YmVmb3JlLCAucG9wb3ZlciAuYXJyb3c6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG59XFxuXFxuLmJzLXBvcG92ZXItdG9wLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0ge1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci10b3AgLmFycm93LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93IHtcXG4gIGJvdHRvbTogY2FsYygoMC41cmVtICsgMXB4KSAqIC0xKTtcXG59XFxuXFxuLmJzLXBvcG92ZXItdG9wIC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93OjpiZWZvcmUsXFxuLmJzLXBvcG92ZXItdG9wIC5hcnJvdzo6YWZ0ZXIsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gIGJvcmRlci13aWR0aDogMC41cmVtIDAuNXJlbSAwO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci10b3AgLmFycm93OjpiZWZvcmUsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICBib3R0b206IDA7XFxuICBib3JkZXItdG9wLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci10b3AgLmFycm93OjphZnRlciwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgYm90dG9tOiAxcHg7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1yaWdodCwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0ge1xcbiAgbWFyZ2luLWxlZnQ6IDAuNXJlbTtcXG59XFxuXFxuLmJzLXBvcG92ZXItcmlnaHQgLmFycm93LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3cge1xcbiAgbGVmdDogY2FsYygoMC41cmVtICsgMXB4KSAqIC0xKTtcXG4gIHdpZHRoOiAwLjVyZW07XFxuICBoZWlnaHQ6IDFyZW07XFxuICBtYXJnaW46IDAuM3JlbSAwO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmJlZm9yZSwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0gLmFycm93OjpiZWZvcmUsXFxuLmJzLXBvcG92ZXItcmlnaHQgLmFycm93OjphZnRlciwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0gLmFycm93OjphZnRlciB7XFxuICBib3JkZXItd2lkdGg6IDAuNXJlbSAwLjVyZW0gMC41cmVtIDA7XFxufVxcblxcbi5icy1wb3BvdmVyLXJpZ2h0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICBsZWZ0OiAwO1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmFmdGVyLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gIGxlZnQ6IDFweDtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0ge1xcbiAgbWFyZ2luLXRvcDogMC41cmVtO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1ib3R0b20gLmFycm93LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93IHtcXG4gIHRvcDogY2FsYygoMC41cmVtICsgMXB4KSAqIC0xKTtcXG59XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tIC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93OjpiZWZvcmUsXFxuLmJzLXBvcG92ZXItYm90dG9tIC5hcnJvdzo6YWZ0ZXIsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gIGJvcmRlci13aWR0aDogMCAwLjVyZW0gMC41cmVtIDAuNXJlbTtcXG59XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tIC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93OjpiZWZvcmUge1xcbiAgdG9wOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG59XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tIC5hcnJvdzo6YWZ0ZXIsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gIHRvcDogMXB4O1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tIC5wb3BvdmVyLWhlYWRlcjo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLnBvcG92ZXItaGVhZGVyOjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogNTAlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAtMC41cmVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2Y3ZjdmNztcXG59XFxuXFxuLmJzLXBvcG92ZXItbGVmdCwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcXG59XFxuXFxuLmJzLXBvcG92ZXItbGVmdCAuYXJyb3csIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0gLmFycm93IHtcXG4gIHJpZ2h0OiBjYWxjKCgwLjVyZW0gKyAxcHgpICogLTEpO1xcbiAgd2lkdGg6IDAuNXJlbTtcXG4gIGhlaWdodDogMXJlbTtcXG4gIG1hcmdpbjogMC4zcmVtIDA7XFxufVxcblxcbi5icy1wb3BvdmVyLWxlZnQgLmFycm93OjpiZWZvcmUsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0gLmFycm93OjpiZWZvcmUsXFxuLmJzLXBvcG92ZXItbGVmdCAuYXJyb3c6OmFmdGVyLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgYm9yZGVyLXdpZHRoOiAwLjVyZW0gMCAwLjVyZW0gMC41cmVtO1xcbn1cXG5cXG4uYnMtcG9wb3Zlci1sZWZ0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gIHJpZ2h0OiAwO1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxufVxcblxcbi5icy1wb3BvdmVyLWxlZnQgLmFycm93OjphZnRlciwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gIHJpZ2h0OiAxcHg7XFxuICBib3JkZXItbGVmdC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLnBvcG92ZXItaGVhZGVyIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAwLjc1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWJlYmViO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygwLjNyZW0gLSAxcHgpO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGMoMC4zcmVtIC0gMXB4KTtcXG59XFxuXFxuLnBvcG92ZXItaGVhZGVyOmVtcHR5IHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5wb3BvdmVyLWJvZHkge1xcbiAgcGFkZGluZzogMC41cmVtIDAuNzVyZW07XFxuICBjb2xvcjogIzIxMjUyOTtcXG59XFxuXFxuLmNhcm91c2VsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmNhcm91c2VsLWlubmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC42cyBlYXNlO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNnMgZWFzZTtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjZzIGVhc2UsIC13ZWJraXQtdHJhbnNmb3JtIDAuNnMgZWFzZTtcXG4gIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgLXdlYmtpdC1wZXJzcGVjdGl2ZTogMTAwMHB4O1xcbiAgcGVyc3BlY3RpdmU6IDEwMDBweDtcXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0uYWN0aXZlLFxcbi5jYXJvdXNlbC1pdGVtLW5leHQsXFxuLmNhcm91c2VsLWl0ZW0tcHJldiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0tbmV4dCxcXG4uY2Fyb3VzZWwtaXRlbS1wcmV2IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0tbmV4dC5jYXJvdXNlbC1pdGVtLWxlZnQsXFxuLmNhcm91c2VsLWl0ZW0tcHJldi5jYXJvdXNlbC1pdGVtLXJpZ2h0IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKCgtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QpIG9yICh0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkKSkge1xcbiAgLmNhcm91c2VsLWl0ZW0tbmV4dC5jYXJvdXNlbC1pdGVtLWxlZnQsXFxuICAuY2Fyb3VzZWwtaXRlbS1wcmV2LmNhcm91c2VsLWl0ZW0tcmlnaHQge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICB9XFxufVxcblxcbi5jYXJvdXNlbC1pdGVtLW5leHQsXFxuLmFjdGl2ZS5jYXJvdXNlbC1pdGVtLXJpZ2h0IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKCgtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QpIG9yICh0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkKSkge1xcbiAgLmNhcm91c2VsLWl0ZW0tbmV4dCxcXG4gIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1yaWdodCB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxMDAlLCAwLCAwKTtcXG4gIH1cXG59XFxuXFxuLmNhcm91c2VsLWl0ZW0tcHJldixcXG4uYWN0aXZlLmNhcm91c2VsLWl0ZW0tbGVmdCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKCgtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QpIG9yICh0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkKSkge1xcbiAgLmNhcm91c2VsLWl0ZW0tcHJldixcXG4gIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1sZWZ0IHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XFxuICB9XFxufVxcblxcbi5jYXJvdXNlbC1jb250cm9sLXByZXYsXFxuLmNhcm91c2VsLWNvbnRyb2wtbmV4dCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgd2lkdGg6IDE1JTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG4uY2Fyb3VzZWwtY29udHJvbC1wcmV2OmhvdmVyLCAuY2Fyb3VzZWwtY29udHJvbC1wcmV2OmZvY3VzLFxcbi5jYXJvdXNlbC1jb250cm9sLW5leHQ6aG92ZXIsXFxuLmNhcm91c2VsLWNvbnRyb2wtbmV4dDpmb2N1cyB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIG91dGxpbmU6IDA7XFxuICBvcGFjaXR5OiAuOTtcXG59XFxuXFxuLmNhcm91c2VsLWNvbnRyb2wtcHJldiB7XFxuICBsZWZ0OiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWwtY29udHJvbC1uZXh0IHtcXG4gIHJpZ2h0OiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWwtY29udHJvbC1wcmV2LWljb24sXFxuLmNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAyMHB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTtcXG59XFxuXFxuLmNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBmaWxsPSclMjNmZmYnIHZpZXdCb3g9JzAgMCA4IDgnJTNFJTNDcGF0aCBkPSdNNS4yNSAwbC00IDQgNCA0IDEuNS0xLjUtMi41LTIuNSAyLjUtMi41LTEuNS0xLjV6Jy8lM0UlM0Mvc3ZnJTNFXFxcIik7XFxufVxcblxcbi5jYXJvdXNlbC1jb250cm9sLW5leHQtaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgZmlsbD0nJTIzZmZmJyB2aWV3Qm94PScwIDAgOCA4JyUzRSUzQ3BhdGggZD0nTTIuNzUgMGwtMS41IDEuNSAyLjUgMi41LTIuNSAyLjUgMS41IDEuNSA0LTQtNC00eicvJTNFJTNDL3N2ZyUzRVxcXCIpO1xcbn1cXG5cXG4uY2Fyb3VzZWwtaW5kaWNhdG9ycyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMTBweDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxNTtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDE1JTtcXG4gIG1hcmdpbi1sZWZ0OiAxNSU7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4uY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgLW1zLWZsZXg6IDAgMSBhdXRvO1xcbiAgZmxleDogMCAxIGF1dG87XFxuICB3aWR0aDogMzBweDtcXG4gIGhlaWdodDogM3B4O1xcbiAgbWFyZ2luLXJpZ2h0OiAzcHg7XFxuICBtYXJnaW4tbGVmdDogM3B4O1xcbiAgdGV4dC1pbmRlbnQ6IC05OTlweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG59XFxuXFxuLmNhcm91c2VsLWluZGljYXRvcnMgbGk6OmJlZm9yZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IC0xMHB4O1xcbiAgbGVmdDogMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxufVxcblxcbi5jYXJvdXNlbC1pbmRpY2F0b3JzIGxpOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IC0xMHB4O1xcbiAgbGVmdDogMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxufVxcblxcbi5jYXJvdXNlbC1pbmRpY2F0b3JzIC5hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmNhcm91c2VsLWNhcHRpb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDE1JTtcXG4gIGJvdHRvbTogMjBweDtcXG4gIGxlZnQ6IDE1JTtcXG4gIHotaW5kZXg6IDEwO1xcbiAgcGFkZGluZy10b3A6IDIwcHg7XFxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uYWxpZ24tYmFzZWxpbmUge1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi10b3Age1xcbiAgdmVydGljYWwtYWxpZ246IHRvcCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tbWlkZGxlIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGUgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWJvdHRvbSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi10ZXh0LWJvdHRvbSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b20gIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLXRleHQtdG9wIHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0ZXh0LXRvcCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuYmctcHJpbWFyeTpob3ZlciwgYS5iZy1wcmltYXJ5OmZvY3VzLFxcbmJ1dHRvbi5iZy1wcmltYXJ5OmhvdmVyLFxcbmJ1dHRvbi5iZy1wcmltYXJ5OmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDYyY2MgIWltcG9ydGFudDtcXG59XFxuXFxuLmJnLXNlY29uZGFyeSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuYmctc2Vjb25kYXJ5OmhvdmVyLCBhLmJnLXNlY29uZGFyeTpmb2N1cyxcXG5idXR0b24uYmctc2Vjb25kYXJ5OmhvdmVyLFxcbmJ1dHRvbi5iZy1zZWNvbmRhcnk6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0NWI2MiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctc3VjY2VzcyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1ICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuYmctc3VjY2Vzczpob3ZlciwgYS5iZy1zdWNjZXNzOmZvY3VzLFxcbmJ1dHRvbi5iZy1zdWNjZXNzOmhvdmVyLFxcbmJ1dHRvbi5iZy1zdWNjZXNzOmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZTdlMzQgIWltcG9ydGFudDtcXG59XFxuXFxuLmJnLWluZm8ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiOCAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmJnLWluZm86aG92ZXIsIGEuYmctaW5mbzpmb2N1cyxcXG5idXR0b24uYmctaW5mbzpob3ZlcixcXG5idXR0b24uYmctaW5mbzpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTE3YThiICFpbXBvcnRhbnQ7XFxufVxcblxcbi5iZy13YXJuaW5nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDcgIWltcG9ydGFudDtcXG59XFxuXFxuYS5iZy13YXJuaW5nOmhvdmVyLCBhLmJnLXdhcm5pbmc6Zm9jdXMsXFxuYnV0dG9uLmJnLXdhcm5pbmc6aG92ZXIsXFxuYnV0dG9uLmJnLXdhcm5pbmc6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2QzOWUwMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctZGFuZ2VyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYzM1NDUgIWltcG9ydGFudDtcXG59XFxuXFxuYS5iZy1kYW5nZXI6aG92ZXIsIGEuYmctZGFuZ2VyOmZvY3VzLFxcbmJ1dHRvbi5iZy1kYW5nZXI6aG92ZXIsXFxuYnV0dG9uLmJnLWRhbmdlcjpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmQyMTMwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5iZy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuYmctbGlnaHQ6aG92ZXIsIGEuYmctbGlnaHQ6Zm9jdXMsXFxuYnV0dG9uLmJnLWxpZ2h0OmhvdmVyLFxcbmJ1dHRvbi5iZy1saWdodDpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGFlMGU1ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5iZy1kYXJrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDAgIWltcG9ydGFudDtcXG59XFxuXFxuYS5iZy1kYXJrOmhvdmVyLCBhLmJnLWRhcms6Zm9jdXMsXFxuYnV0dG9uLmJnLWRhcms6aG92ZXIsXFxuYnV0dG9uLmJnLWRhcms6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFkMjEyNCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctd2hpdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYmctdHJhbnNwYXJlbnQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlciB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGVlMmU2ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItdG9wIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGVlMmU2ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItcmlnaHQge1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLWJvdHRvbSB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLWxlZnQge1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZGVlMmU2ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItMCB7XFxuICBib3JkZXI6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci10b3AtMCB7XFxuICBib3JkZXItdG9wOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItcmlnaHQtMCB7XFxuICBib3JkZXItcmlnaHQ6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci1ib3R0b20tMCB7XFxuICBib3JkZXItYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItbGVmdC0wIHtcXG4gIGJvcmRlci1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItcHJpbWFyeSB7XFxuICBib3JkZXItY29sb3I6ICMwMDdiZmYgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci1zZWNvbmRhcnkge1xcbiAgYm9yZGVyLWNvbG9yOiAjNmM3NTdkICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItc3VjY2VzcyB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDUgIWltcG9ydGFudDtcXG59XFxuXFxuLmJvcmRlci1pbmZvIHtcXG4gIGJvcmRlci1jb2xvcjogIzE3YTJiOCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLXdhcm5pbmcge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZjMTA3ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItZGFuZ2VyIHtcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLWxpZ2h0IHtcXG4gIGJvcmRlci1jb2xvcjogI2Y4ZjlmYSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYm9yZGVyLWRhcmsge1xcbiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5ib3JkZXItd2hpdGUge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yb3VuZGVkIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnJvdW5kZWQtdG9wIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yb3VuZGVkLXJpZ2h0IHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucm91bmRlZC1ib3R0b20ge1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnJvdW5kZWQtbGVmdCB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yb3VuZGVkLWNpcmNsZSB7XFxuICBib3JkZXItcmFkaXVzOiA1MCUgIWltcG9ydGFudDtcXG59XFxuXFxuLnJvdW5kZWQtMCB7XFxuICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jbGVhcmZpeDo6YWZ0ZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjbGVhcjogYm90aDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbn1cXG5cXG4uZC1ub25lIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmQtaW5saW5lIHtcXG4gIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZC1pbmxpbmUtYmxvY2sge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLXRhYmxlIHtcXG4gIGRpc3BsYXk6IHRhYmxlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLXRhYmxlLXJvdyB7XFxuICBkaXNwbGF5OiB0YWJsZS1yb3cgIWltcG9ydGFudDtcXG59XFxuXFxuLmQtdGFibGUtY2VsbCB7XFxuICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLWZsZXgge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3ggIWltcG9ydGFudDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5kLWlubGluZS1mbGV4IHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWJveCAhaW1wb3J0YW50O1xcbiAgZGlzcGxheTogLW1zLWlubGluZS1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5kLXNtLW5vbmUge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1zbS1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXNtLWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtc20tYmxvY2sge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtc20tdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtc20tdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1zbS10YWJsZS1jZWxsIHtcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtc20tZmxleCB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXNtLWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5kLW1kLW5vbmUge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1tZC1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLW1kLWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtYmxvY2sge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1tZC10YWJsZS1jZWxsIHtcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbWQtZmxleCB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLW1kLWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5kLWxnLW5vbmUge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1sZy1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLWxnLWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbGctYmxvY2sge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbGctdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbGctdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1sZy10YWJsZS1jZWxsIHtcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtbGctZmxleCB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLWxnLWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuZC14bC1ub25lIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQteGwtaW5saW5lIHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC14bC1pbmxpbmUtYmxvY2sge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXhsLWJsb2NrIHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXhsLXRhYmxlIHtcXG4gICAgZGlzcGxheTogdGFibGUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXhsLXRhYmxlLXJvdyB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLXJvdyAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQteGwtdGFibGUtY2VsbCB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGwgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXhsLWZsZXgge1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC14bC1pbmxpbmUtZmxleCB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3ggIWltcG9ydGFudDtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIHByaW50IHtcXG4gIC5kLXByaW50LW5vbmUge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1wcmludC1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXByaW50LWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtYmxvY2sge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZC1wcmludC10YWJsZS1jZWxsIHtcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmQtcHJpbnQtZmxleCB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5kLXByaW50LWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1pbmxpbmUtYm94ICFpbXBvcnRhbnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1pbmxpbmUtZmxleGJveCAhaW1wb3J0YW50O1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG4uZW1iZWQtcmVzcG9uc2l2ZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5lbWJlZC1yZXNwb25zaXZlOjpiZWZvcmUge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG59XFxuXFxuLmVtYmVkLXJlc3BvbnNpdmUgLmVtYmVkLXJlc3BvbnNpdmUtaXRlbSxcXG4uZW1iZWQtcmVzcG9uc2l2ZSBpZnJhbWUsXFxuLmVtYmVkLXJlc3BvbnNpdmUgZW1iZWQsXFxuLmVtYmVkLXJlc3BvbnNpdmUgb2JqZWN0LFxcbi5lbWJlZC1yZXNwb25zaXZlIHZpZGVvIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuLmVtYmVkLXJlc3BvbnNpdmUtMjFieTk6OmJlZm9yZSB7XFxuICBwYWRkaW5nLXRvcDogNDIuODU3MTQzJTtcXG59XFxuXFxuLmVtYmVkLXJlc3BvbnNpdmUtMTZieTk6OmJlZm9yZSB7XFxuICBwYWRkaW5nLXRvcDogNTYuMjUlO1xcbn1cXG5cXG4uZW1iZWQtcmVzcG9uc2l2ZS00YnkzOjpiZWZvcmUge1xcbiAgcGFkZGluZy10b3A6IDc1JTtcXG59XFxuXFxuLmVtYmVkLXJlc3BvbnNpdmUtMWJ5MTo6YmVmb3JlIHtcXG4gIHBhZGRpbmctdG9wOiAxMDAlO1xcbn1cXG5cXG4uZmxleC1yb3cge1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsICFpbXBvcnRhbnQ7XFxuICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbCAhaW1wb3J0YW50O1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDtcXG59XFxuXFxuLmZsZXgtY29sdW1uIHtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWwgIWltcG9ydGFudDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsICFpbXBvcnRhbnQ7XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZmxleC1yb3ctcmV2ZXJzZSB7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWwgIWltcG9ydGFudDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mbGV4LWNvbHVtbi1yZXZlcnNlIHtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWwgIWltcG9ydGFudDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mbGV4LXdyYXAge1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50O1xcbiAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mbGV4LW5vd3JhcCB7XFxuICAtbXMtZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gIGZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mbGV4LXdyYXAtcmV2ZXJzZSB7XFxuICAtbXMtZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDtcXG4gIGZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQge1xcbiAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQgIWltcG9ydGFudDtcXG4gIC1tcy1mbGV4LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmp1c3RpZnktY29udGVudC1lbmQge1xcbiAgLXdlYmtpdC1ib3gtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAtbXMtZmxleC1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmp1c3RpZnktY29udGVudC1jZW50ZXIge1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAtbXMtZmxleC1wYWNrOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7XFxufVxcblxcbi5qdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiB7XFxuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDtcXG59XFxuXFxuLmp1c3RpZnktY29udGVudC1hcm91bmQge1xcbiAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZSAhaW1wb3J0YW50O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWl0ZW1zLXN0YXJ0IHtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24taXRlbXMtZW5kIHtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gIC1tcy1mbGV4LWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24taXRlbXMtY2VudGVyIHtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWl0ZW1zLWJhc2VsaW5lIHtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgLW1zLWZsZXgtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWl0ZW1zLXN0cmV0Y2gge1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gIC1tcy1mbGV4LWFsaWduOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tY29udGVudC1zdGFydCB7XFxuICAtbXMtZmxleC1saW5lLXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1jb250ZW50LWVuZCB7XFxuICAtbXMtZmxleC1saW5lLXBhY2s6IGVuZCAhaW1wb3J0YW50O1xcbiAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWNvbnRlbnQtY2VudGVyIHtcXG4gIC1tcy1mbGV4LWxpbmUtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWNvbnRlbnQtYmV0d2VlbiB7XFxuICAtbXMtZmxleC1saW5lLXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLWNvbnRlbnQtYXJvdW5kIHtcXG4gIC1tcy1mbGV4LWxpbmUtcGFjazogZGlzdHJpYnV0ZSAhaW1wb3J0YW50O1xcbiAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1jb250ZW50LXN0cmV0Y2gge1xcbiAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1zZWxmLWF1dG8ge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0byAhaW1wb3J0YW50O1xcbiAgYWxpZ24tc2VsZjogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tc2VsZi1zdGFydCB7XFxuICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tc2VsZi1lbmQge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWxpZ24tc2VsZi1jZW50ZXIge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICBhbGlnbi1zZWxmOiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmFsaWduLXNlbGYtYmFzZWxpbmUge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gIGFsaWduLXNlbGY6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5hbGlnbi1zZWxmLXN0cmV0Y2gge1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5mbGV4LXNtLXJvdyB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbCAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1zbS1jb2x1bW4ge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLXJvdy1yZXZlcnNlIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtc20tY29sdW1uLXJldmVyc2Uge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtc20td3JhcCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1zbS1ub3dyYXAge1xcbiAgICAtbXMtZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXNtLXdyYXAtcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1zdGFydCB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1lbmQge1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtc20tY2VudGVyIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1iZXR3ZWVuIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1hcm91bmQge1xcbiAgICAtbXMtZmxleC1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtc20tc3RhcnQge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtc20tZW5kIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLXNtLWNlbnRlciB7XFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtc20tYmFzZWxpbmUge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLXNtLXN0cmV0Y2gge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtc20tc3RhcnQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXNtLWVuZCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1zbS1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXNtLWJldHdlZW4ge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtc20tYXJvdW5kIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtc20tc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1zbS1hdXRvIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0byAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1zbS1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXNtLWVuZCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtc20tY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtc20tYmFzZWxpbmUge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtc20tc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5mbGV4LW1kLXJvdyB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbCAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC1jb2x1bW4ge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LW1kLXJvdy1yZXZlcnNlIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbWQtY29sdW1uLXJldmVyc2Uge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbWQtd3JhcCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1tZC1ub3dyYXAge1xcbiAgICAtbXMtZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LW1kLXdyYXAtcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1tZC1zdGFydCB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1tZC1lbmQge1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbWQtY2VudGVyIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1tZC1iZXR3ZWVuIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1tZC1hcm91bmQge1xcbiAgICAtbXMtZmxleC1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbWQtc3RhcnQge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbWQtZW5kIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLW1kLWNlbnRlciB7XFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbWQtYmFzZWxpbmUge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLW1kLXN0cmV0Y2gge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbWQtc3RhcnQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LW1kLWVuZCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1tZC1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LW1kLWJldHdlZW4ge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbWQtYXJvdW5kIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbWQtc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1tZC1hdXRvIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0byAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1tZC1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLW1kLWVuZCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbWQtY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbWQtYmFzZWxpbmUge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbWQtc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5mbGV4LWxnLXJvdyB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbCAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1sZy1jb2x1bW4ge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LWxnLXJvdy1yZXZlcnNlIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctY29sdW1uLXJldmVyc2Uge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgtbGctd3JhcCB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC1sZy1ub3dyYXAge1xcbiAgICAtbXMtZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LWxnLXdyYXAtcmV2ZXJzZSB7XFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1sZy1zdGFydCB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1sZy1lbmQge1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBlbmQgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctY2VudGVyIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1sZy1iZXR3ZWVuIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmp1c3RpZnktY29udGVudC1sZy1hcm91bmQge1xcbiAgICAtbXMtZmxleC1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbGctc3RhcnQge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogc3RhcnQgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbGctZW5kIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLWNlbnRlciB7XFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24taXRlbXMtbGctYmFzZWxpbmUge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLXN0cmV0Y2gge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctc3RhcnQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LWxnLWVuZCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC1sZy1jZW50ZXIge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LWxnLWJldHdlZW4ge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctYXJvdW5kIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBkaXN0cmlidXRlICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1sZy1hdXRvIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0byAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi1sZy1zdGFydCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLWxnLWVuZCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbGctY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbGctYmFzZWxpbmUge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYtbGctc3RyZXRjaCB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuZmxleC14bC1yb3cge1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWwgIWltcG9ydGFudDtcXG4gICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWwgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgteGwtY29sdW1uIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbCAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC1yb3ctcmV2ZXJzZSB7XFxuICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbCAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IHJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2UgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXhsLWNvbHVtbi1yZXZlcnNlIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbCAhaW1wb3J0YW50O1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IHJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbGV4LXhsLXdyYXAge1xcbiAgICAtbXMtZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsZXgteGwtbm93cmFwIHtcXG4gICAgLW1zLWZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxleC14bC13cmFwLXJldmVyc2Uge1xcbiAgICAtbXMtZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDtcXG4gICAgZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtc3RhcnQge1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wYWNrOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtZW5kIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogZW5kICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGVuZCAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuanVzdGlmeS1jb250ZW50LXhsLWNlbnRlciB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtYmV0d2VlbiB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtcGFjazoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtYXJvdW5kIHtcXG4gICAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZSAhaW1wb3J0YW50O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLXhsLXN0YXJ0IHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0ICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLXhsLWVuZCB7XFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy14bC1jZW50ZXIge1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWl0ZW1zLXhsLWJhc2VsaW5lIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1pdGVtcy14bC1zdHJldGNoIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXhsLXN0YXJ0IHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC14bC1lbmQge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IGVuZCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLWNvbnRlbnQteGwtY2VudGVyIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tY29udGVudC14bC1iZXR3ZWVuIHtcXG4gICAgLW1zLWZsZXgtbGluZS1wYWNrOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXhsLWFyb3VuZCB7XFxuICAgIC1tcy1mbGV4LWxpbmUtcGFjazogZGlzdHJpYnV0ZSAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1jb250ZW50LXhsLXN0cmV0Y2gge1xcbiAgICAtbXMtZmxleC1saW5lLXBhY2s6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gICAgYWxpZ24tY29udGVudDogc3RyZXRjaCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYteGwtYXV0byB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGF1dG8gIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmFsaWduLXNlbGYteGwtc3RhcnQge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdGFydCAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuYWxpZ24tc2VsZi14bC1lbmQge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBlbmQgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXhsLWNlbnRlciB7XFxuICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXhsLWJhc2VsaW5lIHtcXG4gICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gICAgYWxpZ24tc2VsZjogYmFzZWxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5hbGlnbi1zZWxmLXhsLXN0cmV0Y2gge1xcbiAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBzdHJldGNoICFpbXBvcnRhbnQ7XFxuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuLmZsb2F0LWxlZnQge1xcbiAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmZsb2F0LXJpZ2h0IHtcXG4gIGZsb2F0OiByaWdodCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZmxvYXQtbm9uZSB7XFxuICBmbG9hdDogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5mbG9hdC1zbS1sZWZ0IHtcXG4gICAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbG9hdC1zbS1yaWdodCB7XFxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsb2F0LXNtLW5vbmUge1xcbiAgICBmbG9hdDogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5mbG9hdC1tZC1sZWZ0IHtcXG4gICAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbG9hdC1tZC1yaWdodCB7XFxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsb2F0LW1kLW5vbmUge1xcbiAgICBmbG9hdDogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5mbG9hdC1sZy1sZWZ0IHtcXG4gICAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbG9hdC1sZy1yaWdodCB7XFxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmZsb2F0LWxnLW5vbmUge1xcbiAgICBmbG9hdDogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuZmxvYXQteGwtbGVmdCB7XFxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuZmxvYXQteGwtcmlnaHQge1xcbiAgICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5mbG9hdC14bC1ub25lIHtcXG4gICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuLnBvc2l0aW9uLXN0YXRpYyB7XFxuICBwb3NpdGlvbjogc3RhdGljICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wb3NpdGlvbi1yZWxhdGl2ZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmUgIWltcG9ydGFudDtcXG59XFxuXFxuLnBvc2l0aW9uLWFic29sdXRlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucG9zaXRpb24tZml4ZWQge1xcbiAgcG9zaXRpb246IGZpeGVkICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wb3NpdGlvbi1zdGlja3kge1xcbiAgcG9zaXRpb246IC13ZWJraXQtc3RpY2t5ICFpbXBvcnRhbnQ7XFxuICBwb3NpdGlvbjogc3RpY2t5ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5maXhlZC10b3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTAzMDtcXG59XFxuXFxuLmZpeGVkLWJvdHRvbSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDMwO1xcbn1cXG5cXG5Ac3VwcG9ydHMgKChwb3NpdGlvbjogLXdlYmtpdC1zdGlja3kpIG9yIChwb3NpdGlvbjogc3RpY2t5KSkge1xcbiAgLnN0aWNreS10b3Age1xcbiAgICBwb3NpdGlvbjogLXdlYmtpdC1zdGlja3k7XFxuICAgIHBvc2l0aW9uOiBzdGlja3k7XFxuICAgIHRvcDogMDtcXG4gICAgei1pbmRleDogMTAyMDtcXG4gIH1cXG59XFxuXFxuLnNyLW9ubHkge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgcGFkZGluZzogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIC13ZWJraXQtY2xpcC1wYXRoOiBpbnNldCg1MCUpO1xcbiAgY2xpcC1wYXRoOiBpbnNldCg1MCUpO1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4uc3Itb25seS1mb2N1c2FibGU6YWN0aXZlLCAuc3Itb25seS1mb2N1c2FibGU6Zm9jdXMge1xcbiAgcG9zaXRpb246IHN0YXRpYztcXG4gIHdpZHRoOiBhdXRvO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICBjbGlwOiBhdXRvO1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIC13ZWJraXQtY2xpcC1wYXRoOiBub25lO1xcbiAgY2xpcC1wYXRoOiBub25lO1xcbn1cXG5cXG4udy0yNSB7XFxuICB3aWR0aDogMjUlICFpbXBvcnRhbnQ7XFxufVxcblxcbi53LTUwIHtcXG4gIHdpZHRoOiA1MCUgIWltcG9ydGFudDtcXG59XFxuXFxuLnctNzUge1xcbiAgd2lkdGg6IDc1JSAhaW1wb3J0YW50O1xcbn1cXG5cXG4udy0xMDAge1xcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLmgtMjUge1xcbiAgaGVpZ2h0OiAyNSUgIWltcG9ydGFudDtcXG59XFxuXFxuLmgtNTAge1xcbiAgaGVpZ2h0OiA1MCUgIWltcG9ydGFudDtcXG59XFxuXFxuLmgtNzUge1xcbiAgaGVpZ2h0OiA3NSUgIWltcG9ydGFudDtcXG59XFxuXFxuLmgtMTAwIHtcXG4gIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXctMTAwIHtcXG4gIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWgtMTAwIHtcXG4gIG1heC1oZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcXG59XFxuXFxuLm0tMCB7XFxuICBtYXJnaW46IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLm10LTAsXFxuLm15LTAge1xcbiAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXItMCxcXG4ubXgtMCB7XFxuICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLm1iLTAsXFxuLm15LTAge1xcbiAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWwtMCxcXG4ubXgtMCB7XFxuICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS0xIHtcXG4gIG1hcmdpbjogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtMSxcXG4ubXktMSB7XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci0xLFxcbi5teC0xIHtcXG4gIG1hcmdpbi1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItMSxcXG4ubXktMSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC0xLFxcbi5teC0xIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tLTIge1xcbiAgbWFyZ2luOiAwLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm10LTIsXFxuLm15LTIge1xcbiAgbWFyZ2luLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci0yLFxcbi5teC0yIHtcXG4gIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tYi0yLFxcbi5teS0yIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWwtMixcXG4ubXgtMiB7XFxuICBtYXJnaW4tbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tLTMge1xcbiAgbWFyZ2luOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tdC0zLFxcbi5teS0zIHtcXG4gIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1yLTMsXFxuLm14LTMge1xcbiAgbWFyZ2luLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tYi0zLFxcbi5teS0zIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1sLTMsXFxuLm14LTMge1xcbiAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm0tNCB7XFxuICBtYXJnaW46IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtNCxcXG4ubXktNCB7XFxuICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1yLTQsXFxuLm14LTQge1xcbiAgbWFyZ2luLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1iLTQsXFxuLm15LTQge1xcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC00LFxcbi5teC00IHtcXG4gIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm0tNSB7XFxuICBtYXJnaW46IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm10LTUsXFxuLm15LTUge1xcbiAgbWFyZ2luLXRvcDogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXItNSxcXG4ubXgtNSB7XFxuICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1iLTUsXFxuLm15LTUge1xcbiAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWwtNSxcXG4ubXgtNSB7XFxuICBtYXJnaW4tbGVmdDogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC0wIHtcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnB0LTAsXFxuLnB5LTAge1xcbiAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTAsXFxuLnB4LTAge1xcbiAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItMCxcXG4ucHktMCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGwtMCxcXG4ucHgtMCB7XFxuICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnAtMSB7XFxuICBwYWRkaW5nOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wdC0xLFxcbi5weS0xIHtcXG4gIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci0xLFxcbi5weC0xIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBiLTEsXFxuLnB5LTEge1xcbiAgcGFkZGluZy1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBsLTEsXFxuLnB4LTEge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wLTIge1xcbiAgcGFkZGluZzogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wdC0yLFxcbi5weS0yIHtcXG4gIHBhZGRpbmctdG9wOiAwLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTIsXFxuLnB4LTIge1xcbiAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wYi0yLFxcbi5weS0yIHtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBsLTIsXFxuLnB4LTIge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnAtMyB7XFxuICBwYWRkaW5nOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wdC0zLFxcbi5weS0zIHtcXG4gIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci0zLFxcbi5weC0zIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBiLTMsXFxuLnB5LTMge1xcbiAgcGFkZGluZy1ib3R0b206IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBsLTMsXFxuLnB4LTMge1xcbiAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wLTQge1xcbiAgcGFkZGluZzogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wdC00LFxcbi5weS00IHtcXG4gIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTQsXFxuLnB4LTQge1xcbiAgcGFkZGluZy1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wYi00LFxcbi5weS00IHtcXG4gIHBhZGRpbmctYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBsLTQsXFxuLnB4LTQge1xcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnAtNSB7XFxuICBwYWRkaW5nOiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wdC01LFxcbi5weS01IHtcXG4gIHBhZGRpbmctdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci01LFxcbi5weC01IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBiLTUsXFxuLnB5LTUge1xcbiAgcGFkZGluZy1ib3R0b206IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnBsLTUsXFxuLnB4LTUge1xcbiAgcGFkZGluZy1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tLWF1dG8ge1xcbiAgbWFyZ2luOiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tdC1hdXRvLFxcbi5teS1hdXRvIHtcXG4gIG1hcmdpbi10b3A6IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLm1yLWF1dG8sXFxuLm14LWF1dG8ge1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tYi1hdXRvLFxcbi5teS1hdXRvIHtcXG4gIG1hcmdpbi1ib3R0b206IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLm1sLWF1dG8sXFxuLm14LWF1dG8ge1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAubS1zbS0wIHtcXG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQtc20tMCxcXG4gIC5teS1zbS0wIHtcXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLXNtLTAsXFxuICAubXgtc20tMCB7XFxuICAgIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXNtLTAsXFxuICAubXktc20tMCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC1zbS0wLFxcbiAgLm14LXNtLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tc20tMSB7XFxuICAgIG1hcmdpbjogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXNtLTEsXFxuICAubXktc20tMSB7XFxuICAgIG1hcmdpbi10b3A6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1zbS0xLFxcbiAgLm14LXNtLTEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1zbS0xLFxcbiAgLm15LXNtLTEge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtc20tMSxcXG4gIC5teC1zbS0xIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXNtLTIge1xcbiAgICBtYXJnaW46IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXNtLTIsXFxuICAubXktc20tMiB7XFxuICAgIG1hcmdpbi10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLXNtLTIsXFxuICAubXgtc20tMiB7XFxuICAgIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItc20tMixcXG4gIC5teS1zbS0yIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtc20tMixcXG4gIC5teC1zbS0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tc20tMyB7XFxuICAgIG1hcmdpbjogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXNtLTMsXFxuICAubXktc20tMyB7XFxuICAgIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1zbS0zLFxcbiAgLm14LXNtLTMge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1zbS0zLFxcbiAgLm15LXNtLTMge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtc20tMyxcXG4gIC5teC1zbS0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXNtLTQge1xcbiAgICBtYXJnaW46IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXNtLTQsXFxuICAubXktc20tNCB7XFxuICAgIG1hcmdpbi10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLXNtLTQsXFxuICAubXgtc20tNCB7XFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItc20tNCxcXG4gIC5teS1zbS00IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtc20tNCxcXG4gIC5teC1zbS00IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tc20tNSB7XFxuICAgIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXNtLTUsXFxuICAubXktc20tNSB7XFxuICAgIG1hcmdpbi10b3A6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1zbS01LFxcbiAgLm14LXNtLTUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1zbS01LFxcbiAgLm15LXNtLTUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtc20tNSxcXG4gIC5teC1zbS01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLXNtLTAge1xcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtc20tMCxcXG4gIC5weS1zbS0wIHtcXG4gICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1zbS0wLFxcbiAgLnB4LXNtLTAge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItc20tMCxcXG4gIC5weS1zbS0wIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1zbS0wLFxcbiAgLnB4LXNtLTAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLXNtLTEge1xcbiAgICBwYWRkaW5nOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtc20tMSxcXG4gIC5weS1zbS0xIHtcXG4gICAgcGFkZGluZy10b3A6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1zbS0xLFxcbiAgLnB4LXNtLTEge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItc20tMSxcXG4gIC5weS1zbS0xIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1zbS0xLFxcbiAgLnB4LXNtLTEge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLXNtLTIge1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1zbS0yLFxcbiAgLnB5LXNtLTIge1xcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItc20tMixcXG4gIC5weC1zbS0yIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItc20tMixcXG4gIC5weS1zbS0yIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLXNtLTIsXFxuICAucHgtc20tMiB7XFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1zbS0zIHtcXG4gICAgcGFkZGluZzogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXNtLTMsXFxuICAucHktc20tMyB7XFxuICAgIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItc20tMyxcXG4gIC5weC1zbS0zIHtcXG4gICAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXNtLTMsXFxuICAucHktc20tMyB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtc20tMyxcXG4gIC5weC1zbS0zIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1zbS00IHtcXG4gICAgcGFkZGluZzogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtc20tNCxcXG4gIC5weS1zbS00IHtcXG4gICAgcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXNtLTQsXFxuICAucHgtc20tNCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXNtLTQsXFxuICAucHktc20tNCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1zbS00LFxcbiAgLnB4LXNtLTQge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtc20tNSB7XFxuICAgIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1zbS01LFxcbiAgLnB5LXNtLTUge1xcbiAgICBwYWRkaW5nLXRvcDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXNtLTUsXFxuICAucHgtc20tNSB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1zbS01LFxcbiAgLnB5LXNtLTUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLXNtLTUsXFxuICAucHgtc20tNSB7XFxuICAgIHBhZGRpbmctbGVmdDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tc20tYXV0byB7XFxuICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXNtLWF1dG8sXFxuICAubXktc20tYXV0byB7XFxuICAgIG1hcmdpbi10b3A6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1zbS1hdXRvLFxcbiAgLm14LXNtLWF1dG8ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1zbS1hdXRvLFxcbiAgLm15LXNtLWF1dG8ge1xcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtc20tYXV0byxcXG4gIC5teC1zbS1hdXRvIHtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAubS1tZC0wIHtcXG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQtbWQtMCxcXG4gIC5teS1tZC0wIHtcXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLW1kLTAsXFxuICAubXgtbWQtMCB7XFxuICAgIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLW1kLTAsXFxuICAubXktbWQtMCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC1tZC0wLFxcbiAgLm14LW1kLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbWQtMSB7XFxuICAgIG1hcmdpbjogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LW1kLTEsXFxuICAubXktbWQtMSB7XFxuICAgIG1hcmdpbi10b3A6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1tZC0xLFxcbiAgLm14LW1kLTEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1tZC0xLFxcbiAgLm15LW1kLTEge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbWQtMSxcXG4gIC5teC1tZC0xIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLW1kLTIge1xcbiAgICBtYXJnaW46IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LW1kLTIsXFxuICAubXktbWQtMiB7XFxuICAgIG1hcmdpbi10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLW1kLTIsXFxuICAubXgtbWQtMiB7XFxuICAgIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbWQtMixcXG4gIC5teS1tZC0yIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbWQtMixcXG4gIC5teC1tZC0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbWQtMyB7XFxuICAgIG1hcmdpbjogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LW1kLTMsXFxuICAubXktbWQtMyB7XFxuICAgIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1tZC0zLFxcbiAgLm14LW1kLTMge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1tZC0zLFxcbiAgLm15LW1kLTMge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbWQtMyxcXG4gIC5teC1tZC0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLW1kLTQge1xcbiAgICBtYXJnaW46IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LW1kLTQsXFxuICAubXktbWQtNCB7XFxuICAgIG1hcmdpbi10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLW1kLTQsXFxuICAubXgtbWQtNCB7XFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbWQtNCxcXG4gIC5teS1tZC00IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbWQtNCxcXG4gIC5teC1tZC00IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbWQtNSB7XFxuICAgIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LW1kLTUsXFxuICAubXktbWQtNSB7XFxuICAgIG1hcmdpbi10b3A6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1tZC01LFxcbiAgLm14LW1kLTUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1tZC01LFxcbiAgLm15LW1kLTUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbWQtNSxcXG4gIC5teC1tZC01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLW1kLTAge1xcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbWQtMCxcXG4gIC5weS1tZC0wIHtcXG4gICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1tZC0wLFxcbiAgLnB4LW1kLTAge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbWQtMCxcXG4gIC5weS1tZC0wIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1tZC0wLFxcbiAgLnB4LW1kLTAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLW1kLTEge1xcbiAgICBwYWRkaW5nOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbWQtMSxcXG4gIC5weS1tZC0xIHtcXG4gICAgcGFkZGluZy10b3A6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1tZC0xLFxcbiAgLnB4LW1kLTEge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbWQtMSxcXG4gIC5weS1tZC0xIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1tZC0xLFxcbiAgLnB4LW1kLTEge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLW1kLTIge1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1tZC0yLFxcbiAgLnB5LW1kLTIge1xcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbWQtMixcXG4gIC5weC1tZC0yIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbWQtMixcXG4gIC5weS1tZC0yIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLW1kLTIsXFxuICAucHgtbWQtMiB7XFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1tZC0zIHtcXG4gICAgcGFkZGluZzogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LW1kLTMsXFxuICAucHktbWQtMyB7XFxuICAgIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbWQtMyxcXG4gIC5weC1tZC0zIHtcXG4gICAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLW1kLTMsXFxuICAucHktbWQtMyB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbWQtMyxcXG4gIC5weC1tZC0zIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1tZC00IHtcXG4gICAgcGFkZGluZzogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbWQtNCxcXG4gIC5weS1tZC00IHtcXG4gICAgcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLW1kLTQsXFxuICAucHgtbWQtNCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLW1kLTQsXFxuICAucHktbWQtNCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1tZC00LFxcbiAgLnB4LW1kLTQge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtbWQtNSB7XFxuICAgIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1tZC01LFxcbiAgLnB5LW1kLTUge1xcbiAgICBwYWRkaW5nLXRvcDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLW1kLTUsXFxuICAucHgtbWQtNSB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1tZC01LFxcbiAgLnB5LW1kLTUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLW1kLTUsXFxuICAucHgtbWQtNSB7XFxuICAgIHBhZGRpbmctbGVmdDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbWQtYXV0byB7XFxuICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LW1kLWF1dG8sXFxuICAubXktbWQtYXV0byB7XFxuICAgIG1hcmdpbi10b3A6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1tZC1hdXRvLFxcbiAgLm14LW1kLWF1dG8ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1tZC1hdXRvLFxcbiAgLm15LW1kLWF1dG8ge1xcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbWQtYXV0byxcXG4gIC5teC1tZC1hdXRvIHtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAubS1sZy0wIHtcXG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXQtbGctMCxcXG4gIC5teS1sZy0wIHtcXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLWxnLTAsXFxuICAubXgtbGctMCB7XFxuICAgIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLWxnLTAsXFxuICAubXktbGctMCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tbC1sZy0wLFxcbiAgLm14LWxnLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbGctMSB7XFxuICAgIG1hcmdpbjogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LWxnLTEsXFxuICAubXktbGctMSB7XFxuICAgIG1hcmdpbi10b3A6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1sZy0xLFxcbiAgLm14LWxnLTEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1sZy0xLFxcbiAgLm15LWxnLTEge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbGctMSxcXG4gIC5teC1sZy0xIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLWxnLTIge1xcbiAgICBtYXJnaW46IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LWxnLTIsXFxuICAubXktbGctMiB7XFxuICAgIG1hcmdpbi10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLWxnLTIsXFxuICAubXgtbGctMiB7XFxuICAgIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbGctMixcXG4gIC5teS1sZy0yIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbGctMixcXG4gIC5teC1sZy0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbGctMyB7XFxuICAgIG1hcmdpbjogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LWxnLTMsXFxuICAubXktbGctMyB7XFxuICAgIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1sZy0zLFxcbiAgLm14LWxnLTMge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1sZy0zLFxcbiAgLm15LWxnLTMge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbGctMyxcXG4gIC5teC1sZy0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLWxnLTQge1xcbiAgICBtYXJnaW46IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LWxnLTQsXFxuICAubXktbGctNCB7XFxuICAgIG1hcmdpbi10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1yLWxnLTQsXFxuICAubXgtbGctNCB7XFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWItbGctNCxcXG4gIC5teS1sZy00IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbGctNCxcXG4gIC5teC1sZy00IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbGctNSB7XFxuICAgIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LWxnLTUsXFxuICAubXktbGctNSB7XFxuICAgIG1hcmdpbi10b3A6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1sZy01LFxcbiAgLm14LWxnLTUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1sZy01LFxcbiAgLm15LWxnLTUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbGctNSxcXG4gIC5teC1sZy01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLWxnLTAge1xcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbGctMCxcXG4gIC5weS1sZy0wIHtcXG4gICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1sZy0wLFxcbiAgLnB4LWxnLTAge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbGctMCxcXG4gIC5weS1sZy0wIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1sZy0wLFxcbiAgLnB4LWxnLTAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLWxnLTEge1xcbiAgICBwYWRkaW5nOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbGctMSxcXG4gIC5weS1sZy0xIHtcXG4gICAgcGFkZGluZy10b3A6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci1sZy0xLFxcbiAgLnB4LWxnLTEge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbGctMSxcXG4gIC5weS1sZy0xIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1sZy0xLFxcbiAgLnB4LWxnLTEge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLWxnLTIge1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1sZy0yLFxcbiAgLnB5LWxnLTIge1xcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbGctMixcXG4gIC5weC1sZy0yIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGItbGctMixcXG4gIC5weS1sZy0yIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLWxnLTIsXFxuICAucHgtbGctMiB7XFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1sZy0zIHtcXG4gICAgcGFkZGluZzogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LWxnLTMsXFxuICAucHktbGctMyB7XFxuICAgIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHItbGctMyxcXG4gIC5weC1sZy0zIHtcXG4gICAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLWxnLTMsXFxuICAucHktbGctMyB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwtbGctMyxcXG4gIC5weC1sZy0zIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC1sZy00IHtcXG4gICAgcGFkZGluZzogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQtbGctNCxcXG4gIC5weS1sZy00IHtcXG4gICAgcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLWxnLTQsXFxuICAucHgtbGctNCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLWxnLTQsXFxuICAucHktbGctNCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC1sZy00LFxcbiAgLnB4LWxnLTQge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAtbGctNSB7XFxuICAgIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC1sZy01LFxcbiAgLnB5LWxnLTUge1xcbiAgICBwYWRkaW5nLXRvcDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLWxnLTUsXFxuICAucHgtbGctNSB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi1sZy01LFxcbiAgLnB5LWxnLTUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLWxnLTUsXFxuICAucHgtbGctNSB7XFxuICAgIHBhZGRpbmctbGVmdDogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm0tbGctYXV0byB7XFxuICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LWxnLWF1dG8sXFxuICAubXktbGctYXV0byB7XFxuICAgIG1hcmdpbi10b3A6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci1sZy1hdXRvLFxcbiAgLm14LWxnLWF1dG8ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi1sZy1hdXRvLFxcbiAgLm15LWxnLWF1dG8ge1xcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwtbGctYXV0byxcXG4gIC5teC1sZy1hdXRvIHtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLm0teGwtMCB7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm10LXhsLTAsXFxuICAubXkteGwtMCB7XFxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci14bC0wLFxcbiAgLm14LXhsLTAge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tYi14bC0wLFxcbiAgLm15LXhsLTAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWwteGwtMCxcXG4gIC5teC14bC0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXhsLTEge1xcbiAgICBtYXJnaW46IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC14bC0xLFxcbiAgLm15LXhsLTEge1xcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXIteGwtMSxcXG4gIC5teC14bC0xIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWIteGwtMSxcXG4gIC5teS14bC0xIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXhsLTEsXFxuICAubXgteGwtMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS14bC0yIHtcXG4gICAgbWFyZ2luOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC14bC0yLFxcbiAgLm15LXhsLTIge1xcbiAgICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci14bC0yLFxcbiAgLm14LXhsLTIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXhsLTIsXFxuICAubXkteGwtMiB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXhsLTIsXFxuICAubXgteGwtMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXhsLTMge1xcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC14bC0zLFxcbiAgLm15LXhsLTMge1xcbiAgICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXIteGwtMyxcXG4gIC5teC14bC0zIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWIteGwtMyxcXG4gIC5teS14bC0zIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXhsLTMsXFxuICAubXgteGwtMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubS14bC00IHtcXG4gICAgbWFyZ2luOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC14bC00LFxcbiAgLm15LXhsLTQge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tci14bC00LFxcbiAgLm14LXhsLTQge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1iLXhsLTQsXFxuICAubXkteGwtNCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXhsLTQsXFxuICAubXgteGwtNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXhsLTUge1xcbiAgICBtYXJnaW46IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC14bC01LFxcbiAgLm15LXhsLTUge1xcbiAgICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXIteGwtNSxcXG4gIC5teC14bC01IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWIteGwtNSxcXG4gIC5teS14bC01IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXhsLTUsXFxuICAubXgteGwtNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC14bC0wIHtcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXhsLTAsXFxuICAucHkteGwtMCB7XFxuICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHIteGwtMCxcXG4gIC5weC14bC0wIHtcXG4gICAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXhsLTAsXFxuICAucHkteGwtMCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwteGwtMCxcXG4gIC5weC14bC0wIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC14bC0xIHtcXG4gICAgcGFkZGluZzogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXhsLTEsXFxuICAucHkteGwtMSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHIteGwtMSxcXG4gIC5weC14bC0xIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXhsLTEsXFxuICAucHkteGwtMSB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwteGwtMSxcXG4gIC5weC14bC0xIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucC14bC0yIHtcXG4gICAgcGFkZGluZzogMC41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQteGwtMixcXG4gIC5weS14bC0yIHtcXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXhsLTIsXFxuICAucHgteGwtMiB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBiLXhsLTIsXFxuICAucHkteGwtMiB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC14bC0yLFxcbiAgLnB4LXhsLTIge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAteGwtMyB7XFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wdC14bC0zLFxcbiAgLnB5LXhsLTMge1xcbiAgICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnByLXhsLTMsXFxuICAucHgteGwtMyB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi14bC0zLFxcbiAgLnB5LXhsLTMge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnBsLXhsLTMsXFxuICAucHgteGwtMyB7XFxuICAgIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnAteGwtNCB7XFxuICAgIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnB0LXhsLTQsXFxuICAucHkteGwtNCB7XFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci14bC00LFxcbiAgLnB4LXhsLTQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wYi14bC00LFxcbiAgLnB5LXhsLTQge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGwteGwtNCxcXG4gIC5weC14bC00IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wLXhsLTUge1xcbiAgICBwYWRkaW5nOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucHQteGwtNSxcXG4gIC5weS14bC01IHtcXG4gICAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wci14bC01LFxcbiAgLnB4LXhsLTUge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAucGIteGwtNSxcXG4gIC5weS14bC01IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5wbC14bC01LFxcbiAgLnB4LXhsLTUge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tLXhsLWF1dG8ge1xcbiAgICBtYXJnaW46IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5tdC14bC1hdXRvLFxcbiAgLm15LXhsLWF1dG8ge1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubXIteGwtYXV0byxcXG4gIC5teC14bC1hdXRvIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubWIteGwtYXV0byxcXG4gIC5teS14bC1hdXRvIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm1sLXhsLWF1dG8sXFxuICAubXgteGwtYXV0byB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi50ZXh0LWp1c3RpZnkge1xcbiAgdGV4dC1hbGlnbjoganVzdGlmeSAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1ub3dyYXAge1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC10cnVuY2F0ZSB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG5cXG4udGV4dC1sZWZ0IHtcXG4gIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcXG59XFxuXFxuLnRleHQtcmlnaHQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcXG59XFxuXFxuLnRleHQtY2VudGVyIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC50ZXh0LXNtLWxlZnQge1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGV4dC1zbS1yaWdodCB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAudGV4dC1zbS1jZW50ZXIge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAudGV4dC1tZC1sZWZ0IHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRleHQtbWQtcmlnaHQge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRleHQtbWQtY2VudGVyIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLnRleHQtbGctbGVmdCB7XFxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC50ZXh0LWxnLXJpZ2h0IHtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC50ZXh0LWxnLWNlbnRlciB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAudGV4dC14bC1sZWZ0IHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRleHQteGwtcmlnaHQge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRleHQteGwtY2VudGVyIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi50ZXh0LWxvd2VyY2FzZSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LXVwcGVyY2FzZSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi50ZXh0LWNhcGl0YWxpemUge1xcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemUgIWltcG9ydGFudDtcXG59XFxuXFxuLmZvbnQtd2VpZ2h0LWxpZ2h0IHtcXG4gIGZvbnQtd2VpZ2h0OiAzMDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmZvbnQtd2VpZ2h0LW5vcm1hbCB7XFxuICBmb250LXdlaWdodDogNDAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5mb250LXdlaWdodC1ib2xkIHtcXG4gIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmZvbnQtaXRhbGljIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYyAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC13aGl0ZSB7XFxuICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1wcmltYXJ5IHtcXG4gIGNvbG9yOiAjMDA3YmZmICFpbXBvcnRhbnQ7XFxufVxcblxcbmEudGV4dC1wcmltYXJ5OmhvdmVyLCBhLnRleHQtcHJpbWFyeTpmb2N1cyB7XFxuICBjb2xvcjogIzAwNjJjYyAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1zZWNvbmRhcnkge1xcbiAgY29sb3I6ICM2Yzc1N2QgIWltcG9ydGFudDtcXG59XFxuXFxuYS50ZXh0LXNlY29uZGFyeTpob3ZlciwgYS50ZXh0LXNlY29uZGFyeTpmb2N1cyB7XFxuICBjb2xvcjogIzU0NWI2MiAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjMjhhNzQ1ICFpbXBvcnRhbnQ7XFxufVxcblxcbmEudGV4dC1zdWNjZXNzOmhvdmVyLCBhLnRleHQtc3VjY2Vzczpmb2N1cyB7XFxuICBjb2xvcjogIzFlN2UzNCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1pbmZvIHtcXG4gIGNvbG9yOiAjMTdhMmI4ICFpbXBvcnRhbnQ7XFxufVxcblxcbmEudGV4dC1pbmZvOmhvdmVyLCBhLnRleHQtaW5mbzpmb2N1cyB7XFxuICBjb2xvcjogIzExN2E4YiAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC13YXJuaW5nIHtcXG4gIGNvbG9yOiAjZmZjMTA3ICFpbXBvcnRhbnQ7XFxufVxcblxcbmEudGV4dC13YXJuaW5nOmhvdmVyLCBhLnRleHQtd2FybmluZzpmb2N1cyB7XFxuICBjb2xvcjogI2QzOWUwMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1kYW5nZXIge1xcbiAgY29sb3I6ICNkYzM1NDUgIWltcG9ydGFudDtcXG59XFxuXFxuYS50ZXh0LWRhbmdlcjpob3ZlciwgYS50ZXh0LWRhbmdlcjpmb2N1cyB7XFxuICBjb2xvcjogI2JkMjEzMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1saWdodCB7XFxuICBjb2xvcjogI2Y4ZjlmYSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLnRleHQtbGlnaHQ6aG92ZXIsIGEudGV4dC1saWdodDpmb2N1cyB7XFxuICBjb2xvcjogI2RhZTBlNSAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1kYXJrIHtcXG4gIGNvbG9yOiAjMzQzYTQwICFpbXBvcnRhbnQ7XFxufVxcblxcbmEudGV4dC1kYXJrOmhvdmVyLCBhLnRleHQtZGFyazpmb2N1cyB7XFxuICBjb2xvcjogIzFkMjEyNCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1tdXRlZCB7XFxuICBjb2xvcjogIzZjNzU3ZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGV4dC1oaWRlIHtcXG4gIGZvbnQ6IDAvMCBhO1xcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuLnZpc2libGUge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaW52aXNpYmxlIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgcHJpbnQge1xcbiAgKixcXG4gICo6OmJlZm9yZSxcXG4gICo6OmFmdGVyIHtcXG4gICAgdGV4dC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcXG4gICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgYTpub3QoLmJ0bikge1xcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG4gIH1cXG4gIGFiYnJbdGl0bGVdOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6IFxcXCIgKFxcXCIgYXR0cih0aXRsZSkgXFxcIilcXFwiO1xcbiAgfVxcbiAgcHJlIHtcXG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwICFpbXBvcnRhbnQ7XFxuICB9XFxuICBwcmUsXFxuICBibG9ja3F1b3RlIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcXG4gICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkO1xcbiAgfVxcbiAgdGhlYWQge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1oZWFkZXItZ3JvdXA7XFxuICB9XFxuICB0cixcXG4gIGltZyB7XFxuICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDtcXG4gIH1cXG4gIHAsXFxuICBoMixcXG4gIGgzIHtcXG4gICAgb3JwaGFuczogMztcXG4gICAgd2lkb3dzOiAzO1xcbiAgfVxcbiAgaDIsXFxuICBoMyB7XFxuICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGF2b2lkO1xcbiAgfVxcbiAgQHBhZ2Uge1xcbiAgICBzaXplOiBhMztcXG4gIH1cXG4gIGJvZHkge1xcbiAgICBtaW4td2lkdGg6IDk5MnB4ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWluLXdpZHRoOiA5OTJweCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLm5hdmJhciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuICAuYmFkZ2Uge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwO1xcbiAgfVxcbiAgLnRhYmxlIHtcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRhYmxlIHRkLFxcbiAgLnRhYmxlIHRoIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLnRhYmxlLWJvcmRlcmVkIHRoLFxcbiAgLnRhYmxlLWJvcmRlcmVkIHRkIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RkZCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAuY3NzXG4vLyBtb2R1bGUgaWQgPSAzOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanNcbi8vIG1vZHVsZSBpZCA9IDM5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7SGFzaFJvdXRlcn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCBSb3V0ZXNDb250YWluZXIgZnJvbSAnLi9yb3V0ZXNDb250YWluZXInXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ21vYngtcmVhY3QnXG5cbmltcG9ydCBzdG9yZXMgZnJvbSAnLi4vc3RvcmUvaW5kZXgnO1xuXG5jbGFzcyBJbmRleENvbnRhaW5lciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgIH1cblxuICAgcmVuZGVyKCkge1xuICAgICByZXR1cm4gKFxuICAgICAgICAgPFByb3ZpZGVyIHsuLi5zdG9yZXN9PlxuICAgICAgICAgICA8SGFzaFJvdXRlcj5cbiAgICAgICAgICAgICA8Um91dGVzQ29udGFpbmVyLz5cbiAgICAgICAgICAgPC9IYXNoUm91dGVyPlxuICAgICAgICAgPC9Qcm92aWRlcj5cbiAgICAgKTtcbiAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5kZXhDb250YWluZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lcnMvaW5kZXguanMiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDM5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzXG4vLyBtb2R1bGUgaWQgPSAzOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qc1xuLy8gbW9kdWxlIGlkID0gMzk2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanNcbi8vIG1vZHVsZSBpZCA9IDM5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoX0RPTVV0aWxzLmNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0hpc3RvcnkpKCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICEoMCwgX0RPTVV0aWxzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UpKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gX0RPTVV0aWxzLmdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCFiYXNlbmFtZSB8fCAoMCwgX1BhdGhVdGlscy5oYXNCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLnN0cmlwQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoKDAsIF9ET01VdGlscy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KShldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qc1xuLy8gbW9kdWxlIGlkID0gMzk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYXNoUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2hhc2hiYW5nJywgJ25vc2xhc2gnLCAnc2xhc2gnXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qc1xuLy8gbW9kdWxlIGlkID0gMzk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDQwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IE1lbW9yeVJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTWVtb3J5Um91dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA0MDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA0MDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gX1BhdGhVdGlscy5jcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlTWVtb3J5SGlzdG9yeTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDQwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5pbXBvcnQgTGluayBmcm9tICcuL0xpbmsnO1xuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG52YXIgTmF2TGluayA9IGZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgdG8gPSBfcmVmLnRvLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZ2V0SXNBY3RpdmUgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmLmFyaWFDdXJyZW50LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ3RvJywgJ2V4YWN0JywgJ3N0cmljdCcsICdsb2NhdGlvbicsICdhY3RpdmVDbGFzc05hbWUnLCAnY2xhc3NOYW1lJywgJ2FjdGl2ZVN0eWxlJywgJ3N0eWxlJywgJ2lzQWN0aXZlJywgJ2FyaWFDdXJyZW50J10pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogKHR5cGVvZiB0byA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodG8pKSA9PT0gJ29iamVjdCcgPyB0by5wYXRobmFtZSA6IHRvLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbignICcpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICAnYXJpYS1jdXJyZW50JzogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnRcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBhcmlhQ3VycmVudDogUHJvcFR5cGVzLm9uZU9mKFsncGFnZScsICdzdGVwJywgJ2xvY2F0aW9uJywgJ3RydWUnXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnLFxuICBhcmlhQ3VycmVudDogJ3RydWUnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qc1xuLy8gbW9kdWxlIGlkID0gNDA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFByb21wdCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUHJvbXB0JztcblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUHJvbXB0LmpzXG4vLyBtb2R1bGUgaWQgPSA0MDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qc1xuLy8gbW9kdWxlIGlkID0gNDA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNDA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJ2hpc3RvcnknO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciB1cGRhdGluZyB0aGUgbG9jYXRpb24gcHJvZ3JhbW1hdGljYWxseVxuICogd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVkaXJlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZGlyZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWRpcmVjdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5pc1N0YXRpYyA9IGZ1bmN0aW9uIGlzU3RhdGljKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyICYmIHRoaXMuY29udGV4dC5yb3V0ZXIuc3RhdGljQ29udGV4dDtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnWW91IHRyaWVkIHRvIHJlZGlyZWN0IHRvIHRoZSBzYW1lIHJvdXRlIHlvdVxcJ3JlIGN1cnJlbnRseSBvbjogJyArICgnXCInICsgbmV4dFRvLnBhdGhuYW1lICsgbmV4dFRvLnNlYXJjaCArICdcIicpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHB1c2ggPSBfcHJvcHMucHVzaCxcbiAgICAgICAgdG8gPSBfcHJvcHMudG87XG5cblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDQxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDQxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlTWVtb3J5SGlzdG9yeS5qc1xuLy8gbW9kdWxlIGlkID0gNDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3RhdGljUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgY3JlYXRlUGF0aCwgcGFyc2VQYXRoIH0gZnJvbSAnaGlzdG9yeS9QYXRoVXRpbHMnO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbnZhciBub3JtYWxpemVMb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2F0aW9uKG9iamVjdCkge1xuICB2YXIgX29iamVjdCRwYXRobmFtZSA9IG9iamVjdC5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX29iamVjdCRwYXRobmFtZSA9PT0gdW5kZWZpbmVkID8gJy8nIDogX29iamVjdCRwYXRobmFtZSxcbiAgICAgIF9vYmplY3Qkc2VhcmNoID0gb2JqZWN0LnNlYXJjaCxcbiAgICAgIHNlYXJjaCA9IF9vYmplY3Qkc2VhcmNoID09PSB1bmRlZmluZWQgPyAnJyA6IF9vYmplY3Qkc2VhcmNoLFxuICAgICAgX29iamVjdCRoYXNoID0gb2JqZWN0Lmhhc2gsXG4gICAgICBoYXNoID0gX29iamVjdCRoYXNoID09PSB1bmRlZmluZWQgPyAnJyA6IF9vYmplY3QkaGFzaDtcblxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChsb2NhdGlvbikgOiBub3JtYWxpemVMb2NhdGlvbihsb2NhdGlvbik7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn07XG5cbnZhciBzdGF0aWNIYW5kbGVyID0gZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW52YXJpYW50KGZhbHNlLCAnWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+JywgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSAnUFVTSCc7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiB7XG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuY29udGV4dFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2Jhc2VuYW1lJywgJ2NvbnRleHQnLCAnbG9jYXRpb24nXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKCdnbycpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKCdnb0JhY2snKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcignZ29Gb3J3YXJkJyksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgaGlzdG9yeTogaGlzdG9yeSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxufTtcblN0YXRpY1JvdXRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGJhc2VuYW1lOiAnJyxcbiAgbG9jYXRpb246ICcvJ1xufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoJztcblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzXG4vLyBtb2R1bGUgaWQgPSA0MTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tICcuL21hdGNoUGF0aCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkgcmV0dXJuO1xuXG4gICAgICB2YXIgX2VsZW1lbnQkcHJvcHMgPSBlbGVtZW50LnByb3BzLFxuICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICBleGFjdCA9IF9lbGVtZW50JHByb3BzLmV4YWN0LFxuICAgICAgICAgIHN0cmljdCA9IF9lbGVtZW50JHByb3BzLnN0cmljdCxcbiAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgZnJvbSA9IF9lbGVtZW50JHByb3BzLmZyb207XG5cbiAgICAgIHZhciBwYXRoID0gcGF0aFByb3AgfHwgZnJvbTtcblxuICAgICAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgZXhhY3Q6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSkgOiByb3V0ZS5tYXRjaDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBsb2NhdGlvbjogbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2guY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qc1xuLy8gbW9kdWxlIGlkID0gNDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGgnO1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanNcbi8vIG1vZHVsZSBpZCA9IDQxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qc1xuLy8gbW9kdWxlIGlkID0gNDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuL1JvdXRlJztcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbJ3dyYXBwZWRDb21wb25lbnRSZWYnXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7IHJlZjogd3JhcHBlZENvbXBvbmVudFJlZiB9KSk7XG4gICAgICB9IH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSAnd2l0aFJvdXRlcignICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyAnKSc7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA0MjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0MjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvdXRlLCBTd2l0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IG9ic2VydmVyLCBpbmplY3QgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCBIb21lUGFnZSBmcm9tICcuLi9Ib21lUGFnZSc7XG5pbXBvcnQgU2VhcmNoUmVzdWx0IGZyb20gJy4uL1NlYXJjaFJlc3VsdCc7XG5pbXBvcnQgU2lnblVwUGFnZSBmcm9tICcuLi9TaWdudXBQYWdlJztcbmltcG9ydCB7U0lHTl9JTl9VUkksIFNJR05fVVBfVVJJLCBTRUFSQ0hfUkVTVUxUX1VSSSwgTU9WSUVfVVJJLCBVU0VSX1VSSX0gZnJvbSBcIi4vdXJpQ29uc3RhbnRzXCI7XG5pbXBvcnQgU2lnbkluUGFnZSBmcm9tIFwiLi4vU2lnbkluUGFnZVwiO1xuaW1wb3J0IE5hdkJhciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9OYXZCYXJcIjtcbmltcG9ydCBNb3ZpZVJvdXRlIGZyb20gJy4vbW92aWVSb3V0ZSc7XG5pbXBvcnQgUHJvZmlsZVJvdXRlIGZyb20gJy4vcHJvZmlsZVJvdXRlJztcblxuQGluamVjdChzdG9yZXMgPT4ge1xuICAgIGxldCB7IHNlc3Npb24gfSA9IHN0b3JlcztcbiAgICByZXR1cm4ge1xuICAgICAgdXNlckluZm86IHNlc3Npb24udXNlckluZm8sXG4gICAgfVxufSlcbkBvYnNlcnZlclxuY2xhc3MgUm91dGVzQ29udGFpbmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMucmVuZGVyUm91dGVyID0gdGhpcy5yZW5kZXJSb3V0ZXIuYmluZCh0aGlzKTtcblxuICAgICAgICAvL0hlcmUgeWEgZ29cbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5Lmxpc3RlbigobG9jYXRpb24sIGFjdGlvbikgPT4ge1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIHJlbmRlclJvdXRlcigpIHtcbiAgICAgICAgbGV0IHsgdXNlckluZm8gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChfLmlzTmlsKHVzZXJJbmZvKSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUga2V5PXtTSUdOX1VQX1VSSX0gcGF0aD17U0lHTl9VUF9VUkl9IGNvbXBvbmVudD17U2lnblVwUGFnZX0vPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUga2V5PXtTSUdOX0lOX1VSSX0gcGF0aD17U0lHTl9JTl9VUkl9IGNvbXBvbmVudD17U2lnbkluUGFnZX0vPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUga2V5PVwiYW55XCIgcGF0aD1cIipcIiBjb21wb25lbnQ9e1NpZ25JblBhZ2V9Lz5cbiAgICAgICAgICAgICAgICA8L1N3aXRjaD5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgICAgICA8Um91dGUga2V5PXtVU0VSX1VSSX0gcGF0aD17YCR7VVNFUl9VUkl9LzppZGB9IGNvbXBvbmVudD17UHJvZmlsZVJvdXRlfS8+XG4gICAgICAgICAgICAgICAgPFJvdXRlIGtleT17TU9WSUVfVVJJfSBwYXRoPXtNT1ZJRV9VUkl9IGNvbXBvbmVudD17TW92aWVSb3V0ZX0vPlxuICAgICAgICAgICAgICAgIDxSb3V0ZSBrZXk9e1NFQVJDSF9SRVNVTFRfVVJJfSBwYXRoPXtTRUFSQ0hfUkVTVUxUX1VSSX0gY29tcG9uZW50PXtTZWFyY2hSZXN1bHR9Lz5cbiAgICAgICAgICAgICAgICB7Lyo8Um91dGUga2V5PXtNT1ZJRV9VUkl9IHBhdGg9e2Ake01PVklFX1VSSX0vOmlkYH0gY29tcG9uZW50PXtNb3ZpZX0vPiovfVxuICAgICAgICAgICAgICAgIDxSb3V0ZSBrZXk9XCJhbnlcIiBwYXRoPVwiKlwiIGNvbXBvbmVudD17SG9tZVBhZ2V9Lz5cbiAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPE5hdkJhci8+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyUm91dGVyKCl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuXG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoUm91dGVzQ29udGFpbmVyKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb250YWluZXJzL3JvdXRlc0NvbnRhaW5lci9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gNDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG9ic2VydmVyLCBpbmplY3QgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCB7d2l0aFJvdXRlcn0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuQGluamVjdChzdG9yZXMgPT4ge1xuICAgIGxldCB7IHNlc3Npb24gfSA9IHN0b3JlcztcbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VySW5mbzogc2Vzc2lvbi51c2VySW5mbyxcbiAgICB9XG59KVxuQG9ic2VydmVyXG5Ad2l0aFJvdXRlclxuY2xhc3MgSG9tZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBmdWxsTmFtZTogdGhpcy5wcm9wcy51c2VySW5mby5mdWxsTmFtZSxcbiAgICB9O1xuICB9XG5cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgICAgPGgzPkhlbGxvIHt0aGlzLnN0YXRlLmZ1bGxOYW1lfSE8L2gzPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lUGFnZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb250YWluZXJzL0hvbWVQYWdlLmpzIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBNb3ZpZUl0ZW0gZnJvbSAnLi4vY29tcG9uZW50cy9Nb3ZpZUl0ZW0nO1xuaW1wb3J0IHtpbmplY3QsIG9ic2VydmVyfSBmcm9tIFwibW9ieC1yZWFjdFwiO1xuXG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgbGV0IHsgdXNlcnMsIG9tZGIsIH0gPSBzdG9yZXM7XG4gIHJldHVybiB7XG4gICAgZ2V0VXNlckJ5U2VhcmNoOiB1c2Vycy5nZXRVc2VyQnlTZWFyY2gsXG4gICAgdXNlckxpc3Q6IHVzZXJzLnVzZXJMaXN0LFxuICAgIGdldE1vdmllQnlTZWFyY2g6IG9tZGIuZ2V0TW92aWVCeVNlYXJjaCxcbiAgICBtb3ZpZUxpc3Q6IG9tZGIubW92aWVMaXN0LnRvSlMoKSxcbiAgfVxufSlcbkBvYnNlcnZlclxuY2xhc3MgU2VhcmNoUmVzdWx0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnNlYXJjaEJ5S2V5V29yZCA9IHRoaXMuc2VhcmNoQnlLZXlXb3JkLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGNvbnN0IHNlYXJjaCA9IHRoaXMucHJvcHMubG9jYXRpb24uc2VhcmNoO1xuICAgIGNvbnN0IHNlYXJjaEJ5ID0gbmV4dFByb3BzLmxvY2F0aW9uLnNlYXJjaDtcbiAgICBpZiAoc2VhcmNoQnkgJiYgKHNlYXJjaEJ5ICE9IHNlYXJjaCkpIHtcbiAgICAgIHRoaXMuc2VhcmNoQnlLZXlXb3JkKHNlYXJjaEJ5LnN1YnN0cig3KSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2VhcmNoQnlLZXlXb3JkKHNlYXJjaEJ5KSB7XG4gICAgY29uc3QgeyBnZXRNb3ZpZUJ5U2VhcmNoLCBnZXRVc2VyQnlTZWFyY2ggfSA9IHRoaXMucHJvcHM7XG4gICAgYXdhaXQgZ2V0TW92aWVCeVNlYXJjaChzZWFyY2hCeSk7XG4gICAgYXdhaXQgZ2V0VXNlckJ5U2VhcmNoKHNlYXJjaEJ5KTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBjb25zdCBzZWFyY2hCeSA9IHRoaXMucHJvcHMubG9jYXRpb24uc2VhcmNoO1xuICAgIGlmIChzZWFyY2hCeSkge1xuICAgICAgdGhpcy5zZWFyY2hCeUtleVdvcmQoc2VhcmNoQnkuc3Vic3RyKDcpKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJVc2VycygpIHtcbiAgICBjb25zdCB7IHVzZXJMaXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIF8ubWFwKHVzZXJMaXN0LCAodXNlcikgPT4ge1xuICAgICAgcmV0dXJuIDxoNSBrZXk9e3VzZXIuX2lkfT57dXNlci5mdWxsTmFtZX08L2g1PlxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyTW92aWVzKCkge1xuICAgIGNvbnN0IHsgbW92aWVMaXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIF8ubWFwKG1vdmllTGlzdCwgKG1vdmllKSA9PiB7XG4gICAgICByZXR1cm4gPE1vdmllSXRlbSBpbWRiSUQ9e21vdmllLmltZGJJRH0ga2V5PXttb3ZpZS5pbWRiSUR9Lz5cbiAgICB9KTtcbiAgfVxuXG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXN1bHQtbGlzdFwiPlxuICAgICAgICAgICAgPGgxPlNlYXJjaCBSZXN1bHQ8L2gxPlxuICAgICAgICAgICAgPGg1PlVzZXJzPC9oNT5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlclVzZXJzKCl9XG4gICAgICAgICAgICA8aDU+TW92aWVzPC9oNT5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlck1vdmllcygpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaFJlc3VsdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb250YWluZXJzL1NlYXJjaFJlc3VsdC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBvYnNlcnZlciwgaW5qZWN0IH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5AaW5qZWN0KChzdG9yZXMpID0+IHtcbiAgICBjb25zdCB7IGxpa2VzIH0gPSBzdG9yZXM7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGlrZU1vdmllOiBsaWtlcy5saWtlTW92aWUsXG4gICAgICAgIHVubGlrZU1vdmllOiBsaWtlcy51bmxpa2VNb3ZpZSxcbiAgICAgICAgaXNNb3ZpZUxpa2VkQnlVc2VyOiBsaWtlcy5pc01vdmllTGlrZWRCeVVzZXIsXG4gICAgICAgIGN1cnJlbnRVc2VyTGlrZWRNb3ZpZXM6IGxpa2VzLmN1cnJlbnRVc2VyTGlrZWRNb3ZpZXMsXG4gICAgfVxufSlcbkBvYnNlcnZlclxuY2xhc3MgTW92aWVMaWtlQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMucG9zdExpa2VkTW92aWUgPSB0aGlzLnBvc3RMaWtlZE1vdmllLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudW5MaWtlTW92aWUgPSB0aGlzLnVuTGlrZU1vdmllLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9zdExpa2VkTW92aWUoKSB7XG4gICAgICAgIGxldCB7IGxpa2VNb3ZpZSwgaW1kYklEIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBhd2FpdCBsaWtlTW92aWUoe1xuICAgICAgICAgICAgaW1kYklEOiBpbWRiSUQsXG4gICAgICAgIH0pXG4gICAgfTtcblxuICAgIGFzeW5jIHVuTGlrZU1vdmllKCkge1xuICAgICAgICBsZXQgeyB1bmxpa2VNb3ZpZSwgaW1kYklEIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGF3YWl0IHVubGlrZU1vdmllKHtcbiAgICAgICAgICAgIGltZGJJRDogaW1kYklELFxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCB7IGlzTW92aWVMaWtlZEJ5VXNlciwgaW1kYklELCBjdXJyZW50VXNlckxpa2VkTW92aWVzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoaXNNb3ZpZUxpa2VkQnlVc2VyKHsgY3VycmVudFVzZXJMaWtlZE1vdmllcywgaW1kYklEIH0pKSB7XG4gICAgICAgICAgICByZXR1cm4gKDxidXR0b24gb25DbGljaz17dGhpcy51bkxpa2VNb3ZpZX0+VW5saWtlPC9idXR0b24+KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnBvc3RMaWtlZE1vdmllfT5MaWtlPC9idXR0b24+KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn1cblxuTW92aWVMaWtlQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgICBpbWRiSUQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vdmllTGlrZUJ1dHRvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9CdXR0b24vTW92aWVMaWtlQnV0dG9uLmpzIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vTW92aWVJdGVtLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9Nb3ZpZUl0ZW0uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9Nb3ZpZUl0ZW0uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3R5bGVzL01vdmllSXRlbS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDQyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5tb3ZpZUJ1dHRvbnMge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGZsb2F0OiByaWdodDtcXG59XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL3NyYy9zdHlsZXMvTW92aWVJdGVtLmNzc1xuLy8gbW9kdWxlIGlkID0gNDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBvYnNlcnZlciwgaW5qZWN0IH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5AaW5qZWN0KChzdG9yZXMpID0+IHtcbiAgY29uc3QgeyBsaWtlcyB9ID0gc3RvcmVzO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0VXNlcnNMZW5ndGhMaWtlZE1vdmllSWQ6IGxpa2VzLmdldFVzZXJzTGVuZ3RoTGlrZWRNb3ZpZUlkLFxuICB9XG59KVxuQG9ic2VydmVyXG5jbGFzcyBDb3VudExpa2VCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY291bnQ6IDAsXG4gICAgfTtcbiAgICB0aGlzLmxpbmtUb01vdmllTGlrZWRCeVBhZ2UgPSB0aGlzLmxpbmtUb01vdmllTGlrZWRCeVBhZ2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGxpbmtUb01vdmllTGlrZWRCeVBhZ2UgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKHtcbiAgICAgIHBhdGhuYW1lOiAnL21vdmllLycrdGhpcy5wcm9wcy5pbWRiSUQrICcvbGlrZWRCeScsXG4gICAgfSk7XG59O1xuXG4gIGFzeW5jIGdldFVzZXJzTGVuZ3RoTGlrZWRNb3ZpZUlkKCkge1xuICAgIGNvbnN0IHsgZ2V0VXNlcnNMZW5ndGhMaWtlZE1vdmllSWQsIGltZGJJRCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0VXNlcnNMZW5ndGhMaWtlZE1vdmllSWQoe1xuICAgICAgaW1kYklELFxuICAgIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY291bnQ6IHJlc3BvbnNlLmxlbmd0aCA/IHJlc3BvbnNlLmxlbmd0aCA6IDAsXG4gICAgfSlcblxuICB9XG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmdldFVzZXJzTGVuZ3RoTGlrZWRNb3ZpZUlkKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHsgY291bnQgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuICg8YnV0dG9uIG9uQ2xpY2s9e3RoaXMubGlua1RvTW92aWVMaWtlZEJ5UGFnZX0+e2NvdW50fTwvYnV0dG9uPik7XG4gIH1cblxufVxuXG5Db3VudExpa2VCdXR0b24ucHJvcFR5cGVzID0ge1xuICBpbWRiSUQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoQ291bnRMaWtlQnV0dG9uKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQ291bnRMaWtlQnV0dG9uLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX0Nvb2tpZXMgPSByZXF1aXJlKCcuL0Nvb2tpZXMnKTtcblxudmFyIF9Db29raWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Nvb2tpZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfQ29va2llczIuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3VuaXZlcnNhbC1jb29raWUvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0MzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfY29va2llID0gcmVxdWlyZSgnY29va2llJyk7XG5cbnZhciBfY29va2llMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nvb2tpZSk7XG5cbnZhciBfb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgX29iamVjdEFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RBc3NpZ24pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQ29va2llcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29va2llcyhjb29raWVzLCBob29rcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb29raWVzKTtcblxuICAgIHRoaXMuY29va2llcyA9IHBhcnNlQ29va2llcyhjb29raWVzKTtcbiAgICB0aGlzLmhvb2tzID0gaG9va3M7XG4gICAgdGhpcy5IQVNfRE9DVU1FTlRfQ09PS0lFID0gKDAsIF91dGlscy5oYXNEb2N1bWVudENvb2tpZSkoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb29raWVzLCBbe1xuICAgIGtleTogJ191cGRhdGVCcm93c2VyVmFsdWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZUJyb3dzZXJWYWx1ZXMoKSB7XG4gICAgICBpZiAoIXRoaXMuSEFTX0RPQ1VNRU5UX0NPT0tJRSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29va2llcyA9IF9jb29raWUyLmRlZmF1bHQucGFyc2UoZG9jdW1lbnQuY29va2llKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICB0aGlzLl91cGRhdGVCcm93c2VyVmFsdWVzKCk7XG4gICAgICByZXR1cm4gcmVhZENvb2tpZSh0aGlzLmNvb2tpZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEFsbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgdGhpcy5fdXBkYXRlQnJvd3NlclZhbHVlcygpO1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuY29va2llcykge1xuICAgICAgICByZXN1bHRbbmFtZV0gPSByZWFkQ29va2llKHRoaXMuY29va2llc1tuYW1lXSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhvb2tzICYmIHRoaXMuaG9va3Mub25TZXQpIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblNldChuYW1lLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29va2llc1tuYW1lXSA9IHZhbHVlO1xuXG4gICAgICBpZiAodGhpcy5IQVNfRE9DVU1FTlRfQ09PS0lFKSB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IF9jb29raWUyLmRlZmF1bHQuc2VyaWFsaXplKG5hbWUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUobmFtZSwgb3B0aW9ucykge1xuICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IG9wdGlvbnMgPSAoMCwgX29iamVjdEFzc2lnbjIuZGVmYXVsdCkoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgZXhwaXJlczogbmV3IERhdGUoMTk3MCwgMSwgMSwgMCwgMCwgMSksXG4gICAgICAgIG1heEFnZTogMFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmhvb2tzICYmIHRoaXMuaG9va3Mub25SZW1vdmUpIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblJlbW92ZShuYW1lLCBmaW5hbE9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgdGhpcy5jb29raWVzW25hbWVdO1xuXG4gICAgICBpZiAodGhpcy5IQVNfRE9DVU1FTlRfQ09PS0lFKSB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IF9jb29raWUyLmRlZmF1bHQuc2VyaWFsaXplKG5hbWUsICcnLCBmaW5hbE9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb29raWVzO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb29raWVzO1xuXG5cbmZ1bmN0aW9uIHBhcnNlQ29va2llcyhjb29raWVzKSB7XG4gIGlmICh0eXBlb2YgY29va2llcyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gX2Nvb2tpZTIuZGVmYXVsdC5wYXJzZShjb29raWVzKTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIGNvb2tpZXMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNvb2tpZXMpKSA9PT0gJ29iamVjdCcgJiYgY29va2llcyAhPT0gbnVsbCkge1xuICAgIHJldHVybiBjb29raWVzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1BhcnNpbmdDb29raWUodmFsdWUsIGRvTm90UGFyc2UpIHtcbiAgaWYgKHR5cGVvZiBkb05vdFBhcnNlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIFdlIGd1ZXNzIGlmIHRoZSBjb29raWUgc3RhcnQgd2l0aCB7IG9yIFssIGl0IGhhcyBiZWVuIHNlcmlhbGl6ZWRcbiAgICBkb05vdFBhcnNlID0gIXZhbHVlIHx8IHZhbHVlWzBdICE9PSAneycgJiYgdmFsdWVbMF0gIT09ICdbJyAmJiB2YWx1ZVswXSAhPT0gJ1wiJztcbiAgfVxuXG4gIHJldHVybiAhZG9Ob3RQYXJzZTtcbn1cblxuZnVuY3Rpb24gcmVhZENvb2tpZSh2YWx1ZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKGlzUGFyc2luZ0Nvb2tpZSh2YWx1ZSwgb3B0aW9ucy5kb05vdFBhcnNlKSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gQXQgbGVhc3Qgd2UgdHJpZWRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy91bml2ZXJzYWwtY29va2llL2xpYi9Db29raWVzLmpzXG4vLyBtb2R1bGUgaWQgPSA0MzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyohXG4gKiBjb29raWVcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgUm9tYW4gU2h0eWxtYW5cbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcbnZhciBlbmNvZGUgPSBlbmNvZGVVUklDb21wb25lbnQ7XG52YXIgcGFpclNwbGl0UmVnRXhwID0gLzsgKi87XG5cbi8qKlxuICogUmVnRXhwIHRvIG1hdGNoIGZpZWxkLWNvbnRlbnQgaW4gUkZDIDcyMzAgc2VjIDMuMlxuICpcbiAqIGZpZWxkLWNvbnRlbnQgPSBmaWVsZC12Y2hhciBbIDEqKCBTUCAvIEhUQUIgKSBmaWVsZC12Y2hhciBdXG4gKiBmaWVsZC12Y2hhciAgID0gVkNIQVIgLyBvYnMtdGV4dFxuICogb2JzLXRleHQgICAgICA9ICV4ODAtRkZcbiAqL1xuXG52YXIgZmllbGRDb250ZW50UmVnRXhwID0gL15bXFx1MDAwOVxcdTAwMjAtXFx1MDA3ZVxcdTAwODAtXFx1MDBmZl0rJC87XG5cbi8qKlxuICogUGFyc2UgYSBjb29raWUgaGVhZGVyLlxuICpcbiAqIFBhcnNlIHRoZSBnaXZlbiBjb29raWUgaGVhZGVyIHN0cmluZyBpbnRvIGFuIG9iamVjdFxuICogVGhlIG9iamVjdCBoYXMgdGhlIHZhcmlvdXMgY29va2llcyBhcyBrZXlzKG5hbWVzKSA9PiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0ciBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICB2YXIgb2JqID0ge31cbiAgdmFyIG9wdCA9IG9wdGlvbnMgfHwge307XG4gIHZhciBwYWlycyA9IHN0ci5zcGxpdChwYWlyU3BsaXRSZWdFeHApO1xuICB2YXIgZGVjID0gb3B0LmRlY29kZSB8fCBkZWNvZGU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYWlyID0gcGFpcnNbaV07XG4gICAgdmFyIGVxX2lkeCA9IHBhaXIuaW5kZXhPZignPScpO1xuXG4gICAgLy8gc2tpcCB0aGluZ3MgdGhhdCBkb24ndCBsb29rIGxpa2Uga2V5PXZhbHVlXG4gICAgaWYgKGVxX2lkeCA8IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBrZXkgPSBwYWlyLnN1YnN0cigwLCBlcV9pZHgpLnRyaW0oKVxuICAgIHZhciB2YWwgPSBwYWlyLnN1YnN0cigrK2VxX2lkeCwgcGFpci5sZW5ndGgpLnRyaW0oKTtcblxuICAgIC8vIHF1b3RlZCB2YWx1ZXNcbiAgICBpZiAoJ1wiJyA9PSB2YWxbMF0pIHtcbiAgICAgIHZhbCA9IHZhbC5zbGljZSgxLCAtMSk7XG4gICAgfVxuXG4gICAgLy8gb25seSBhc3NpZ24gb25jZVxuICAgIGlmICh1bmRlZmluZWQgPT0gb2JqW2tleV0pIHtcbiAgICAgIG9ialtrZXldID0gdHJ5RGVjb2RlKHZhbCwgZGVjKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZSBkYXRhIGludG8gYSBjb29raWUgaGVhZGVyLlxuICpcbiAqIFNlcmlhbGl6ZSB0aGUgYSBuYW1lIHZhbHVlIHBhaXIgaW50byBhIGNvb2tpZSBzdHJpbmcgc3VpdGFibGUgZm9yXG4gKiBodHRwIGhlYWRlcnMuIEFuIG9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHNwZWNpZmllZCBjb29raWUgcGFyYW1ldGVycy5cbiAqXG4gKiBzZXJpYWxpemUoJ2ZvbycsICdiYXInLCB7IGh0dHBPbmx5OiB0cnVlIH0pXG4gKiAgID0+IFwiZm9vPWJhcjsgaHR0cE9ubHlcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc2VyaWFsaXplKG5hbWUsIHZhbCwgb3B0aW9ucykge1xuICB2YXIgb3B0ID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGVuYyA9IG9wdC5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGlmICh0eXBlb2YgZW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIGVuY29kZSBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICBpZiAoIWZpZWxkQ29udGVudFJlZ0V4cC50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbmFtZSBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICB2YXIgdmFsdWUgPSBlbmModmFsKTtcblxuICBpZiAodmFsdWUgJiYgIWZpZWxkQ29udGVudFJlZ0V4cC50ZXN0KHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHZhbCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICB2YXIgc3RyID0gbmFtZSArICc9JyArIHZhbHVlO1xuXG4gIGlmIChudWxsICE9IG9wdC5tYXhBZ2UpIHtcbiAgICB2YXIgbWF4QWdlID0gb3B0Lm1heEFnZSAtIDA7XG4gICAgaWYgKGlzTmFOKG1heEFnZSkpIHRocm93IG5ldyBFcnJvcignbWF4QWdlIHNob3VsZCBiZSBhIE51bWJlcicpO1xuICAgIHN0ciArPSAnOyBNYXgtQWdlPScgKyBNYXRoLmZsb29yKG1heEFnZSk7XG4gIH1cblxuICBpZiAob3B0LmRvbWFpbikge1xuICAgIGlmICghZmllbGRDb250ZW50UmVnRXhwLnRlc3Qob3B0LmRvbWFpbikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBkb21haW4gaXMgaW52YWxpZCcpO1xuICAgIH1cblxuICAgIHN0ciArPSAnOyBEb21haW49JyArIG9wdC5kb21haW47XG4gIH1cblxuICBpZiAob3B0LnBhdGgpIHtcbiAgICBpZiAoIWZpZWxkQ29udGVudFJlZ0V4cC50ZXN0KG9wdC5wYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHBhdGggaXMgaW52YWxpZCcpO1xuICAgIH1cblxuICAgIHN0ciArPSAnOyBQYXRoPScgKyBvcHQucGF0aDtcbiAgfVxuXG4gIGlmIChvcHQuZXhwaXJlcykge1xuICAgIGlmICh0eXBlb2Ygb3B0LmV4cGlyZXMudG9VVENTdHJpbmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBleHBpcmVzIGlzIGludmFsaWQnKTtcbiAgICB9XG5cbiAgICBzdHIgKz0gJzsgRXhwaXJlcz0nICsgb3B0LmV4cGlyZXMudG9VVENTdHJpbmcoKTtcbiAgfVxuXG4gIGlmIChvcHQuaHR0cE9ubHkpIHtcbiAgICBzdHIgKz0gJzsgSHR0cE9ubHknO1xuICB9XG5cbiAgaWYgKG9wdC5zZWN1cmUpIHtcbiAgICBzdHIgKz0gJzsgU2VjdXJlJztcbiAgfVxuXG4gIGlmIChvcHQuc2FtZVNpdGUpIHtcbiAgICB2YXIgc2FtZVNpdGUgPSB0eXBlb2Ygb3B0LnNhbWVTaXRlID09PSAnc3RyaW5nJ1xuICAgICAgPyBvcHQuc2FtZVNpdGUudG9Mb3dlckNhc2UoKSA6IG9wdC5zYW1lU2l0ZTtcblxuICAgIHN3aXRjaCAoc2FtZVNpdGUpIHtcbiAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgc3RyICs9ICc7IFNhbWVTaXRlPVN0cmljdCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbGF4JzpcbiAgICAgICAgc3RyICs9ICc7IFNhbWVTaXRlPUxheCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RyaWN0JzpcbiAgICAgICAgc3RyICs9ICc7IFNhbWVTaXRlPVN0cmljdCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHNhbWVTaXRlIGlzIGludmFsaWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIFRyeSBkZWNvZGluZyBhIHN0cmluZyB1c2luZyBhIGRlY29kaW5nIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRlY29kZVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoc3RyLCBkZWNvZGUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlKHN0cik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb29raWUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0cy5oYXNEb2N1bWVudENvb2tpZSA9IGhhc0RvY3VtZW50Q29va2llO1xuZXhwb3J0cy5jbGVhbkNvb2tpZXMgPSBjbGVhbkNvb2tpZXM7XG4vLyBDYW4gd2UgZ2V0L3NldCBjb29raWVzIG9uIGRvY3VtZW50LmNvb2tpZT9cblxuZnVuY3Rpb24gaGFzRG9jdW1lbnRDb29raWUoKSB7XG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZG9jdW1lbnQuY29va2llID09PSAnc3RyaW5nJztcbn1cblxuLy9iYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxudmFyIEhBU19ET0NVTUVOVF9DT09LSUUgPSBleHBvcnRzLkhBU19ET0NVTUVOVF9DT09LSUUgPSBoYXNEb2N1bWVudENvb2tpZSgpO1xuXG5mdW5jdGlvbiBjbGVhbkNvb2tpZXMoKSB7XG4gIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICBkb2N1bWVudC5jb29raWUgPSBjLnJlcGxhY2UoL14gKy8sICcnKS5yZXBsYWNlKC89LiovLCAnPTtleHBpcmVzPScgKyBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKCkgKyAnO3BhdGg9LycpO1xuICB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy91bml2ZXJzYWwtY29va2llL2xpYi91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gNDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJpY3RVcmlFbmNvZGUgPSByZXF1aXJlKCdzdHJpY3QtdXJpLWVuY29kZScpO1xudmFyIG9iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbnZhciBkZWNvZGVDb21wb25lbnQgPSByZXF1aXJlKCdkZWNvZGUtdXJpLWNvbXBvbmVudCcpO1xuXG5mdW5jdGlvbiBlbmNvZGVyRm9yQXJyYXlGb3JtYXQob3B0cykge1xuXHRzd2l0Y2ggKG9wdHMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGluZGV4KSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnWycsXG5cdFx0XHRcdFx0aW5kZXgsXG5cdFx0XHRcdFx0J10nXG5cdFx0XHRcdF0uam9pbignJykgOiBbXG5cdFx0XHRcdFx0ZW5jb2RlKGtleSwgb3B0cyksXG5cdFx0XHRcdFx0J1snLFxuXHRcdFx0XHRcdGVuY29kZShpbmRleCwgb3B0cyksXG5cdFx0XHRcdFx0J109Jyxcblx0XHRcdFx0XHRlbmNvZGUodmFsdWUsIG9wdHMpXG5cdFx0XHRcdF0uam9pbignJyk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnYnJhY2tldCc6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gZW5jb2RlKGtleSwgb3B0cykgOiBbXG5cdFx0XHRcdFx0ZW5jb2RlKGtleSwgb3B0cyksXG5cdFx0XHRcdFx0J1tdPScsXG5cdFx0XHRcdFx0ZW5jb2RlKHZhbHVlLCBvcHRzKVxuXHRcdFx0XHRdLmpvaW4oJycpO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gZW5jb2RlKGtleSwgb3B0cykgOiBbXG5cdFx0XHRcdFx0ZW5jb2RlKGtleSwgb3B0cyksXG5cdFx0XHRcdFx0Jz0nLFxuXHRcdFx0XHRcdGVuY29kZSh2YWx1ZSwgb3B0cylcblx0XHRcdFx0XS5qb2luKCcnKTtcblx0XHRcdH07XG5cdH1cbn1cblxuZnVuY3Rpb24gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0cykge1xuXHR2YXIgcmVzdWx0O1xuXG5cdHN3aXRjaCAob3B0cy5hcnJheUZvcm1hdCkge1xuXHRcdGNhc2UgJ2luZGV4Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpIHtcblx0XHRcdFx0cmVzdWx0ID0gL1xcWyhcXGQqKVxcXSQvLmV4ZWMoa2V5KTtcblxuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxkKlxcXSQvLCAnJyk7XG5cblx0XHRcdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB7fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV1bcmVzdWx0WzFdXSA9IHZhbHVlO1xuXHRcdFx0fTtcblxuXHRcdGNhc2UgJ2JyYWNrZXQnOlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikge1xuXHRcdFx0XHRyZXN1bHQgPSAvKFxcW1xcXSkkLy5leGVjKGtleSk7XG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFtcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fSBlbHNlIGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gW3ZhbHVlXTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gW10uY29uY2F0KGFjY3VtdWxhdG9yW2tleV0sIHZhbHVlKTtcblx0XHRcdH07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikge1xuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBbXS5jb25jYXQoYWNjdW11bGF0b3Jba2V5XSwgdmFsdWUpO1xuXHRcdFx0fTtcblx0fVxufVxuXG5mdW5jdGlvbiBlbmNvZGUodmFsdWUsIG9wdHMpIHtcblx0aWYgKG9wdHMuZW5jb2RlKSB7XG5cdFx0cmV0dXJuIG9wdHMuc3RyaWN0ID8gc3RyaWN0VXJpRW5jb2RlKHZhbHVlKSA6IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cdH1cblxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGtleXNTb3J0ZXIoaW5wdXQpIHtcblx0aWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0LnNvcnQoKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGtleXNTb3J0ZXIoT2JqZWN0LmtleXMoaW5wdXQpKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpO1xuXHRcdH0pLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gaW5wdXRba2V5XTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdChzdHIpIHtcblx0dmFyIHF1ZXJ5U3RhcnQgPSBzdHIuaW5kZXhPZignPycpO1xuXHRpZiAocXVlcnlTdGFydCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0cmV0dXJuIHN0ci5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHN0ciwgb3B0cykge1xuXHRvcHRzID0gb2JqZWN0QXNzaWduKHthcnJheUZvcm1hdDogJ25vbmUnfSwgb3B0cyk7XG5cblx0dmFyIGZvcm1hdHRlciA9IHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdHMpO1xuXG5cdC8vIENyZWF0ZSBhbiBvYmplY3Qgd2l0aCBubyBwcm90b3R5cGVcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9xdWVyeS1zdHJpbmcvaXNzdWVzLzQ3XG5cdHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sICcnKTtcblxuXHRpZiAoIXN0cikge1xuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRzdHIuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuXHRcdHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG5cdFx0Ly8gRmlyZWZveCAocHJlIDQwKSBkZWNvZGVzIGAlM0RgIHRvIGA9YFxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nL3B1bGwvMzdcblx0XHR2YXIga2V5ID0gcGFydHMuc2hpZnQoKTtcblx0XHR2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzLmpvaW4oJz0nKSA6IHVuZGVmaW5lZDtcblxuXHRcdC8vIG1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG5cdFx0Ly8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuXHRcdHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlY29kZUNvbXBvbmVudCh2YWwpO1xuXG5cdFx0Zm9ybWF0dGVyKGRlY29kZUNvbXBvbmVudChrZXkpLCB2YWwsIHJldCk7XG5cdH0pO1xuXG5cdHJldHVybiBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7XG5cdFx0dmFyIHZhbCA9IHJldFtrZXldO1xuXHRcdGlmIChCb29sZWFuKHZhbCkgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0Ly8gU29ydCBvYmplY3Qga2V5cywgbm90IHZhbHVlc1xuXHRcdFx0cmVzdWx0W2tleV0gPSBrZXlzU29ydGVyKHZhbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufVxuXG5leHBvcnRzLmV4dHJhY3QgPSBleHRyYWN0O1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuXG5leHBvcnRzLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcblx0dmFyIGRlZmF1bHRzID0ge1xuXHRcdGVuY29kZTogdHJ1ZSxcblx0XHRzdHJpY3Q6IHRydWUsXG5cdFx0YXJyYXlGb3JtYXQ6ICdub25lJ1xuXHR9O1xuXG5cdG9wdHMgPSBvYmplY3RBc3NpZ24oZGVmYXVsdHMsIG9wdHMpO1xuXG5cdGlmIChvcHRzLnNvcnQgPT09IGZhbHNlKSB7XG5cdFx0b3B0cy5zb3J0ID0gZnVuY3Rpb24gKCkge307XG5cdH1cblxuXHR2YXIgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdHMpO1xuXG5cdHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLnNvcnQob3B0cy5zb3J0KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciB2YWwgPSBvYmpba2V5XTtcblxuXHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmICh2YWwgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRzKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cblx0XHRcdHZhbC5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcblx0XHRcdFx0aWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGZvcm1hdHRlcihrZXksIHZhbDIsIHJlc3VsdC5sZW5ndGgpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0cykgKyAnPScgKyBlbmNvZGUodmFsLCBvcHRzKTtcblx0fSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG5cdFx0cmV0dXJuIHgubGVuZ3RoID4gMDtcblx0fSkuam9pbignJicpIDogJyc7XG59O1xuXG5leHBvcnRzLnBhcnNlVXJsID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuXHRyZXR1cm4ge1xuXHRcdHVybDogc3RyLnNwbGl0KCc/JylbMF0gfHwgJycsXG5cdFx0cXVlcnk6IHBhcnNlKGV4dHJhY3Qoc3RyKSwgb3B0cylcblx0fTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9xdWVyeS1zdHJpbmcvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcblx0XHRyZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHR9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zdHJpY3QtdXJpLWVuY29kZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciB0b2tlbiA9ICclW2EtZjAtOV17Mn0nO1xudmFyIHNpbmdsZU1hdGNoZXIgPSBuZXcgUmVnRXhwKHRva2VuLCAnZ2knKTtcbnZhciBtdWx0aU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJykrJywgJ2dpJyk7XG5cbmZ1bmN0aW9uIGRlY29kZUNvbXBvbmVudHMoY29tcG9uZW50cywgc3BsaXQpIHtcblx0dHJ5IHtcblx0XHQvLyBUcnkgdG8gZGVjb2RlIHRoZSBlbnRpcmUgc3RyaW5nIGZpcnN0XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChjb21wb25lbnRzLmpvaW4oJycpKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gRG8gbm90aGluZ1xuXHR9XG5cblx0aWYgKGNvbXBvbmVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIGNvbXBvbmVudHM7XG5cdH1cblxuXHRzcGxpdCA9IHNwbGl0IHx8IDE7XG5cblx0Ly8gU3BsaXQgdGhlIGFycmF5IGluIDIgcGFydHNcblx0dmFyIGxlZnQgPSBjb21wb25lbnRzLnNsaWNlKDAsIHNwbGl0KTtcblx0dmFyIHJpZ2h0ID0gY29tcG9uZW50cy5zbGljZShzcGxpdCk7XG5cblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChbXSwgZGVjb2RlQ29tcG9uZW50cyhsZWZ0KSwgZGVjb2RlQ29tcG9uZW50cyhyaWdodCkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0dmFyIHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlucHV0ID0gZGVjb2RlQ29tcG9uZW50cyh0b2tlbnMsIGkpLmpvaW4oJycpO1xuXG5cdFx0XHR0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KSB7XG5cdC8vIEtlZXAgdHJhY2sgb2YgYWxsIHRoZSByZXBsYWNlbWVudHMgYW5kIHByZWZpbGwgdGhlIG1hcCB3aXRoIHRoZSBgQk9NYFxuXHR2YXIgcmVwbGFjZU1hcCA9IHtcblx0XHQnJUZFJUZGJzogJ1xcdUZGRkRcXHVGRkZEJyxcblx0XHQnJUZGJUZFJzogJ1xcdUZGRkRcXHVGRkZEJ1xuXHR9O1xuXG5cdHZhciBtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0d2hpbGUgKG1hdGNoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIERlY29kZSBhcyBiaWcgY2h1bmtzIGFzIHBvc3NpYmxlXG5cdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFswXSk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gZGVjb2RlKG1hdGNoWzBdKTtcblxuXHRcdFx0aWYgKHJlc3VsdCAhPT0gbWF0Y2hbMF0pIHtcblx0XHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdH1cblxuXHQvLyBBZGQgYCVDMmAgYXQgdGhlIGVuZCBvZiB0aGUgbWFwIHRvIG1ha2Ugc3VyZSBpdCBkb2VzIG5vdCByZXBsYWNlIHRoZSBjb21iaW5hdG9yIGJlZm9yZSBldmVyeXRoaW5nIGVsc2Vcblx0cmVwbGFjZU1hcFsnJUMyJ10gPSAnXFx1RkZGRCc7XG5cblx0dmFyIGVudHJpZXMgPSBPYmplY3Qua2V5cyhyZXBsYWNlTWFwKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcblx0XHQvLyBSZXBsYWNlIGFsbCBkZWNvZGVkIGNvbXBvbmVudHNcblx0XHR2YXIga2V5ID0gZW50cmllc1tpXTtcblx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnJyksIHJlcGxhY2VNYXBba2V5XSk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVuY29kZWRVUkkpIHtcblx0aWYgKHR5cGVvZiBlbmNvZGVkVVJJICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGBlbmNvZGVkVVJJYCB0byBiZSBvZiB0eXBlIGBzdHJpbmdgLCBnb3QgYCcgKyB0eXBlb2YgZW5jb2RlZFVSSSArICdgJyk7XG5cdH1cblxuXHR0cnkge1xuXHRcdGVuY29kZWRVUkkgPSBlbmNvZGVkVVJJLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuXG5cdFx0Ly8gVHJ5IHRoZSBidWlsdCBpbiBkZWNvZGVyIGZpcnN0XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gRmFsbGJhY2sgdG8gYSBtb3JlIGFkdmFuY2VkIGRlY29kZXJcblx0XHRyZXR1cm4gY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSA0Mzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQ0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanNcbi8vIG1vZHVsZSBpZCA9IDQ0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzXG4vLyBtb2R1bGUgaWQgPSA0NDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzXG4vLyBtb2R1bGUgaWQgPSA0NDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gNDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qc1xuLy8gbW9kdWxlIGlkID0gNDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDQ0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzXG4vLyBtb2R1bGUgaWQgPSA0NDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qc1xuLy8gbW9kdWxlIGlkID0gNDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gNDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gNDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qc1xuLy8gbW9kdWxlIGlkID0gNDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanNcbi8vIG1vZHVsZSBpZCA9IDQ1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanNcbi8vIG1vZHVsZSBpZCA9IDQ1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIsIGluamVjdCB9IGZyb20gJ21vYngtcmVhY3QnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgU2lnblVwRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9TaWdudXBGb3JtXCI7XG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgICBsZXQgeyByZWdpc3RlciB9ID0gc3RvcmVzO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVtYWlsOiByZWdpc3Rlci5lbWFpbCxcbiAgICAgICAgcGFzc3dvcmQ6IHJlZ2lzdGVyLnBhc3N3b3JkLFxuICAgICAgICBmdWxsTmFtZTogcmVnaXN0ZXIuZnVsbE5hbWUsXG4gICAgICAgIGVycm9yTWVzc2FnZTogcmVnaXN0ZXIuZXJyb3JNZXNzYWdlLFxuICAgICAgICBzZXRFbWFpbDogcmVnaXN0ZXIuc2V0RW1haWwsXG4gICAgICAgIHNldFBhc3N3b3JkOiByZWdpc3Rlci5zZXRQYXNzd29yZCxcbiAgICAgICAgc2V0RnVsbE5hbWU6IHJlZ2lzdGVyLnNldEZ1bGxOYW1lLFxuICAgICAgICBvblJlZ2lzdGVyOiByZWdpc3Rlci5vblJlZ2lzdGVyLFxuICAgIH1cbn0pXG5Ab2JzZXJ2ZXJcbkB3aXRoUm91dGVyXG5jbGFzcyBTaWdudXBQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7Lyo8TmF2QmFyLz4qL31cbiAgICAgICAgICA8U2lnblVwRm9ybSB7Li4udGhpcy5wcm9wc30gLz5cbiAgICAgICAgICB7Lyo8TGluayB0bz17Jy8nfT5HbyBCYWNrPC9MaW5rPiovfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ251cFBhZ2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGFpbmVycy9TaWdudXBQYWdlLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICcuL0Vycm9yTWVzc2FnZSc7XG5cbkBvYnNlcnZlclxuY2xhc3MgU2lnblVwRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlU2lnblVwID0gdGhpcy5oYW5kbGVTaWduVXAuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVFbWFpbENoYW5nZSA9IHRoaXMuaGFuZGxlRW1haWxDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVQYXNzd29yZENoYW5nZSA9IHRoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVGdWxsTmFtZUNoYW5nZSA9IHRoaXMuaGFuZGxlRnVsbE5hbWVDaGFuZ2UuYmluZCh0aGlzKTtcblxuICAgIH1cblxuICAgIGhhbmRsZUVtYWlsQ2hhbmdlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnByb3BzLnNldEVtYWlsKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVQYXNzd29yZENoYW5nZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRQYXNzd29yZChlLnRhcmdldC52YWx1ZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlRnVsbE5hbWVDaGFuZ2UoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0RnVsbE5hbWUoZS50YXJnZXQudmFsdWUpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBlcnJvck1lc3NhZ2UsIGVtYWlsLCBwYXNzd29yZCwgZnVsbE5hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICAgICAgPEVycm9yTWVzc2FnZSBlcnJvck1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJleGFtcGxlSW5wdXRFbWFpbDFcIj5FbWFpbDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2VtYWlsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlRW1haWxDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJleGFtcGxlSW5wdXRFbWFpbDFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImVtYWlsSGVscFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGVtYWlsXCIvPlxuICAgICAgICAgICAgICAgICAgICA8c21hbGwgaWQ9XCJlbWFpbEhlbHBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFdlJ2xsIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwgd2l0aCBhbnlvbmUgZWxzZS5cbiAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJleGFtcGxlSW5wdXRQYXNzd29yZDFcIj5QYXNzd29yZDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJleGFtcGxlSW5wdXRQYXNzd29yZDFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJleGFtcGxlRnVsbE5hbWUxXCI+RnVsbE5hbWU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2Z1bGxOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlRnVsbE5hbWVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJleGFtcGxlRnVsbE5hbWUxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRnVsbCBOYW1lXCIvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnkgYnRuLWxnIGJ0bi1ibG9ja1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVNpZ25VcH0+UmVnaXN0ZXI8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGhhbmRsZVNpZ25VcChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5vblJlZ2lzdGVyKCk7XG4gICAgfVxufVxuXG5TaWduVXBGb3JtLnByb3BUeXBlcyA9IHtcbiAgICBmdWxsTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGVtYWlsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcGFzc3dvcmQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBlcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2V0RW1haWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0UGFzc3dvcmQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0RnVsbE5hbWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25SZWdpc3RlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25VcEZvcm07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvU2lnbnVwRm9ybS5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcblxuQG9ic2VydmVyXG5jbGFzcyBFcnJvck1lc3NhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKF8uaXNOaWwodGhpcy5wcm9wcy5lcnJvck1lc3NhZ2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gPGRpdj48L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGVydCBhbGVydC1kYW5nZXJcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5lcnJvck1lc3NhZ2V9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkVycm9yTWVzc2FnZS5wcm9wVHlwZXMgPSB7XG4gICAgZXJyb3JNZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBFcnJvck1lc3NhZ2U7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvRXJyb3JNZXNzYWdlLmpzIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIsIGluamVjdCB9IGZyb20gJ21vYngtcmVhY3QnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgU2lnbkluRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9TaWduSW5Gb3JtXCI7XG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgICBsZXQgeyBhY2NvdW50IH0gPSBzdG9yZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW1haWw6IGFjY291bnQuZW1haWwsXG4gICAgICAgIHBhc3N3b3JkOiBhY2NvdW50LnBhc3N3b3JkLFxuICAgICAgICBlcnJvck1lc3NhZ2U6IGFjY291bnQuZXJyb3JNZXNzYWdlLFxuICAgICAgICBzZXRFbWFpbDogYWNjb3VudC5zZXRFbWFpbCxcbiAgICAgICAgc2V0UGFzc3dvcmQ6IGFjY291bnQuc2V0UGFzc3dvcmQsXG4gICAgICAgIGxvZ2luOiBhY2NvdW50LmxvZ2luLFxuICAgIH1cbn0pXG5Ab2JzZXJ2ZXJcbkB3aXRoUm91dGVyXG5jbGFzcyBTaWduSW5QYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQge1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICB1c2VySW5mbyxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgIHNldEVtYWlsLFxuICAgICAgICAgICAgc2V0UGFzc3dvcmQsXG4gICAgICAgICAgICBsb2dpbixcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIHsvKjxOYXZCYXIvPiovfVxuICAgICAgICAgICAgICAgIDxTaWduSW5Gb3JtXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsPXtlbWFpbH1cbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ9e3Bhc3N3b3JkfVxuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U9e2Vycm9yTWVzc2FnZX1cbiAgICAgICAgICAgICAgICAgICAgc2V0RW1haWw9e3NldEVtYWlsfVxuICAgICAgICAgICAgICAgICAgICBzZXRQYXNzd29yZD17c2V0UGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgICAgIGxvZ2luPXtsb2dpbn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIHsvKjxMaW5rIHRvPXsnLyd9PkdvIEJhY2s8L0xpbms+Ki99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25JblBhZ2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGFpbmVycy9TaWduSW5QYWdlLmpzIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbkBvYnNlcnZlclxuY2xhc3MgU2lnbkluRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlTG9naW4gPSB0aGlzLmhhbmRsZUxvZ2luLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlRW1haWxDaGFuZ2UgPSB0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2UgPSB0aGlzLmhhbmRsZVBhc3N3b3JkQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyRXJyb3JNZXNzYWdlID0gdGhpcy5yZW5kZXJFcnJvck1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB9XG5cbiAgICBoYW5kbGVFbWFpbENoYW5nZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRFbWFpbChlLnRhcmdldC52YWx1ZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlUGFzc3dvcmRDaGFuZ2UoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0UGFzc3dvcmQoZS50YXJnZXQudmFsdWUpO1xuICAgIH1cblxuICAgIHJlbmRlckVycm9yTWVzc2FnZSgpIHtcbiAgICAgICAgaWYgKF8uaXNOaWwodGhpcy5wcm9wcy5lcnJvck1lc3NhZ2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGVydCBhbGVydC1kYW5nZXJcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5lcnJvck1lc3NhZ2V9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJFcnJvck1lc3NhZ2UoKX1cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImV4YW1wbGVJbnB1dEVtYWlsMVwiPkVtYWlsPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmVtYWlsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUVtYWlsQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJleGFtcGxlSW5wdXRFbWFpbDFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJlbWFpbEhlbHBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgZW1haWxcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgaWQ9XCJlbWFpbEhlbHBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tdGV4dCB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgV2UnbGwgbmV2ZXIgc2hhcmUgeW91ciBlbWFpbCB3aXRoIGFueW9uZSBlbHNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJleGFtcGxlSW5wdXRQYXNzd29yZDFcIj5QYXNzd29yZDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5wYXNzd29yZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVQYXNzd29yZENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZXhhbXBsZUlucHV0UGFzc3dvcmQxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBhc3N3b3JkXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnkgYnRuLWxnIGJ0bi1ibG9ja1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVMb2dpbn0+TG9naW48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBoYW5kbGVMb2dpbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5sb2dpbigpO1xuICAgIH1cbn1cblxuU2lnbkluRm9ybS5wcm9wVHlwZXMgPSB7XG4gICAgbG9naW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0RW1haWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0UGFzc3dvcmQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZW1haWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBwYXNzd29yZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGVycm9yTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU2lnbkluRm9ybTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9TaWduSW5Gb3JtLmpzIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNlYXJjaEJhciBmcm9tICcuL1NlYXJjaEJhcic7XG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7aW5qZWN0LCBvYnNlcnZlcn0gZnJvbSBcIm1vYngtcmVhY3QvaW5kZXhcIjtcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgTU9WSUVfTElTVF9VUkksXG4gICAgU0lHTl9VUF9VUkksXG4gICAgU0lHTl9JTl9VUkksXG4gICAgVVNFUl9QUk9GSUxFX1VSSVxufSBmcm9tICcuLi9jb250YWluZXJzL3JvdXRlc0NvbnRhaW5lci91cmlDb25zdGFudHMnO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZVVzZXJVUkkgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBTaWduT3V0QnV0dG9uIGZyb20gJy4vU2lnbk91dEJ1dHRvbic7XG5pbXBvcnQgTmF2QmFyTG9nZ2VkSW4gZnJvbSAnLi9OYXZCYXJMb2dnZWRJbic7XG5cbmltcG9ydCAnLi4vc3R5bGVzL05hdkJhci5jc3MnO1xuXG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgICBsZXQgeyBzZXNzaW9uIH0gPSBzdG9yZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJJbmZvOiBzZXNzaW9uLnVzZXJJbmZvLFxuICAgICAgICBsb2dPdXQ6IHNlc3Npb24ubG9nb3V0LFxuICAgIH1cbn0pXG5Ab2JzZXJ2ZXJcbmNsYXNzIE5hdkJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyB1c2VySW5mbywgbG9nT3V0IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoXy5pc05pbCh1c2VySW5mbykpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3BOYXZcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRpdGxlXCI+U3BvaWxlZCBUb21hdGlsbG9zPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e1NJR05fVVBfVVJJfT5SZWdpc3RlcjwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e1NJR05fSU5fVVJJfT5Mb2dpbjwvTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPE5hdkJhckxvZ2dlZEluIHVzZXJJbmZvPXt1c2VySW5mb30gbG9nT3V0PXtsb2dPdXR9Lz5cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkJhcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9OYXZCYXIuanMiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zZWFyY2hCYXIge1xcbiAgICBmbG9hdDogcmlnaHQ7XFxuICAgIHBhZGRpbmc6IDEycHg7XFxufVxcblxcbi5zZWFyY2hUZXh0e1xcbiAgICBoZWlnaHQ6IDM1cHg7XFxuICAgIHdpZHRoOiAyNXZ3O1xcbn1cXG5cXG4uYnRuLXByaW1hcnkge1xcbiAgICBtYXJnaW4tdG9wOiAtNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzA5NGRiICFpbXBvcnRhbnQ7XFxuICAgIGhlaWdodDogMzZweDtcXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vc3JjL3N0eWxlcy9TZWFyY2hCYXIuY3NzXG4vLyBtb2R1bGUgaWQgPSA0NjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNlYXJjaEJhciBmcm9tICcuL1NlYXJjaEJhcic7XG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7IG9ic2VydmVyfSBmcm9tIFwibW9ieC1yZWFjdC9pbmRleFwiO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7XG4gICAgTU9WSUVfTElTVF9VUkksXG4gICAgU0lHTl9VUF9VUkksXG4gICAgU0lHTl9JTl9VUkksXG4gICAgVVNFUl9QUk9GSUxFX1VSSVxufSBmcm9tICcuLi9jb250YWluZXJzL3JvdXRlc0NvbnRhaW5lci91cmlDb25zdGFudHMnO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZVVzZXJVUkkgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBTaWduT3V0QnV0dG9uIGZyb20gJy4vU2lnbk91dEJ1dHRvbic7XG5cbmltcG9ydCAnLi4vc3R5bGVzL05hdkJhci5jc3MnO1xuXG5Ab2JzZXJ2ZXJcbmNsYXNzIE5hdkJhckxvZ2dlZEluIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgY29uc3QgeyBfaWQgfSA9IHRoaXMucHJvcHMudXNlckluZm87XG4gICAgICAgIGNvbnN0IGxpbmtzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICd0byc6ICcvaG9tZScsXG4gICAgICAgICAgICAgICAgJ3RpdGxlJzogJ0hvbWUnLFxuICAgICAgICAgICAgICAgICdhY3RpdmUnOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAndG8nOiBnZW5lcmF0ZVVzZXJVUkkoX2lkLCBVU0VSX1BST0ZJTEVfVVJJKSxcbiAgICAgICAgICAgICAgICAndGl0bGUnOiAnUHJvZmlsZScsXG4gICAgICAgICAgICAgICAgJ2FjdGl2ZSc6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAndG8nOiBNT1ZJRV9MSVNUX1VSSSxcbiAgICAgICAgICAgICAgICAndGl0bGUnOiAnTW92aWVzJyxcbiAgICAgICAgICAgICAgICAnYWN0aXZlJzogZmFsc2UsXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBsaW5rc1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVuZGVyTGlua3MgPSB0aGlzLnJlbmRlckxpbmtzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25MaW5rQ2xpY2tIaWdoZXJPcmRlciA9IHRoaXMub25MaW5rQ2xpY2tIaWdoZXJPcmRlci5iaW5kKHRoaXMpO1xuICAgIH07XG5cbiAgICBvbkxpbmtDbGlja0hpZ2hlck9yZGVyKGxpbmspIHtcbiAgICAgICAgLy8gcGFzcyBhY3RpdmUgdG8gdGhlIGNvcnJlY3QgbGlua1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3TGlua3MgPSBfLm1hcChcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxpbmtzLFxuICAgICAgICAgICAgICAgIChsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsLnRvID09PSBsaW5rLnRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBsaW5rczogbmV3TGlua3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW5kZXJMaW5rcygpIHtcbiAgICAgICAgY29uc3QgeyBsaW5rcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIF8ubWFwKGxpbmtzLCAobCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8TGlua1xuICAgICAgICAgICAgICAgICAgICBrZXk9e2wudG99XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17bC5hY3RpdmUgPyAnYWN0aXZlJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uTGlua0NsaWNrSGlnaGVyT3JkZXIobCl9XG4gICAgICAgICAgICAgICAgICAgIHRvPXtsLnRvfT5cbiAgICAgICAgICAgICAgICAgICAge2wudGl0bGV9XG4gICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgKVxuICAgICAgICB9KVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcE5hdlwiPlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0aXRsZVwiPlNwb2lsZWQgVG9tYXRpbGxvczwvaDM+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTGlua3MoKX1cbiAgICAgICAgICAgICAgICB7Lyo8TGluayBjbGFzc05hbWU9XCJhY3RpdmVcIiB0bz1cIi9ob21lXCI+SG9tZTwvTGluaz4qL31cbiAgICAgICAgICAgICAgICB7Lyo8TGluayB0bz17VVNFUl9QUk9GSUxFX1VSSX0+UHJvZmlsZTwvTGluaz4qL31cbiAgICAgICAgICAgICAgICB7LyovISo8TGluayB0bz1cIi9yZWNvbW1lbmRhdGlvbnNcIj5SZWNvbW1lbmRhdGlvbnM8L0xpbms+KiEvKi99XG4gICAgICAgICAgICAgICAgey8qPExpbmsgdG89e01PVklFX0xJU1RfVVJJfT5Nb3ZpZXM8L0xpbms+Ki99XG4gICAgICAgICAgICAgICAgPFNpZ25PdXRCdXR0b24gbG9nT3V0PXt0aGlzLnByb3BzLmxvZ091dH0vPlxuXG4gICAgICAgICAgICAgICAgPFNlYXJjaEJhciBjbGFzc05hbWU9XCJzZWFyY2hCYXJcIi8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbk5hdkJhckxvZ2dlZEluLnByb3BUeXBlcyA9IHtcbiAgICB1c2VySW5mbzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGxvZ091dDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkJhckxvZ2dlZEluO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL05hdkJhckxvZ2dlZEluLmpzIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudG9wTmF2IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFmM2Q3YTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgbWFyZ2luLWxlZnQ6IGNhbGMoNTAlIC0gNTB2dyk7XFxuICAgIHdpZHRoOiAxMDB2dztcXG59XFxuXFxuLnNpZ25PdXRCdXR0b24ge1xcbiAgICBjb2xvcjogI2YyZjJmMiAhaW1wb3J0YW50O1xcbn1cXG5cXG4udG9wTmF2IGEge1xcbiAgICBmbG9hdDogbGVmdDtcXG4gICAgY29sb3I6ICNmMmYyZjI7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgbWFyZ2luLXRvcDogMnB4O1xcbiAgICBwYWRkaW5nOiAxNnB4IDE2cHg7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgZm9udC1zaXplOiAxN3B4O1xcbn1cXG5cXG4udG9wTmF2IGEuYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcwOTRkYjtcXG4gICAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4udG9wTmF2IGE6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcbiAgICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi50aXRsZSB7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICBtYXJnaW4tdG9wOiAzcHg7XFxuICAgIHBhZGRpbmc6IDhweCAxNnB4O1xcbiAgICBjb2xvcjogI2YyZjJmMjtcXG59XFxuXFxuLlNlYXJjaEJhciB7XFxuICAgIGZsb2F0OiByaWdodDtcXG4gICAgcGFkZGluZzogNnB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG1hcmdpbi10b3A6IDhweDtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcbiAgICBmb250LXNpemU6IDE3cHg7XFxufVxcblxcbi5wcm9maWxlIHtcXG4gICAgZmxvYXQ6IHJpZ2h0O1xcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vc3JjL3N0eWxlcy9OYXZCYXIuY3NzXG4vLyBtb2R1bGUgaWQgPSA0NjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvdXRlLCBTd2l0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5cbmltcG9ydCBNb3ZpZUxpc3QgZnJvbSAnLi4vTW92aWVMaXN0JztcbmltcG9ydCBNb3ZpZVBhZ2UgZnJvbSAnLi4vTW92aWVQYWdlJztcbmltcG9ydCBNb3ZpZUxpa2VkQnlQYWdlIGZyb20gJy4uL01vdmllTGlrZWRCeVBhZ2UnO1xuaW1wb3J0IHsgTU9WSUVfTElTVF9VUkksIE1PVklFX0RFVEFJTF9VUkksIE1PVklFX0xJS0VEX0JZX1VSSSB9IGZyb20gXCIuL3VyaUNvbnN0YW50c1wiO1xuXG5Ab2JzZXJ2ZXJcbmNsYXNzIE1vdmllUm91dGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgIDxSb3V0ZSBrZXk9e01PVklFX0xJU1RfVVJJfSBwYXRoPXtNT1ZJRV9MSVNUX1VSSX0gY29tcG9uZW50PXtNb3ZpZUxpc3R9Lz5cbiAgICAgICAgICA8Um91dGUga2V5PXtNT1ZJRV9ERVRBSUxfVVJJfVxuICAgICAgICAgICAgICAgICBwYXRoPXtNT1ZJRV9ERVRBSUxfVVJJfVxuICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e01vdmllUGFnZX0vPlxuICAgICAgICAgIDxSb3V0ZSBrZXk9e01PVklFX0xJS0VEX0JZX1VSSX1cbiAgICAgICAgICAgICAgICAgcGF0aD17TU9WSUVfTElLRURfQllfVVJJfVxuICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e01vdmllTGlrZWRCeVBhZ2V9Lz5cbiAgICAgICAgICA8Um91dGUga2V5PVwiYW55XCIgcGF0aD1cIipcIiBjb21wb25lbnQ9e01vdmllTGlzdH0vPlxuICAgICAgICA8L1N3aXRjaD5cbiAgICApO1xuICB9XG59XG5cblxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKE1vdmllUm91dGUpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lcnMvcm91dGVzQ29udGFpbmVyL21vdmllUm91dGUuanMiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IE1vdmllSXRlbSBmcm9tICcuLi9jb21wb25lbnRzL01vdmllSXRlbSc7XG5pbXBvcnQge2luamVjdCwgb2JzZXJ2ZXJ9IGZyb20gXCJtb2J4LXJlYWN0XCI7XG5cblxuQGluamVjdChzdG9yZXMgPT4ge1xuICBsZXQgeyBtb3ZpZXMgfSA9IHN0b3JlcztcbiAgcmV0dXJuIHtcbiAgICBmZXRjaE1vdmllTGlzdDogbW92aWVzLmZldGNoTW92aWVMaXN0LFxuICAgIG1vdmllTGlzdDogbW92aWVzLm1vdmllTGlzdC50b0pTKCksXG4gIH1cbn0pXG5Ab2JzZXJ2ZXJcbmNsYXNzIE1vdmllTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMucmVuZGVyTW92ZUluZm9MaXN0ID0gdGhpcy5yZW5kZXJNb3ZlSW5mb0xpc3QuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmZldGNoTW92aWVMaXN0KCk7XG4gIH1cblxuICByZW5kZXJNb3ZlSW5mb0xpc3QoKSB7XG4gICAgY29uc3QgeyBtb3ZpZUxpc3QgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgIHJldHVybiBfLm1hcChtb3ZpZUxpc3QsIChtb3ZpZSkgPT4ge1xuICAgICAgICByZXR1cm4gPE1vdmllSXRlbSBpbWRiSUQ9e21vdmllLmltZGJJRH0ga2V5PXttb3ZpZS5pbWRiSUR9Lz5cbiAgICAgIH0pO1xuXG5cbiAgfVxuXG5cbiAgcmVuZGVyKCkge1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDI+TW92aWUgTGlzdDwvaDI+XG4gICAgICAgICAge3RoaXMucmVuZGVyTW92ZUluZm9MaXN0KCl9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW92aWVMaXN0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lcnMvTW92aWVMaXN0LmpzIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5qZWN0LCBvYnNlcnZlciB9IGZyb20gXCJtb2J4LXJlYWN0XCI7XG5cbmltcG9ydCBNb3ZpZUl0ZW0gZnJvbSAnLi4vY29tcG9uZW50cy9Nb3ZpZUl0ZW0nO1xuaW1wb3J0ICcuLi9zdHlsZXMvTW92aWUuY3NzJztcbmltcG9ydCBncmV5VGh1bWJzVXAgZnJvbSBcIi4uL2ltZy9ncmV5dXAtNjR4NjQucG5nXCI7XG5pbXBvcnQgZ3JlZW5UaHVtYnNVcCBmcm9tIFwiLi4vaW1nL2dyZWVudXAtNjR4NjQucG5nXCI7XG5pbXBvcnQgZ3JleVRodW1ic0Rvd24gZnJvbSBcIi4uL2ltZy9ncmV5ZG93bi02NHg2NC5wbmdcIjtcbmltcG9ydCByZWRUaHVtYnNEb3duIGZyb20gXCIuLi9pbWcvcmVkZG93bi02NHg2NC5wbmdcIjtcblxuZnVuY3Rpb24gVGh1bWJzVXAocHJvcHMpIHtcbiAgbGV0IHR1X2ltZyA9IHByb3BzLnVzZXJSYXRpbmcgPyBncmVlblRodW1ic1VwIDogZ3JleVRodW1ic1VwO1xuICByZXR1cm4gPGJ1dHRvbj48aW1nIHNyYz17dHVfaW1nfS8+PC9idXR0b24+O1xufVxuXG5mdW5jdGlvbiBUaHVtYnNEb3duKHByb3BzKSB7XG4gIGxldCB0ZF9pbWcgPSAocHJvcHMudXNlclJhdGluZyAhPSBudWxsICYmICFwcm9wcy51c2VyUmF0aW5nKSA/IHJlZFRodW1ic0Rvd24gOiBncmV5VGh1bWJzRG93bjtcbiAgcmV0dXJuIDxidXR0b24+PGltZyBzcmM9e3RkX2ltZ30vPjwvYnV0dG9uPjtcbn1cblxuXG5AaW5qZWN0KHN0b3JlcyA9PiB7XG4gIGxldCB7IGFjY291bnQgfSA9IHN0b3JlcztcbiAgcmV0dXJuIHtcbiAgICB1c2VySW5mbzogYWNjb3VudC51c2VySW5mbyxcbiAgfVxufSlcbkBvYnNlcnZlclxuY2xhc3MgTW92aWVQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCB7IG1hdGNoIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBpbWRiSUQgPSAgbWF0Y2gucGFyYW1zLm1vdmllSWQ7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGltZGJJRCxcbiAgICAgIHVzZXJSYXRpbmc6IHRydWVcbiAgICB9O1xuXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBpbWRiSUQgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vdmllXCI+XG4gICAgICAgICAgICA8TW92aWVJdGVtIGltZGJJRD17aW1kYklEfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxUaHVtYnNVcCB1c2VyUmF0aW5nPXt0aGlzLnN0YXRlLnVzZXJSYXRpbmd9Lz5cbiAgICAgICAgICAgIDxUaHVtYnNEb3duIHVzZXJSYXRpbmc9e3RoaXMuc3RhdGUudXNlclJhdGluZ30vPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW92aWVQYWdlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lcnMvTW92aWVQYWdlLmpzIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubW92aWUge1xcbiAgICBwYWRkaW5nOiAxMnB4O1xcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vc3JjL3N0eWxlcy9Nb3ZpZS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDQ2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmMjFjOGY4OTlhZTUzMTA2NTg2NjUzMjQ2NjA1YjNiYi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pbWcvZ3JleXVwLTY0eDY0LnBuZ1xuLy8gbW9kdWxlIGlkID0gNDcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImE3ZmM0YWIwYzg4NDA5N2JiNmY5NDhkNTVkMDk4YTlhLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2ltZy9ncmVlbnVwLTY0eDY0LnBuZ1xuLy8gbW9kdWxlIGlkID0gNDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjNiZDM5YTEzY2I5YWU1ZWU4NzBkYTg1ZjlmYTY0ZjRjLnBuZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2ltZy9ncmV5ZG93bi02NHg2NC5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhMmQwOGZmYzU5NDM0NDJhODljMzkxNTlkZWQ4ZmJlMi5wbmdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pbWcvcmVkZG93bi02NHg2NC5wbmdcbi8vIG1vZHVsZSBpZCA9IDQ3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbmplY3QsIG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3RcIjtcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCAnLi4vc3R5bGVzL01vdmllLmNzcyc7XG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgbGV0IHsgbGlrZXMsIG9tZGIgfSA9IHN0b3JlcztcbiAgcmV0dXJuIHtcbiAgICBnZXRVc2Vyc0xpa2VkTW92aWVJZDogbGlrZXMuZ2V0VXNlcnNMaWtlZE1vdmllSWQsXG4gICAgZ2V0TW92aWVCeUlkOiBvbWRiLmdldE1vdmllQnlJZCxcbiAgfVxufSlcbkBvYnNlcnZlclxuY2xhc3MgTW92aWVMaWtlZEJ5UGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB1c2VyczogW10sXG4gICAgICBtb3ZpZTogbnVsbCxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICB9O1xuICAgIHRoaXMubG9hZFVzZXJzQW5kTW92aWUgPSB0aGlzLmxvYWRVc2Vyc0FuZE1vdmllLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW5kZXJVc2VycyA9IHRoaXMucmVuZGVyVXNlcnMuYmluZCh0aGlzKTtcblxuICB9XG4gIGFzeW5jIGxvYWRVc2Vyc0FuZE1vdmllKCkge1xuICAgIGNvbnN0IHsgbWF0Y2gsIGdldFVzZXJzTGlrZWRNb3ZpZUlkLCBnZXRNb3ZpZUJ5SWQgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHsgbW92aWVJZCB9ID0gIG1hdGNoLnBhcmFtcztcbiAgICBjb25zdCB1c2VycyA9IGF3YWl0IGdldFVzZXJzTGlrZWRNb3ZpZUlkKHtcbiAgICAgIG1vdmllSWQsXG4gICAgfSk7XG4gICAgY29uc3QgbW92aWUgPSBhd2FpdCBnZXRNb3ZpZUJ5SWQobW92aWVJZCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB1c2VycyxcbiAgICAgIG1vdmllLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkVXNlcnNBbmRNb3ZpZSgpO1xuICB9XG4gIHJlbmRlclVzZXJzICgpIHtcbiAgICBjb25zdCB7IHVzZXJzIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiBfLm1hcCh1c2VycywgKHVzZXIpID0+IHtcbiAgICAgIHJldHVybiA8bGkga2V5PXt1c2VyLl9pZH0+e3VzZXIuZnVsbE5hbWV9PC9saT5cbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbW92aWUsIGlzTG9hZGluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoaXNMb2FkaW5nKSB7XG4gICAgICByZXR1cm4gKDxkaXY+PC9kaXY+KTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDU+UGVvcGxlIHdobyBhbHNvIGxpa2Uge21vdmllLlRpdGxlfTo8L2g1PlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlclVzZXJzKCl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBNb3ZpZUxpa2VkQnlQYWdlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lcnMvTW92aWVMaWtlZEJ5UGFnZS5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3V0ZSwgU3dpdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuXG5pbXBvcnQgTXlMaWtlc1BhZ2UgZnJvbSAnLi4vVXNlckxpa2VzUGFnZSc7XG5pbXBvcnQgUHJvZmlsZVBhZ2UgZnJvbSAnLi4vUHJvZmlsZVBhZ2UnO1xuaW1wb3J0IHsgVVNFUl9VUkksIFVTRVJfUFJPRklMRV9VUkksIFVTRVJfTElLRVNfVVJJfSBmcm9tIFwiLi91cmlDb25zdGFudHNcIjtcblxuQG9ic2VydmVyXG5jbGFzcyBQcm9maWxlUm91dGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgICAgIDxSb3V0ZSBrZXk9e1VTRVJfUFJPRklMRV9VUkl9XG4gICAgICAgICAgICAgICAgICAgICAgIHBhdGg9e1VTRVJfUFJPRklMRV9VUkl9XG4gICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17UHJvZmlsZVBhZ2V9Lz5cbiAgICAgICAgICAgICAgICA8Um91dGUga2V5PXtVU0VSX0xJS0VTX1VSSX1cbiAgICAgICAgICAgICAgICAgICAgICAgcGF0aD17VVNFUl9MSUtFU19VUkl9XG4gICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17TXlMaWtlc1BhZ2V9Lz5cbiAgICAgICAgICAgICAgICA8Um91dGUga2V5PVwiYW55XCIgcGF0aD1cIipcIiBjb21wb25lbnQ9e1Byb2ZpbGVQYWdlfS8+XG4gICAgICAgICAgICA8L1N3aXRjaD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKFByb2ZpbGVSb3V0ZSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29udGFpbmVycy9yb3V0ZXNDb250YWluZXIvcHJvZmlsZVJvdXRlLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge2luamVjdCwgb2JzZXJ2ZXJ9IGZyb20gXCJtb2J4LXJlYWN0XCI7XG5cbmltcG9ydCBNb3ZpZUl0ZW0gZnJvbSAnLi4vY29tcG9uZW50cy9Nb3ZpZUl0ZW0nO1xuXG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgbGV0IHsgYWNjb3VudCwgbW92aWVzLCBsaWtlcywgcHJvZmlsZXMgfSA9IHN0b3JlcztcbiAgcmV0dXJuIHtcbiAgICB1c2VySW5mbzogYWNjb3VudC51c2VySW5mbyxcbiAgICBwb3N0TGlrZU1vdmllOiBtb3ZpZXMucG9zdExpa2VNb3ZpZSxcbiAgICBsaWtlTW92aWU6IGxpa2VzLmxpa2VNb3ZpZSxcbiAgICB1bmxpa2VNb3ZpZTogbGlrZXMudW5saWtlTW92aWUsXG4gICAgaXNNb3ZpZUxpa2VkQnlVc2VyOiBsaWtlcy5pc01vdmllTGlrZWRCeVVzZXIsXG4gICAgY3VycmVudFVzZXJMaWtlZE1vdmllczogbGlrZXMuY3VycmVudFVzZXJMaWtlZE1vdmllcyxcbiAgICB1cGRhdGVNb3ZpZXNMaWtlZEJ5VXNlcklkOiBsaWtlcy51cGRhdGVNb3ZpZXNMaWtlZEJ5VXNlcklkLFxuICAgIGdldE1vdmllc0xpa2VkQnlVc2VySWQ6IGxpa2VzLmdldE1vdmllc0xpa2VkQnlVc2VySWQsXG4gICAgZmV0Y2hVc2VyUHJvZmlsZTogcHJvZmlsZXMuZmV0Y2hVc2VyUHJvZmlsZSxcbiAgfVxufSlcbkBvYnNlcnZlclxuY2xhc3MgTXlMaWtlc1BhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnJlbmRlck1vdmVJbmZvTGlzdCA9IHRoaXMucmVuZGVyTW92ZUluZm9MaXN0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRQYWdlVXNlck5hbWUgPSB0aGlzLmdldFBhZ2VVc2VyTmFtZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwYWdlVXNlck5hbWU6ICdVbmtub3duJyxcbiAgICAgIHVzZXJMaWtlZE1vdmllTGlzdDogW10sXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UGFnZVVzZXJOYW1lKCkge1xuICAgIGNvbnN0IHsgZmV0Y2hVc2VyUHJvZmlsZSwgbWF0Y2ggfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHsgdXNlcklkIH0gPSBtYXRjaC5wYXJhbXM7XG5cbiAgICBjb25zdCB1c2VyUHJvZmlsZSA9IGF3YWl0IGZldGNoVXNlclByb2ZpbGUoe1xuICAgICAgdXNlcklkLFxuICAgIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcGFnZVVzZXJOYW1lOiB1c2VyUHJvZmlsZS5mdWxsTmFtZSxcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgZ2V0UGFnZVVzZXJNb3ZlTGlzdCgpIHtcbiAgICBjb25zdCB7IGdldE1vdmllc0xpa2VkQnlVc2VySWQsIG1hdGNoIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB7IHVzZXJJZCB9ID0gbWF0Y2gucGFyYW1zO1xuXG4gICAgY29uc3QgdXNlckxpa2VkTW92aWVMaXN0ID0gYXdhaXQgZ2V0TW92aWVzTGlrZWRCeVVzZXJJZCh7XG4gICAgICB1c2VySWQsXG4gICAgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB1c2VyTGlrZWRNb3ZpZUxpc3QsXG4gICAgfSlcblxuICB9XG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLnVwZGF0ZU1vdmllc0xpa2VkQnlVc2VySWQoKTtcbiAgICB0aGlzLmdldFBhZ2VVc2VyTmFtZSgpO1xuICAgIHRoaXMuZ2V0UGFnZVVzZXJNb3ZlTGlzdCgpO1xuICB9XG5cbiAgcmVuZGVyTW92ZUluZm9MaXN0KCkge1xuICAgIGNvbnN0IHsgdXNlckxpa2VkTW92aWVMaXN0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIF8ubWFwKHVzZXJMaWtlZE1vdmllTGlzdCwgKG1vdmllKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXYga2V5PXttb3ZpZS50aXRsZX0+XG4gICAgICAgICAgICB7Lyo8TGluayB0bz17fT4qL31cbiAgICAgICAgICAgIDxoMT57bW92aWUudGl0bGV9IDwvaDE+XG4gICAgICAgICAgICA8TW92aWVJdGVtIGltZGJJRD17bW92aWUuaW1kYklEfS8+XG4gICAgICAgICAgICB7Lyo8L0xpbms+Ki99XG4gICAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0pO1xuXG5cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHBhZ2VVc2VyTmFtZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMj5Nb3ZpZXMgTGlrZWQgYnkge3BhZ2VVc2VyTmFtZX08L2gyPlxuICAgICAgICAgIHt0aGlzLnJlbmRlck1vdmVJbmZvTGlzdCgpfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE15TGlrZXNQYWdlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lcnMvVXNlckxpa2VzUGFnZS5qcyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG9ic2VydmVyLCBpbmplY3QgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCB7IHdpdGhSb3V0ZXIsIExpbmt9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBVU0VSX0xJS0VTX1VSSSB9IGZyb20gJy4vcm91dGVzQ29udGFpbmVyL3VyaUNvbnN0YW50cyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVVzZXJVUkkgfSAgZnJvbSAnLi4vdXRpbCc7XG5cbkBpbmplY3Qoc3RvcmVzID0+IHtcbiAgICBsZXQgeyBzZXNzaW9uIH0gPSBzdG9yZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNlckluZm86IHNlc3Npb24udXNlckluZm8sXG4gICAgfVxufSlcbkBvYnNlcnZlclxuQHdpdGhSb3V0ZXJcbmNsYXNzIFByb2ZpbGVQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCB7IGZ1bGxOYW1lLCBfaWQgfSA9IHRoaXMucHJvcHMudXNlckluZm87XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGgxPlByb2ZpbGU8L2gxPlxuICAgICAgICAgICAgICAgIDxoMz5IZWxsbyB7ZnVsbE5hbWV9ITwvaDM+XG4gICAgICAgICAgICAgICAgPExpbmsgdG89e2dlbmVyYXRlVXNlclVSSShfaWQsIFVTRVJfTElLRVNfVVJJKX0+TGlrZXM8L0xpbms+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGVQYWdlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lcnMvUHJvZmlsZVBhZ2UuanMiLCJpbXBvcnQgYWNjb3VudCBmcm9tICcuL2FjY291bnQnO1xuaW1wb3J0IG1vdmllcyBmcm9tICcuL21vdmllcyc7XG5pbXBvcnQgb21kYiBmcm9tICcuL29tZGInO1xuaW1wb3J0IHJlZ2lzdGVyIGZyb20gJy4vcmVnaXN0ZXInO1xuaW1wb3J0IHNlc3Npb24gZnJvbSAnLi9zZXNzaW9uJztcbmltcG9ydCBsaWtlcyBmcm9tICcuL2xpa2VzJztcbmltcG9ydCBwcm9maWxlcyBmcm9tICcuL3Byb2ZpbGVzJztcbmltcG9ydCB1c2VycyBmcm9tICcuL3VzZXJzJztcblxuY29uc3Qgc3RvcmVzID0ge1xuICBhY2NvdW50LFxuICBtb3ZpZXMsXG4gIG9tZGIsXG4gIHJlZ2lzdGVyLFxuICBzZXNzaW9uLFxuICBsaWtlcyxcbiAgcHJvZmlsZXMsXG4gIHVzZXJzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmVzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zdG9yZS9pbmRleC5qcyIsImltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnXG5cbmltcG9ydCB7IGF4aW9zIH0gZnJvbSAnLi4vYXBpL19heGlvcyc7XG5pbXBvcnQgeyBTSUdOSU5fQVBJLCBQUk9GSUxFX01FX0FQSSB9IGZyb20gJy4uL2FwaS9jb25zdGFudHMnO1xuaW1wb3J0IHsgc2V0WEFjY2Vzc1Rva2VuIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXhcIjtcbmltcG9ydCBzZXNzaW9uU3RvcmUgZnJvbSBcIi4vc2Vzc2lvblwiO1xuXG5jbGFzcyBBY2NvdW50IHtcbiAgICBAb2JzZXJ2YWJsZSBlbWFpbCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIHBhc3N3b3JkID0gJyc7XG4gICAgQG9ic2VydmFibGUgZXJyb3JNZXNzYWdlID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICB9XG5cbiAgICBAYWN0aW9uIHNldEVtYWlsKGVtYWlsKSB7XG4gICAgICAgIHNlbGYuZW1haWwgPSBlbWFpbDtcbiAgICB9XG5cblxuICAgIEBhY3Rpb24gc2V0UGFzc3dvcmQocGFzc3dvcmQpIHtcbiAgICAgICAgc2VsZi5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgIH1cblxuICAgIEBhY3Rpb24gYXN5bmMgbG9naW4oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KFNJR05JTl9BUEksXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbWFpbDogc2VsZi5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHNlbGYucGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgc2V0WEFjY2Vzc1Rva2VuKHJlcy5kYXRhLnRva2VuKTtcbiAgICAgICAgICAgIGF3YWl0IHNlc3Npb25TdG9yZS5nZXRVc2VySW5mbygpO1xuICAgICAgICAgICAgc2VsZi5lcnJvck1lc3NhZ2UgPSBudWxsO1xuICAgICAgICAgICAgc2VsZi5lbWFpbCA9ICcnO1xuICAgICAgICAgICAgc2VsZi5wYXNzd29yZCA9ICcnO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNlbGYuZXJyb3JNZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG5cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gQGFjdGlvbiByZWdpc3RlcihwYXJhbXMpIHtcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMucmVxdWVzdC5wb3N0KCdhcGkvYWNjb3VudC9yZWdpc3RlcicsIHBhcmFtcykudGhlbihhY2NvdW50ID0+IHtcbiAgICAvLyAgICAgICAgIHRoaXMuc3RhdGUuYWNjb3VudCA9IGFjY291bnRcbiAgICAvLyAgICAgfSlcbiAgICAvLyB9XG59XG5cbmNvbnN0IHNlbGYgPSBuZXcgQWNjb3VudCgpO1xuXG5leHBvcnQgZGVmYXVsdCBzZWxmO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zdG9yZS9hY2NvdW50LmpzIiwiaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCdcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IGF4aW9zIH0gZnJvbSAnLi4vYXBpL19heGlvcyc7XG5pbXBvcnQgeyBNT1ZJRV9MSVNUX0FQSSwgUE9TVF9NT1ZJRV9BUEkgfSBmcm9tICcuLi9hcGkvY29uc3RhbnRzJztcblxuXG5jbGFzcyBNb3ZpZXMge1xuICBAb2JzZXJ2YWJsZSBtb3ZpZUxpc3QgPSBbXTtcbiAgQG9ic2VydmFibGUgZXJyb3JNZXNzYWdlID0gbnVsbDtcblxuXG4gIEBhY3Rpb24gc2V0TW92aWVMaXN0KG1vdmllTGlzdCkge1xuICAgIHNlbGYubW92aWVMaXN0ID0gbW92aWVMaXN0O1xuICB9XG5cbiAgQGFjdGlvbiBhc3luYyBwb3N0TGlrZU1vdmllKHttb3ZpZX0pIHtcbiAgICBheGlvcy5wb3N0KFBPU1RfTU9WSUVfQVBJLCB7XG4gICAgICAgIGltZGJJRDogbW92aWUuaW1kYklELFxuICAgICAgICB0aXRsZTogbW92aWUuVGl0bGUsXG4gICAgICAgIHBvc3RlckltZ1BhdGg6IG1vdmllLlBvc3RlcixcbiAgICAgICAgcmVsZWFzZVllYXI6IG1vdmllLlllYXIsXG4gICAgICAgIGJyaWVmRGVzY3JpcHRpb246IG1vdmllLlBsb3QsXG4gICAgfSk7XG5cbiAgfVxuXG4gIEBhY3Rpb24gYXN5bmMgZmV0Y2hNb3ZpZUxpc3QoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldChNT1ZJRV9MSVNUX0FQSSk7XG4gICAgICBzZWxmLnNldE1vdmllTGlzdChyZXMuZGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBzZWxmLmVycm9yTWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9XG4gIH1cblxufVxuXG5jb25zdCBzZWxmID0gbmV3IE1vdmllcygpO1xuXG5leHBvcnQgZGVmYXVsdCBzZWxmO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zdG9yZS9tb3ZpZXMuanMiLCJpbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4J1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgb21kYl9heGlvcyB9IGZyb20gJy4uL2FwaS9fYXhpb3MnO1xuaW1wb3J0IHsgTU9WSUVfTElTVF9BUEksIE1PVklFX1BPU1RfTElLRURfTU9WSUUgfSBmcm9tICcuLi9hcGkvY29uc3RhbnRzJztcbmltcG9ydCB7T01EQl9BUElfS0VZfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cblxuY2xhc3MgT21kYkFwaSB7XG4gIEBvYnNlcnZhYmxlIG1vdmllTGlzdCA9IFtdO1xuXG4gIEBhY3Rpb24gc2V0TW92aWVMaXN0KG1vdmllTGlzdCkge1xuICAgIHNlbGYubW92aWVMaXN0ID0gbW92aWVMaXN0O1xuICB9XG5cbiAgQGFjdGlvbiBhc3luYyBnZXRNb3ZpZUJ5U2VhcmNoKHNlYXJjaEJ5KSB7XG4gICAgc2VsZi5zZXRNb3ZpZUxpc3QoW10pO1xuICAgIGNvbnN0IHVybCA9IE9NREJfQVBJX0tFWSArICcmcz0nKyBzZWFyY2hCeTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9tZGJfYXhpb3MuZ2V0KHVybCk7XG4gICAgbGV0IG1vdmllcyA9IHJlc3BvbnNlLmRhdGEuU2VhcmNoO1xuICAgIG1vdmllcyA9IF8udW5pcUJ5KG1vdmllcywgZnVuY3Rpb24gKG0pIHtcbiAgICAgIHJldHVybiBtLmltZGJJRDtcbiAgICB9KTtcbiAgICBtb3ZpZXMubWFwKChtb3ZpZSkgPT4ge1xuICAgICAgc2VsZi5hZGRNb3ZpZUJ5SWQobW92aWUuaW1kYklEKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhY3Rpb24gYXN5bmMgYWRkTW92aWVCeUlkKGlkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybCA9IE9NREJfQVBJX0tFWSArICcmaT0nKyBpZDtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IG9tZGJfYXhpb3MuZ2V0KHVybCk7XG4gICAgICBzZWxmLmFkZE1vdmllKHJlcy5kYXRhKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfVxuICB9XG5cbiAgQGFjdGlvbiBhc3luYyBnZXRNb3ZpZUJ5SWQoaWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gT01EQl9BUElfS0VZICsgJyZpPScrIGlkO1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgb21kYl9heGlvcy5nZXQodXJsKTtcbiAgICAgIGNvbnN0IHJlc2RhdGEgPSByZXMuZGF0YTtcbiAgICAgIGlmIChfLmlzTmlsKHJlc2RhdGEuRXJyb3IpKSB7XG4gICAgICAgIHJldHVybiByZXMuZGF0YTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgcmVzZGF0YS5FcnJvcjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBAYWN0aW9uIGFkZE1vdmllKG1vdmllKSB7XG4gICAgc2VsZi5tb3ZpZUxpc3QgPSBbLi4uc2VsZi5tb3ZpZUxpc3QsIG1vdmllXVxuICB9XG5cbn1cblxuY29uc3Qgc2VsZiA9IG5ldyBPbWRiQXBpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGY7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JlL29tZGIuanMiLCJpbXBvcnQgeyBhY3Rpb24sIG9ic2VydmFibGUgfSBmcm9tICdtb2J4J1xuXG5pbXBvcnQgeyBheGlvcyB9IGZyb20gJy4uL2FwaS9fYXhpb3MnO1xuaW1wb3J0IHsgU0lHTlVQX0FQSSB9IGZyb20gJy4uL2FwaS9jb25zdGFudHMnO1xuaW1wb3J0IHsgc2V0WEFjY2Vzc1Rva2VuIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXhcIjtcbmltcG9ydCBzZXNzaW9uU3RvcmUgZnJvbSBcIi4vc2Vzc2lvblwiO1xuXG5cbmNsYXNzIFJlZ2lzdGVyIHtcbiAgICBAb2JzZXJ2YWJsZSBlbWFpbCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIHBhc3N3b3JkID0gJyc7XG4gICAgQG9ic2VydmFibGUgZnVsbE5hbWUgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBlcnJvck1lc3NhZ2UgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgIH1cblxuICAgIEBhY3Rpb24gc2V0RW1haWwoZW1haWwpIHtcbiAgICAgICAgc2VsZi5lbWFpbCA9IGVtYWlsO1xuICAgIH1cblxuICAgIEBhY3Rpb24gc2V0UGFzc3dvcmQocGFzc3dvcmQpIHtcbiAgICAgICAgc2VsZi5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgIH1cblxuICAgIEBhY3Rpb24gc2V0RnVsbE5hbWUoZnVsbE5hbWUpIHtcbiAgICAgICAgc2VsZi5mdWxsTmFtZSA9IGZ1bGxOYW1lO1xuICAgIH1cbiAgICBcbiAgICBAYWN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgICAgc2VsZi5lcnJvck1lc3NhZ2UgPSBudWxsO1xuICAgICAgICBzZWxmLmVtYWlsID0gJyc7XG4gICAgICAgIHNlbGYucGFzc3dvcmQgPSAnJztcbiAgICAgICAgc2VsZi5mdWxsTmFtZSA9ICcnO1xuICAgIH1cblxuICAgIEBhY3Rpb24gYXN5bmMgb25SZWdpc3RlcigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoU0lHTlVQX0FQSSwge1xuICAgICAgICAgICAgICAgIGZ1bGxOYW1lOiBzZWxmLmZ1bGxOYW1lLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBzZWxmLmVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBzZWxmLnBhc3N3b3JkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldFhBY2Nlc3NUb2tlbihyZXMuZGF0YS50b2tlbik7XG4gICAgICAgICAgICBzZWxmLnJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgYXdhaXQgc2Vzc2lvblN0b3JlLmdldFVzZXJJbmZvKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2VsZi5lcnJvck1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5jb25zdCBzZWxmID0gbmV3IFJlZ2lzdGVyKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGY7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JlL3JlZ2lzdGVyLmpzIiwiaW1wb3J0IHthY3Rpb24sIG9ic2VydmFibGV9IGZyb20gJ21vYngnXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge2F4aW9zfSBmcm9tICcuLi9hcGkvX2F4aW9zJztcbmltcG9ydCBzZXNzaW9uU3RvcmUgZnJvbSBcIi4vc2Vzc2lvblwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVVc2VyVVJJLCBnZW5lcmF0ZU1vdmllVVJJIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge1xuICBMSUtFX01PVklFX0FQSSxcbiAgVU5MSUtFX01PVklFX0FQSSxcbiAgQ1VSUkVOVF9VU0VSX0xJS0VEX01PVklFU19BUEksXG4gIE1PVklFU19MSUtFRF9CWV9VU0VSSURfQVBJLFxuICBVU0VSU19MSUtFX01PVklFSURfQVBJLFxuICBVU0VSU19MRU5HVEhfTElLRV9NT1ZJRUlEX0FQSSxcbn0gZnJvbSAnLi4vYXBpL2NvbnN0YW50cyc7XG5cblxuY2xhc3MgTGlrZXMge1xuICBAb2JzZXJ2YWJsZSBjdXJyZW50VXNlckxpa2VkTW92aWVzID0gW107XG4gIEBvYnNlcnZhYmxlIGVycm9yTWVzc2FnZSA9IG51bGw7XG5cbiAgQGFjdGlvblxuICBhc3luYyB1cGRhdGVNb3ZpZXNMaWtlZEJ5VXNlcklkKCkge1xuICAgIHNlbGYuY3VycmVudFVzZXJMaWtlZE1vdmllcyAgPSBhd2FpdCBzZWxmLmdldE1vdmllc0xpa2VkQnlVc2VySWQoe1xuICAgICAgdXNlcklkOiBzZXNzaW9uU3RvcmUudXNlckluZm8uX2lkLFxuICAgIH0pO1xuICB9XG5cbiAgQGFjdGlvblxuICBhc3luYyBnZXRNb3ZpZXNMaWtlZEJ5VXNlcklkKHsgdXNlcklkIH0pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoZ2VuZXJhdGVVc2VyVVJJKHVzZXJJZCwgTU9WSUVTX0xJS0VEX0JZX1VTRVJJRF9BUEkpKTtcbiAgICByZXR1cm4gcmVzLmRhdGE7XG4gIH1cblxuICBAYWN0aW9uXG4gIGFzeW5jIGdldFVzZXJzTGlrZWRNb3ZpZUlkKHsgbW92aWVJZCB9KSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KGdlbmVyYXRlTW92aWVVUkkobW92aWVJZCwgVVNFUlNfTElLRV9NT1ZJRUlEX0FQSSkpO1xuICAgIHJldHVybiByZXMuZGF0YTtcbiAgfVxuXG4gIEBhY3Rpb25cbiAgYXN5bmMgZ2V0VXNlcnNMZW5ndGhMaWtlZE1vdmllSWQoeyBpbWRiSUQgfSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldChnZW5lcmF0ZU1vdmllVVJJKGltZGJJRCwgVVNFUlNfTEVOR1RIX0xJS0VfTU9WSUVJRF9BUEkpKTtcbiAgICByZXR1cm4gcmVzLmRhdGE7XG4gIH1cblxuICBAYWN0aW9uIGlzTW92aWVMaWtlZEJ5VXNlcih7IGN1cnJlbnRVc2VyTGlrZWRNb3ZpZXMsIGltZGJJRCB9KSB7XG4gICAgY29uc3QgbW92aWVGb3VuZCA9IF8uZmluZChjdXJyZW50VXNlckxpa2VkTW92aWVzLCAobSkgPT4ge1xuICAgICAgcmV0dXJuIG0uaW1kYklEID09PSBpbWRiSUQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gIV8uaXNOaWwobW92aWVGb3VuZCk7XG4gIH1cblxuICBAYWN0aW9uXG4gIGFzeW5jIGxpa2VNb3ZpZSh7IGltZGJJRCB9KSB7XG4gICAgYXdhaXQgYXhpb3MucG9zdChMSUtFX01PVklFX0FQSSwge1xuICAgICAgaW1kYklELFxuICAgIH0pO1xuICAgIGF3YWl0IHNlbGYudXBkYXRlTW92aWVzTGlrZWRCeVVzZXJJZCgpO1xuICB9XG5cbiAgQGFjdGlvblxuICBhc3luYyB1bmxpa2VNb3ZpZSh7IGltZGJJRCB9KSB7XG4gICAgYXdhaXQgYXhpb3MucG9zdChVTkxJS0VfTU9WSUVfQVBJLCB7XG4gICAgICBpbWRiSUQsXG4gICAgfSk7XG4gICAgYXdhaXQgc2VsZi51cGRhdGVNb3ZpZXNMaWtlZEJ5VXNlcklkKCk7XG4gIH1cbn1cblxuY29uc3Qgc2VsZiA9IG5ldyBMaWtlcygpO1xuXG5leHBvcnQgZGVmYXVsdCBzZWxmO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zdG9yZS9saWtlcy5qcyIsImltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBheGlvcyB9IGZyb20gJy4uL2FwaS9fYXhpb3MnO1xuaW1wb3J0IHsgUFJPRklMRV9VU0VSX0lORk8gfSBmcm9tICcuLi9hcGkvY29uc3RhbnRzJztcbmltcG9ydCB7IGdlbmVyYXRlVXNlclVSSSB9IGZyb20gJy4uL3V0aWwnO1xuXG5cbmNsYXNzIFByb2ZpbGVzIHtcblxuICAgIEBvYnNlcnZhYmxlIGVycm9yTWVzc2FnZSA9IG51bGw7XG5cbiAgICBAYWN0aW9uIGFzeW5jIGZldGNoVXNlclByb2ZpbGUoeyB1c2VySWQgfSkge1xuICAgICAgICBzZWxmLmVycm9yTWVzc2FnZSA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoZ2VuZXJhdGVVc2VyVVJJKHVzZXJJZCwgUFJPRklMRV9VU0VSX0lORk8pKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzZWxmLmVycm9yTWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5jb25zdCBzZWxmID0gbmV3IFByb2ZpbGVzKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGY7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JlL3Byb2ZpbGVzLmpzIiwiaW1wb3J0IHsgYWN0aW9uLCBvYnNlcnZhYmxlIH0gZnJvbSAnbW9ieCdcblxuaW1wb3J0IHsgYXhpb3MgfSBmcm9tICcuLi9hcGkvX2F4aW9zJztcbmltcG9ydCB7IFNFQVJDSF9VU0VSX0FQSSB9IGZyb20gJy4uL2FwaS9jb25zdGFudHMnO1xuXG5cbmNsYXNzIFVzZXJzIHtcbiAgQG9ic2VydmFibGUgdXNlckxpc3QgPSBbXTtcblxuICBAYWN0aW9uIHNldFVzZXJMaXN0KHVzZXJMaXN0KSB7XG4gICAgc2VsZi51c2VyTGlzdCA9IHVzZXJMaXN0O1xuICB9XG5cbiAgQGFjdGlvbiBhc3luYyBnZXRVc2VyQnlTZWFyY2goc2VhcmNoQnkpIHtcbiAgICBzZWxmLnNldFVzZXJMaXN0KFtdKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KFNFQVJDSF9VU0VSX0FQSSwge1xuICAgICAgc2VhcmNoQnk6IHNlYXJjaEJ5XG4gICAgfSk7XG4gICAgc2VsZi5zZXRVc2VyTGlzdChyZXMuZGF0YSk7XG4gIH1cbn1cblxuY29uc3Qgc2VsZiA9IG5ldyBVc2VycygpO1xuXG5leHBvcnQgZGVmYXVsdCBzZWxmO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zdG9yZS91c2Vycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=